# 1 "src/hls/matmul.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 375 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 158 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "src/hls/matmul.cpp" 2
# 1 "src/hls/matmul.hpp" 1
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 55 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 1
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h" 1
# 100 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2
# 162 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 501 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
};
# 567 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 568 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 579 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 696 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 56 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h" 1
# 80 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 385 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;







  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) half to_half() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 577 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 690 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 708 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 819 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 868 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 977 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1044 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1062_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1284 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1345 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1364 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1392 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1421 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1455 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1494 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1518 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1549 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1582 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1610 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1647 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1677 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1708 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1740 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1759 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1786 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1817 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1849 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1868 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1976 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_716_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_730_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_744_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 760 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 800 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 838 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 860 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1058 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1117 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1140 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1168 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1217 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1364 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1388 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 356 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h" 1
# 61 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 357 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2







# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 1
# 56 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 1
# 63 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1090_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2215 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2303 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 57 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h" 1
# 71 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 258 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 288 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 300 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  }
# 312 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 661 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 725 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 771 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 58 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 112 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 147 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 275 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 307 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 395 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h"
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 230 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 362 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 396 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_fixed.h" 2
# 365 "/tools/Xilinx/Vitis_HLS/2020.2/common/technology/autopilot/ap_int.h" 2
# 2 "src/hls/matmul.hpp" 2
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 1 3
# 33 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 3





# 1 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 196 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 218 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 495 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 439 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 440 "/usr/include/features.h" 2 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 452 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 453 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 454 "/usr/include/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 40 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 496 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 499 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 39 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 2 3


# 1 "/tools/Xilinx/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 1 3
# 63 "/tools/Xilinx/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 64 "/tools/Xilinx/Vitis_HLS/2020.2/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 2 3
# 42 "/tools/Xilinx/Vitis_HLS/2020.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 3 "src/hls/matmul.hpp" 2
# 12 "src/hls/matmul.hpp"
# 1 "/home/tjaz/final_ass/embedded_project_ML/all_weights.h" 1
namespace weights{
 const ap_fixed<32,24> layer3_weights[64][5] ={{-0.26524854, -0.20258705, 0.081852965, -0.16230796, -0.26279354},
{-0.19879843, 0.050099716, 0.30621895, 0.17182879, -0.28857994},
{0.3409459, 0.00794543, 0.17443594, -0.3304005, -0.32999507},
{0.009129427, 0.11852961, 0.12872942, -0.25850165, -0.20807871},
{-0.38286164, -0.042149346, -0.1404402, 0.37034178, -0.0029082207},
{-0.33222213, -0.0072297477, 0.3921993, -0.24111706, 0.07804541},
{0.18088163, -0.17096436, -0.1320126, -0.026417302, -0.056855753},
{-0.14150691, 0.14528306, 0.13523704, 0.26208937, 0.26071405},
{0.1374644, -0.3538371, -0.10169935, 0.24629223, 0.13519523},
{-0.07659129, 0.14662406, 0.091291495, 0.2147637, -0.0075228424},
{-0.31032902, -0.14693822, 0.21264607, 0.2301179, 0.12643203},
{-0.14393307, -0.13127333, 0.24511424, 0.018493159, -0.09973926},
{-0.22972691, 0.07595021, -0.1397008, 0.06026678, -0.18759544},
{0.1691845, -0.37789717, -0.36300424, -0.19936399, 0.18719941},
{0.39536014, 0.086285, -0.0103914775, -0.030037241, -0.07058438},
{0.011873944, -0.18904473, -0.109554596, 0.28638074, 0.26644024},
{0.18219224, 0.25997606, 0.009709546, -0.27492416, 0.40029463},
{0.262271, -0.08570292, 0.08171936, -0.20059428, 0.34415966},
{0.33790216, -0.29525194, 0.108944684, -0.21995041, -0.18667577},
{0.15607682, -0.13860239, -0.11423643, -0.02957047, -0.06421064},
{0.2783245, 0.0009908011, -0.21297689, 0.3967466, -0.35793737},
{-0.1083979, 0.19445953, 0.19903713, -0.21766205, -0.025777847},
{-0.32541332, 0.05829789, 0.059767812, 0.14675467, 0.21782392},
{-0.20146401, 0.29152966, 0.321942, -0.40388918, -0.19306298},
{0.07327539, -0.23588362, 0.06931153, 0.1166023, -0.26554635},
{0.18295023, -0.059753727, -0.4208252, 0.12419474, 0.2153719},
{-0.26973343, -0.08619603, -0.15121524, 0.07473022, -0.06897846},
{-0.14831416, -0.111336485, -0.045941185, 0.13615529, -0.14920379},
{-0.12815505, 0.3485731, -0.2011606, -0.32480073, -0.09796524},
{0.14887924, 0.2375868, 0.16904512, 0.27650362, -0.16175227},
{0.2735285, -0.06422171, -0.36131662, 0.119114675, -0.13521263},
{0.122932374, -0.104754105, -0.20411392, 0.15394595, 0.14002252},
{0.14618623, 0.3628768, -0.061455783, -0.34583527, -0.30545506},
{0.2671357, 0.019129276, -0.21002975, -0.36531287, 0.2228663},
{-0.19677047, 0.14693329, 0.10008031, 0.08079338, 0.030291885},
{0.011407566, -0.12210128, -0.16749077, -0.25161207, -0.2845351},
{-0.012710939, -0.27239946, 0.043750085, -0.32196084, 0.19763559},
{-0.22519736, -0.048223317, -0.18161458, -0.12809563, -0.06334518},
{0.081864566, -0.08420012, 0.23534822, 0.10431588, -0.10289858},
{-0.37406284, -0.06621447, 0.19311765, -0.03051566, 0.16138798},
{0.28694123, -0.058215547, -0.04434417, -0.09031462, -0.37508768},
{-0.24498452, 0.31105307, 0.0048962915, -0.42725125, -0.08463984},
{-0.21127863, -0.018850736, -0.118987136, 0.027228639, -0.22071746},
{0.13109547, 0.20118567, 0.23245344, 0.18899706, -0.0029129607},
{0.24885464, -0.22528437, 0.2268184, 0.012091991, -0.24561027},
{-0.07148724, 0.18854396, -0.005282175, -0.10600938, 0.16905944},
{0.10986372, 0.33818096, -0.15929517, 0.32854655, -0.2680039},
{0.17644529, -0.19671267, 0.30633652, -0.26763415, -0.39304948},
{-0.14756261, 0.3674935, -0.08003086, -0.24215189, 0.00629007},
{-0.018428382, 0.15654446, 0.21917978, -0.1410206, -0.31115252},
{-0.18285336, -0.13441087, 0.16174671, -0.25448856, 0.13513693},
{0.2508966, -0.13233548, -0.10067945, -0.36264837, 0.3345602},
{-0.23020504, 0.2827925, -0.10229846, -0.041873556, -0.30847982},
{0.20168, -0.24566928, 0.092817515, 0.15360504, -0.20740753},
{0.27981398, 0.2642395, -0.0132743865, -0.028117819, -0.22054978},
{0.25449646, -0.15733546, -0.27977785, 0.046034425, 0.18252715},
{0.20999038, -0.07890716, -0.09369436, -0.104584515, -0.24506697},
{-0.24408923, 0.050077695, -0.14402151, -0.23011886, -0.34091443},
{-0.09658823, -0.09991729, -0.12431903, 0.3127294, 0.23470154},
{0.28685498, 0.24485475, 0.08855361, -0.13332096, 0.24631798},
{-0.2327788, 0.28535983, -0.2129366, 0.37662476, 0.10591039},
{-0.3617102, 0.17360811, -0.066972315, -0.18779384, 0.029507324},
{0.24777634, 0.116761036, -0.024283694, -0.058177195, -0.14610885},
{0.16479656, 0.11561031, 0.2791089, -0.1754669, -0.21756876}};
 const ap_fixed<32,24> layer2_weights[128][64] ={{0.103816286, -0.23027487, -0.1648992, 0.033243135, 0.004752343, -0.08773672, 0.07518029, 0.030857293, 0.095054895, 0.06284662, 0.012499402, 0.09573933, -0.09330045, 0.22060291, -0.027436407, -0.004658213, -0.15408994, -0.097800456, 0.13710724, -0.07699169, 0.23537104, 0.15145369, -0.05075039, -0.24019256, 0.09239264, 0.23164392, 0.1577101, -0.113902576, -0.25465518, 0.12828106, 0.06337227, -0.14479688, -0.032729905, 0.12372501, -0.0991363, 0.013612504, 0.14112858, -0.020305082, 0.14114708, -0.11403901, 0.0012918458, -0.13676307, -0.25455838, -0.14427312, 0.1411891, 0.06801728, -0.1849571, -0.0861114, -0.22529472, 0.123862505, -0.26614553, 0.12522866, -0.17676587, -0.1655653, 0.09497445, -0.012003422, -0.15612216, -0.15653716, 0.14789915, 0.14214139, -0.17411661, -0.074335895, -0.036617905, -0.09927057},
{0.12853383, -0.040657863, 0.15067062, 0.10632844, 0.048298318, 0.22746384, -0.14540716, -0.003909337, 0.0757031, -0.029195637, 0.032533243, -0.041274767, 0.035560757, -0.18188028, 0.08626084, -0.13059473, -0.04367968, 0.06422418, 0.21625768, -0.05798176, -0.19577324, -0.023975953, 0.17396678, -0.014839925, -0.11869374, -0.2117606, 0.10474597, -0.07782823, -0.15662481, 0.09818721, -0.03296894, -0.035540834, 0.12158924, -0.13242295, -0.1624363, -0.18702306, 0.09032646, 0.1581287, -0.067091, -0.015965667, 0.088311404, 0.20152067, -0.06851466, 0.024840305, 0.111622974, -0.013374417, -0.1549771, -0.035706777, -0.14390409, 0.008329293, 0.30886114, -0.023330897, 0.059360355, 0.07952954, 0.1345713, 0.07604702, 0.0070559233, 0.11287819, -0.23767158, -0.040276915, -0.24205652, -0.04308352, -0.024401562, -0.108731955},
{-0.13005382, -0.07640812, -0.15885665, 0.16020705, 0.2078556, -0.115245454, -0.0026596603, 0.12942165, 0.17759588, 0.0017839804, 0.08644058, -0.026276449, -0.12103367, 0.16807756, -0.074740976, 0.1214941, -0.024660937, 0.013672283, 0.034788907, -0.16308653, 0.1607835, -0.14991815, 0.03740545, -0.045638945, 0.13790639, 0.18890923, -0.0056023845, 0.123214915, -0.1401353, -0.11001909, 0.14263174, -0.07888322, -0.21027435, 0.13942298, -0.050391957, 0.03488766, 0.14301302, 0.13533424, 0.0326539, 0.17956673, 0.0031130058, -0.27346402, 0.105193466, -0.089764945, -0.24667703, 0.013467391, -0.16916835, 0.051815383, -0.2220133, 0.003366451, 0.07365303, 0.23778434, -0.10756038, 0.09020488, -0.114498466, 0.08375342, -0.11807747, -0.26242223, 0.29318628, -0.09326187, 0.21324576, -0.1153788, -0.14109482, 0.04733384},
{0.07044905, 0.07365816, -0.18189205, -0.1260416, 0.118834525, -0.0608397, 0.0313015, 0.12586184, 0.15782975, -0.107359536, 0.21473643, -0.100519724, 0.12163517, 0.12147329, -0.03929091, -0.021287562, 0.121889494, 0.20086624, -0.12909038, -0.054710656, -0.102998525, 0.08130853, 0.18578063, 0.15908094, -0.120855585, -0.028038481, 0.16117206, 0.107668, 0.02645647, -0.02343952, -0.14777987, -0.10607776, -0.11406262, 0.03150879, -0.047231317, 0.09018618, 0.18083979, 0.029733077, -0.0063663833, 0.00024197926, -0.20132574, 0.18002507, -0.06591956, 0.13041395, -0.16848569, -0.099338196, 0.114415936, 0.11017854, 0.047100868, 0.040384572, 0.014320314, -0.09889534, -0.08513813, 0.034771785, 0.019125314, -0.14762726, -0.16637005, -0.16883439, 0.09758968, -0.016316563, 0.12750596, 0.12484468, -0.07763797, -0.08040135},
{0.07008384, -0.019248039, 0.12240624, -0.16402146, 0.14557211, -0.03703738, -0.1712046, -0.030946415, 0.13784058, -0.037519753, -0.12772113, -0.1541024, 0.15003009, -0.102606915, 0.004053874, -0.075654864, 0.09053629, -0.15283652, 0.06449647, 0.09820145, 0.056443937, 0.04245338, -0.069801874, -0.047787756, 0.13358824, 0.10527398, 0.16285445, 0.08870774, 0.11806972, -0.12296179, 0.024895603, 0.081817284, -0.037913427, 0.023745019, 0.08488552, -0.05456592, -0.16084333, 0.09855668, -0.05406687, -0.1807347, 0.08715069, 0.11582743, -0.14996819, -0.12697968, 0.074927546, -0.14010316, -0.093501106, -0.03003646, 0.01989019, 0.17152415, -0.14493573, 0.17416391, -0.0077433144, 0.017349541, 0.09637483, 0.093798146, 0.1277451, 0.13743213, -0.057614364, -0.01877807, 0.049206942, 0.018986247, 0.078346565, 0.1698079},
{-0.016226962, -0.15230198, 0.08233021, 0.03517665, 0.14541925, -0.038307697, 0.13468216, -0.04509768, 0.08584832, -0.1292165, 0.14292242, 0.054118708, -0.013806209, -0.15042892, 0.06408015, 0.038714573, -0.020524666, 0.036887854, -0.04808496, 0.00643532, -0.045001283, 0.009349346, 0.038339257, -0.087542415, 0.03685005, -0.15663193, 0.10225187, -0.1246386, -0.08914564, 0.077160135, -0.08294879, 0.053894147, 0.17609595, -0.019744664, 0.13354327, 0.017739862, 0.11882727, 0.17165883, 0.087283, -0.11895341, 0.122678265, -0.005483985, -0.037587866, -0.1138423, 0.15468685, -0.10861268, -0.12816519, 0.075602725, 0.012173489, 0.01893489, 0.07338761, -0.02717422, 0.002240315, -0.042914554, -0.14567156, -0.098496385, 0.06527965, -0.047578394, -0.119065136, 0.09773596, -0.04546474, 0.15165539, -0.1142596, 0.06817067},
{-0.041243307, -0.078541785, -0.020612707, 0.06825799, 0.05530672, 0.104530714, 0.16339755, -0.04734552, 0.06427166, 0.10440357, -0.123497896, -0.15717617, -0.053221904, -0.098601334, 0.08098268, -0.018682629, 0.16700332, 0.08528211, -0.16412514, 0.03496771, 0.053194504, 0.17146824, -0.01712393, 0.039716538, 0.13085644, 0.11994852, -0.05845712, -0.09967583, 0.16716136, -0.063503265, 0.1809304, -0.07254754, -0.05126247, -0.13530123, 0.12766592, -0.010912493, -0.057401605, 0.17096977, 0.12167193, -0.109706976, -0.015745906, 0.029161528, 0.02766613, 0.024894878, 0.13742965, -0.0540986, 0.026594339, -0.1663861, -0.14848709, 0.12063692, -0.0011229002, 0.16189075, 0.15113842, -0.07151899, 0.08929359, 0.07084505, 0.072245225, 0.06424839, 0.007125768, 0.14142974, -0.12913579, -0.022915417, -0.10966083, -0.09123334},
{-0.005471468, -0.13139802, 0.024550453, 0.1759416, 0.043836266, 0.17018352, 0.13145407, -0.10739072, 0.15236033, 0.057832643, -0.13484201, -0.0082158595, 0.16200806, 0.16105752, 0.10298027, -0.10942671, 0.13078977, -0.010807037, -0.13979785, 0.07656334, -0.05389878, 0.1451063, 0.031666577, -0.07903352, -0.09311448, 0.050737172, 0.024310052, 0.0476913, -0.0048057884, 0.11440946, -0.16550393, -0.16006808, -0.08074257, -0.03730376, -0.087290086, -0.14713123, 0.08846556, -0.13145362, -0.058742046, -0.013675466, 0.14711551, 0.17054717, 0.07975064, 0.06423238, -0.09677536, 0.08346702, -0.052166373, -0.16843866, -0.11378886, -0.015367076, 0.07756896, -0.011507183, 0.105565205, -0.01314126, 0.007894069, -0.10344072, 0.005215585, -0.1731956, 0.051024407, 0.076047525, 0.00046880543, 0.10992293, -0.16222642, 0.17129232},
{0.16199131, -0.10118405, 0.16094284, -0.17238887, -0.06126651, -0.12360263, 0.12981062, -0.042472765, 0.0012636483, -0.11872834, 0.16872247, -0.11733029, -0.019215554, -0.09100082, 0.101092204, -0.06212669, 0.062202975, -0.022398978, -0.046323046, 0.07152206, 0.001464814, -0.08004984, -0.020506471, -0.14599305, -0.047689587, -0.10548922, 0.003994629, 0.0062717497, -0.09405807, -0.099359676, -0.06454735, -0.0062169135, -0.104892254, -0.110732585, 0.14465646, -0.13801761, 0.0040593296, 0.046985596, -0.17431156, 0.057640836, 0.13852422, 0.14990176, 0.14595039, -0.10528965, 0.06637636, 0.0075173974, 0.024034962, -0.1743712, 0.015626445, -0.009013772, -0.10935847, 0.092791006, -0.0036993623, 0.17042617, -0.031823948, -0.13198842, -0.03172338, 0.021099687, 0.0532005, 0.17069246, -0.05831927, 0.02334927, -0.1561921, -0.109187394},
{0.06906064, -0.08150707, 0.07334639, 0.035761267, 0.037454844, 0.05119835, -0.15501796, 0.1628678, 0.10207407, -0.10004119, 0.08970253, -0.17656654, 0.13616939, -0.11850479, -0.037618205, -0.06370395, -0.17019786, -0.0058173984, 0.1549675, 0.03804356, 0.021241888, 0.033957466, -0.13852982, -0.15914688, 0.059969738, 0.058943003, -0.058967024, 0.13040535, 0.14440875, 0.1375513, -0.15699174, 0.12819354, 0.0023857653, 0.06427537, 0.024930656, 0.082869336, -0.08419014, 0.14870404, -0.11921485, -0.1195548, 0.021646291, 0.07880591, -0.117810935, 0.17400847, 0.16708873, 0.17412262, -0.12622117, -0.051272064, 0.0880781, -0.032343283, 0.12942176, -0.07529555, 0.14090101, 0.13686152, -0.14973202, -0.15241867, 0.042973846, -0.10380229, -0.041566104, 0.081622735, -0.17154104, -0.10079743, 0.075369194, -0.030437276},
{-0.16083135, -0.04427595, 0.031047702, -0.16448484, 0.13578172, -0.10777297, -0.06090416, 0.12988406, 0.14233963, -0.018815562, -0.067242965, -0.11272423, 0.08915297, -0.050635926, 0.22210643, 0.1582644, -0.025162578, -0.09551112, 0.009495689, -0.08337973, 0.20925099, 0.006334886, 0.07801803, -0.20394282, -0.16537525, 0.28493103, -0.03788159, -0.15433115, -0.091778785, -0.10463623, 0.04380977, 0.10094793, 0.09798506, 0.061197225, 0.08816539, -0.12888776, 0.11264133, -0.11317592, 0.09205973, 0.015609377, 0.2083861, -0.021652337, 0.0036511412, 0.005442381, 0.18450922, -0.025694732, 0.17603119, -0.005275521, 0.031425275, 0.1430908, -0.080551684, 0.13939598, 0.075850874, -0.16567066, 0.25246084, -0.051819086, 0.1304137, 0.14206561, 0.17292413, 0.16439046, 0.10681322, 0.047570884, -0.09386664, -0.06363969},
{0.1516871, 0.16689388, -0.1002529, 0.04509124, -0.042392895, 0.11246705, 0.0511593, 0.06560133, -0.12383912, 0.08925044, 0.093507476, -0.12899533, -0.0884754, -0.18976559, -0.049078878, -0.01874389, -0.049193256, -0.12841158, 0.049183022, -0.14389987, -0.077377506, -0.11577183, 0.14915152, 0.18577895, 0.1476898, 0.10886115, 0.16081947, -0.05407295, 0.019052245, 0.10625633, 0.0006259999, 0.120606706, 0.14660648, -0.12332654, -0.111940384, -0.11709929, -0.18845315, -0.031412214, -0.18228191, 0.054680258, 0.114452675, 0.23021446, 0.22168379, 0.13936733, 0.054666933, -0.04514049, -0.027094737, -0.22068222, 0.22912093, 0.11754486, 0.004271834, -0.054532934, 0.07818712, -0.039516583, 0.20032895, 0.15349127, 0.12015696, 0.12615798, -0.21285774, -0.028108492, 0.1605784, 0.24263701, 0.14759299, -0.1144209},
{0.06234281, -0.07670942, 0.08321065, -0.120934084, -0.12597279, -0.21674432, 0.15529889, 0.04136868, -0.14782088, 0.05032004, -0.05697999, -0.1838683, -0.020640869, 0.11960701, 0.2531094, -0.007997375, -0.042876545, 0.14068404, 0.014465666, -0.10491207, 0.21151283, 0.018051669, 0.070375524, -0.06331197, -0.17352267, -0.082117125, 0.038070366, 0.093634665, 0.19634727, 0.14873043, 0.21039996, 0.041326374, 0.2103083, -0.019996086, 0.050613314, 0.135429, -0.24130623, 0.062370256, 0.04582788, 0.048153676, 0.12383094, -0.11171044, 0.12036811, -0.08278942, -0.04046734, 0.030492445, 0.2425143, -0.084946066, 0.08627054, -0.086761996, -0.27153623, 0.038781896, 0.14414096, -0.08867238, 0.009050397, -0.17301926, 0.058107138, 0.21942644, -0.117201634, -0.12934513, -0.1342462, -0.035420615, -0.17336144, 0.054420583},
{-0.18091533, 0.1880102, -0.14245033, 0.060343962, -0.1091248, 0.1624577, 0.091357484, 0.011033018, -0.08530189, 0.029075615, -0.034890167, 0.15027773, -0.14519495, 0.043442506, 0.06266955, 0.051664844, -0.039722256, -0.06264898, 0.050647333, 0.038935453, -0.065433204, -0.092550814, 0.19998664, 0.18183608, -0.13975435, 0.074594855, -0.111320406, -0.090160616, 0.17073236, 0.1133097, -0.14995672, 0.12359463, 0.16488448, -0.057454247, -0.11249462, -0.14321136, -0.03561976, -0.060298316, 0.15281935, -0.09278737, 0.08860913, -0.030084763, 0.008620778, 0.046912458, 0.095493436, -0.18280245, 0.11990398, 0.11053321, -0.022044271, -0.077523775, 0.11267099, -0.16905616, 0.031991575, 0.13514249, 0.059480153, -0.072712965, 0.09513493, 0.057115357, 0.10612499, 0.069727615, 0.17221384, 0.15129572, -0.18305558, -0.1226019},
{-0.1587218, -0.06825056, 0.20625398, -0.110121034, -0.17575943, 0.15242697, 0.15053704, -0.10778252, 0.14194804, -0.119927704, 0.03520795, -0.054259323, 0.08377736, -0.042027183, 0.103888646, -0.061949354, 0.032520466, 0.19071944, -0.1321717, 0.09541872, 0.039014827, 0.08947988, -0.18869121, 0.06469364, 0.05123751, -0.013502203, 0.09328943, -0.008826078, 0.16535234, -0.017755736, 0.06415742, -0.035871685, -0.025322307, 0.124331355, 0.00926657, -0.19272858, -0.102596715, -0.04154268, -0.09036722, -0.037995905, 0.110079095, -0.11646794, 0.13093087, -0.15672234, 0.0164937, 0.041442256, 0.1636632, 0.08736738, 0.035616096, -0.10970412, 0.07889307, 0.03435475, 0.012628073, -0.0059318244, -0.10822091, -0.022674114, -0.0038972348, 0.09902027, 0.09911007, -0.1237337, -0.203515, 0.150501, -0.05582053, -0.057405375},
{-0.055917256, -0.061759222, -0.00358841, 0.062274948, 0.09815428, -0.110483125, -0.019202191, -0.17489219, -0.17604162, -0.06324476, 0.20601377, 0.1635513, 0.09363646, -0.214482, 0.12688434, 0.052569494, -0.19579402, -0.007720822, -0.19740753, -0.12889232, 0.20912339, 0.0011084676, -0.029557476, 0.016672825, -0.15063204, -0.058254827, 0.054461412, -0.07767366, 0.11460567, -0.03546264, -0.11492916, -0.14796886, -0.05563417, -0.17798382, -0.010573462, -0.17278622, -0.25632092, 0.061362058, -0.030605681, -0.061522316, 0.21977307, 0.07039223, 0.09943571, -0.016878378, 0.03066967, 0.1056377, 0.016509896, -0.08208958, 0.20908475, -0.15450354, -0.1229108, -0.22851683, 0.032647364, -0.023639828, 0.08589515, 0.0015630573, 0.13387005, 0.11403017, -0.049389217, 0.046357438, 0.11802958, -0.14273547, -0.10185891, -0.0785792},
{0.13733572, 0.06496629, -0.14753209, -0.1041829, 0.14482234, 0.09014265, 0.049762443, 0.082704715, 0.09587002, -0.0691755, 0.02037083, 0.032340407, -0.16257527, -0.044191588, -0.07074113, 0.12549886, -0.070062, -0.11410657, 0.10441713, -0.13832553, 0.12414012, 0.064721674, -0.013456065, -0.084128566, -0.007360354, 0.15579492, -0.09240526, 0.09294621, 0.11304193, -0.046204574, 0.086510375, -0.04893282, -0.011903621, -0.083565764, -0.07955171, -0.070894495, 0.056450218, -0.040425822, -0.14271876, 0.032467302, 0.14937624, 0.12136619, -0.14007613, 0.12263526, 0.09372604, 0.11340435, 0.028903821, 0.017897265, -0.150541, 0.15238883, 0.0784599, -0.03091109, -0.11334033, -0.03781125, -0.15019053, 0.0076678246, 0.14732729, -0.034682736, -0.059035268, 0.02892682, -0.09915066, 0.034259934, -0.09668474, -0.12877473},
{-0.0032857736, 0.10172354, -0.020789362, 0.011477053, -0.13709357, 0.11620597, 0.09225963, -0.03865167, 0.122067265, 0.12105943, -0.07276094, -0.10822417, 0.1143211, -0.12379492, 0.06010798, -0.059445113, -0.05461488, -0.034619883, -0.073188685, 0.107733205, -0.15809838, -0.047135726, 0.09011928, -0.029196218, -0.14880687, -0.13434602, 0.14728446, -0.050843157, -0.10516467, 0.08613349, 0.16267323, 0.039121076, 0.1126652, -0.10694819, 0.13335635, -0.0024787337, -0.07131803, 0.05921358, -0.09248868, -0.13023096, -0.020078346, -0.11037985, -0.012201812, -0.0844598, 0.020595208, -0.09536647, 0.12330538, -0.13890103, -0.123291284, -0.07893081, 0.06254849, -0.0614489, 0.17482714, 0.0041606575, -0.14972778, 0.086094454, 0.04124689, 0.005539126, 0.061471626, 0.041261345, -0.04623116, -0.16909325, 0.04193805, 0.1583262},
{0.021882495, -0.012992642, 0.096663766, -0.021306934, -0.24695568, 0.029610042, 0.11093141, 0.06819209, 0.2210666, -0.013066498, -0.004231554, -0.07834679, 0.03793024, 0.09961086, 0.081900835, -0.11439404, 0.21129687, 0.027244763, 0.19385354, -0.05951947, 0.21058983, 0.12190549, -0.23083487, -0.07916439, 0.08956571, 0.021690352, -0.058470123, 0.13213985, -0.13665347, 0.10677935, -0.050723553, 0.15890895, 0.05993817, 0.23772448, -0.061475262, 0.018831482, 0.24169269, 0.05652912, 0.020890966, 0.0095425155, 0.24668872, 0.07690725, -0.19402605, -0.11681387, 0.10641286, 0.08115011, -0.1917453, 0.108402826, -0.2047568, 0.1410014, 0.13299827, 0.18314946, -0.01896525, -0.024319872, 0.014466179, 0.022051394, -0.055515952, -0.20163757, -0.21894458, 0.04141791, 0.07324835, -0.17562166, -0.16313647, -0.12506725},
{0.0063027283, 0.13067272, -0.11602297, -0.04468204, 0.072524495, -0.119887434, 0.10344845, 0.07197515, 0.0591361, -0.022291701, -0.006018207, 0.13994457, 0.030249044, 0.058598172, -0.058868207, -0.1265069, -0.19744162, -0.118029915, -0.10540907, -0.14788212, 0.25182804, -0.072837, -0.22637364, -0.081581324, 0.16368629, -0.0026446811, -0.1492987, -0.035274684, -0.090873696, -0.048501436, 0.17075677, -0.10408413, 0.20668407, -0.23862629, -0.12943655, 0.15851976, -0.21760644, -0.04876037, -0.091891415, -0.2524894, 0.13858287, -0.22568534, 0.04617928, 0.14870508, 0.0732512, -0.020455686, 0.27791178, 0.06863257, -0.0591779, -0.05355897, -0.16965912, -0.06701147, 0.1524446, 0.06483403, 0.015066419, 0.10907523, 0.11352728, 0.045769364, -0.09408208, 0.010873377, 0.010929474, -0.06414122, -0.14730255, -0.15577273},
{0.16254723, 0.08140366, 0.0012745281, 0.18334796, -0.118265554, -0.028423568, -0.07333918, 0.08995495, 0.15181537, 0.121743366, -0.015030769, -0.0866063, 0.15906024, 0.1041006, 0.1745922, -0.11973309, -0.085308425, 0.09430439, -0.046958644, 0.09839361, 0.0026181927, -0.026155666, 0.09626917, 0.006648608, -0.06350194, -0.018246077, -0.09737759, -0.17548127, 0.039576434, -0.14078853, -0.07836559, -0.085540734, 0.14959256, 0.102673106, -0.019568399, 0.07471238, -0.13898939, -0.037972495, 0.0067423144, -0.029357389, -0.033508725, 0.1663137, 0.120293595, -0.12095319, -0.02802035, 0.15135874, -0.14523448, 0.032803424, -0.076462224, -0.029173236, 0.0023628683, 0.14590144, -0.120976835, -0.16697355, -0.12107006, 0.1502286, -0.042947054, -0.12176737, 0.14413345, 0.118333146, 0.1852283, 0.0022572652, -0.13823694, -0.11371811},
{-0.03407728, -0.14565948, 0.16339256, -0.05844001, -0.03617615, -0.123907946, -0.09649619, 0.07219853, 0.03626359, 0.14275694, -0.21762861, -0.16724586, -0.08828338, 0.16479053, 0.14280508, 0.10033198, 0.24715292, 0.21017045, -0.116391964, 0.12995051, 0.08874329, 0.0054329038, 0.05357484, -0.2306713, 0.17530607, 0.016783226, 0.16380091, -0.036999606, 0.07430502, 0.12705046, 0.058002215, 0.14599456, 0.15991044, 0.12713075, -0.14319867, -0.023951704, 0.021499624, -0.1389958, -0.008938669, 0.06884002, -0.0062121972, -0.14498724, -0.024263034, -0.14817333, 0.13987249, -0.16797346, 0.04116586, -0.22362901, -0.010052963, 0.16885692, -0.008144857, 0.20831913, -0.005964668, -0.0067668855, 0.12033303, -0.10809802, -0.014278129, -0.124115705, 0.13554521, -0.1586109, -0.12286149, -0.19782056, 0.09635045, 0.066891424},
{0.01902881, 0.02321844, -0.15870316, -0.08451305, 0.13669984, -0.120474, -0.22576986, -0.08056777, -0.16694228, 0.15942131, -0.15966493, 0.03532411, -0.043657225, -0.16851139, -0.22562407, -0.012776589, 0.15133895, 0.075674325, -0.073313594, -0.09009221, -0.04457818, -0.013847351, 0.09019148, 0.10107721, -0.02242364, -0.0203231, -0.077989206, -0.09574662, 0.0044518225, -0.014461397, -0.17661655, 0.15502854, -0.11839195, 0.13085683, -0.07433334, -0.13194449, -0.06705761, -0.15194221, -0.1045193, -0.12151977, -0.17325367, 0.16896701, 0.21642756, 0.1680249, 0.068771414, 0.12824333, 0.057479, -0.14920293, 0.17817552, 0.093563, -0.08552074, 0.056317728, 0.20879155, 0.06204042, 0.1747124, -0.07045389, 0.0035234839, 0.022809215, 0.14210773, -0.049950123, 0.14940357, 0.17645548, 0.09785375, -0.03272292},
{-0.07347925, 0.025375282, -0.27213416, 0.033459168, 0.08003371, -0.07041208, -0.016657578, 0.054780893, 0.2579932, 0.09948942, 0.26962173, -0.066812366, -0.14328143, 0.06609457, 0.05691293, 0.024557166, 0.05189274, 0.21783227, -0.07989405, 0.056304872, 0.11280729, 0.14548881, 0.1200084, -0.13359424, 0.15121756, 0.16255164, 0.049744364, -0.11805357, -0.22468007, -0.112522714, 0.115868196, -0.003220141, -0.06347448, -0.1499814, -0.097860426, 0.059290186, 0.17603587, 0.048900247, 0.10459472, 0.18505727, -0.2111257, -0.25121337, -0.09272819, 0.10307324, -0.089923166, 0.02583079, -0.1431577, -0.2342943, -0.1689905, -0.18506053, 0.015838632, -0.08294668, -0.13172258, -0.04486738, 0.07440948, -0.15581208, 0.09829502, -0.25604928, 0.27553555, 0.15284537, 0.14360514, 0.064770766, 0.09285745, 0.12676972},
{-0.032846477, 0.16258565, -0.1301315, -0.13896812, 0.16771977, -0.17732136, 0.16309552, -0.0688254, 0.1704162, -0.10901636, 0.12753417, -0.14535078, 0.113025315, -0.07129839, -0.14056964, -0.14780912, -0.054603077, -0.19902025, 0.0178905, -0.017428065, 0.13032474, 0.022958055, -0.020005729, 0.05517484, -0.107013546, 0.12923162, 0.0771948, -0.008289508, 0.13251236, -0.06996553, -0.07125743, -0.10157255, -0.12938789, -0.008221135, -0.061388694, 0.15784699, 0.10355004, -0.15746455, 0.082940735, -0.015845967, -0.12263556, -0.19147164, 0.08398139, -0.14623737, 0.15031749, -0.16447696, 0.05947654, 0.1925613, -0.13632807, 0.08968564, -0.016226195, -0.022128047, 0.02194882, -0.04942216, -0.14288676, 0.13132899, 0.16896378, 0.096474454, 0.044059303, -0.113700144, 0.21399532, 0.040158182, 0.04090369, 0.088171326},
{0.10490796, -0.03785359, -0.036776964, -0.14909634, -0.11785536, 0.2571118, 0.035817817, -0.09024827, -0.1470931, 0.09859056, 0.25699216, 0.012174502, 0.010403999, -0.021553278, -0.0910908, -0.095987596, 0.048672397, 0.10952426, 0.06778058, -0.08782259, -0.09903819, -0.1656264, 0.2209092, 0.10721111, 0.023246005, -0.017308036, 0.035835497, 0.12778004, -0.0024196925, 0.08375703, -0.015503194, 0.017525762, 0.0447727, -0.12582207, 0.16302292, 0.13604532, 0.099250294, -0.1763065, 0.15364671, 0.21071504, -0.103667356, -0.03514208, 0.028933983, 0.038723696, 0.094532534, 0.069808535, -0.17304236, 0.08597306, -0.10739497, -0.032106567, 0.28176355, 0.095486134, 0.09139577, -0.0690829, 0.023153117, -0.13395187, -0.049723715, 0.112321615, 0.124336384, -0.109976, -0.19358352, -0.022992857, -0.12650453, 0.058305316},
{0.12506789, 0.17292784, -0.044769295, 0.100106224, -0.111822404, -0.12472611, -0.12614235, -0.02438873, -0.05238056, 0.10457729, -0.0806514, 0.059932187, 0.09341955, 0.050486825, 0.043770514, 0.13232131, -0.09727187, -0.047982626, -0.012681883, -0.12140626, 0.006011125, -0.055245586, 0.14494792, -0.08017956, 0.13583057, 0.10579384, -0.17308725, -0.098103255, 0.1031782, 0.1614972, -0.10534361, -0.027727991, 0.15844673, 0.10383477, 0.15631072, -0.010092482, 0.02879472, 0.15089674, 0.14335589, 0.13538498, -0.045727264, -0.007668197, -0.09878768, 0.11612384, -0.06098745, -0.08732477, 0.05344171, -0.17209956, -0.007667139, -0.059288636, -0.15853061, -0.061418906, -0.108003624, 0.0651039, 0.13514897, -0.123903856, 0.020750493, 0.020716365, -0.1218682, -0.10413538, 0.07139059, 0.027928485, 0.09747799, 0.13988708},
{-0.1620593, -0.10186319, -0.24618866, 0.16342929, 0.052606598, 0.015074493, 0.053497445, 0.043437585, 0.10684661, -0.071363114, 0.21183093, -0.13395725, -0.059664983, 0.027216341, -0.01846322, -0.10548363, 0.09632571, 0.09503962, -0.13259117, -0.1151418, -0.25003412, 0.02862741, -0.014420432, -0.007615621, 0.11701967, 0.16959043, -0.13332443, -0.045411427, -0.19307855, 0.16536531, -0.036185585, 0.1419668, 0.018234605, 0.20298581, -0.00091433525, 0.025957996, -0.05863851, 0.043052927, -0.102268346, 0.07182287, -0.16357128, 0.075065166, -0.09555115, -0.14900862, -0.19934383, -0.13845953, -0.021663904, -0.17171024, -0.12226198, -0.09958585, 0.07166571, 0.19844379, 0.09866449, -0.12897761, -0.22070174, 0.031182423, -0.046803027, 0.060034644, 0.11271228, -0.16229314, 0.002459738, -0.027461682, 0.061342273, -0.004688845},
{0.03381962, 0.038761117, -0.034065835, 0.06881372, 0.06822485, 0.14330733, 0.09475709, -0.049934696, 0.042602357, 0.13012148, -0.017378641, 0.079434335, 0.024525458, 0.19459696, -0.063268855, 0.0137531515, 0.0807311, 0.13117784, 0.07096035, 0.13340825, 0.07591515, 0.0666243, 0.19810706, 0.09348311, -0.16558944, 0.122259565, -0.1524265, 0.15483034, -0.09403321, -0.13228802, 0.017375255, 0.08970837, -0.23297197, -0.06646571, 0.17624868, -0.09629098, 0.01643728, -0.16421781, -0.18128449, 0.22502325, -0.03725763, -0.17613825, 0.07210541, 0.15233196, -0.15965398, -0.008536895, -0.031787936, -0.20940667, -0.14570796, 0.06274574, 0.17878003, 0.14175494, -0.2364328, 0.07426067, -0.25449395, 0.09436278, -0.08243237, -0.07650558, 0.21358477, 0.12830596, -0.13612562, 0.0015525487, -0.045780584, 0.12868308},
{0.094801575, 0.017494231, 0.112335525, 0.1379955, -0.09384119, 0.1089763, 0.019013477, -0.120658346, -0.12945923, 0.10327773, 0.053114496, 0.16275729, -0.04818399, 0.04802277, -0.16401751, -0.011679801, 0.15326455, -0.02411067, -0.05609087, 0.069124565, 0.069434166, -0.15533343, -0.16015464, -0.11437353, 0.14051764, -0.13158694, -0.105809465, -0.15922283, -0.17646404, 0.0025713618, -0.07215703, 0.17331807, -0.096762314, 0.08902023, -0.103100844, 0.1711256, 0.1532263, -0.106210016, -0.10909208, -0.032971006, 0.13569567, 0.057900414, -0.01382001, -0.08544974, -0.080556534, -0.13801268, 0.04196425, 0.12178281, -0.16002615, 0.12642138, 0.052490927, 0.095308386, -0.17237619, 0.15127723, -0.05252969, 0.16582067, -0.0459691, -0.04069615, 0.069874674, -0.17332667, 0.014906108, 0.16972005, -0.16542718, -0.13106796},
{0.012589735, -0.03852275, -0.09660836, 0.15721917, 0.19598658, 0.15515715, -0.14740749, -0.06806509, 0.04538508, -0.03802168, -0.02771208, 0.009887708, -0.16626559, -0.14523683, -0.1457901, 0.15423626, 0.17148395, 0.10380895, -0.18505137, 0.0048340014, -0.01787303, 0.15377323, 0.15214583, -0.021451833, 0.053777233, 0.1507992, -0.17473873, 0.12665959, 0.15136516, -0.027395288, 0.06754121, 0.052692026, 0.14642979, -0.0017033172, 0.16624351, -0.08578017, 0.15417081, 0.041082725, -0.035597485, 0.13492584, 0.014121262, 0.060690526, 0.024163127, -0.110669635, -0.20131926, -0.1245755, -0.05208697, -0.16304275, 0.054644562, -0.12245008, 0.13753289, 0.13051331, 0.054679345, 0.023761421, 0.14324148, 0.07891221, 0.064777255, 0.0435972, 0.15124506, -0.14042053, 0.05812544, 0.1834262, -0.01767026, 0.13281369},
{0.016936496, 0.08642094, -0.14862108, -0.09335202, 0.06261824, 0.06721733, 0.108079664, 0.13253972, 0.1787874, -0.05249887, 0.11705904, -0.1050514, 0.019699052, 0.12472765, -0.017247494, 0.004084322, -0.116300516, -0.11565528, -0.00037487055, 0.039402917, -0.11076358, 0.0025057495, 0.16242404, -0.0072879493, -0.06493232, -0.075949006, 0.106228195, -0.15827039, -0.0105861565, 0.04119339, 0.17299163, -0.077349074, -0.01869708, 0.099777825, -0.043247595, 0.07264392, 0.041981757, -0.11460255, 0.16832615, -0.09623372, -0.07774242, 0.15138097, 0.121165015, -0.052930415, -0.077583365, 0.15141262, -0.12505405, 0.1551737, 0.13203643, -0.119970135, 0.1340154, -0.021015516, -0.104529895, 0.100807294, 0.07652158, -0.04161875, -0.077129744, -0.14957859, -0.030961405, -0.1251903, 0.027454957, -0.15265378, -0.110240184, 0.080503285},
{0.08319435, 0.16983162, -0.120511726, 0.10355183, 0.17001785, 0.023552323, -0.077676624, -0.085174136, -0.10943389, -0.060352854, 0.017860513, -0.028509602, -0.10746838, -0.12255106, -0.16773453, -3.321356e-05, 0.0040692706, 0.06670828, -0.15924396, -0.0031493898, 0.10865716, 0.1355908, -0.08360903, -0.16056177, -0.078050904, -0.14298746, 0.12142599, -0.012865445, 0.011057221, -0.050671697, -0.10380873, 0.1511149, 0.103353456, 0.025352443, 0.15592925, 0.06626825, 0.09443857, -0.06327662, -0.15927719, -0.073750176, 0.0042246263, 0.050450414, -0.00930079, 0.1302221, -0.13302226, -0.1006562, 0.12926354, 0.024669107, 0.16765164, 0.102048665, -0.08508707, 0.015784606, 0.09923237, 0.113193884, -0.12393916, -0.09071515, -0.05144903, -0.16564426, 0.15566136, -0.052860156, -0.14134565, 0.124981605, -0.16587052, -0.07246351},
{0.15042055, -0.07173928, 0.13513015, -0.03791934, -0.08343476, 0.041200843, 0.04542897, 0.05235409, -0.1393959, 0.082146436, -0.045562252, -0.014882025, -0.06933849, -0.10672628, 0.16745286, 0.12530577, 0.10941761, 0.075318165, 0.044488136, -0.025333311, 0.028934697, -0.04330121, -0.06885253, -0.041463148, -0.08777675, -0.07837124, 0.08033251, 0.1590338, -0.11586003, 0.047519673, 0.07173871, -0.10280168, 0.18268432, 0.19925351, -0.14203459, 0.047953762, -0.01757313, -0.056226887, -0.17633973, -0.14763215, 0.11499532, 0.07276678, -0.12323846, 0.11184681, 0.13527213, -0.10793113, 0.10929767, 0.02965783, 0.09300739, 0.10994862, -0.15768334, -0.046085436, 0.06432456, -0.011863112, 0.03112465, -0.12400551, -0.10945684, 0.18350182, 0.02839778, -0.14818469, 0.10913918, 0.09971458, -0.08365625, 0.048986256},
{0.010824919, 0.0027356609, 0.17907096, 0.04177108, 0.02861472, -0.055373237, 0.07917801, 0.0626274, 0.13699044, 0.102869295, 0.08205304, -0.15925749, -0.046197988, -0.090547755, 0.16409107, 0.028999832, -0.036344416, -0.18978533, 0.022955459, -0.120353036, 0.22198987, 0.151071, 0.13873374, 0.09091467, -0.0584044, -0.075748324, -0.16448058, -0.0896463, 0.041630685, -0.13499245, 0.2020639, -0.13981766, 0.14044535, -0.16465633, 0.07015984, 0.05675123, 0.019479828, -0.041364565, 0.0867589, -0.011368331, -0.0620263, 0.17891905, 0.22518139, 0.028302753, 0.20012988, 0.01549872, 0.05505115, 0.17048693, 0.09639953, -0.014298591, -0.20157747, 0.027297612, -0.022845818, -0.15312561, -0.058740277, 0.006213248, 0.08770688, 0.12718329, 0.105414174, -0.09665149, 0.22340718, -0.06064173, -0.08105701, -0.14376242},
{-0.121243075, 0.11534487, -0.1729871, -0.08176396, -0.07507374, -0.14123096, -0.026205946, -0.107918054, -0.063675664, -0.12591615, -0.025001626, -0.13234903, -0.10530494, 0.14314273, -0.07215625, 0.1320274, 0.09900022, -0.11135891, -0.06762896, -0.091085956, -0.03508563, -0.15035091, 0.02361507, 0.07392586, 0.09669317, -0.119499065, 0.15820216, 0.043525517, 0.14431149, 0.0878527, 0.03775635, -0.09878172, -0.047463574, -0.15138073, 0.022819906, 0.11091639, -0.04129143, -0.017320916, -0.07403886, -0.13793422, -0.1516521, 0.1668364, -0.033262454, -0.1706616, -0.10018794, -0.11648723, -0.037943434, 0.033915743, 0.0017783791, 0.124989584, 0.049291626, 0.17356488, 0.09962893, -0.1628867, 0.042309403, 0.06930585, -0.0222044, 0.17629035, -0.047847196, 0.091912255, 0.011117481, -0.06647268, -0.14838476, -0.08607124},
{-0.11474543, 0.1676205, 0.10465374, 0.06118872, 0.15028703, -0.083720155, 0.0039897505, 0.034472678, 0.041279294, 0.01645717, 0.012739328, -0.036134142, -0.14643456, -0.11871229, -0.09095219, -0.0035449397, -0.05531576, 0.004905091, -0.0038685498, 0.02767082, 0.02025761, -0.02419427, -0.12346907, -0.048894927, -0.056602374, 0.031462613, -0.061600987, 0.09751662, 0.027786, 0.06313734, 0.008319623, 0.10903667, 0.06418568, -0.04536855, 0.13341998, -0.13175118, -0.11346058, -0.009504795, -0.13466619, 0.10484768, -0.121702686, 0.04738884, -0.123568766, 0.117101826, 0.087242134, 0.04016067, -0.005081212, 0.02652155, 0.12204286, 0.060027625, -0.058277898, -0.13892007, 0.05414317, 0.12109713, -0.0654307, -0.13188465, 0.019869372, -0.079983115, -0.123654656, -0.17262974, 0.03997304, -0.12329802, 0.02253525, 0.0066692703},
{0.16883853, -0.16547619, 0.09060292, -0.081218325, -0.10644309, 0.01600445, -0.078951634, -0.16360109, -0.054963432, -0.008094473, 0.06822145, -0.14293204, -0.02320035, 0.14545913, 0.21842831, -0.08449909, 0.07682208, 0.1300777, -0.019862799, -0.15205963, 0.10885441, 0.052580044, -0.16116548, 0.24435553, -0.10236445, -0.028448783, -0.12004768, -1.3894157e-05, 0.24802513, 0.0010089555, -0.13289608, -0.088994, 0.012460034, 0.17911099, -0.067486756, -0.12993327, 0.033792954, 0.09286754, -0.11002951, -0.11957883, 0.21082321, 0.1346354, 0.08934868, -0.08352231, 0.12504536, -0.0049404814, -0.06141592, -0.10945713, 0.25075194, 0.01621478, 0.22867578, 0.19694296, 0.19725415, -0.11415149, 0.07307238, 0.016346157, -0.0067784786, 0.23919941, -0.10961956, -0.0192198, -0.051619843, 0.16250005, -0.066849515, -0.007847786},
{-0.020143133, -0.24456696, 0.05199769, -0.17497519, -0.13080989, -0.009940585, 0.09572391, 0.12785803, 0.0058792066, -0.11949613, -0.011651449, 0.14865619, 0.031733226, 0.09523373, -0.016885936, 0.09997539, 0.08494536, 0.010419948, -0.016332084, -0.10050039, 0.055105887, -0.0719332, 0.052553345, 0.05391423, -0.035839662, 0.18021925, -0.09617775, -0.14754815, 0.1360659, 0.14477924, 0.051783502, 0.015196547, -0.07960511, 0.088554434, -0.16338676, -0.11606622, 0.05770995, 0.10469316, 0.053498074, -0.17599005, 0.18259597, -0.02088392, 0.08449665, -0.032230813, 0.054245297, 0.14707184, 0.09377589, -0.11988439, -0.08206672, 0.071248375, -0.061610978, 0.04957906, -0.12813543, 0.15012367, 0.0035848408, 0.039445743, -0.011315674, -0.13730356, -0.0076437015, -0.123539746, -0.11956496, 0.12652135, 0.1066899, 0.12085756},
{-0.0567965, 0.059326194, -0.19241874, 0.09495853, 0.07462735, 0.23694989, 0.065358326, 0.056259543, 0.044475112, -0.16756886, 0.25282806, -0.010095986, 0.07067975, 0.07206222, -0.14071527, -0.05027761, 0.16035432, 0.18446301, 0.1768308, 0.00832501, -0.032850105, -0.17433348, 0.1182813, -0.0058708466, -0.07882796, 0.047060758, -0.055845983, 0.054842003, 0.061838377, -0.13426973, -0.1106187, -0.15466903, -0.1537879, 0.17552087, -0.055069238, 0.14306612, 0.21599963, -0.008407965, 0.040634178, 0.16984144, 0.054155216, 0.04664875, -0.20617239, -0.13179788, 0.036140196, 0.013162045, -0.14816178, -0.015180048, -0.21632418, -0.1967563, 0.06601133, 0.15930478, -0.22345094, -0.07035607, -0.16254646, 0.00079873204, 0.084960535, -0.23641966, 0.2272, 0.076149955, -0.11358439, 0.100695595, -0.096093416, -0.065989025},
{0.14061636, 0.05595361, -0.11725499, 0.13200384, 0.13009909, -0.08957552, 0.007827135, -0.1516443, -0.0658955, -0.17924722, 0.21242183, 0.037753314, -0.1888711, -0.028082982, -0.2339054, 0.13348776, 0.13887489, -0.14900701, -0.14766224, -0.010842949, -0.04169834, -0.007940263, 0.2442618, -0.15625902, 0.05602126, 0.068819836, 0.017096443, 0.08573898, -0.03947116, 0.06332087, 0.012771666, -0.17143463, -0.11743261, -0.1803994, -0.024810627, -0.09861235, 0.16679701, -0.16986157, -0.122164726, 0.0054636775, -0.23283754, -0.020714583, 0.05922575, 0.03686555, -0.08032573, 0.039003715, -0.10169818, -0.08951354, -0.111863494, -0.1161213, -0.009722911, 0.15579313, -0.06467274, -0.16084695, -0.06328067, -0.17493592, -0.12759304, -0.17406026, 0.026728507, -0.014235437, 0.107964806, 0.086168915, -0.006271327, -0.09940498},
{-0.15275577, 0.014474317, -0.037798896, -0.119811855, -0.11571961, 0.11424117, 0.01832448, 0.13023196, -0.1536355, -0.058964834, -0.006507814, -0.024035677, -0.15190634, -0.020457998, 0.08404495, 0.13112678, 0.11469655, 0.13125263, -0.14287558, -0.006079942, -0.16058926, -0.07508128, -0.038437918, -0.08961532, 0.063075125, 0.059725627, -0.115944, 0.10437979, 0.03724268, -0.094806425, 0.07136397, -0.16970934, 0.040472865, -0.11168046, -0.039983287, 0.10589649, 0.15677325, 0.16614388, -0.00032953918, 0.13300075, 0.09798218, -0.1368955, -0.12870319, 0.0057828426, -0.13959184, -0.0891045, -0.17469557, -0.13707596, 0.13230132, 0.09685372, -0.047892228, -0.13670786, 0.15994687, 0.09617172, 0.022928089, 0.05075559, 0.17092632, 0.06671488, -0.05333195, 0.13656269, 0.06541675, 0.14231215, -0.1712847, -0.08184492},
{-0.15951164, 0.23315835, 0.1795292, 0.050790783, 0.16400717, 0.14463286, -0.15581048, 0.0020854129, 0.16625188, -0.027725555, 0.23769636, 0.14399646, 0.07858778, 0.0067821583, -0.11535679, 0.12605152, -0.16543807, -0.07628846, 0.17051916, 0.0605125, -0.012964869, 0.052930757, 0.14394239, 0.0720248, 0.050460443, 0.079592824, 0.013934676, -0.17482893, -0.033706177, 0.18755439, 0.014551263, 0.025355339, -0.20390917, -0.21485744, 0.16286512, -0.027427152, 0.039781816, -0.07781674, -0.17858726, 0.11991693, 0.1592264, -0.19273882, -0.07463739, -0.14285569, 0.10929069, -0.17346883, -0.008147734, -0.02554892, -0.084942035, -0.097776346, 0.20533954, 0.016409643, -0.12680215, -0.05847416, 0.034656096, -0.11351975, -0.044238806, 0.020370139, 0.026633339, 0.0553976, -0.060373332, -0.16442086, -0.047479086, -0.052708503},
{-0.0018351227, 0.107351825, -0.1441237, 0.0643163, -0.080505244, -0.093865, 0.027973996, -0.17549935, 0.106470495, 0.09007229, 0.0369914, -0.1427343, -0.12635532, -0.14374247, -0.029593436, 0.13980381, -0.17377895, 0.113430634, -0.07258806, -0.16403283, -0.07039676, -0.14328153, 0.15533847, -0.13210912, -0.15849108, -0.035023037, 0.16101041, 0.0786847, 0.1009138, -0.112745345, -0.052278094, 0.09589745, -0.04390754, 0.036720295, -0.019348696, -0.0070363283, -0.10889435, -0.02738361, -0.08104346, -0.022506578, -0.060746334, 0.07653876, 0.05040327, 0.14968981, 0.16950165, -0.010302916, -0.0020326858, 0.028674856, 0.11774187, -0.0061699445, -0.05529873, -0.12914018, 0.051987182, 0.073382184, -0.07269271, 0.1064098, -0.07365507, -0.089606725, -0.15420778, -0.016105488, -0.14818402, -0.06516296, -0.10124925, -0.1649596},
{0.08784152, 0.07485162, -0.14545196, 0.1523486, 0.19016801, 0.05815986, -0.1917303, 0.14303681, 0.004254445, -0.1571964, -0.05673528, 0.09328397, 0.13157456, -0.1171463, -0.26617372, -0.16417001, -0.110508755, -0.23540497, -0.24833244, -0.15612212, -0.053467993, -0.0041657984, -0.049230747, 0.1574514, -0.0908869, -0.17924137, -0.13709952, -0.116017155, 0.0719735, 0.019856606, -0.18349895, -0.15435714, -0.06813415, -0.042321924, 0.01663427, -0.02064575, -0.12597814, 0.14770822, 0.039293785, 0.034365144, -0.10541038, 0.16278462, 0.014164365, -0.027734002, -0.19903933, -0.03649881, 0.2408142, -0.2000674, 0.25792938, 0.19248348, 0.04724373, -0.21074218, 0.14819859, -0.0102760345, 0.038088217, -0.02636993, -0.013381839, 0.18056355, 0.15555525, 0.012179211, 0.197209, -0.0014738105, -0.10409803, -0.062334992},
{-0.0755634, 0.08017482, -0.13121097, 0.06454393, 0.15445106, -0.10825526, -0.057463963, -0.0450826, -0.16690068, 0.091500685, -0.1630233, -0.006330967, -0.0105704665, -0.0031304085, -0.13340083, 0.099482715, 0.17506935, 0.052833468, -0.15525492, -0.09735027, 0.06772266, 0.15785183, 0.1369361, -0.015535386, 0.14083724, -0.083856836, -0.066629864, 0.071177915, 0.1376125, -0.08206962, 0.07527263, 0.15856509, 0.15857568, -0.07460481, 0.09070934, -0.13276245, 0.019320667, 0.16814126, 0.027601277, 0.03505768, -0.09913397, -0.005398512, 0.18155281, 0.07013741, 0.12212065, 0.015930071, 0.07728555, -0.1682656, -0.15415117, 0.022865344, -0.016596839, -0.11618581, 0.0029387788, -0.0840312, -0.04947038, -0.13358578, -0.06350645, -0.024870232, -0.06294048, 0.04572183, 0.14435244, -0.05147563, -0.10126096, 0.16188279},
{-0.036634624, 0.031279787, 0.05897461, -0.08150387, -0.12497881, 0.024947822, 0.0075072795, -0.13215376, -0.048636496, -0.17365555, 0.14243855, -0.11882047, -0.10290005, 0.08907716, -0.13515243, -0.045964092, 0.030415446, -0.15977153, -0.1132847, -0.17077376, -0.01643917, -0.13952622, -0.08493248, -0.16227244, -0.080600746, 0.11194725, 0.13051297, 0.15217553, -0.09491799, -0.12027758, 0.1090066, 0.0983686, -0.12605006, 0.15328886, 0.06271185, -0.027560756, -0.0036471337, -0.14960158, -0.11485513, 0.114286944, -0.036787957, 0.0047579557, 0.16995646, -0.11356337, 0.019932643, 0.030640513, 0.0020669252, 0.14606766, 0.159245, -0.017152756, -0.15837412, -0.13594925, 0.034276217, -0.02555199, -0.116867095, -0.016800448, 0.057774946, 0.063541815, 0.14956476, -0.031735733, -0.06552288, 0.087089226, 0.088281885, 0.012769729},
{-0.11661886, 0.08343194, -0.22709377, 0.12894605, 0.06419306, 0.028607737, -0.031055994, -0.16781756, 0.08453921, -0.054495066, 0.14652826, -0.1122985, -0.18841076, -0.074579984, -0.18033017, -0.012672114, -0.111906625, -0.16134064, -0.16987218, 0.14086123, 0.12869495, -0.16147612, 0.10313998, 0.002290292, 0.1423554, 0.15944614, -0.022097766, -0.042199865, -0.12323941, -0.09475196, 0.09040083, -0.17063834, 0.12586124, -0.15302959, -0.09992436, 0.03738103, -0.23706186, -0.15149385, 0.09464614, -0.088881955, -0.052053146, -0.0008551177, 0.064526804, -0.15472786, -0.22984163, 0.004600746, 0.090028144, 0.018665887, 0.03793807, -0.1306591, -0.05411881, 0.022245632, 0.18940996, 0.12043832, 0.06632555, 0.08965032, 0.015356168, 0.13114163, 0.25494444, -0.046643704, 0.07692634, 0.109447725, 0.06973271, -0.039986823},
{0.021973759, -0.17567034, 0.11133869, 0.1043237, -0.09296806, -0.15942302, -0.07419696, 0.039603412, 0.057339057, -0.17061533, 0.111420885, 0.043592617, -0.05032721, -0.08275112, -0.046162426, 0.12535243, -0.074898235, -0.08039899, 0.012518957, -0.16496044, -0.06290965, -0.12865001, -0.10212147, -0.09416567, -0.1297618, -0.013712898, 0.031303763, 0.008858725, -0.11949963, 0.14170049, 0.024736911, -0.041043818, -0.047932133, 0.037418187, -0.113213554, 0.042556554, 0.16413166, 0.14134936, -0.08708997, 0.1059535, 0.17190029, 0.016967058, 0.044780776, 0.070757985, 0.030344218, 0.12807088, -0.09246833, 0.002949521, -0.08090994, -0.09299605, 0.07036315, 0.090573564, -0.06262107, 0.110231206, -0.14918454, 0.05535133, -0.0031116605, 0.07183184, -0.03863235, 0.1693003, 0.16187508, -0.07334433, -0.02543962, -0.10245444},
{0.036242556, -0.15876566, -0.00096181006, 0.09280063, -0.16450237, 0.10052766, -0.00724038, -0.1670255, 0.12350348, -0.069951415, -0.22450882, -0.06477323, 0.09907165, 0.08271544, 0.05700049, 0.16551581, 0.18828765, 0.112982064, 0.1362471, 0.094625086, -0.09708232, -0.020840526, -0.09480084, -0.061983164, 0.026644692, 0.08161419, 0.16492857, 0.15852824, 0.18868525, 0.06904047, 0.13689636, 0.12026842, 0.16322087, 0.06559364, -0.17199133, 0.007694811, 0.10010594, 0.0076958835, 0.03757179, 0.07294753, 0.14411715, -0.021646073, -0.11471773, -0.14614075, -0.10494858, 0.011586056, 0.13945572, 0.0013238223, 0.12462461, 0.07716735, 0.104122564, 0.12446754, 0.19511597, -0.021107644, 0.23705426, -0.0320877, -0.15530351, 0.19148953, -0.09755613, -0.122010194, -0.1750268, 0.11686772, -0.0029516388, 0.10232513},
{0.1590634, -0.14527324, -0.059296787, -0.08219895, -0.066272646, -0.14115237, -0.09655186, -0.0072186794, 0.14760375, 0.10491137, 0.07680174, -0.05019, 0.08450293, 0.15047525, 0.010795043, -0.03953234, -0.12068048, 0.20180222, 0.10609917, 0.034337103, 0.22968596, 0.019783527, 0.00692631, 0.0059047383, -0.047333732, 0.23118994, -0.13950904, 0.05554601, -0.08717218, -0.1466822, 0.111773446, -0.16426308, 0.12249417, -0.0529663, 0.053342953, 0.0419092, -0.12764029, -0.0573603, 0.059433278, -0.18974449, 0.18970019, -0.04962821, -0.15039092, 0.15484825, 0.11380519, 0.13141583, -0.16893637, 0.12766826, -0.11597848, 0.15883805, -0.19274326, 0.19185558, -0.032254707, -0.013600111, 0.17761758, -0.040786773, 0.15212639, 0.11918667, -0.07640141, -0.07007373, -0.024903921, -0.25202745, -0.12307674, -0.13046804},
{0.11379455, -0.14588979, -0.16869298, 0.1650372, 0.14025836, -0.045579538, 0.10712056, 0.06217061, -0.052901626, -0.027752683, -0.10909459, -0.107920796, 0.03612432, 0.06725103, 0.019442588, 0.114684895, -0.1697021, 0.124488965, -0.06553624, 0.09221481, -0.00501661, -0.17290066, 0.13395955, 0.010212988, 0.010569543, 0.16332148, -0.028602242, 0.020456523, -0.020004079, -0.020504743, 0.16838698, 0.14877622, -0.033070356, 0.0006927252, 0.0019380748, 0.164771, -0.14124736, -0.04643014, 0.015558839, -0.15433425, 0.030867547, 0.050583124, 0.038778603, 0.12581365, -0.08064445, -0.11219103, -0.11940788, 0.09163542, 0.02691266, -0.17673492, -0.11047789, -0.05481986, -0.01978226, 0.15307267, 0.044687003, -0.06540474, 0.0735565, 0.03727232, 0.13411759, -0.10429621, 0.16753896, -0.09701501, -0.013827786, 0.046287775},
{0.15550613, 0.1257163, 0.0123164775, -0.079520844, 0.07447185, -0.052907493, 0.007339363, -0.15547802, -0.19048016, -0.06284101, 0.07054637, -0.13435122, 0.07790392, -0.20729697, 0.017607147, -0.1499416, 0.10138467, -0.13586861, -0.14910203, -0.1391631, 0.11249123, -0.097628705, 0.19700928, 0.18133308, -0.005024329, -0.15700047, 0.14545901, 0.12088287, 0.0052667577, -0.08694353, 0.00047950778, 0.05868198, 0.21884693, 0.08326067, -0.069304846, 0.13068591, 0.019735305, -0.10907819, 0.0038463657, 0.08968129, 0.024604691, 0.074801154, 0.03158858, -0.16985184, -0.22233719, 0.12544854, 0.23493017, 0.03634583, 0.14805709, 0.117291786, -0.19495712, -0.16457064, 0.19880587, -0.055714928, 0.2310433, -0.0049869865, -0.056342036, 0.07849228, -0.113556765, 0.16568182, 0.081449375, 0.20170723, 0.10701159, 0.02225159},
{0.17611162, -0.15483804, 0.045788467, 0.09936978, -0.083253466, 0.15523782, -0.08077978, -0.113249086, 0.006796656, 0.02472195, 0.09379747, 0.16208915, -0.058981307, 0.120409414, -0.039880518, -0.16369684, -0.16758539, -0.17066123, -0.034225523, -0.06882614, -0.0671461, 0.08133255, -0.06167783, -0.062319808, 0.037795693, -0.134671, -0.15107854, -0.17620681, -0.06767696, 0.052550495, 0.036609486, -0.017601192, -0.056630176, -0.12415715, 0.10150562, -0.15309295, -0.13646168, 0.1035371, -0.07071731, -0.17428358, 0.10380338, -0.08135416, -0.070457794, 0.07036564, 0.059784546, 0.09085359, -0.11222888, 0.08000778, 0.011825219, -0.16839543, 0.081384346, 0.1198165, -0.056513723, -0.05729194, -0.048509862, 0.14563869, 0.0714502, -0.09967098, 0.024055943, 0.0064226687, -0.0124564655, -0.118736625, -0.02246216, 0.04366207},
{0.14448543, 0.04853998, 0.14843465, -0.15333773, -0.035737067, -0.13387525, -0.13592266, 0.100932464, 0.119435534, 0.08067386, -0.11161231, 0.010560021, -0.004018739, -0.09073647, 0.051207364, 0.04032968, -0.13199925, 0.027130306, -0.1571125, -0.17319041, -0.06338266, 0.06681202, 0.017275915, -0.029214472, -0.06275737, -0.05932582, -0.10162166, -0.083281584, -0.02465257, 0.16563131, 0.06143923, 0.016707644, 0.029604957, 0.17500837, 0.048938394, -0.1702585, -0.042826682, -0.13519663, -0.15107895, -0.16493322, 0.046421513, 0.06427875, -0.11660996, 0.15672551, 0.06273128, 0.013154164, 0.1494716, 0.085777864, 0.101327315, 0.059892952, -0.16513109, -0.03938964, -0.031190306, -0.077832624, -0.050509885, 0.13597722, -0.107133284, -0.05655437, -0.025728583, 0.13245626, -0.15778844, 0.07071504, 0.061428905, -0.05592937},
{-0.004823621, -0.17128508, -0.16001509, 0.021812094, 0.19001396, 0.036409542, 0.21304528, -0.13043284, 0.11020467, 0.09335821, 0.203328, 0.08811214, -0.0839747, 0.025459582, -0.039681774, -0.0754941, 0.10907211, 0.09655196, 0.09319857, 0.046784215, 0.15813874, -0.16242227, 0.12701939, -0.23035939, 0.11514889, 0.16192792, 0.16457689, 0.11162408, 0.046079036, 0.08905761, 0.15230687, -0.14752176, -0.22573295, 0.06878038, -0.111055255, 0.15832676, 0.21227339, -0.063091345, 0.14929366, -0.13601735, -0.19744535, -0.13298087, 0.07932914, 0.023177216, -0.14978237, 0.008379278, 0.13405652, -0.20415463, -0.15988588, 0.13858375, -0.18138613, 0.04090659, -0.20488325, -0.07977442, -0.11071531, 0.15859388, -0.07638813, -0.22388028, 0.25626928, -0.05017118, 0.16654855, -0.11623126, 0.12700064, -0.06558879},
{-0.028745264, 0.06854289, -0.078331806, -0.16717002, -0.20764743, 0.13819762, -0.026455099, 0.025070682, 8.400143e-05, -0.076387, 0.2436494, -0.09719398, -0.12638636, 0.1599629, 0.053418122, -0.092637494, 0.031005554, 0.011371814, 0.023176182, -0.040927667, -0.24435154, 0.11625533, 0.11195046, 0.18870746, -0.14295372, -0.07350981, -0.13671704, 0.008038261, 0.03341668, -0.019889709, -0.11909842, -0.06580999, 0.017495697, 0.22609545, 0.11071484, -0.039555453, 0.16958039, 0.030921787, -0.077749275, -0.0007422441, -0.18145, 0.11782168, -0.042466912, -0.0805081, 0.18070018, -0.0044581066, -0.07455001, 0.047978457, 0.0031843535, 0.11798306, 0.2569284, 0.15056872, -0.064404525, -0.15413453, -0.091905326, 0.14040695, 0.15847515, 0.03891463, 0.04138976, -0.16777577, -0.27235937, 0.2003387, -0.07977634, -0.008246604},
{-0.13256098, 0.14309756, 0.06618589, 0.09382786, 0.02809003, -0.14112648, 0.07014601, 0.14892296, 0.029583499, 0.1061859, 0.050363973, -0.09392231, 0.03807217, 0.16672303, -0.0050636083, 0.16304167, -0.036078677, 0.0028027296, 0.05287592, 0.14825602, 0.11100696, 0.16486056, -0.14849654, 0.112635806, 0.17109598, -0.0675751, 0.13440134, -0.11963387, 0.042663857, 0.16601925, 0.0023083389, 0.021456242, -0.013636991, -0.06422918, 0.13045512, -0.08440559, -0.17467833, -0.05841717, -0.057597585, -0.08713983, 0.021877423, -0.048071384, 0.13820861, -0.033640474, 0.14072256, -0.13127437, 0.14019568, -0.026578218, 0.013697848, 0.00015614927, -0.1459839, 0.010748759, 0.04287906, -0.034700558, -0.14664848, 0.0025011152, -0.00696595, 0.13832714, 0.06861283, -0.02900213, 0.041783795, 0.03361532, -0.012384638, 0.0037580729},
{0.009160402, -0.09036447, 0.061906204, -0.16745397, 0.09611448, 0.013258216, 0.17674598, 0.15601449, 0.10945253, -0.08937723, 0.16759898, -0.11617713, -0.07758054, 0.1466574, -0.029601716, -0.14776343, -0.06256859, 0.2015938, 0.16691656, -0.06578038, -0.08935273, -0.11422908, 0.045303527, -0.08855031, -0.08800764, 0.14649187, 0.05492439, 0.07852175, -0.065986454, -0.030429607, -0.09245468, -0.031826988, 0.045640428, 0.09845322, -0.031982288, -0.09709225, 0.0746845, 0.045702904, -0.12377745, 0.15090899, -0.058667462, -0.24661458, -0.05262289, 0.07496846, 0.21154195, 0.13684031, -0.23261386, -0.11329365, 0.032002427, -0.006263838, 0.26234338, 0.17934786, 0.08129939, 0.1523303, -0.2001454, 0.032837242, -0.11927162, -0.25023022, 0.15199725, 0.08444278, -0.2490541, -0.21905194, 0.0526805, 0.033014763},
{0.085346654, 0.15476276, 0.14466281, 0.009525656, 0.02944414, -0.15988077, -0.049792744, -0.15735237, -0.029626587, 0.12670119, 0.006900145, -0.11832377, 0.050477803, 0.12694372, 0.08007462, -0.017467087, 0.11315636, 0.063225515, 0.10075543, 0.10969523, 0.13328815, -0.07237785, -0.12464523, 0.08856216, 0.15763538, -0.13516124, 0.07481861, -0.013186016, 0.139953, 0.07154369, -0.18297027, -0.045369357, 0.14805205, -0.17810339, 0.00403817, 0.030624703, -0.12129905, -0.13845286, -0.061319847, 0.123363316, -0.046401087, 0.093810335, -0.06532997, -0.060315676, -0.13307753, 0.12963043, -0.10749301, -0.10570985, -0.12935719, -0.11711183, -0.12361244, 0.1699717, 0.0011020502, -0.04443057, -0.13026573, 0.15466781, 0.14821349, -0.023747832, -0.10688953, -0.015944958, -0.08153902, -0.010929754, -0.1343459, 0.017086238},
{-0.11596466, -0.13088083, 0.047300283, -0.16328932, -0.14294301, 0.13042141, -0.12782288, -0.06059454, 0.10377723, -0.04885979, 0.09832951, -0.0064275265, -0.15937953, 0.11396965, -0.11309171, 0.088255085, -0.09009727, -0.12790342, -0.06809933, -0.08090468, -0.09264928, 0.008548602, 0.078401715, 0.16674457, -0.07664105, 0.09410794, 0.055446193, -0.068324775, -0.084650435, 0.13492699, 0.08051457, -0.118074566, 0.13984476, -0.068496384, -0.000432387, -0.016481817, -0.17040008, 0.15409802, -0.14782825, -0.058033355, -0.033338375, -0.070994385, 0.04445373, -0.0038384348, 0.16422208, -0.05868523, 0.12100053, -0.17140259, 0.02953878, 0.0075416225, -0.13698636, 0.10765247, 0.12146629, -0.13835058, 0.11387177, 0.06987311, 0.13169159, 0.0105238175, -0.13044481, -0.0620853, 0.1066352, 0.14945146, 0.14925186, 0.16352968},
{0.015660437, 0.17262684, -0.13467085, 0.1711229, -0.034877148, 0.036574855, 0.15165557, 0.09386342, 0.112904884, -0.09184826, -0.040823765, 0.03503705, 0.16692634, -0.17656064, -0.06532745, 0.10705482, -0.120240375, -0.1312172, 0.09618511, -0.12249934, -0.11385395, 0.075841144, -0.16359727, -0.037070923, -0.1521481, 0.13484296, -0.09252468, -0.09083899, -0.11518547, -0.17008328, 0.03401287, 0.0018529892, 0.003050048, -0.0025332605, -0.070940055, 0.053098917, 0.023485914, -0.12736824, -0.14036429, 0.105232336, -0.08746292, 0.06275952, -0.061355814, -0.15672188, -0.07095814, -0.16229355, 0.11890626, -0.082688116, -0.017386496, -0.15951572, 0.043475088, -0.1191563, 0.12854806, -0.14212322, 0.013324679, -0.03946252, -0.001968041, 0.045469977, -0.03657081, 0.034467563, -0.1369643, 0.12853624, -0.13169077, -0.14859618},
{-0.06285292, -0.16131803, 0.09201566, 0.16288939, -0.22523965, 0.17704858, -0.13994247, 0.06208413, 0.02603121, 0.028281776, -0.1488595, 0.078146204, 0.13689612, 0.0007122578, -0.106747456, 0.08181415, 0.23948736, 0.21404393, -0.043496113, 0.15410958, -0.20776145, -0.10721509, 0.16019209, 0.036443267, 0.10503347, 0.18235108, 0.06927708, -0.09268131, 0.11183285, -0.10134094, -0.040977404, 0.020029187, 0.07285119, 0.16841042, -0.027639776, 0.05466663, 0.176856, 0.11210804, -0.01705568, 0.20137878, -0.17522712, -0.009576146, 0.003510482, 0.09714042, 0.015998732, 0.12712833, 0.018718615, 0.023338716, 0.1786828, 0.036280923, 0.22540168, 0.0012160618, 0.11566988, -0.1287061, -0.052827228, 0.040833175, -0.07645358, 0.15911128, -0.07473178, 0.17392765, 0.022723157, 0.13497822, 0.1654719, 0.17539842},
{-0.17569773, 0.028069511, -0.032898277, -0.07749107, 0.052849025, 0.021526337, 0.14593999, -0.017268196, 0.0073539466, 0.03946601, -0.027998656, 0.04796353, 0.08951728, 0.12424107, 0.15840669, -0.036997348, 0.0039364696, 0.051040217, -0.037951544, -0.10784097, 0.011306867, -0.10924265, -0.058476478, 0.0061841607, -0.11920233, -0.17184366, 0.0871553, -0.03445454, -0.013145223, -0.15219627, -0.023007333, -0.055751935, 0.14184366, -0.047759846, 0.12544419, -0.1190066, 0.06087707, 0.094202, 0.14144228, -0.13502215, -0.13794175, 0.028894275, 0.16569586, 0.038961932, 0.11995427, -0.14249276, -0.06574727, 0.12590866, -0.12142557, 0.121684745, 0.057384834, -0.015875712, -0.03551711, -0.17658223, -0.16420728, 0.03979197, -0.07809044, -0.038660288, 0.07395418, -0.0359226, 0.04522331, 0.05813113, -0.079401076, 0.03997667},
{-0.120574504, -0.05346033, 0.1616662, -0.0135270655, -0.011401445, -0.09604103, 0.14612882, -0.15657604, -0.16890083, -0.051175594, 0.07695769, -0.088984475, 0.1211697, 0.11770271, 0.004119605, -0.064012714, 0.077885136, -0.011921912, -0.09799328, 0.015841901, -0.060720585, -0.14287987, -0.09941632, -0.107618354, 0.10929467, -0.11822675, -0.16731308, 0.05353211, 0.14330168, -0.112229764, -0.03387423, 0.17634259, 0.04307893, -0.047134966, -0.053268515, 0.111150816, -0.0575232, 0.09549151, -0.17235482, -0.00746876, 0.16682313, -0.04641573, 0.057570353, -0.15581593, -0.057301424, 0.17633225, -0.017075285, -0.12475307, -0.11679427, -0.025121838, 0.054636896, -0.011153147, -0.0063876063, 0.11435659, -0.10655503, 0.12506299, -0.13314968, -0.026853785, -0.14545594, -0.17426689, 0.113428965, 0.07161921, -0.09421978, -0.16856362},
{-0.060077824, 0.08383568, -0.15830426, -0.016893784, -0.031058086, -0.06942625, -0.13188797, 0.059164844, -0.14328898, 0.08686225, -0.042423002, -0.049297374, -0.10958579, -0.10356634, 0.12808926, 0.1668341, -0.10762062, -0.0040614014, 0.17245235, 0.09819608, -0.07792446, -0.09949172, -0.12556331, -0.064796455, 0.13045849, 0.06340598, -0.057076905, -0.13461545, 0.07813043, -0.099457756, 0.07970658, -0.1712976, 0.098567165, -0.11649836, 0.0038425773, -0.022140417, -0.049825713, -0.07055892, 0.097519614, 0.11757945, -0.11749589, 0.084327735, -0.09239081, 0.14328368, 0.037979707, 0.17188592, 0.04047179, 0.03350923, -0.17886674, 0.040199574, -0.15895179, 0.037030533, 0.12540954, 0.05937867, -0.021556385, 0.023259833, -0.16272675, -0.014313442, 0.1314454, -0.1550907, -0.08220022, -0.059598964, 0.079210944, -0.045899738},
{-0.08033319, 0.11584629, 0.15038319, 0.1241629, -0.005020564, 0.024953807, -0.0519572, -0.14300857, 0.0054659415, 0.14374675, 0.1430818, -0.14961149, -0.072772264, 0.13325672, -0.0852305, 0.029523237, -0.086186275, -0.05564887, -0.10425984, 0.15162975, -0.0013180303, 0.13546143, -0.10306744, 0.043316253, 0.045832083, 0.04109982, -0.18042687, -0.1813248, -0.060746174, 0.16827051, -0.010258437, -0.0367904, 0.108375795, -0.05508843, -0.15661916, -0.035970062, 0.074135676, -0.12858367, 0.029102774, -0.0886921, -0.072626114, 0.15487066, -0.10696959, 0.1406499, 0.13152726, 0.084844336, 0.02004428, -0.1214512, -0.15304598, 0.08863209, -0.0296714, 0.1229767, 0.07700301, 0.120448396, 0.08172964, -0.10318581, -0.03680469, -0.13679679, 0.03851304, -0.15952675, 0.035276588, -0.010165305, 0.030524135, 0.029469594},
{0.079795614, 0.079834595, 0.01851815, -0.096105054, -0.1134328, 0.17109431, 0.09164907, 0.0018797517, 0.04567896, 0.049713, -0.072180316, -0.0036462098, -0.06854974, 0.014805898, -0.005487263, -0.046244785, -0.058779977, 0.16355257, -0.1671739, -0.1402709, 0.04612112, 0.08054365, 0.03257568, -0.05930622, -0.14925349, -0.042376295, 0.0091275275, 0.15635271, -0.11372286, -0.12828742, 0.095969096, 0.068497986, -0.17660464, -0.13501337, 0.03524235, 0.16823302, 0.129862, -0.086802825, 0.04119754, -0.028641433, -0.112773836, -0.038615316, 0.023358881, 0.041854218, -0.085928865, 0.084550366, -0.094125204, -0.10791005, 0.12222223, -0.021846056, 0.05861287, -0.08524735, -0.047422916, -0.08028503, 0.16474642, 0.07868938, 0.031936347, 0.056370437, 0.08998491, 0.049108163, -0.08606437, 0.121766075, 0.16306286, 0.16881464},
{0.076113716, 0.22051032, 0.033482864, -0.03722043, -0.012874932, 0.030140284, -0.18063833, 0.06436067, 0.04005204, 0.1692586, 0.06245324, 0.14154446, -0.04565652, -0.13368835, -0.21059972, -0.17179137, 0.09865479, -0.039644565, 0.111559264, -0.0012256842, -0.12308445, -0.089229725, 0.06316371, -0.14266987, 0.08130552, 0.0015622224, 0.05113541, -0.010383004, -0.07696709, 0.17241521, -0.13873528, -0.06130571, -0.18435793, 0.022663765, 0.062106967, 0.12992498, -0.004086664, -0.055097982, 0.017309884, 0.21664442, 0.061011013, -0.18964724, -0.0890095, 0.15027225, 0.0643286, -0.17846414, -0.1563996, 0.2446296, 0.025014281, -0.05842733, 0.23251426, 0.060003992, -0.2224586, 0.13361178, -0.08154192, 0.03695208, -0.028299168, 0.023561733, -0.14133507, 0.05293463, -0.14779645, 0.12653747, 0.081737824, -0.035626587},
{-0.15458225, -0.11705613, -0.099334955, -0.17656688, -0.040769793, -0.23293173, 0.08946833, -0.05582538, 0.30355194, 0.08737034, -0.12752633, -0.13324405, -0.008796025, 0.21293072, 0.28497118, 0.16156434, -0.21964258, 0.060187645, 0.250624, 0.011693135, 0.17483783, -0.15096642, -0.039719578, -0.2704376, 0.1299588, 0.023486027, -0.112705454, 0.14819758, -0.2964216, 0.17307582, 0.014666024, -0.17644174, -0.24288252, 0.082050204, -0.08362348, -0.035948366, 0.111203544, -0.053804584, 0.13212648, -0.15104304, 0.2749348, -0.19082464, -0.2061732, 0.1324151, 0.3405742, -0.03722599, -0.005627847, 0.18565017, -0.26903194, 0.07047966, -0.21278338, 0.1698725, -0.21188316, -0.1328212, 0.027058717, 0.05469872, 0.16677047, -0.33667982, 0.24381828, -0.011919543, -0.15647465, -0.14726996, -0.0379287, 0.04074475},
{-0.05556242, -0.013149902, -0.16230784, -0.17370242, 0.05504796, -0.029971395, -0.1754896, -0.075711705, -0.12213104, 0.16118176, -0.09966109, 0.16985808, 0.012827307, 0.06528825, -0.07816079, -0.09324158, -0.09535766, -0.076926515, -0.035130937, -0.05460187, -0.107571386, -0.10029062, -0.11539419, -0.01552175, 0.037801504, -0.16462106, 0.040491004, -0.056123298, -0.012091801, -0.16583984, 0.10007611, -0.022763088, -0.15304586, 0.11580599, 0.12647744, 0.09086697, -0.020653635, 0.0008852929, -0.053124703, 0.099486485, 0.05672729, 0.08345975, 0.10273387, -0.0948833, -0.049048822, 0.058788612, -0.073065765, 0.17247324, 0.17075704, -0.10165908, -0.15951647, -0.12696493, -0.064126335, 0.026509866, -0.012476113, -0.0838673, -0.035123035, -0.060406744, 0.0063838204, 0.056394294, -0.094967514, 0.12711078, -0.0105198175, -0.08287431},
{0.02815139, -0.108662374, -0.013758651, -0.14375502, 0.039022554, 0.05811667, -0.13264902, -0.16365182, -0.037256755, -0.005638957, -0.13193148, 0.048154593, 0.012336969, -0.027403958, 0.06050455, -0.03238189, -0.15901332, -0.12353894, 0.08642309, -0.10008143, 0.13624711, 0.10357301, 0.11889756, 0.07592811, 0.1369751, 0.11552156, 0.010782254, -0.09347148, -0.15119906, 0.011976061, -0.1661445, 0.16179083, 0.09558568, 0.07956353, -0.08885297, -0.012990415, 0.119458124, -0.09778334, 0.021796638, -0.07740035, 0.08629851, 0.15608601, 0.09105558, 0.15115453, 0.08463761, -0.12134445, 0.0022472627, -0.047376066, -0.10674642, 0.039424635, -0.1460886, -0.15182784, 0.036269844, 0.12628393, 0.13300477, 0.028860018, -0.08673008, -0.09610667, -0.13288595, 0.0102451, -0.026559953, 0.14841504, 0.06530397, 0.036318008},
{0.14990874, 0.13680403, 0.06270853, -0.15493742, -0.018875256, 0.109071776, -0.10577038, -0.05328095, 0.1242481, -0.10508187, -0.088351175, -0.1542986, -0.07339671, -0.14882676, -0.17628412, 0.09131448, -0.048621535, -0.12002917, -0.06881543, -0.10179438, 0.0943947, 0.14275579, -0.005057499, -0.045839205, 0.11418222, -0.08021869, 0.16588603, 0.0009848475, 0.16336383, -0.14354521, -0.11389389, -0.009533405, 0.12495406, 0.16268961, 0.16399486, -0.007434234, 0.031858042, -0.008674756, -0.013110071, 0.04848978, -0.09108499, 0.16235037, -0.11445588, 0.067763194, 0.113275334, 0.1438952, -0.11730075, -0.12836143, -0.06679985, 0.08082561, 0.09897272, 0.10126363, 0.14357133, -0.08116358, 0.13577868, 0.051095977, 0.12280585, -0.14200912, -0.1121013, 0.097891495, -0.01814881, 0.1337368, 0.17188527, -0.09149133},
{-0.15681173, -0.097048014, -0.06508135, -0.07036815, -0.09851932, 0.18194696, 0.029472567, -0.08311548, -0.038785607, -0.09466517, -0.17280121, 0.06698523, 0.045596123, -0.0047520003, -0.14075379, -0.12458002, 0.1639392, 0.11209537, -0.002083962, 0.034022145, -0.023185404, 0.029701605, 0.063363895, 0.10744437, -0.13404371, -0.063007, -0.11203816, -0.12264501, 0.050688166, -0.072790496, 0.12821028, -0.08276225, 0.0027900317, 0.04115011, -0.08953229, 0.004089182, -0.009904442, 0.11336671, 0.12856558, -0.11409678, 0.07456308, 0.1685134, -0.051051635, 0.034306344, -0.10862526, -0.09206926, 0.117106706, -0.0203985, 0.19662303, 0.16031861, 0.1956841, 0.1547306, -0.01147176, -0.16882686, 0.19989982, 0.11568622, -0.12780234, 0.20395006, -0.15205726, 0.022130176, 0.08543789, -0.030860653, 0.032893844, 0.058574732},
{0.022874128, -0.10583106, 0.17576689, -0.028305802, 0.02661406, -0.13641421, 0.017946636, -0.10359134, 0.19784363, -0.054731842, -0.15474954, 0.11426145, -0.014906612, 0.04039332, 0.096189216, -0.07031541, -0.19450872, -0.15051341, 0.095349446, -0.14582366, 0.07625878, -0.10258438, -0.17897914, 0.068411194, -0.008170962, 0.0057387324, 0.036690067, -0.08167569, -0.11262585, -0.10967783, 0.22164232, -0.14012988, 0.06424489, -0.052490335, 0.14632921, 0.14960857, 0.055382192, -0.091117606, -0.1842921, -0.19771181, 0.15577438, 0.061130814, 0.17324749, -0.0960725, 0.24936268, 0.04709245, 0.16409081, 0.101375796, -0.12789504, -0.11636863, 0.06528599, -0.084480144, -0.15526253, 0.05095023, 0.06353723, 0.004007742, -0.11547132, -0.090233535, 0.06514088, -0.102409504, -0.015414318, -0.09308596, 0.11787552, 0.049873263},
{0.048329312, 0.018423451, 0.17556582, -0.13192138, -0.08602455, 0.15682779, 0.12290058, -0.15024494, 0.03941264, -0.12837453, 0.08454908, -0.06743011, -0.06323832, -0.096138194, 0.11290705, -0.15791918, 0.03342493, 0.03691887, 0.1789193, -0.16740447, 0.14267412, -0.11003016, -0.07321432, 0.19772804, 0.13096653, 0.017837737, -0.15050763, -0.12632458, -0.05240451, -0.0519638, 0.16732834, -0.10644431, 0.09102713, 0.050206527, -0.029664844, -0.10531502, -0.042070772, 0.022212148, 0.13500373, -0.053464156, -0.046040557, 0.15909421, 0.0791891, -0.14421591, 0.21175918, 0.15498707, -0.08118421, 0.09959873, 0.14486323, -0.010635026, -0.11152531, 0.060321894, 0.19449179, 0.025873825, -0.06953939, -0.013246119, -0.16214937, 0.06461015, -0.051599033, 0.083481655, 0.059738863, -0.096291184, -0.04646281, -0.068339214},
{-0.10962535, 0.028751781, 0.010988874, 0.08772063, -0.059711795, 0.013622905, -0.037870556, -0.16555382, 0.15767707, -0.1614478, 0.08230572, -0.15899152, -0.16022365, 0.044088952, 0.0021081865, -0.0057951254, -0.087783, 0.11760879, 0.05060734, 0.046211254, 0.089203805, -0.0153090805, 0.20350195, 0.016093802, -0.08013258, 0.050490707, -0.1471177, 0.0059808004, -0.049900252, 0.118379824, -0.18653108, -0.095315814, -0.21115072, -0.12653363, -0.051007718, -0.07308381, 0.26579028, 0.10496871, -0.123443626, 0.13569556, -0.027437678, -0.20272462, 0.03216167, 0.101359084, 0.21463603, -0.16674612, -0.23124976, -0.009713349, -0.24421217, -0.17166041, 0.19328566, -0.0796749, -0.016772045, -0.17111072, -0.14847411, -0.12428507, -0.05996055, -0.15958911, -0.107287705, -0.003917083, -0.04715007, 0.039331753, -0.008452316, 0.12351007},
{-0.060673214, 0.069705874, 0.098281905, 0.11682184, -0.032132804, 0.0036747903, -0.09391089, -0.11219921, 0.014272571, 0.16754316, 0.103644, 0.17618082, -0.060630478, -0.0682443, 0.072007254, -0.0857441, -0.1514039, -0.16697392, -0.15216002, 0.14332281, 0.08277173, 0.095708594, 0.1357276, -0.13750076, -0.1477269, -0.015268713, 0.07569043, 0.13698955, -0.14063391, 0.16063137, 0.08871107, 0.16947182, 0.015489683, 0.16062184, 0.14330505, 0.11218913, -0.061401084, -0.1268416, -0.16773342, -0.13387412, 0.10536872, 0.08152099, 0.017120972, -0.026295751, -0.07012477, 0.038315788, -0.14784512, -0.028163075, 0.13870983, 0.040671706, -0.13460097, 0.089873806, -0.121261284, 0.014877453, 0.14148737, 0.15552337, -0.042920917, -0.09982279, -0.012531772, -0.12767941, 0.020710245, -0.10152784, 0.03104259, 0.022656292},
{0.1546063, -0.21943219, 0.0021265133, -0.07654552, -0.031826954, 0.10439183, 0.14913325, -0.14229819, 0.053566363, -0.13692926, 0.06985543, 0.09954494, -0.08399542, 0.22682336, 0.182897, -0.008487191, 0.06493499, -0.026704906, 0.12431718, -0.13251968, -0.11209178, 0.028089225, -0.018760897, -0.027197458, -0.14611267, 0.06643603, 0.008601159, -0.09311206, 0.14669184, -0.11384838, 0.21053946, -0.044851243, -0.05760877, 0.22033493, -0.08558309, -0.008446606, 0.049852487, -0.08222846, 0.063037716, 0.07530355, 0.06444276, -0.10905391, -0.088527404, -0.11221126, 0.038615834, -0.084022164, 0.011466155, 0.15298118, -0.14600006, 0.058451425, 0.22676872, 0.08917438, -0.10324235, -0.1518108, 0.06814918, 0.13198356, 0.04997693, -0.11905422, -0.14439058, 0.13251065, -0.25551933, -0.2370195, 0.12158296, 0.056168806},
{0.14742117, 0.17463431, 0.099020116, -0.016358968, 0.17465246, -0.075021714, 0.014546667, 0.021590168, 0.06656131, -0.1748565, 0.20471174, -0.0737181, 0.016774341, 0.12814714, -0.08553356, -0.064052865, 0.039467175, 0.1597411, -0.13750136, -0.11479, -0.18687436, -0.035134584, 0.06085768, 0.05615156, -0.002320528, -0.14052214, 0.11894475, 0.12386771, -0.15772791, 0.002772885, 0.06127422, 0.1331787, -0.15519851, 0.0623775, -0.1122524, 0.094701655, 0.1572294, 0.10229014, 0.07390388, -0.045058023, -0.04316134, -0.18671107, -0.09685611, 0.04472042, -0.054866657, 0.029401392, -0.008354498, 0.13984837, -0.13553338, -0.089711495, 0.14144574, -0.031424765, -0.13579193, -0.15698989, -0.16356997, -0.1709448, 0.016667143, -0.21533383, 0.15667062, 0.091548726, -0.042655982, 0.038344756, 0.109370284, -0.15204823},
{0.17066468, 0.17255533, 0.14286874, -0.17712604, 0.12467722, -0.1827476, 0.09553273, -0.052980542, 0.08833111, -0.101574264, -0.082992114, -0.036791835, 0.048618782, -0.025121495, -0.03362247, 0.109406024, -0.038097642, -0.18874061, -0.05061918, 0.15557776, 0.21172471, -0.1721443, 0.13972315, -0.13759568, -0.11973995, 0.19231589, 0.0638821, -0.050256222, 0.07846212, 0.13425004, -0.056234635, -0.0903982, 0.17465578, -0.16153444, 0.16524746, -0.009685146, -0.18233855, -0.08365589, 0.10704547, -0.07603504, 0.2130897, 0.10365536, 0.17062986, 0.08408125, 0.017227704, 0.06489997, 0.26783612, -0.20136346, 0.17245172, -0.04484147, 0.036030572, -0.14003618, 0.022649676, 0.07581715, -0.034747843, 0.045242324, -0.054650597, 0.23952527, -0.06765612, -0.08480376, 0.12235471, 0.11373935, 0.07892745, 0.016965408},
{0.07593264, -0.004377663, 0.008565083, -0.0781636, 0.16629346, -0.14592575, -0.16570316, -0.048596278, -0.016639203, 0.03059031, -0.12852602, -0.08879199, -0.07239033, 0.15918864, 0.1063254, -0.008267611, 0.07006167, -0.16396262, 0.00023534894, -0.15489873, 0.038226813, 0.14896585, -0.16302924, -0.05319716, 0.121333614, -0.029937282, -0.15480879, 0.0881186, -0.014191315, -0.13531575, 0.17495157, 0.13425048, 0.022846252, 0.17650886, -0.15472247, 0.021268561, 0.09750615, -0.13599595, 0.093124434, -0.08157451, -0.15592411, 0.13392131, 0.0033818185, 0.099207535, 0.13903938, 0.0045557767, 0.13460062, -0.019296005, 0.15332003, 0.053134486, 0.075467095, 0.13758518, 0.16499163, 0.08386423, 0.0873891, -0.08081363, -0.00851135, 0.119111285, -0.03927572, 0.11637719, -0.10081467, -0.17656933, -0.06993321, 0.08782692},
{-0.15163115, -0.09812697, 0.081655614, -0.00478927, -0.055199604, 0.1609316, 0.12120969, -0.11023172, -0.20428589, -0.063463695, -0.16715534, -0.022428675, -0.12640461, 0.18221125, 0.15599293, -0.031272817, 0.27479678, -0.08989681, -0.016249945, 0.016984787, -0.17918393, -0.13691972, -0.040746953, -0.030360933, 0.002874285, 0.1336137, -0.011831622, -0.08993622, 0.04970883, 0.14181301, -0.0889538, 0.022801325, 0.14957675, 0.27300605, -0.06261681, -0.14139022, -0.08987716, -0.111150004, 0.12554371, 0.072732635, 0.1423125, 0.25634035, 0.05462171, -0.12178279, 0.046963386, -0.03785407, -0.23336412, 0.24278487, 0.13427296, -0.0013025748, -0.013412086, 0.1627379, 0.019404486, -0.14755687, 0.12104181, -0.17477357, -0.043464154, -0.1492706, -0.059229493, -0.0027158558, -0.21139142, 0.112057805, -0.16344634, 0.13717432},
{0.119949415, -0.020810768, 0.03515222, -0.118704565, -0.1446878, 0.16442618, 0.05270006, 0.01988489, 0.010928067, -0.14298967, 0.15806775, 0.07000358, 0.030081613, 0.14749472, 0.10110002, 0.13939352, 0.051169608, 0.115130745, 0.13147755, 0.12295851, 0.15089181, 0.17025219, 0.032489207, -0.005700365, 0.06132084, -0.08754533, 0.025201745, -0.06276466, -0.14142175, 0.08085882, -0.019759078, -0.122323304, 0.016397364, -0.14200397, -0.03213714, -0.1080464, -0.011713415, 0.004468411, 0.0971504, -0.12941566, -0.014293383, -0.012750786, -0.038559422, 0.06567399, -0.17032997, -0.15121248, -0.0019303252, -0.08393558, -0.06334905, 0.12839912, -0.009248745, -0.026102927, -0.013089278, -0.14726652, -0.007208558, -0.16803215, 0.104556814, 0.07230258, -0.027490348, -0.0156544, -0.16171819, 0.15968138, 0.14638822, -0.0037315928},
{-0.02355759, 0.11475109, -0.15267695, -0.13892429, 0.21405153, 0.014376235, -0.04506914, -0.085282795, 0.07276728, -0.043398205, 0.21544676, 0.05264225, -0.07750216, 0.15106621, -0.013823586, 0.044236507, -0.0081592845, -0.03360603, -0.031805642, -0.109271586, -0.10440026, -0.13807935, 0.19675119, -0.16017295, -0.073863365, 0.16074958, -0.13400519, -0.15207753, 0.107608445, -0.13121866, 0.0376064, 0.014734417, -0.04328101, 0.083965324, 0.15476651, -0.13898754, -0.09825692, -0.009530455, -0.13149239, -0.09268897, -0.20608066, -0.09102177, 0.015202299, 0.16622832, -0.18344826, 0.090113096, 0.114500724, -0.1521747, -0.12546468, -0.15781076, 0.03384426, -0.06977145, 0.10954748, -0.17219326, 0.096439645, 0.09358616, -0.079734, 0.086887695, 0.027678244, -0.08693508, 0.20253149, 0.065353915, -0.053086337, -0.07355003},
{-0.15028396, -0.1486725, 0.1555667, -0.12329407, 0.019607678, -0.0011307154, -0.04319285, -0.08907498, -0.15771335, 0.05435708, -0.038082935, 0.00436157, -0.046824604, -0.053852238, -0.12687907, -0.048059806, -0.14611822, -0.09941666, -0.07469079, -0.013955414, -0.0477089, 0.09469296, 0.020885434, 0.038817674, -0.058090158, -0.08950554, 0.020147892, 0.12695733, 0.07237363, 0.0904318, 0.099914014, 0.08778177, -0.06139071, -0.05618156, 0.07498287, 0.02158606, -0.0101736635, -0.16547291, -0.14252439, 0.09958007, -0.16002132, -0.15900931, -0.11243055, -0.012289852, 0.09936588, 0.01236479, -0.09588144, 0.13365386, 0.06190066, 0.026801202, 0.16486137, -0.026202373, 0.14524749, -0.088271685, -0.17404841, 0.038002416, -0.09210793, -0.027069038, -0.101021476, -0.00076660514, -0.16269426, -0.06667598, -0.12833926, -0.036495417},
{-0.043037, 0.24428703, 0.037921473, 0.10627616, 0.05199689, -0.0148042245, -0.022158371, -0.03834035, 0.10850064, 0.08007454, 0.104660705, -0.12966338, -0.035931077, -0.03140777, -0.07685678, 0.052964166, -0.12987596, -0.126213, 0.080454186, 0.045370575, 0.18641727, -0.035851672, 0.20204176, 0.032493357, 0.025762886, -0.07956115, 0.08919389, -0.093660705, 0.10508909, 0.058902174, -0.021027049, 0.14819591, 0.061154593, -0.041496597, 0.11684798, -0.09511758, 0.1017376, 0.16261815, -0.09962773, 0.05986477, 0.09223598, 0.071871266, 0.110481404, -0.09308085, -0.029126802, -0.09466649, 0.059431873, 0.14491685, 0.028958702, 0.02892468, -0.12243312, -0.14265239, 0.16658448, 0.088272646, 0.0981624, 0.09160997, -0.058372796, 0.19531712, 0.08391582, -0.109338574, 0.08426655, 0.09114734, 0.027760142, -0.08722383},
{0.05326706, -0.15739156, 0.22646514, -0.06761981, -0.14485027, -0.11224264, -0.17883712, -0.09049296, -0.19916129, 0.024524665, 0.08457781, 0.017616937, 0.021691037, 0.10423467, 0.19822688, 0.011305529, -0.031077877, 0.232737, 0.071934566, -0.12573107, -0.029844653, -0.12572818, 0.01235552, 0.17129731, 0.027708054, 0.11130513, 0.012265005, -0.05793244, -0.0012186376, 0.14652917, -0.13185494, 0.09983231, 0.25439847, 0.20500287, -0.13075453, -0.17289448, 0.102997996, -0.10603612, 0.07225381, -0.031515468, -0.058363322, 0.08651915, -0.22244856, -0.013742863, -0.13085209, 0.13515618, -0.17421325, 0.18397076, 0.23807393, -0.15290225, 0.25759393, 0.08779507, 0.20831206, 0.09340556, 0.22446297, 0.029156342, 0.16211815, 0.03881479, -0.113653615, 0.053124547, -0.13846959, 0.061239876, -0.10948338, -0.057636745},
{-0.07555264, 0.21048933, -0.09845632, -0.055416916, 0.22926794, -0.11893621, 0.07894742, -0.17350797, 0.051810835, 0.077023685, 0.033111904, 0.0015968411, 0.019094339, -0.2265867, -0.22058146, 0.09349895, -0.060709734, 0.056943625, -0.109199524, -0.045163717, -0.05585358, -0.14613682, 0.07993547, -0.04328888, -0.16177714, -0.13203521, -0.017508252, -0.16275172, -0.057356227, -0.16354029, -0.11400677, 0.12439795, 0.022073641, -0.013371191, 0.05758646, -0.19193545, -0.19219197, -0.035798654, -0.033869855, -0.06262305, -0.05315939, -0.009990323, 0.071262926, -0.041226044, 0.029027708, -0.15275115, 0.20543192, -0.21862373, -0.12238995, 0.14809972, 0.029437393, -0.20544463, 0.05005725, -0.17179666, -0.17149659, -0.005172521, 0.012486383, -0.14679535, 0.24042888, -0.17292763, 0.13734308, 0.17483674, -0.031299926, 0.17554154},
{0.017425753, 0.16046284, 0.039854296, 0.11909991, 0.16909654, 0.16977863, 0.13703248, -0.15781635, 0.08788597, 0.050494164, -0.09415676, 0.0998915, -0.11528857, 0.09725468, -0.14041814, -0.08538086, -0.0022770846, -0.021830704, -0.09646302, 0.12238339, -0.08076716, -0.09414535, -0.08101859, 0.15924934, -0.16584493, -0.09378854, -0.108863436, 0.108433016, 0.026890557, 0.12406525, -0.07036601, 0.0507894, 0.13720308, 0.1010026, -0.0719303, -0.021269828, 0.04940319, 0.07031186, 0.14394498, -0.13914156, -0.042445317, 0.02362533, 0.124374464, -0.17308442, -0.17882034, -0.10781783, 0.15909296, 0.15761176, -0.013742104, -0.014406802, -0.087520994, -0.0011685842, 0.11376214, 0.11862175, -0.017967105, -0.013298348, -0.01822038, 0.12961315, 0.039944816, -0.060610794, 0.00043611132, -0.01774731, -0.034037545, 0.08310972},
{0.08174377, -0.021786613, 0.21438378, 0.08383812, 0.062194534, 0.15814781, 0.199171, 0.10182831, 0.08119609, 0.16539603, -0.02108711, 0.07075494, 0.06631014, 0.0815591, 0.2187878, -0.18365867, 0.24418063, 0.24659245, -0.08863603, 0.07291308, 0.099135935, -0.09907228, -0.15701103, 0.10669976, -0.0894475, -0.09452377, -0.16118474, 0.076412976, 0.04199691, -0.1005013, 0.08583576, -0.12949446, 0.065842815, 0.20566894, 0.14257313, -0.18423486, 0.23082933, -0.04659857, 0.09998725, 0.09971126, -0.030142818, 0.08619068, -0.14464904, 0.07154256, 0.050283603, -0.05408913, 0.03362951, 0.08116365, -0.09775171, -0.13514641, 0.016174229, 0.22758839, -0.054911662, 0.045156553, -0.13745956, -0.09593925, -0.13484791, -0.15342651, -0.112575084, 0.163498, -0.11019148, -0.195015, 0.09971858, 0.11757743},
{0.032239083, -0.1854062, 0.08177992, 0.10948647, 0.06737491, -0.04691613, -0.11515588, 0.058312375, -0.13342538, 0.036543265, -0.13007802, 0.16473494, -0.14363977, -0.047597393, 0.160904, -0.062292017, 0.015240017, -0.093390144, 0.079302736, 0.15294378, 0.11239412, -0.15298344, 0.14061911, -0.0915119, -0.07874578, 0.20268248, -0.014587137, -0.10152776, 0.13742378, 0.040207583, 0.22463281, -0.095238686, 0.091867566, 0.2388231, 0.12025292, 0.03384894, 0.04281316, -0.120199814, -0.007268739, -0.027257765, -0.06934976, 0.195191, -0.09077561, -0.1556577, -0.18757541, 0.11877258, 0.15933429, -0.0991676, -0.023351468, 0.16344719, -0.26400137, -0.12519974, 0.19395691, -0.09519831, 0.072484754, -0.08677294, -0.10015288, 0.17769614, 0.17908256, -0.012328416, 0.25411388, -0.037605025, -0.16732113, -0.17935154},
{0.11048986, -0.11696614, -0.16326024, 0.05827248, -0.04177536, -0.07935459, -0.10999037, -0.17550115, 0.06066601, 0.019921422, 0.16278808, 0.035642117, -0.07447993, -0.050737858, -0.012426704, 0.142583, -0.07691838, -0.047469065, 0.026337609, 0.052320674, -0.047176614, 0.17324854, 0.09816925, 0.031114906, 0.050862566, -0.05684012, 0.02592428, 0.0060568005, -0.11053744, -0.032353863, -0.16506214, -0.06771709, -0.09578529, -0.13350216, 0.1367778, 0.1080568, 0.06376539, -0.07512423, -0.101769425, 0.0037458837, 0.101692125, -0.11710809, 0.04553671, -0.005398214, 0.028422028, 0.12496109, 0.012461692, -0.021285921, -0.0008288175, 0.16098465, -0.08234335, -0.13580438, -0.15681922, 0.122369155, 0.04010023, 0.14127485, 0.14112805, -0.02397798, -0.110530026, -0.1039061, 0.16550992, 0.024258628, 0.17231508, -0.05854197},
{-0.040939495, 0.034373842, -0.13702284, 0.11093274, 0.17149484, -0.15997168, -0.08368483, 0.07569394, 0.14552937, -0.059727084, -0.03060016, -0.18024462, -0.15805668, 0.079197995, 0.12508425, -0.031054279, -0.054300595, -0.15414838, 0.004768905, 0.16383845, 0.1465458, 0.02522561, -0.10943731, 0.014890877, 0.076143816, -0.14535512, 0.080573, -0.016490646, -0.12597626, -0.14822234, 0.15473655, 0.16966386, 0.10621862, 0.083533995, -0.13466462, 0.08822281, -0.20670891, -0.16221677, -0.14978977, -0.087997586, 0.17109255, 0.026855264, 0.14685598, 0.041753948, -0.018543594, -0.03045348, -0.024621816, 0.19522506, -0.19004874, -0.16354546, -0.20333707, -0.20913835, 0.1468571, -0.036150023, 0.171176, -0.11809391, 0.018599272, -0.101261266, -0.17266907, 0.16807784, -0.02632057, -0.10625528, 0.12163479, -0.085593894},
{-0.029658614, 0.2667115, -0.05564546, -0.04730726, 0.13427977, 0.26189327, -0.085479535, -0.1211669, -0.046695124, -0.0014369856, 0.19978248, -0.09596917, -0.062189616, -0.27486253, 0.036792386, -0.03293817, -0.16203721, -0.007843084, -0.13303256, -0.024175942, 0.19814564, -0.001514554, 0.18958366, 0.18854503, -0.1118311, -0.101810865, 0.0043260315, -0.08655973, -0.004515077, -0.02185886, -0.14959654, 0.16616414, -0.2106819, -0.099821135, -0.108777136, 0.07146264, -0.18558468, -0.10807139, 0.031256028, 0.24760973, -0.045024727, 0.035320118, 0.23743655, -0.095092066, 0.07568707, -0.023106432, -0.11134932, -0.0036562223, -0.03954961, -0.09829235, -0.05043004, -0.22013399, 0.034367166, 0.13183944, -0.1694921, -0.08861185, 0.17240392, 0.1452142, 0.17955685, 0.053736255, 0.09334773, 0.1240753, 0.06129895, -0.1351168},
{0.14285608, 0.04244107, -0.105036855, 0.07017662, -0.0013062209, -0.08890305, 0.08143683, -0.05031112, 0.11355342, 0.1323119, -0.07485339, -0.11712162, -0.16690038, -0.0638569, 0.099081054, 0.16073252, -0.036568508, -0.15879428, -0.036121413, -0.1433614, 0.118538424, -0.035610035, -0.036893204, -0.09496363, 0.0080355555, -0.108435705, 0.006442949, -0.060875222, 0.08572306, -0.1731744, 0.09314908, 0.15909703, 0.0014037788, -0.14454544, 0.15550901, 0.11533351, 0.1429651, 0.07014626, -0.17363869, -0.003022179, 0.05172333, -0.101965785, -0.021903798, 0.08220948, -0.14954574, -0.04791081, -0.08609859, -0.057737686, -0.13638134, -0.08183792, -0.050053686, -0.09171129, 0.10495399, 0.15265171, 0.012972295, -0.00021086633, -0.0033319592, -0.015073523, 0.041346937, 0.145813, -0.0253928, -0.12604213, -0.16871999, 0.1760727},
{-0.1591857, -0.12918793, -0.11337169, -0.07858195, 0.1102301, 0.05261609, 0.10347749, 0.119041696, -0.10654727, 0.025650576, 0.049463168, -0.06119954, 0.026810616, 0.15072574, 0.03619419, -0.037011802, -0.16048238, 0.1474906, 0.0885254, 0.065426454, 0.10515298, -0.035081938, 0.075810894, 0.17521797, -0.04679084, 0.10135542, 0.064716816, 0.08643438, 0.082825795, 0.14549585, -0.044428587, -0.059359707, -0.010881603, -0.11103187, 0.018380582, 0.017676681, -0.016221106, 0.12253015, 0.15505974, -0.13760643, -0.15736727, 0.07057418, -0.13237208, -0.12972243, -0.13445885, 0.031917885, -0.12266907, 0.019323573, -0.0067570657, 0.16972427, 0.08062817, 0.17359282, -0.12897547, 0.009944081, -0.06000813, 0.17098357, 0.07131453, -0.005792409, -0.1107837, 0.09548794, -0.12775022, 0.06015253, 0.030588701, -0.162281},
{0.10514608, -0.0014243213, -0.050553743, 0.15367052, -0.015342753, -0.14849812, -0.14642683, 0.09984058, -0.18512113, 0.0056083095, -0.15453792, 0.03172629, -0.07585775, -0.17756768, -0.04641681, 0.16806321, 0.20264351, -0.12942398, -0.23433797, 0.018631123, -0.074399024, -0.05244623, 0.195627, -0.027590986, 0.018677756, -0.005702433, 0.03357541, 0.07177588, 0.035951067, -0.033568203, 0.07917658, -0.15807572, 0.10096376, 0.09898059, -0.061079256, -0.107266225, 0.030691924, -0.034643695, -0.01630648, 0.12376612, -0.18146718, 0.06834369, 0.1453533, 0.08211759, -0.20220613, -0.073546216, -0.0059745116, -0.08532802, 0.06685805, 0.0051307552, -0.13047954, -0.0534427, 0.041606043, 0.12645222, -0.02236533, -0.04241073, -0.09729806, 0.1424638, 0.20093548, 0.094515696, -0.038270876, 0.0685804, 0.031910323, -0.13126928},
{0.13594325, -0.16992566, -0.1442299, -0.03307236, -0.06344702, 0.1139194, -0.20750389, -0.04424126, -0.1591491, -0.06491336, -0.016718684, 0.113570645, 0.019447755, 0.076275386, -0.0968027, 0.13062553, 0.06462435, 0.26833653, 0.09145654, -0.16903359, -0.23388639, -0.05499342, 0.050927676, 0.16254185, -0.11075513, -0.14768866, -0.062806405, 0.09590279, 0.14348488, 0.08927537, -0.11551301, -0.07206534, -0.12529926, 0.1918329, 0.15637968, 0.11183101, 0.19878061, -0.17506242, -0.02235722, 0.2606853, -0.13107021, 0.1416211, -0.1972478, -0.011801781, -0.08972066, -0.052487396, -0.1864331, -0.013760353, 0.23908803, 0.030463882, 0.26634726, 0.12138069, -0.14081419, 0.13303943, -0.058339804, -0.15450406, -0.113114595, 0.08197595, 0.115641214, -0.058925673, -0.17518297, 0.29087144, 0.12046072, 0.0986874},
{-0.11303236, 0.039499387, 0.07938735, 0.090048805, -0.0358188, -0.15835498, -0.073865764, -0.075634666, 0.0077150166, -0.027760312, 0.17091112, -0.12622471, -0.098211214, -0.016516343, -0.018350184, -0.17573984, 0.13986574, -0.14452091, -0.08641347, 0.025299698, 0.031833634, -0.07656527, 0.15876786, -0.076339446, 0.06159088, 0.106402025, 0.0779136, -0.09485211, 0.15311633, 0.061662063, 0.041602567, 0.03545077, 0.12404184, -0.05538795, -0.049419537, 0.13685076, -0.07268304, 0.16168402, -0.093062684, 0.15815993, 0.050910994, 0.112375125, 0.16111247, -0.095231056, 0.05863343, -0.07628571, -0.064354405, -0.16091608, 0.0998473, 0.016270876, -0.10012936, 0.12556608, 0.12584932, 0.16968276, -0.16573237, -0.17379762, -0.03060852, 0.07876168, -0.15749452, 0.1459979, 0.020863742, -0.097699806, 0.116258875, -0.13662428},
{0.021191567, 0.17658801, -0.08110305, -0.17398627, -0.054375626, -0.12730649, -0.117536604, -0.035284787, -0.072701246, -0.16100429, -0.0033119023, 0.15473877, 0.06262246, 0.044482708, 0.011045635, 0.122669145, 0.10682212, -0.07523356, 0.0012328327, 0.16165684, -0.029304788, -0.11578506, -0.111363016, -0.010585219, -0.08332845, 0.0507392, -0.026586697, -0.14437419, 0.1470656, -0.019262537, -0.16243298, -0.008589655, 0.08670862, -0.059373654, 0.15910836, 0.14028291, -0.011751264, 0.10575555, 0.06843321, 0.14831866, -0.05040489, 0.14258207, 0.15586685, 0.02128449, 0.06986414, -0.08059367, 0.055972397, 0.08887936, -0.01442349, -0.054835074, -0.11614183, 0.13518889, 0.061492637, 0.07439475, -0.06789621, 0.13893653, -0.13816728, 0.05141364, 0.07157782, 0.0787421, -0.054751955, 0.10044916, 0.115171626, -0.09905171},
{-0.13392381, 0.20167758, 0.21818967, 0.06664082, 0.14403675, 0.14798452, -0.14767192, 0.07140226, -0.13152713, -0.054419745, 0.08115973, 0.068021215, -0.064590655, 0.024540506, 0.030265817, 0.037221804, 0.028092952, -0.08953818, -0.023924561, -0.14236397, -0.044348452, 0.06682488, -0.12796168, 0.04319419, 0.057031885, -0.22870198, -0.17984322, 0.071976334, -0.12642361, 0.06552964, 0.011431347, -0.15200315, 0.0056563723, -0.21312508, 0.07067537, 0.13735706, 0.007937546, 0.070310384, -0.15370803, 0.059552073, 0.21120341, -0.025412032, 0.099846795, -0.17996842, -0.054961152, 0.017052108, 0.07492155, 0.2005921, 0.11598171, -0.020868847, 0.07713551, -0.023739206, -0.114524804, -0.103234746, 0.20870364, 0.13976948, -0.102388225, 0.1525451, -0.02449384, -0.099034764, -0.12556352, 0.14201741, -0.11040327, -0.012913408},
{-0.12661643, -0.06720496, 0.080141015, -0.02890043, 0.1493047, -0.112568066, 0.02468715, 0.09061471, -0.03188444, 0.05892715, -0.10238276, 0.10468666, 0.038436443, 0.08641737, -0.08837471, 0.041051812, -0.013687242, 0.16793431, -0.014964781, 0.017679468, -0.06479339, -0.089332685, 0.058047093, -0.03953357, 0.06085153, -0.0067879995, 0.094688855, 0.010417517, -0.12867342, -0.031100992, 0.12668045, 0.16413264, -0.036527403, -0.12943202, -0.124127015, -0.14610524, 0.10849096, -0.12234699, -0.013377027, 0.066776, -0.17261435, -0.06864714, 0.06314665, 0.055513084, -0.16246772, -0.07734747, 0.005950986, -0.14842817, -0.1346969, -0.062938854, 0.06399986, 0.0012450649, -0.13555786, -0.035956904, 0.0154538145, -0.003920287, 0.08652915, -0.07165628, 0.1203191, 0.09050061, -0.17575485, 0.036344, -0.044976503, -0.015454194},
{0.13496687, 0.044634476, 0.11955704, -0.14965633, -0.1394434, -0.09277508, -0.14448576, 0.10346882, -0.13494587, -0.12841491, 0.04588093, 0.02902177, 0.076250896, 0.14540745, -0.14533657, 0.0463223, -0.048333377, 0.15864669, 0.01383318, -0.04223089, -0.039981008, 0.028813854, 0.10474922, -0.056659438, 0.012036964, -0.1632943, 0.04301828, 0.13290794, 0.10809119, 0.06214422, 0.07376613, 0.0688674, 0.12817113, 0.0819089, -0.11407327, 0.16093652, 0.07227236, -0.15843956, 0.09281115, 0.056391135, -0.107311055, -0.013500735, -0.10209788, -0.17522691, 0.016478613, 0.17220904, 0.06942943, 0.051265016, 0.14694043, 0.09823154, -0.12743226, -0.026644185, 0.06974128, 0.008792639, -0.103252105, -0.16993517, 0.08658062, 0.1763586, -0.027406037, -0.16838163, -0.042324916, 0.1304216, 0.16658355, -0.13059951},
{-0.12624435, 0.038259774, 0.010286955, 0.022869736, 0.24238236, 0.06340589, 0.062659174, -0.02404856, -0.018420395, -0.11218731, -0.063867524, -0.16820541, 0.117467396, -0.056372426, -0.23661205, 0.0353106, 0.15951653, -0.002756041, -0.12587619, -0.12476543, 0.12280298, -0.045568287, -0.052860722, 0.14833596, 0.039082766, 0.14792937, -0.046137515, -0.009057365, 0.14362563, -0.037728623, -0.004689083, 0.15025325, -0.12609714, -0.19309506, -0.0055509955, 0.12355786, -0.11369971, 0.069582134, 0.12539777, -0.0053282003, -0.014277745, 0.15755169, 0.1096248, -0.06225501, -0.11839917, -0.14338481, -0.009545667, -0.18088113, 0.14157708, 0.14065436, -0.218975, -0.19417594, 0.09306407, 0.050243378, -0.07148007, -0.0605219, -0.047793478, 0.0532007, -0.09723997, 0.021228105, 0.25862467, 0.047576644, 0.1627396, -0.10000772},
{-0.062800944, -0.12233458, 0.13464929, -0.10949814, -0.20072906, 0.1105714, -0.031734, -0.123428516, -0.14820078, -0.06788924, -0.2625753, -0.014396841, 0.025548922, 0.17261887, 0.13998614, -0.13498548, 0.22331168, 0.19957507, -0.11357783, -0.094618455, 0.009285026, -0.114515215, -0.19583915, 0.085878804, 0.12704654, 0.16100356, 0.03318727, -0.08892234, 0.22302291, -0.05782928, 0.17282325, -0.062149107, 0.16876753, 0.15083812, 0.013842627, -0.18723795, -0.10045369, 0.16866468, 0.0070254896, 0.02492183, -0.01782828, 0.17221665, -0.016976187, -0.017934738, 0.08418023, -0.13712004, -0.08585586, 0.13828085, 0.0051485677, 0.08805025, -0.17943755, 0.019377107, -0.1779222, 0.023166314, 0.2304037, -0.010248974, 0.11391948, -0.05683272, -0.043634117, 0.11731382, 0.053702474, -0.1393258, -0.1617391, 0.12549777},
{-0.030799832, 0.06246399, -0.18108101, -0.06404979, 0.16183345, -0.12559584, -0.15311249, 0.033489168, -0.1133398, 0.08564327, 0.11498107, 0.019622326, 0.14415272, -0.07519394, -0.18089233, -0.10129263, 0.09485671, -0.1158063, -0.22296308, -0.08626048, -0.13851248, -0.17209317, 0.052317135, 0.14451927, -0.15122655, -0.11699817, -0.16838893, -0.115114205, 0.07910437, 0.15907468, 0.10788578, 0.085011885, -0.05440341, 0.16117536, -0.10192836, 0.033960275, 0.0034161855, -0.026415452, -0.07133204, -0.17356955, 0.0731499, -0.03805634, -0.09339853, 0.078204736, -0.22628318, -0.17282474, 0.18335326, -0.16648217, 0.10736353, 0.038976748, 0.22517663, 0.0938053, 0.0495581, -0.15807955, -0.19440793, -0.00836134, -0.1412315, -0.06363309, -0.09484507, 0.09431721, 0.10332377, -0.011012694, -0.16560957, -0.0715434},
{0.17239921, 0.10744302, 0.11164261, -0.15337521, -0.013069436, -0.08628443, -0.16537935, 0.13435297, -0.098503605, -0.053499945, 0.15808146, -0.005041778, -0.17456593, 0.0504917, 0.14905801, -0.14944999, 0.1516452, -0.062384583, -0.041910216, 0.13326491, 0.09069756, -0.041688085, 0.024478532, -0.0753189, -0.112670705, 0.091924995, -0.10076991, -0.06412702, 0.12667415, -0.04908377, 0.13018936, -0.013080522, 0.1688027, -0.16000518, 0.008921772, 0.11906032, -0.10311863, -0.06426716, -0.03772728, 0.15259594, 0.022104355, 0.0039578825, 0.057161447, -0.01913315, 0.12222175, 0.029123887, -0.043013368, -0.13499236, -0.011215493, -0.1161553, -0.0734043, 0.08445295, 0.09967586, 0.066402614, 0.036263198, 0.050329536, -0.079800166, 0.059049208, 0.06445409, 0.023375615, 0.06492397, 0.1206549, 0.04480265, -0.10078967},
{-0.066619806, 0.024040561, -0.19468455, 0.11926773, 0.011810019, -0.15526077, 0.09850573, 0.0059037767, -0.12628685, 0.15154234, 0.016559875, -0.09495473, 0.04057448, -0.059394114, -0.075329766, -0.16935124, 0.21804658, 0.24284801, -0.065234646, 0.028818876, -0.14550178, -0.050568506, -0.07544999, 0.13001595, -0.05549539, -0.03838503, 0.16717471, -0.078608006, 0.26455328, -0.05406179, -0.069148146, 0.01105018, 0.14861101, 0.20323516, 0.049505055, 0.15980187, 0.19300234, -0.12634128, 0.038068064, -0.053918514, -0.21746989, 0.15653236, -0.13578941, 0.14790244, -0.22485188, -0.17732406, -0.09903937, -0.1391212, 0.3025627, 0.09153549, 0.036045145, 0.2874673, 0.038692597, 0.010693327, -0.0070468793, -0.10256802, 0.031026527, 0.010531225, -0.083066404, 0.010048732, 0.059488293, 0.23838885, 0.056724668, -0.042121235},
{-0.18073517, 0.013260618, -0.18505697, -0.12987606, -0.0053065442, 0.16107655, -0.0622987, 0.026481684, 0.05767869, -0.16473812, 0.17590971, 0.08708353, -0.10803173, 0.16470492, -0.06445852, 0.029297823, -0.05353519, -0.17122646, -0.056470904, 0.07441786, -0.15684421, -0.1053879, 0.16170533, 0.09938325, -0.12450883, 0.16908616, 0.13648042, 0.09927932, 0.080235556, 0.12729909, -0.08899962, -0.08554984, -0.060722858, 0.15456499, -0.09787042, 0.010948449, 0.00592947, 0.16060655, -0.101325735, 0.05471004, 0.07195013, -0.07135171, -0.025969096, 0.16803403, 0.178782, 0.10332392, 0.0072344276, -0.16665387, 0.057804152, 0.16324893, 0.0011318901, -0.08381199, 0.028284388, 0.043943733, 0.06419338, 0.1389861, -0.12015118, -0.07268706, 0.09009994, -0.06892021, 0.12683046, -0.08291333, -0.013175651, 0.11509979},
{-0.17077212, 0.12652205, 0.03859149, 0.15314971, -0.010733266, -0.010718816, -0.058059588, 0.112481825, 0.25788236, 0.15015613, 0.0019704385, 0.102112755, 0.111075126, 0.25287262, -0.0007921298, 0.11092388, -0.085240886, 0.009251751, 0.074457824, -0.05012457, 0.19526951, 0.09937684, -0.09380109, -0.17280595, 0.044212893, 0.17610717, 0.13282701, -0.098417826, 0.057240635, -0.1258508, 0.11093455, -0.16143233, -0.08272643, -0.0380429, -0.11733105, 0.10971728, -0.040792834, -0.038954273, 0.10689865, -0.06039279, 0.003834893, -0.25901634, -0.022279907, -0.16615821, 0.17989275, 0.031149423, -0.022308312, 0.14147924, -0.045185238, 0.08639077, 0.08060507, 0.1190891, -0.15633509, -0.0058537275, -0.069551945, 0.09527092, 0.13357674, -0.032588627, 0.08671304, -0.04130934, -0.15368798, -0.15540913, 0.15781702, 0.097940035},
{0.11225085, -0.01744403, 0.1233203, 0.13747855, 0.14661579, 0.1711482, -0.06825707, 0.014673173, 0.08948745, -0.121862516, -0.019247413, -0.07198361, 0.01982133, -0.17016318, -0.13891825, 0.027246416, 0.057683602, 0.016953692, 0.12522726, -0.022220656, 0.114680395, -0.09864625, -0.11780937, 0.025780976, -0.02497378, -0.07857652, 0.016308561, 0.022535205, 0.12036823, -0.11652739, 0.1383316, 0.15834998, 0.036534786, 0.107632294, -0.16043434, 0.0958073, -0.1676503, -0.11084444, 0.047905713, -0.13620558, 0.15997998, 0.115595445, -0.039746255, -0.14365505, 0.04347472, 0.08792828, 0.070013255, -0.129864, -0.048389897, -0.020100042, 0.0044614524, -0.037090406, -0.05832441, 0.042033643, 0.05596873, 0.016000584, 0.008944824, -0.024784327, -0.16766067, -0.042725235, -0.11209093, 0.12296717, 0.013940409, 0.033976644},
{0.050032347, 0.033759344, -0.11674198, -0.16955352, 0.17755471, -0.028140448, 0.11436613, 0.05896561, -0.031566653, 0.16021945, 0.14963605, 0.15389657, 0.09639804, -0.16409133, -0.039344523, -0.13546534, -0.14023258, 0.016124683, -0.047901668, -0.13548793, 0.28074566, -0.0074863285, 0.039080977, -0.23148113, -0.13052478, 0.09380268, -0.1779967, -0.054790933, -0.1883623, 0.17135029, 0.12746297, -0.020690605, -0.24986428, -0.15007587, -0.061991945, -0.17624283, -0.15855765, 0.0031945556, 0.09608003, -0.050362803, 0.075778075, -0.277897, 0.23193231, -0.1653726, 0.109483786, 0.009567183, -0.1128508, -0.17924382, -0.05426421, 0.097610585, 0.0049290964, -0.014810017, -0.048878416, -0.044480264, 0.08833666, -0.10880331, 0.1590059, -0.122591764, 0.25797245, 0.009023815, 0.094786674, -0.033760995, -0.1659903, -0.13161403},
{-0.15816855, 0.14894836, 0.056926988, -0.10434695, -0.014792802, 0.11172922, 0.020424861, 0.17665176, -0.112046376, 0.076352015, 0.11843235, -0.09779371, -0.09783472, 0.1089944, 0.014175074, -0.07629543, 0.025156504, -0.11285718, 0.008155793, -0.074690744, -0.014303231, -0.12365182, -0.15009183, 0.03902004, 0.055297166, -0.15321259, -0.020833194, 0.15169077, -0.14708334, -0.09253324, 0.11995309, -0.15670805, 0.022034409, -0.0061304863, -0.10661344, -0.1517641, 0.13661663, 0.10018836, 0.087186255, -0.103613526, -0.022508956, 0.083978906, -0.1019954, 0.058797717, -0.0020995168, 0.045918018, 0.09534655, 0.04454374, 0.06257433, 0.11890022, 0.029827029, -0.0075538754, 0.036153402, -0.14691144, -0.02302176, 0.13746916, -0.0031699538, -0.10973473, 0.0022145414, -0.0044730008, -0.121473186, 0.17378528, 0.16041373, 0.012719244},
{0.101168886, -0.09821973, -0.100282274, -0.016229108, 0.17290844, -0.010520697, -0.10207545, 0.1763754, -0.066921316, 0.039075315, -0.05597978, 0.15703078, -0.036053672, 0.13850348, 0.0151938945, 0.10265024, 0.08283056, -0.16549584, -0.07284552, -0.0110493, 0.1139888, 0.17241327, 0.10431792, 0.073137134, -0.09896826, -0.15747158, -0.068752386, -0.10198922, -0.026752755, 0.09154986, 0.027612165, -0.07480665, 0.09570147, 0.052857295, -0.019036978, 0.043188542, -0.12928407, -0.09648273, 0.15665136, -0.1278131, -0.12380363, -0.0136843175, 0.1534942, -0.09804406, 0.07306962, -0.057212576, -0.10954943, -0.16323239, 0.14335792, -0.04784952, 0.109866366, -0.1499608, 0.13057427, 0.1149482, -0.0551038, 0.1144654, 0.024810538, 0.09749691, 0.035783008, -0.1443371, -0.15448956, 0.12285815, 0.019181877, 0.053572774},
{-0.017903024, 0.02986331, 0.027294746, -0.038568716, 0.05031437, -0.20100282, 0.17095214, 0.04796314, -0.11709877, 0.050885975, 0.06191388, 0.10938354, -0.15112258, 0.08960498, 0.16946797, -0.12668604, -0.03658403, 0.10315179, 0.2018359, -0.13148251, 0.20465904, -0.07648785, -0.07457685, -0.11218033, -0.021937564, -0.09369901, 0.04414601, -0.11136711, 0.11341921, -0.042048767, -0.048419673, 0.06056182, 0.047118146, 0.1431426, -0.14785704, -0.1640625, -0.0645791, -0.08972465, -0.10230376, -0.19817245, 0.07893997, 0.121387534, 0.13692877, 0.13173902, 0.13302112, 0.023934452, 0.26823035, 0.18286026, 0.058480125, 0.11883655, -0.15660915, 0.058638304, 0.05033877, -0.16324288, 0.09658228, -0.09105729, -0.10742173, 0.00919901, -0.045265898, -0.13884841, 0.14196703, 0.028832551, 0.091731414, -0.0922156},
{0.08742844, -0.054523014, 0.0932259, 0.12125789, 0.0116206305, -0.18016097, 0.12241435, 0.13971879, 0.15719898, -0.15013255, -0.02612259, 0.15738745, 0.09485698, 0.11161402, 0.0039977124, -0.11654957, -0.01956251, -0.1488024, -0.04029895, 0.03562425, 0.097884275, 0.017888471, 0.1354122, -0.14064406, 0.027791426, 0.074981466, -0.16149467, 0.006078309, 0.11341975, -0.16148482, 0.09859126, 0.14001004, -0.119428225, -0.15060732, 0.033724144, -0.05806192, -0.10219599, 0.15622707, -0.109812364, -0.002598215, -0.1554395, 0.047610983, -0.111051545, -0.04775937, 0.09687524, -0.06501463, 0.048690487, 0.14155547, -0.13785934, 0.16053605, 0.036745682, 0.06525318, 0.02829219, 0.04900305, -0.0072136433, 0.022395238, -0.034851268, 0.0395718, 0.13407755, 0.16758408, -0.069252476, 0.07392068, -0.0015847236, -0.15862674},
{-0.02747123, -0.112229764, 0.11284764, 0.14439406, -0.054051854, 0.10513519, 0.15133701, 0.11861117, 0.005986199, -0.10005072, 0.10327266, 0.12335281, 0.14966656, -0.09610872, 0.17599507, 0.008360922, 0.13087814, 0.016453966, -0.10716894, -0.10547721, -0.042983666, -0.09875352, -0.17348544, 0.12125887, 0.07952537, 0.046049893, -0.036325604, 0.14238773, 0.046609774, -0.011352673, -0.046123445, -0.16626476, 0.010060489, 0.08172347, -0.049613535, -0.051031366, -0.1548409, 0.17476459, 0.022591263, 0.16390727, 0.04301706, -0.038026616, 0.1110263, 0.11954181, 0.066461235, -0.09144214, -0.090848714, -0.042618394, 0.1199723, 0.10938431, -0.06332505, 0.086740896, 0.053359717, 0.17389022, 0.0066140145, -0.09064965, -0.12408391, -0.044460624, -0.14586198, -0.055301636, 0.16195475, -0.039474145, -0.04392211, 0.055927217},
{0.08204915, 0.040288046, 0.096570194, -0.075762466, 0.07551135, -0.05581483, -0.011862005, -0.034431078, -0.13221064, -0.16710724, -0.16906032, 0.04990086, 0.059365273, 0.13381389, -0.13142551, 0.0085219415, 0.08693593, 0.07047056, -0.112065345, -0.063318536, 0.009908078, -0.08152793, 0.14385392, -0.1393567, -0.00014515221, -0.028431045, -0.059405368, -0.14561333, 0.15586308, 0.04863874, 0.09034489, -0.15751849, -0.1075903, -0.059374187, -0.1448983, 0.08895771, 0.06867938, -0.17189108, -0.10073415, -0.0652705, 0.054167096, -0.06953526, -0.08498189, -0.066716015, -0.06032819, -0.061103866, 0.11913107, 0.068660416, -0.108728625, 0.016696036, -0.047644947, -0.005631073, -0.032239053, -0.15920821, 0.07317759, -0.03904842, 0.00981836, -0.16081387, 0.115441315, 0.16635366, 0.12374482, 0.060903154, -0.10737517, -0.016832914},
{0.07908277, -0.0109665245, -0.12607887, 0.04664603, -0.08947371, -0.1641422, -0.16583276, -0.06343476, 0.16761531, -0.020895854, -0.11048307, -0.09116009, -0.11185609, 0.170967, 0.15249841, -0.00076395273, -0.09310951, 0.1189581, 0.118598565, -0.15192139, -0.12232199, 0.061707795, 0.04434657, -0.031658947, -0.0005684793, 0.05440657, 0.0812401, -0.008691981, -0.06149701, -0.030694917, -0.060954332, -0.14712824, 0.012114823, -0.14161995, -0.06341967, -0.032105654, 0.04182817, 0.0965191, 0.0063281804, -0.1364851, -0.069633126, 0.12016432, 0.14613135, 0.16782187, -0.033465862, -0.079787314, -0.012736604, -0.009664655, -0.17295958, 0.017130509, 0.06877068, 0.1423908, -0.12534384, 0.062333256, 0.10481019, 0.053956985, 0.038483277, -0.09864276, -0.15119503, 0.1452566, -0.16205859, 0.01889135, 0.1359527, -0.1670605},
{-0.121272855, -0.13021407, 0.17806926, -0.060787663, -0.03122256, 0.037910994, 0.20579469, -0.0032359974, 0.17878167, -0.02319986, -0.08218538, -0.057743266, 0.07393582, 0.22046643, 0.19249564, -0.09071276, 0.101454355, 0.21716444, -0.040649064, 0.1519735, -0.010279783, -0.09295416, 0.101535134, -0.13939704, -0.11530809, 0.17623153, -0.15255699, -0.08423492, -0.16833478, -0.11721821, -0.057397522, 0.03092499, -0.032131307, 0.22124346, -0.053176887, -0.1392219, -0.09227978, 0.15717144, -0.055181682, 0.120942384, -0.009632974, 0.1398795, 0.06492282, -0.059885267, 0.16671625, 0.043389104, 0.053840768, 0.105693966, 0.09561154, -0.06525417, 0.09808446, 0.043314636, 0.067470975, -0.07858255, 0.07607827, 0.02171655, 0.105082795, -0.12125484, -0.09434658, -0.08367637, -0.22546536, -0.004136564, -0.06157926, -0.028626323},
{-0.14739813, 0.18580414, 0.021819817, 0.061055254, 0.09096805, 0.13467176, -0.16010049, 0.16668251, 0.04613853, 0.047870044, 0.10491782, 0.045356773, -0.04423095, -0.012740948, -0.08493251, -0.023380093, -0.13520266, -0.17215301, 0.102672316, -0.024033627, 0.13335468, -0.011966333, -0.04479365, 0.024034416, 0.09408952, -0.25640646, -0.18120715, -0.041946054, 0.1537389, -0.10218715, -0.20355827, 0.15738888, 0.21997654, -0.14638193, -0.1655185, 0.06983652, 0.045370936, -0.0032315254, 0.04965412, 0.12237296, 0.16034979, -0.05650855, -0.0348389, 0.14424136, 0.24126232, -0.09233977, 0.18211345, 0.07156219, 0.011363226, 0.13818781, 0.06240965, -0.04178837, 0.045375716, 0.09224738, 0.08873522, 0.124404356, -0.03439094, 0.19041373, -0.21369584, -0.014157504, 0.13786212, 0.044463404, 0.11549105, -0.042849727},
{-0.17907539, -0.05217759, 0.044852145, -0.13404141, -0.06092529, 0.029274326, 0.08127202, 0.15938598, 0.075496614, 0.058382023, -0.108224906, -0.09590317, -0.03837249, 0.15753385, 0.009626315, 0.17167898, -0.01491563, -0.02541422, 0.23752369, -0.11165345, -0.1801016, 0.01470305, -0.18459657, 0.03813924, -0.10618797, -0.19844346, -0.06767346, 0.0986568, -0.06415678, -0.10841418, -0.09182983, 0.14474218, 0.033779867, -0.03712268, -0.03515683, -0.102068916, 0.20565309, 0.012205765, -0.032386906, 0.09875621, 0.034987744, -0.16585538, -0.17728035, -0.07868529, 0.2471137, 0.10453586, -0.26265666, 0.04451191, 0.040653974, -0.03965444, 0.053681474, 0.18350531, -0.00233027, 0.16786583, 0.082283586, -0.05371789, -0.123976514, -0.1594988, 0.009782279, 0.020261124, 0.025027646, -0.041016247, -0.09853154, 0.1563379},
{0.042621475, 0.12755756, 0.09052528, -0.0002906232, -0.10203064, 0.121606536, 0.08510312, 0.13238068, -0.14465304, -0.17890233, -0.09507338, -0.109227836, 0.10591348, -0.15730447, -0.07886656, -0.030742027, -0.015425979, 0.24738447, -0.04306436, 0.100710936, -0.13835838, 0.06636852, -0.06769132, 0.14278616, -0.1613125, -0.19887869, 0.12720652, -0.18227044, -0.18990898, -0.05653271, -0.2746017, -0.082881354, -0.0014527291, 0.107409135, -0.026172817, -0.10811966, 0.0923488, 0.14617129, -0.020613123, 0.02245515, 0.046747413, 0.18134068, 0.10928726, -0.13798013, 0.05276927, -0.14928898, -0.24981993, 0.18602578, -0.093310155, 0.052569557, 0.21230336, 0.2016395, -0.20685537, -0.09230054, 0.1302044, 0.13121326, 0.12525047, -0.12863249, -0.13136995, -0.018889666, -0.20449017, -0.11384963, -0.110771686, 0.15597634},
{0.04990393, -0.03320636, -0.08471453, -0.00013074279, -0.12973393, -0.1689869, -0.17543617, -0.015253574, -0.10231059, -0.15734422, -0.04294899, -0.13858044, 0.113664225, -0.07568798, 0.11185871, -0.06684001, -0.08177032, 0.032439545, 0.08750053, 0.11632712, 0.023466855, 0.1329874, 0.021953538, 0.0046616048, 0.049829587, -0.039354414, -0.12225852, 0.11540626, -0.08942179, 0.021419615, -0.06786148, 0.11683531, -0.054074325, -0.09552688, 0.03678724, 0.0026860535, 0.11265536, -0.015189305, 0.031616494, -0.009118855, -0.03471665, -0.09881236, -0.033609837, 0.056309626, 0.04361187, -0.08333886, -0.1353826, 0.04210259, -0.09315507, 0.030099005, -0.11706236, -0.021669462, -0.14589852, -0.16627252, -0.033975035, 0.07112154, -0.024691135, 0.014090955, -0.08283575, -0.034055755, -0.14106482, 0.14929913, 0.14617185, 0.07101938},
{0.09553622, 0.1140317, -0.15742655, -0.07504031, 0.17914794, 0.2759301, 0.08335399, -0.09164174, -0.0143142, -0.016154168, 0.24343908, -0.13272738, -0.050994657, -0.015543348, 0.021369021, -0.13833918, -0.11638919, -0.023796538, 0.18448716, 0.13749139, -0.17323424, 0.035122573, 0.10650233, -0.005361495, -0.112613045, -0.15080403, -0.028364936, -0.15086679, -0.12534955, 0.1631281, -0.23579371, -0.09440898, -0.008520943, -0.06679588, 0.017378151, 0.09316659, 0.044114456, -0.021285132, 0.09239282, 0.24117604, 0.09361196, 0.06705775, -0.11433637, -0.1309829, 0.08312855, -0.15212585, 0.009897236, 0.034759253, -0.23398432, -0.06635849, 0.27216193, 0.09719936, -0.09905854, -0.15360929, -0.12136127, 0.01606828, 0.15538342, -0.21054922, 0.0021081273, 0.08513521, 0.046936315, 0.101546995, 0.10873642, -0.1110808},
{0.029440662, -0.18250538, 0.086541824, -0.07890837, 0.024829576, -0.27818602, -0.023441732, 0.14404297, 0.22323887, -0.09303649, -0.2373576, -0.07192306, -0.061527826, 0.20775218, 0.008213924, -0.09782134, 0.08723027, -0.09922285, 0.11384775, 0.048185892, 0.2523408, 0.12893887, -0.14626001, -0.17465074, -0.16816087, 0.24499258, -0.16646537, 0.035263877, -0.18265642, 0.16415656, 0.17352948, -0.053696685, -0.008255382, -0.0790463, -0.083911635, 0.090497546, -0.1793059, -0.14098614, -0.085686, -0.29364836, -0.084458604, -0.01781607, -0.07659433, -0.17172258, -0.09000987, 0.13492717, 0.26271766, -0.13996904, -0.12953787, -0.06864602, -0.03213657, 0.01670652, 0.09356105, -0.15542342, 0.20882557, -0.13592485, 0.11720081, -0.13894685, -0.08022458, 0.06889619, 0.17303933, -0.22968566, 0.14531355, 0.06657664},
{-0.114432454, 0.036104325, 0.18237843, 0.14412528, -0.09351138, 0.20581579, -0.12585449, -0.12868932, 0.08719329, 0.07555156, 0.015298648, -0.17994295, -0.04910554, -0.1199351, -0.119721666, 0.17820883, -0.21417359, -0.16936001, 0.24291745, -0.12752515, -0.061620776, 0.07218993, 0.006604321, -0.12706725, -0.06033452, -0.17432651, 0.046103016, 0.11525135, -0.09350497, -0.09467286, 0.08354672, -0.11197899, 0.12053969, -0.031362172, -0.03822066, 0.114708014, 0.09257227, 0.0123514235, 0.07796737, -0.051847342, -0.050321203, -0.07787978, 0.17058265, 0.08497567, 0.27605167, -0.013100733, 0.15986387, 0.18741436, 0.018164052, -0.0037683023, 0.029019805, -0.08197868, 0.12477643, 0.036912963, 0.0071021677, 0.07475971, -0.16567753, 0.14471003, -0.09287286, 0.14004575, -0.13093452, -0.033121258, 0.07793472, -0.08648245}};
 const ap_fixed<32,24> layer1_weights[400][128] = {{0.008036398, 0.06133646, 0.079126894, -0.06423393, -0.103226006, -0.072655104, 0.09121454, 0.005981438, 0.041997343, -0.053205356, -0.12382333, 0.042265523, -0.05501288, 0.0669242, 0.03575191, -0.10025579, 0.053504333, -0.087625794, 0.09865263, 0.08177581, -0.10125693, 0.038893327, -0.1202553, 0.07784121, 0.11385734, 0.09245653, 0.051987782, 0.101373844, -0.009202654, -0.016060896, -0.072740704, -0.028195927, -0.04837454, -0.14346564, 0.058247574, -0.03138252, -0.0857908, -0.12638205, -0.13457595, 0.10455744, -0.024044158, -0.06860578, 0.05284636, -0.050486732, 0.061471693, -0.06784307, 0.039603844, 0.0052252184, 0.045692578, -0.14450265, 0.042976886, 0.04134205, 0.0072990526, -0.05384374, -0.056042768, 0.10336023, 0.01195396, -0.010826625, -0.005982046, 0.0010964923, -0.020014929, 0.06823296, -0.040402316, 0.034211412, 0.09802283, 0.03843231, -0.04641391, -0.0077494383, 0.12822683, -0.036647048, 0.024821095, -0.014594931, 0.05456063, -0.13672097, -0.030286392, 0.0008845185, 0.17898493, 0.026867598, 0.09652749, 0.021499641, -0.021217847, 0.046426326, -0.015446864, -0.040949542, 0.032683924, -0.025911719, -0.03366455, -0.07181875, 0.03939198, -0.03919762, -0.046195634, -0.1410709, 0.05028653, -0.0062836185, -0.0114243515, 0.015352234, 0.031054705, -0.12149422, 0.08347048, -0.06930913, 0.05463332, -0.047406036, -0.0069720657, 0.049630463, -0.106762245, -0.036781315, -0.13485208, -0.00793123, -0.04821396, -0.10237723, 0.07752113, -0.07648222, -0.051610954, -0.08998088, -0.09666356, -0.05704118, -0.10915558, 0.07352109, 0.035164323, -0.101806946, 0.13132393, 0.010332623, 0.13171129, 0.061962694, -0.023148187, 0.16411881, 0.031651724, -0.02726334},
{0.048087507, 0.0781567, 0.06567389, 0.0066228597, 0.004740769, 0.018421948, -0.036019377, 0.08319189, -0.08440469, -0.07202417, 0.042079948, 0.028670052, -0.059633665, 0.08228784, -0.11211375, 0.042304277, 0.055709127, 0.0286271, 0.049395185, -0.059295204, 0.054555576, -0.009433195, 0.05038138, 0.09696864, 0.09217488, 0.1160731, 0.09775589, -0.029039951, -0.015494739, -0.08906027, -0.011954751, 0.06670208, 0.03220955, -0.022546038, -0.0809378, -0.019065335, 0.07456464, -0.030279351, 0.06297597, -0.020616569, -0.04678091, 0.052024096, 0.077356294, -0.065475285, -0.069459386, -0.09564099, 0.06945102, 0.1158748, -0.06694378, 0.044853754, -0.06877074, -0.016270578, -0.08556573, -0.08618736, -0.08820899, -0.04762286, -0.11009891, 0.0802165, -0.017631814, 0.019344226, -0.021167606, 0.01956374, 0.04542485, -0.028646909, -0.0073685125, -0.047260873, -0.034802485, -0.01746627, -0.0017908035, 0.08138106, -0.0084495125, -0.10468149, 0.026714206, -0.045558136, 0.0004749179, -0.08167698, 0.12993115, 0.08299042, -0.040261284, 0.07137998, 0.03433901, -0.015566766, 0.03197364, -0.00058239145, 0.046027333, -0.05443559, -0.002841939, 0.07195887, 0.08386332, 0.024439575, -0.064583845, 0.061566226, 0.03363481, -0.044512138, 0.08492101, -0.07224634, 0.09995273, -0.028245179, -0.032934718, -0.08070829, -0.017159402, -0.046382055, -0.069172695, 0.027132124, -0.0085976785, 0.020411052, 0.08964244, -0.08057122, -0.07361294, 0.0046300413, -0.05037957, -0.071698666, 0.035230417, 0.030101731, -0.039808333, 0.02098503, -0.10741611, -0.013490751, -0.030071795, 0.10395503, -0.045924086, 0.06658991, 0.08443952, 0.08329062, 0.08445634, 0.047465965, -0.0014694191, 0.002348246},
{0.07353724, -0.051125478, 0.09608762, 0.06471569, -0.04587665, -0.018884383, -0.07571007, 0.055207238, -0.10114459, 0.03442155, -0.06119162, -0.01709377, -0.071989186, 0.024417065, -0.010381517, -0.034560304, -0.06949605, 0.0993721, 0.061851006, 0.07325941, -0.02241642, 0.016345305, 0.031721506, 0.012472135, 0.022062851, 0.0068856906, 0.0138609, 0.092912875, 0.10572474, 0.0056057684, 0.11458864, -0.10534163, -0.024868721, 0.03480281, 0.12620325, -0.026122637, 0.055253632, 0.010934065, -0.010961311, 0.10509154, 0.041739818, -0.053209346, -0.051130075, -0.07721017, 0.07312419, -0.052464347, 0.063018516, 0.099278525, 0.0066423193, 0.02313865, 0.092805, 0.09785026, 0.025540719, -0.09804745, -0.021790162, -0.06734449, 0.089566104, -0.059509393, 0.097828105, 0.09732488, -0.06940614, 0.01860455, -0.06832962, 0.01398699, -0.07795675, -0.06660644, -0.010341027, 0.029091373, -0.025783325, -0.025029356, -0.059520617, 0.05374749, -0.038077638, -0.015686437, 0.08135586, -0.011255414, -0.08290777, -0.039578274, 0.015042509, 0.093139924, -0.04786641, -0.09728464, -0.08279059, 0.0077572004, -0.017535428, -0.051568557, -0.017160244, -0.059358433, 0.002096878, -0.08031426, 0.036760043, 0.012958185, -0.08674615, -0.049383443, 0.057354983, -0.0659814, 0.09822483, 0.06727341, 0.09465276, -0.03697659, -0.089233615, 0.09883837, 0.05921528, 0.074017555, -0.038495865, 0.065670095, 0.076330416, 0.033428185, -0.03143176, -0.020014873, -0.05743813, 0.02361457, 0.09988638, -0.006770157, 0.07606104, 0.097643904, 0.0067993435, 0.042524263, 0.018339237, 0.06798333, -0.026694596, -0.050385896, -0.049265876, 0.04883171, -0.08327797, -0.050961815, -0.018812591, 0.06271287},
{-0.07093577, -0.02074898, -0.07101848, 0.12233512, -0.008310352, 0.029820934, 0.03816939, -0.08165382, -0.04385387, -0.07776116, 0.08271247, -0.030082272, -0.0039055487, 0.0060965116, -0.054718442, -0.081188224, 0.0973298, 0.09432089, 0.04411035, 0.07626481, -0.108124234, 0.10128188, 0.09914401, 0.04929479, 0.013130647, 0.103880115, -0.018007858, 0.0112176, 0.057804592, -0.031040959, 0.04184786, 0.08069625, 0.031680766, -0.010905948, 0.00560107, -0.05342339, 0.061482508, -0.049943447, 0.0046607936, 0.013962675, -0.03009052, -0.08766535, 0.11095733, -0.10413303, -0.08758299, -0.04959005, 0.03112118, 0.06992506, -0.04410678, 0.05782051, -0.07752091, 0.045313254, 0.019637367, 0.00066440215, -0.0573064, 0.1133115, 0.070577934, -0.07208938, 0.09153294, 0.033367757, 0.028631948, -0.00520651, 0.011847015, 0.03966005, 0.0071013197, 0.062438585, -0.06541923, -0.06654984, 0.0893673, -0.073446915, 0.028534668, -0.10291465, 0.06267241, 0.0456051, -0.080731384, 0.027510658, 0.0037567273, -0.059804924, -0.05012136, -0.06269178, -0.07553464, 0.017232858, -0.068948545, 0.0132412035, -0.06828755, -0.0026662438, -0.031660415, -0.040689748, -0.0075221206, 0.060712095, 0.088827096, -0.023092706, -0.09355834, 0.08953084, -0.054231077, -0.06329727, -0.04268077, 0.017673519, -0.07322431, -0.08652684, 0.040857717, -0.027226264, 0.07013066, -0.012663811, 0.014878992, 0.0022690312, -0.04128381, 0.043336187, 0.043522257, 0.021962982, 0.07489907, 0.06108807, 0.034721054, -0.052844096, -0.02644176, 0.088128045, -0.107565664, -0.08946632, -0.065368526, -0.043344468, -0.041666277, 0.02730454, -0.026719492, -0.0022642128, -0.021203391, 0.10326693, -0.046589136, -0.069690876},
{-0.09164741, 0.058454197, -0.09677657, 0.016017225, -0.02164813, -0.06769372, -0.04300289, -0.07690021, 0.058337122, 0.0017239302, 0.04701484, 0.045065142, -0.08392591, -0.08568187, -0.0049460633, -0.06540497, -0.030337023, 0.06637283, 0.08212244, -0.11667791, -0.059000324, 0.049504198, 0.06522553, -0.087637, 0.021227038, 0.122829966, -0.033528138, 0.008042154, 0.027964886, -0.11143979, -0.005606013, -0.0150210885, -0.0012442938, 0.08533924, 0.084768936, -0.080356255, -0.014439795, 0.053427536, -0.076161444, 0.020543667, -0.0659246, -0.028712861, -0.11404672, -0.028716283, -0.012544075, -0.080251336, 0.09992264, 0.0075443164, 0.10429691, 0.113310054, 0.031154808, 0.050237715, -0.07827334, 0.018751109, -0.077640355, 0.047851313, 0.071966805, 0.010723054, 0.04180886, -0.040678807, -0.07092739, -0.11467918, 0.10378321, -0.098532334, -0.03170251, 0.015991721, -0.0037676, -0.045936596, -0.07243938, 0.10283673, 0.011545225, 0.006591477, 0.08162551, -0.009279293, -0.09833598, 0.06226608, -0.030356627, 0.034986064, 0.0011348249, 0.07923462, -0.01795035, -0.013567001, 0.09052077, 0.090234876, -0.08232437, -0.11124483, -0.0011286368, 0.008506227, 0.013442472, 0.03304306, -0.010731386, -0.076338254, 0.010027863, -0.042392094, -0.012006239, 0.05657278, -0.09743538, -0.01618521, -0.02623885, 0.053655565, -0.001789555, 0.010165206, -0.08863726, -0.05366583, 0.08270252, 0.04114274, 0.079399526, -0.04491381, 0.063924655, -0.046666972, -0.09676119, 0.090739176, 0.0017335728, -0.1096434, 0.0011480451, -0.017601386, 0.08701275, -0.016805522, -0.09304259, 0.037724823, 0.029990425, -0.0025463663, -0.009097357, 0.047291454, 0.012673572, -0.035440296, -0.01304978, -0.10503593},
{-0.035198964, -0.050999414, 0.06364282, -0.03750221, 0.0008702435, -0.054815426, 0.04023005, 0.07121323, 0.039809376, 0.01748874, 0.0026432355, -0.08854608, 0.059368115, -0.10428488, 0.041438054, -0.07447291, -0.06679444, -0.012082774, -0.06119608, -0.033047315, -0.07245763, 0.015051446, 0.07086005, -0.032915413, -0.039881855, 0.09878296, -0.06714, -0.015189095, -0.045735944, -0.029691398, 0.036525548, 0.009928304, 0.017915344, -0.07446076, 0.09770515, -0.02774105, 0.0049073864, 0.07411079, -0.035413418, -0.060761344, 0.022707425, 0.10466933, 0.06346187, -0.09578128, -0.011317996, 0.0634874, -0.033458725, 0.05082541, -0.03203007, -0.11420428, -0.08881402, -0.06258625, -0.11434229, 0.09034727, -0.004980907, -0.030964788, 0.0896667, 0.019034505, 0.02652616, 0.06443143, -0.0369477, -0.09607594, -0.05497318, -0.09210836, 0.08486135, 0.036786214, -0.0743747, 0.062406003, 0.10039877, -0.083908, -0.04452315, 0.06380032, -0.07974567, 0.070667684, 0.06840917, -0.0079695955, 0.032303788, -0.0639385, -0.041333325, 0.0661652, 0.03607044, 0.10592334, -0.050372846, -0.046578795, 0.01902367, -0.062267885, 0.11347082, -0.013970871, -0.04899339, -0.0052085603, -0.08276873, -0.07782573, 0.0777376, -0.054669965, 0.12850933, -0.04989023, -0.0037059858, 0.027209407, 0.023575008, 0.03268957, 0.103698954, 0.10188729, -0.11173471, 0.0005576685, 0.033339217, 0.030849576, -0.03741269, 0.10032823, -0.069938526, 0.0036432378, 0.10018665, -0.0010724068, 0.11424892, 0.012699019, -0.047421243, -0.016981363, 0.031363588, 0.046913132, -0.077434815, -0.008915275, -0.017020265, -0.097292304, -0.08436886, -0.063145526, -0.055720016, -0.018693913, 0.03196067, 0.0965902},
{0.12510969, -0.06723021, -0.04024855, 0.079673335, -0.08442438, -0.074559, 0.066314675, 0.040306956, 0.09665723, -0.030401595, 0.0028557545, -0.04687877, -0.12028331, 0.017848574, -0.09561142, 0.037844002, -0.051203657, -0.11141774, 0.10223613, -0.06967189, 0.007557132, 0.087426975, -0.021503452, -0.03068037, -0.068150625, -0.06659516, -0.033298194, 0.046410836, 0.0708011, 0.013349735, 0.08071306, 0.022109699, -0.0040414636, -0.09274771, -0.020729288, 0.092932515, 0.029619044, 0.041117985, 0.040091217, 0.057210684, 0.036753725, -0.095636666, 0.15771143, 0.048927117, -0.111700155, -0.077862285, 0.093100935, -0.037252434, -0.07537342, 0.049013976, 0.008876649, -0.00061012805, -0.08244071, 0.0053217104, -0.07306597, 0.12299139, -0.00745455, 0.08100587, 0.08839199, 0.026712546, -0.004178865, -0.06059739, 0.019355997, -0.0360626, -0.021885596, 0.0906527, 0.05895721, -0.092502, -0.06571483, -0.035466198, 0.047040317, 0.04365848, -0.04591146, -0.059549425, 0.07956227, 0.09013071, 0.1368676, 0.096264586, 0.053762514, -0.04474174, 0.0326853, 0.069489226, -0.10009151, 0.07015049, 0.084777355, -0.010117907, 0.023308333, -0.040913593, -0.05571361, -0.014774688, -0.025873153, -0.09403129, -0.039369076, 0.10483995, 0.0012479813, 0.06501904, 0.09964864, -0.07467135, -0.0065673348, 0.050428793, 0.01677116, -0.022190845, 0.011818725, -0.06899766, -0.06463788, -0.09960862, -0.08481787, -0.042395122, -0.07790829, 0.04622116, 0.026192049, 0.018308721, 0.031818893, -0.038925294, -0.06410657, 0.03892503, -0.06750933, 0.03325726, 0.045657583, -0.041657187, 0.0053467695, 0.021512125, -0.07098731, 0.029872974, 0.09437288, 0.0768367, 0.010252624, 0.036263384},
{0.038129862, 0.019667407, 0.041146856, -0.08341105, -0.096714586, 0.08570251, 0.021796528, 0.025659591, -0.034727186, 0.08939475, -0.04078829, -0.03932064, -0.08353296, 0.0037278375, -0.035405282, -0.07443007, 0.09363488, 0.015716165, 0.10867476, -0.09072377, 0.089698166, -0.029070146, 0.0059797773, 0.050544128, 0.018162541, 0.067566186, 0.0034528186, 0.018272026, 0.044152133, -0.05701074, 0.016152374, 0.028245829, -0.012676702, -0.075817, 0.03369542, 0.04244668, -0.09296997, 0.07027323, 0.09783936, 0.110389054, -0.001483387, -0.049799982, 0.13658915, -0.052446846, -0.06707576, -0.026958553, 0.06200783, -0.010374232, -0.04038021, 0.03159621, -0.033673167, 0.055866554, -0.111786366, -0.04573482, 0.054495603, 0.06838001, -0.031166157, -0.022901125, 0.0004998298, -0.0033491876, -0.037730522, -0.116154216, -0.023246355, 0.019416735, 0.08599669, 0.06830582, 0.01533243, 0.09701948, 0.05529233, -0.019333722, -0.06284151, 0.07268123, 0.00017730147, 0.035970036, -0.041121893, 0.059438884, 0.014557576, -0.009989612, -0.0032517314, 0.059897136, -0.035530593, -0.033320896, 0.01296974, -0.02959052, 0.0074995337, 0.049621522, -0.058781568, -0.10388469, 0.1044234, -0.016373437, 0.06985313, -0.07521431, -0.01891511, 0.07495809, -0.04947303, 0.045003444, -0.029095419, 0.012516224, -0.070587724, 0.078097984, 0.015833274, -0.0712012, 0.078795776, 0.025944635, -0.08065481, 0.022063263, -0.012927525, 0.032899298, -0.039370142, 0.069659404, 0.14985691, -0.08597852, 0.055431854, 0.048833244, -0.05100938, -0.08761932, -0.10586214, -0.026118703, -0.0154768, -0.03871961, -0.035662517, -0.06719205, 0.09048726, -0.028814169, 0.0074354336, 0.022017866, 0.022185061, -0.015362826},
{-0.049215, -0.046681963, -0.02874258, 0.09509408, -0.10132604, 0.02749741, 0.045761656, 0.00522843, -0.06771868, -0.05333482, -0.003958434, 0.01407696, 0.073722154, 0.047423318, -0.07804807, -0.06957539, -0.09626666, 0.055935286, -0.046903145, -0.089181945, -0.05549636, -0.026871664, -0.07595445, 0.10523555, 0.08765305, 0.085344814, -0.023478, 0.06152785, 0.090607494, 0.061332777, -0.04489702, -0.056940533, 0.07910551, -0.0814708, 0.08896022, 0.002436596, 0.05645979, 0.01046294, 0.09795473, 0.12724945, -0.04058867, 0.013963155, 0.123624966, 0.05675387, -0.06415939, 0.07929211, 0.034963176, -0.033959556, -0.009656824, -0.038717337, 0.084374614, 0.06921473, -0.104564264, -0.03412916, 0.10136129, 0.04567126, -0.075239465, 0.08170211, 0.0607126, 0.047764286, 0.09218066, 0.071647055, 0.08883828, -0.07939789, 0.031179965, 0.008611607, -0.021455396, -0.0858624, -0.066477396, 0.11481233, -0.09941452, -0.024095558, -0.10303708, 0.02170311, -0.071605854, 0.07780059, -0.019336822, -0.07606335, 0.11969756, -0.06645656, -0.10431253, -0.021851033, -0.046414956, -0.10833737, 0.014969929, 0.022874849, 0.07193864, -0.0785639, -0.04971776, -0.10993791, -0.02814386, -0.038483948, -0.097205564, -0.09498599, 0.026175762, 0.043999523, -0.095505066, -0.02780311, 0.005111522, 0.014716417, -0.03702625, -0.025721857, -0.06278093, 0.08852124, 0.08393471, -0.1129031, -0.0851762, -0.014144704, -0.0410072, -0.0027633375, 0.05265345, -0.10235447, -0.05861037, -0.088427104, -0.04830311, -0.08354494, 0.099790744, 0.0033508316, -0.03790477, -0.079242855, 0.021678554, -0.10206667, -0.02990402, -0.030527778, 0.012709707, 0.052938614, 0.03341663, 0.0001844714},
{0.0802117, -0.09818277, -0.071504205, 0.09211005, -0.077304654, 0.083357856, 0.07155099, 0.1044559, -0.054601606, -0.025671214, 0.0025957238, -0.120781414, 0.028553626, -0.058596052, -0.026230931, 0.06478316, -0.066226326, 0.06109571, 0.006844677, -0.009414213, -0.103372045, -0.07151239, 0.020806512, -0.04490835, -0.046005048, 0.020592753, -0.09252715, 0.0060604573, 0.0685341, -0.10125266, -0.050226826, -0.0712086, -0.10165678, 0.004549191, 0.11041541, -0.1007241, -0.055592127, -0.036375742, -0.09642286, 0.106655575, 0.032146707, -0.005755268, 0.03627768, 0.057139248, 0.03615177, -0.05685859, -0.095391005, 0.058850527, -0.06544234, -0.023321098, 0.070255816, -0.061904445, -0.016519912, -0.06663342, -0.101591825, 0.057680424, 0.10143016, 0.10397634, -0.062657334, -0.082568064, -0.057611942, 0.080032915, 0.08763444, 0.07232241, -0.04258307, 0.00032639873, 0.07172358, 0.095786795, 0.09786255, -0.071551345, -0.05074418, -0.029114226, -0.03472668, 0.052192684, 0.07260409, -0.032467898, 0.014104629, 0.09001672, 0.024163254, -0.067763746, -0.01090186, 0.0049193725, -0.03503059, 0.048421323, 0.03926607, -0.036520418, 0.07534146, -0.073511034, 0.0724827, -0.0848541, -0.068907544, 0.03714126, -0.04535674, -0.022995146, 0.043931406, -0.0029078424, 0.07718846, 0.06382646, 0.09142941, 0.012706839, -0.10570477, 0.0217209, 0.0005548832, -0.03210619, 0.044744443, -0.083540425, -0.08871507, -0.03417727, 0.04898733, 0.043532584, -0.013630698, -0.057093468, -0.043142587, -0.00717581, -0.043712407, 0.031693283, -0.013364873, -0.086262316, -0.029031219, 0.0079192445, 0.033121776, 0.078301154, -0.07024719, 0.11144456, -0.08167039, 0.052058715, -0.02639674, 0.06248584},
{0.11855607, -0.04564532, 0.014290313, 0.097357444, -0.032523707, -0.012902483, -0.09430619, -0.062870085, -0.10229757, -0.08207335, 0.037118655, -0.09711105, -0.02705767, -0.097604804, 0.0013222714, 0.021705518, -0.05117229, -0.04635691, 0.11451701, 0.02806157, 0.0970409, 0.0004266076, 0.028799491, 0.017012257, -0.07815884, -0.041049547, 0.0027457539, 0.04386868, 0.05316732, 0.01631706, -0.043586083, 0.059366316, -0.015928071, 0.013080135, 0.07663175, 0.014739948, -0.0760223, -0.086260796, -0.0926162, 0.038682446, 0.08979476, -0.02746702, 0.11396989, -0.07187103, -0.09237844, -0.0030669922, 0.026129782, -0.061926827, -0.09332272, 0.09976077, -0.060945913, -0.06807005, -0.086762756, 0.018572284, 0.09826049, 0.061400577, 0.07618886, 0.0834268, -0.061532307, 0.05700572, -0.027642263, -0.091699116, 0.0688281, 0.0995156, -0.041606657, 0.03672175, 0.017768478, -0.028598718, -0.07740877, 0.04554987, 0.09923204, -0.09433741, 0.012741782, -0.070560224, -0.08851608, 0.035820365, 0.09601664, 0.019273445, -0.058110677, 0.121855035, -0.0067827916, 0.009392858, 0.07000872, -0.02399547, 0.095424935, -0.01659968, 0.08038249, -0.03745843, -0.024104407, 0.072887994, 0.0072379443, 0.0880912, -0.057985883, 0.054916356, 0.09449267, -0.05580747, -0.048315715, -0.09078226, -0.091619454, -0.0156423, -0.104945734, 0.035527606, -0.06629778, 0.082418546, -0.011071007, -0.07981662, -0.05951551, 0.08168173, -0.059184253, 0.019223228, 0.11844482, -0.09973324, -0.027964693, 0.03470046, -0.10285002, -0.010061797, -0.04108677, 0.10501954, 0.08630758, -0.007878222, -0.048462708, 0.027339678, 0.116178714, 0.117387004, -0.030200638, -0.019727236, -0.009707542, 0.105888814},
{0.0011573522, -0.007809538, -0.054190084, 0.030672485, 0.00054068223, -0.023868568, -0.09343081, 0.09709394, -0.031128757, 0.041969612, 0.033479482, -0.104330905, -0.014381669, -0.05869385, 0.079626784, -0.02836908, 0.044347174, -0.037944432, -0.065953396, 0.051449496, 0.07979147, 0.00859712, -0.00024480972, -0.035030376, 0.07666727, 0.11411629, -0.023430223, 0.1153835, 0.003681229, -0.088548824, 0.0028027454, -0.01789928, -0.0035490212, -0.043350507, -0.07925784, 0.007476991, -0.026451562, 0.016738987, -0.03390854, 0.040310144, 0.017763268, -0.0942611, 0.032642186, -0.0843039, 0.005337422, -0.08767096, -0.056265764, -0.023312088, 0.022690654, 0.023771213, 0.10705138, 0.08237399, -0.06104018, -0.098624185, 0.009289317, 0.10990921, -0.084698565, 0.015294671, 0.11567364, -0.06643427, -0.050340686, 0.04898924, -0.04503684, -0.079503365, 0.018587634, -0.0146630155, -0.007928676, -0.04051145, 0.09950205, 0.12566367, 0.03977125, 0.0036384168, -0.09320202, 0.06526711, 0.12175238, 0.005613763, 0.049300324, -0.058646407, -0.004215512, 0.0008761241, -0.1285697, 0.009054273, 0.03286109, 0.051626448, -0.021866387, -0.0055063306, 0.028012466, 0.0582868, -0.10389978, 0.061993577, 0.088797174, -0.1208331, 0.088345185, -0.030240824, -0.030902274, -0.09831338, -0.028620072, -0.008086499, -0.06589544, -0.05798398, -0.061468445, -0.05864937, -0.07280366, -0.010731138, 0.047523014, -0.07132433, 0.03446728, 0.091585904, 0.009230393, -0.053320773, 0.058145683, 0.037125573, 0.014605308, 0.06447458, 0.011977315, -0.055547927, 0.06268246, -0.10528734, 0.046144247, -0.055801522, -0.00026145807, -0.06904999, 0.042808555, 0.0013679279, 0.013472833, 0.067568384, 0.072640516, -0.010391282},
{0.07770134, -0.02437159, 0.09173364, 0.051809587, -0.0061093965, -0.016043335, -0.049585782, -0.04466666, 0.039398834, 0.049472094, -0.031493105, 0.048218, -0.051532265, -0.060629636, 0.047877822, -0.076233864, 0.061634578, 0.051771726, -0.06349888, 0.0617182, 0.07113887, 0.0071039377, 0.0071145734, -0.031228216, 0.088515066, -0.035015747, 0.029907666, 0.019653933, -0.04286221, 0.021859791, 0.06936914, 0.026504427, -0.003651385, -0.09699909, 0.057147723, 0.08125516, 0.036233537, 0.04623064, -0.042762373, 0.038684033, 0.0077065425, -0.07156958, 0.032752525, 0.08432424, -0.13713306, 0.029278949, 0.047699496, -0.08264152, -0.007913649, -0.037428766, 0.10208622, -0.0698197, 0.06565587, 0.06339438, 0.09896918, -0.045407366, 0.07473919, -0.08565673, 0.04374414, -0.027460383, -0.08212449, 0.062458593, -0.053910885, 0.08092503, 0.0015551224, -0.013617731, -0.009713731, 0.044143304, 0.114233814, -0.058916178, 0.006061788, 0.056586295, 0.047608525, 0.039303664, -0.071057744, 0.08311698, 0.10389267, 0.069494024, -0.020348273, -0.0046693594, -0.11834599, 0.05209993, -0.024365453, -0.06569113, 0.098952964, -0.014485343, -0.073510714, 0.028898327, 0.058058385, 0.060053192, -0.016599687, 0.008679799, -0.094286695, -0.08415426, -0.06718766, 0.026663125, -0.05014693, -0.05401764, -0.09871813, -0.069955364, 0.0048177093, -0.001758283, 0.038416732, -0.037019692, -0.057591766, 0.061253786, -0.08956655, 0.0805986, -0.07748151, -0.033832967, 0.134861, 0.097014755, 0.104763985, 0.034911096, 0.041225985, 0.056296755, -0.06662446, -0.073054105, -0.039935313, -0.040380947, 0.06488478, -0.0070243855, 0.108307205, -0.0096110515, -0.05150953, -0.034010872, -0.008523064, 0.023923298},
{0.12478696, 0.045757055, 0.082199015, -0.05806033, 0.019579342, -0.093888134, 0.047806714, -0.06294465, -0.016095512, -0.06284439, 0.02370797, -0.14221534, 0.056061532, -0.10779018, -0.06986164, -0.096255064, -0.035495654, -0.0867017, -0.050377987, -0.08342034, 0.046987396, -0.01971567, -0.08549481, 0.005054402, 0.059427597, 0.0048764213, 0.08379407, -0.072218224, -0.059658762, 0.030149963, 0.04593895, 0.063831195, -0.015147702, -0.07490829, -0.0580966, -0.052346535, -0.0070933904, -0.082491875, -0.010611349, 0.09765766, -0.090783164, -0.027071476, 0.09305685, 0.046954475, 0.04120837, 0.084871605, -0.0076552257, -0.03418945, 0.09350583, -0.07485236, 0.003931916, 0.1058522, 0.05481234, 0.07367728, 0.014640681, 0.114813566, -0.038173255, 0.009682395, 0.13609436, -0.07661955, -0.060919363, -0.06854146, 0.07975562, -0.01827357, -0.04363448, 0.08916887, -0.0008664465, 0.049516425, 0.064862825, 0.083462656, -0.08106081, 0.083452225, -0.065143526, 0.039189897, 0.021318663, 0.107330665, 0.025914492, -0.06553218, 0.08228103, 0.09516999, 0.007749442, 0.070644915, -0.07035463, 0.003599221, 0.056428287, -0.054618835, -0.06439979, -0.09806566, -0.097823665, 0.036246225, -0.044769958, -0.1149594, 0.045782477, 0.09256228, -0.05218449, -0.06647291, -0.0906841, -0.05334443, 0.02216439, 0.08115834, 0.09405811, -0.036151342, -0.052476574, 0.03750035, -0.00689864, -0.0325644, -0.0677168, 0.009355785, -0.030257963, 0.018579563, 0.09257943, 0.04822129, 0.10638448, 0.04062824, -0.049991336, 0.049952734, 0.052742448, -0.103412114, -0.016608985, -0.10269051, -0.060681753, -0.08084394, 0.021888977, 0.09400837, -0.03384062, -0.07912913, 0.102109805, -0.008980358},
{0.13479531, -0.019128706, 0.028868033, 0.031316005, -0.032905765, -0.050555862, 0.09154767, -0.07582955, 0.028511092, -0.007171467, 0.0067866934, -0.043064542, 0.0627287, -0.052898098, -0.02344224, -0.04941482, -0.055853292, 0.061027687, 0.06912042, -0.078614496, 0.04092882, 0.02346648, -0.07498633, 0.08455433, 0.07690313, -0.022751234, 0.032993235, -0.015854267, -0.041529886, 0.034362327, -0.13568558, 0.03727313, -0.10164811, -0.107303716, -0.024668613, -0.09378293, -0.00053018273, -0.072305046, 0.041618876, 0.011643456, 0.02295892, -0.05374884, 0.11774912, -0.05140528, -0.06622159, -0.10155806, 0.094248146, -0.06798333, -0.072190866, 0.007429003, 0.042439435, 0.016507141, 0.011568362, -0.0026888119, -0.05204862, 0.1134609, 0.08678206, -0.022488177, 0.01950525, -0.013722643, -0.10841213, -0.0811579, -0.03771724, 0.018604815, 0.077620044, -0.108193874, -0.116644576, -0.0671466, 0.023846515, -0.030378124, -0.0009784675, -0.00043829507, 0.076392785, -0.009904878, 0.041327037, 0.114631474, 0.14090174, 0.034308538, 0.10476844, 0.08022639, -0.019673295, -0.032348067, -0.044725943, 0.022797141, 0.053371407, 0.03783332, -0.085527346, -0.03279612, -0.08193987, 0.08972172, -0.0071294797, -0.03684147, 0.082842454, 0.032567948, -0.009887473, -0.049383394, -0.021871291, -0.030020677, -0.051936366, 0.013255887, -0.07853821, -0.09238572, -0.09117976, 0.008471824, -0.021684472, 0.020299483, -0.12177734, -0.025531225, -0.10119387, -0.014513984, 0.09311704, 0.08209203, 0.039771833, 0.011603526, 0.0946275, 0.029156758, 0.078629926, 0.023283124, 0.08220456, -0.0671589, 0.011948586, -0.11556385, 0.017538685, 0.015624304, 0.06333095, 0.10132617, -0.02346687, -0.09014778},
{0.14120233, -0.020678455, 0.091318734, -0.082519166, 0.06795281, -0.02559527, 0.037058953, -0.061527383, 0.06661153, 0.036588416, -0.0041366415, -0.09368834, 0.10240201, 0.03866678, -0.03108614, -0.058164336, 0.052814387, 0.059912242, 0.07906236, 0.06462597, -0.031056205, -0.038382344, -0.113393575, -0.02010473, -0.0090736905, 0.014350632, 0.051514618, -0.012533185, 0.15317367, 0.051759258, -0.1510416, -0.0941274, -0.0021901873, 0.038396653, -0.04650595, 0.011135012, -0.051261436, -0.10772725, 0.08321846, 0.11861652, 0.0754534, -0.032004602, 0.077407144, 0.021162828, -0.14353368, -0.044359062, 0.04257326, 0.01617726, 0.053078428, 0.04398641, -0.01465671, -0.05106697, -0.051824443, 0.09668485, 0.0585576, 0.05095328, 0.06739783, 0.0369557, 0.10629964, -0.049845897, 0.039700463, 0.042857792, 0.057122853, -0.05670306, 0.01064422, -0.10549444, -0.0690331, -0.06318834, -0.001505637, -0.0016544205, 0.024886578, 0.09227514, 0.08361536, 0.027743328, 0.08421257, 0.08086178, 0.10088909, -0.06705886, -0.044017702, 0.13946392, -0.070257396, 0.07818666, 0.051060833, -0.010089503, -0.057479456, 0.042017683, 0.07722326, 0.076640286, 0.02389139, -0.09832153, 0.048137188, -0.041625876, 0.08188553, 0.11622771, -0.13298963, 0.069407895, 0.00051326305, -0.109104216, -0.049310282, -0.015446022, 0.07619195, 0.071433015, 0.031766757, 0.07982698, 0.036009792, 0.017141623, -0.103393726, 0.009193659, -0.011917949, -0.06991743, 0.007780541, 0.09739435, 0.054645956, 0.023892667, 0.100188866, 0.13985522, -0.056866575, 0.038439408, -0.04734914, 0.019077107, -0.014931085, -0.043243103, 0.06613606, -0.026711019, -0.03195504, 0.06396649, -0.0012488004, -0.057629135},
{0.12302722, -0.034330856, 0.12687424, 0.044431068, -0.018897153, -0.094600655, 0.030121926, 0.04658866, -0.09374629, -0.08376412, 0.14177333, -0.112565234, -0.05609888, 0.06226729, 0.03466821, -0.04415734, -0.08574788, -0.09301257, -0.051320456, 0.007168042, 0.06844388, 0.012401899, 0.017795198, 0.12584797, 0.07942703, 0.034319516, -0.11084592, -0.08105834, 0.11171707, -0.06318769, -0.04390408, 0.06676256, -0.09726905, 0.05980383, -0.053545084, 0.0869033, 0.08030148, 0.016739795, -0.0015778322, 0.06796766, -0.054007187, 0.0360211, 0.08204214, -0.0974525, 0.01948164, -0.05334635, 0.035742864, -0.10304783, -0.019134723, 0.012568547, -0.029185845, -0.101537056, -0.074166685, -0.07507074, -0.00071775913, 0.11002351, 0.012677482, 0.062247023, 0.12292316, -0.06923829, -0.09205705, -0.008614136, 0.036641784, -0.10006417, -0.09238011, -0.117021866, -0.11250499, 0.0804732, 0.11381101, 0.0817427, -0.015419259, 0.07042311, 0.07754268, -0.051466044, 0.02582795, 0.07657586, 0.058987327, 0.010490656, 0.01295668, 0.0002035873, -0.032107115, -0.031536907, -0.07888335, -0.006358632, -0.062014207, -0.002366003, 0.045847476, 0.038790315, -0.042020988, 0.04679298, 0.02709495, -0.08589813, -0.007746212, 0.0021096999, -0.039118942, -0.045986615, 0.09848331, -0.042234603, 0.020000659, -0.057216685, -0.0775743, -0.10960908, -0.10685394, -0.017506838, -0.019093871, 0.117967196, 0.059422906, 0.0073856153, 0.067475185, -0.05155988, 0.14228217, 0.08022334, 0.0861129, -0.075527884, -0.052832052, 0.06828016, -0.03471617, 0.0023778528, 0.08957076, 0.099436745, 0.10345964, -0.13673066, 0.05871803, -0.059076384, 0.10420525, 0.059161585, 0.101089515, 0.06263118},
{0.055126306, 0.046183802, 0.08860626, -0.020072281, 0.025063956, 0.05431457, -0.051610682, -0.040093035, 0.022112027, 0.029204935, 0.068012655, 0.0010155891, -0.039787684, 0.037561912, -0.045666434, 0.06772609, -0.1055205, 0.02208052, 0.12335505, 0.07262978, 0.01193392, 0.0084402235, -0.072602555, 0.05712983, 0.061252568, -0.051353965, -0.020555798, 0.034900445, 0.12186057, -0.047431104, 0.046136416, 0.01021618, -0.10842883, 0.11933924, -0.031656668, 0.029578615, -0.0788803, 0.03918084, 0.011686904, -0.044948354, 0.011793448, -0.028259806, 0.013209875, -0.020118922, -0.12180378, 0.09749372, 0.09956397, -0.05805678, -0.018966474, 0.08286108, 0.00014739264, 0.0601338, -0.0077293166, -0.005565035, -0.0070443675, 0.07047159, 0.032156285, -0.020445324, 0.108768165, -0.0062438836, 0.02740005, -0.009952568, 0.04139846, -0.06840652, -0.043927245, 0.030878995, 0.05434266, -0.012120627, -0.0077543724, -0.02932138, -0.106824994, -0.09312793, 0.06028983, -0.021484295, 0.040591005, 0.07279359, -0.018796569, 0.07364836, 0.05457963, -0.008880827, -0.070499375, -0.0023275241, -0.0277824, -0.019785976, -0.04073366, -0.097546116, 0.0067789, 0.08949617, 0.05041575, 0.090414025, 0.039225716, 0.016280726, -0.09173378, -0.0235599, -0.098759145, 0.039491355, -0.0109099075, -0.11675452, 0.06484285, -0.027743615, 0.05708155, 0.034698736, -0.06786047, -0.0016060024, -0.09192418, 0.05066948, 0.06552192, -0.018540237, -0.07678914, 0.01659674, 0.00039642927, -0.077746615, -0.08465574, -0.04849614, -0.01715798, -0.016897146, 0.039074987, -0.07420561, -0.03144736, 0.018089741, 0.12102199, -0.0015131563, 0.06540813, 0.010049965, 0.039570644, 0.05877005, -0.01806179, -0.07013536},
{0.08429328, -0.1027835, 0.08959019, -0.028919563, -0.05408415, -0.07128379, -0.045772724, -0.10532623, 0.03499621, -0.066589594, 0.16666858, 0.051356617, 0.07749167, 0.035232436, 0.09973486, -0.009907261, 0.040893205, 0.062725574, 0.15575056, -0.0046311, 0.06551128, 0.08300747, -0.056905534, 0.010064224, 0.028556684, -0.0631394, -0.02176471, -0.06561095, 0.09523213, 0.03984142, -0.105223, 0.05594666, 0.03867, -0.02479691, 0.053416584, 0.009260788, -0.026731651, 0.0037610556, 0.04821319, 0.06637436, -0.030205084, -0.07478007, -0.07877951, 0.019673383, 0.034679893, 0.07880395, 0.007272847, -0.11310063, 0.0058227926, 0.07773418, 0.1496963, 0.047001228, 0.057972442, -0.03525439, 0.06403236, -0.024866758, -0.1014238, -0.008905314, 0.015776424, 0.026358506, 0.064497985, -0.047863457, 0.018385679, -0.08534024, -0.029461272, 0.011229954, 0.081258446, 0.012988113, 0.014575352, -0.07850915, -0.007362978, -0.053765833, 0.08013405, 0.09198762, 0.08733232, 0.111936115, -0.0031389329, -0.07123174, 0.16267693, 0.10698534, -0.069967516, -0.031136356, -0.07143964, 0.08288086, -0.103637956, -0.023028176, -0.02116305, -0.0068219, -0.13118586, -0.0017557774, -0.034860842, 0.007252946, -0.085994944, 0.06598192, 0.0043781917, -0.038226113, 0.009377912, -0.11195957, -0.073209286, 0.08337057, -0.06903124, 0.06341022, 0.057207733, 0.06503539, -0.023866307, 0.076572925, -0.030531967, 0.06664502, 0.09214147, -0.11067229, 0.08161771, 0.01479622, -0.030126449, -0.0123789, -0.018106364, 0.108034946, 0.07273462, 0.027646199, -0.07792507, 0.0065787807, 0.12060099, -0.074197546, 0.013760085, 0.046554685, 0.0187269, -0.00041515543, 0.13195378, -0.017158072},
{-0.02874177, 0.025494087, 0.037632123, -0.091351554, -0.042101394, -0.044213627, -0.094809614, -0.06579134, -0.029539503, -0.061357174, 0.079545856, -0.07145016, 0.091540985, -0.072605595, -0.017694034, -0.006065007, 0.009208675, -0.08845308, 0.07574049, 0.11395962, -0.058663372, -0.023278708, -0.032598715, -0.092576966, 0.08021988, -0.05397231, -0.10878507, -0.01015722, -0.015842179, 0.024246149, -0.03607284, -0.06355828, 0.08499557, 0.018554911, 0.077443816, 0.06413736, 0.053436775, -0.002785617, -0.046288975, -0.010056181, 0.050154664, 0.008307055, -0.048257276, -0.091441065, -0.11552878, -0.11080212, 0.06264475, -0.11958339, 0.04828374, 0.009289124, -0.046435367, 0.09571721, -0.06844788, -0.013450264, -0.016860269, 0.026708849, -0.08471894, -0.007310234, 0.02674249, -0.06628562, -0.11203684, -0.09056478, -0.06747279, -0.06276542, -0.06807655, 0.052544493, 0.0076625063, -0.07252441, -0.0050773793, -0.021308057, -0.04866352, 0.012452761, -0.019428425, -0.052531112, -0.021765742, -0.025620038, -0.004559406, -0.08481225, 0.11715818, 0.023252498, -0.07820516, -0.012511268, 0.040599264, -0.056905467, 0.03883402, -0.01785902, 0.054033134, -0.045333333, -0.09399536, -0.086922795, 0.12442567, 0.032889016, 0.10474825, 0.02701522, -0.10627871, 0.039915636, -0.072492726, 0.0245448, -0.09708356, -0.00024983287, -0.04963595, -0.02224789, 0.048247952, -0.090703644, 0.022814073, 0.10812624, -0.027504936, 0.037021227, -0.016984288, -0.0935207, 0.08750982, 0.01734972, -0.04049838, 0.06830789, -0.017898515, 0.119510345, 0.08395305, 0.008213073, -0.06751584, 0.03327921, 0.15013519, 0.02591686, 0.025883008, -0.022376545, -0.0734395, 0.039912928, 0.0022923152, 0.0021788583},
{0.07078037, -0.029427793, 0.053646736, -0.081228025, 0.07237597, -0.053204667, -0.032259386, -0.06507285, 0.01994446, 0.09041816, -0.038672555, -0.09894791, 0.018678356, -0.0061759, 0.0117685525, -0.045043137, -0.07143637, -0.023558877, -0.031870443, 0.019783745, 0.06463025, -0.063715644, -0.14237502, 0.127521, 0.02685304, -0.022152515, 0.09802122, -0.015462843, 0.07716471, 0.0021197756, 0.04264475, 0.08282279, -0.08890718, -0.043385, -0.085177615, -0.02313437, 0.06749918, -0.12623648, -0.0888646, -0.031754956, -0.05729462, 0.07759699, 0.15442032, -0.07714894, -0.115850426, -0.0013767594, 0.102128446, 0.014667021, -0.1025704, -0.015345428, 0.013666149, 0.0590958, -0.014227255, 0.08800915, 0.09834418, 0.051953953, 0.10317689, -0.059616823, -0.025161117, 0.057980817, 0.023679169, 0.07150561, -0.10869144, 0.0005475506, 0.0069156885, 0.05779222, 0.090696834, -0.025927372, 0.054930493, 0.0018768577, -0.09053504, -0.047799263, 0.04133843, -0.106502466, -0.014032215, -0.024883362, 3.3629796e-05, -0.021448098, 0.028114142, 0.0476038, 0.047084346, -0.071908675, -0.081094556, -0.0498726, -0.045497943, 0.033125997, -0.005799833, -0.053616274, 0.009788122, 0.020934708, 0.06329099, -0.07155302, 0.054864526, 0.017489271, 0.038272735, 0.061122715, -0.08481172, -0.08075301, -0.015009514, 0.025607958, -0.0060639605, 0.068599254, 0.0032733958, -0.025633112, -0.14819686, 0.015637482, -0.031087624, 0.055855405, 0.056428924, -0.07536041, 0.1560142, -0.07200978, -0.0020420363, 0.09616747, 0.027737617, -0.09781088, 0.022854825, -0.074109584, -0.09806657, -0.0024927557, -0.06649666, 0.023617212, 0.095758535, -0.022917725, -0.002371803, 0.12799008, 0.0072040055, -0.041954536},
{0.022921314, -0.045457553, 0.031130416, 0.10520122, -0.028749594, 0.050187334, 0.0690024, -0.036868393, -0.04391779, 0.022937775, 0.011654819, -0.05187252, 0.045528002, -0.008197305, -0.086121194, 0.006031345, 0.08576124, -0.045601252, 0.09604975, 0.13000806, -0.08855615, 0.018117143, -0.041654196, -0.03302069, 0.010614826, 0.08133392, -0.052481137, 0.066924825, 0.022930553, -0.027591873, -0.08202043, 0.07149592, -0.085243784, -0.0360475, 0.05369927, 0.010182321, -0.04586432, -0.009711382, 0.026264066, 0.0077249813, -0.025625324, -0.09863232, 0.009371193, 0.0789739, 0.023556009, 0.018718833, 0.0724545, 0.029498741, -0.044700384, -0.033874046, 0.071239956, -0.06796107, 0.02755111, 0.009949719, 0.09262811, -0.021545768, -0.06652831, -0.09574596, 0.1213599, 0.08621042, 0.09991932, 0.003215786, -0.0069941687, 0.023602128, 0.07899955, 0.0936211, -0.07672288, 0.09673935, 0.0042618355, -0.005152503, -0.09769087, 0.023721261, 0.08612542, 0.06890308, -0.037388112, -0.056841753, -0.010496621, 0.049778044, -0.024651427, 0.102667764, -0.093367204, -0.10552871, -0.10527277, -0.05434134, -0.06107217, -0.10722505, 0.025642117, 0.071975164, 0.12657139, -0.08348099, -0.007895291, 0.022710504, 0.0017207563, 0.086386494, -0.009805149, -0.10097809, -0.0040370002, -0.095936045, 0.006075971, 0.09350842, -0.094572015, 0.05791535, -0.11086793, 0.04884781, -0.033656307, 0.02723429, 0.0015049458, 0.084402345, -0.069269136, -0.056754693, 0.078888655, 0.0471493, 0.085254535, -0.046993494, -0.027629323, -0.050641704, 0.036472924, 0.05044, -0.07156747, -0.04609684, 0.041090097, -0.039164897, 0.02178816, -0.04801227, -0.053610425, 0.06778657, -0.06100279, 0.060194537},
{0.015215452, -0.016346553, 0.12440094, -0.020081265, 0.04700022, 0.06880835, -0.11049313, -0.056023326, 0.06934671, -0.10119761, -0.010209669, -0.10065879, 0.07955103, 0.07154451, -0.046001274, -0.019801075, 0.026221389, -0.08415536, 0.004604468, 0.09111537, -0.06855812, 0.057425946, 0.09937532, 0.12710185, -0.028397117, 0.094383165, -0.044234183, 0.06069421, -0.01706356, 0.082456924, -0.065218836, -0.08966364, 0.045129523, 0.070719175, -0.03795555, -0.07042731, 0.083881885, -0.08773173, -0.028717222, 0.06213558, -0.003267046, 0.10544482, -0.057963055, 1.8669534e-05, 0.0083974125, 0.039345436, -0.06108284, 0.099546954, 0.0730906, -0.008519519, 0.019365221, 0.050386757, -0.044858187, -0.05999116, 0.09573294, 0.047149982, -0.033174083, 0.09584835, 0.07054641, 0.04093331, 0.0067413333, 0.013910967, 0.027232444, -0.0376606, 0.059038997, 0.0036210301, -0.062943086, -0.09466717, -0.043727387, 0.07255164, 0.07456067, -0.058791853, 0.024594024, -0.107410625, -0.10881238, -0.07132486, 0.04912167, 0.02901338, -0.06719411, 0.018025557, 0.10042651, -0.022106558, -0.021271471, -0.013746419, -0.043995492, 0.01168463, -0.0010451311, 0.0229054, 0.091819376, 0.032589067, 0.060413316, 0.0018924554, -0.07446161, -0.025693271, -0.042250637, 0.06436212, 0.016988337, -0.0056798523, -0.014554327, -0.096359566, -0.058185853, 0.06686251, 0.09541956, -0.016350813, -0.016983261, 0.040116295, 0.060850296, 0.015309663, 0.023196248, -0.072555065, 0.08097244, -0.07492201, 0.101542555, -0.07411684, -0.011058748, -0.07510474, 0.03353303, 0.047952637, -0.0770148, -0.06243779, 0.072991215, 0.09700716, -0.01475507, -0.11309984, 0.07276787, -0.003948166, 0.058224883, 0.057481147},
{0.018194249, -0.013788599, -0.049385473, 0.026582746, 0.074781336, -0.05488931, 0.018706696, -0.007830419, -0.05343979, 0.053346872, 0.06813165, 0.0042864014, -0.11195147, -0.028222503, -0.027577568, 0.031439472, 0.09165974, -0.014768329, -0.0024181728, 0.030124618, -0.091291, 0.02804892, 0.03604196, -0.029417243, -0.02474867, -0.033109706, -0.11085275, 0.015426245, 0.11877089, 0.09797461, -0.073369294, -0.069966964, -0.0054993695, 0.0019076123, 0.090955004, -0.013899021, -0.0075706528, -0.09807349, 0.05241809, 0.06330462, 0.04862421, 0.01198557, 0.05368127, -0.03612442, 0.088983625, 0.025494628, -0.0070100054, -0.03971183, -0.07018998, 0.048135944, 0.047776178, -0.035727292, 0.041444488, -0.08565503, 0.07476255, -0.07790472, 0.03434545, -0.10119583, -0.060749173, 0.0005183481, 0.09054867, -0.06452779, -0.032670286, 0.037112176, -0.051206477, -0.003933531, -0.031479057, 0.07442145, 0.105271615, -0.027585687, -0.005226766, 0.06490743, 0.052018702, -0.008929109, 0.02109408, 0.038712572, 0.03402573, -0.013538405, -0.09626437, 0.013615679, 0.1214598, 0.06852794, 0.05981473, -0.024747645, 0.014570089, 0.018944714, -0.0710612, -0.058864772, 0.08021986, -0.057274584, 0.02713623, -0.07028699, -0.065006815, 0.10097798, -0.027165264, 0.022506371, 0.06348018, 0.06914783, -0.10300645, -0.0074291304, -0.07181296, -0.044315703, -0.012315169, -0.06176601, 0.040485416, -0.026468566, 0.08317185, 0.0605897, -0.07612211, -0.047425747, -0.045675118, 0.083330855, -0.0059536616, 0.05568749, 0.06262462, -0.072560586, -0.0032991173, -0.00056724995, -0.06801045, -0.051580515, 0.08706163, 0.05042918, 0.072968535, 0.060238022, -0.06659813, 0.07246336, 0.046090625, -0.067033194},
{-0.041498814, -0.05890668, 0.049223147, -0.05044889, -0.022454781, -0.043860048, 0.0648841, -0.09319157, -0.0073489696, -0.08902368, -0.055781312, -0.07379911, -0.035026174, 0.053949405, 0.032569136, -0.04654161, 0.025109041, -0.058432236, 0.004005037, 0.05739402, 0.0844995, -0.04323187, -0.06528057, 0.11012317, -0.07672827, 0.012116364, -0.05100604, 0.04735513, -0.012082047, 0.06404838, -0.1149388, -0.09962303, -0.005193809, -0.10675248, 0.019200284, 0.06504588, -0.0983824, -0.11811254, 0.03114477, -0.012553725, 0.10624946, -0.04264234, 0.10949267, -0.017427053, 0.07957356, 0.03800118, -0.032837547, -0.060811173, 0.04714085, -0.011538996, 0.010476111, 0.093685806, 0.04173117, 0.0011537661, -0.09155786, -0.05570789, -0.033042137, 0.019580975, 0.013078344, -0.053498507, -0.054405846, 0.054189283, 0.093519345, 0.07102223, 0.01006002, -0.08582186, 0.055504262, -0.02036494, 0.0088788625, -0.068120636, -0.06261891, 0.033557713, -0.06028385, 0.041280583, 0.02833649, 0.014218269, 0.14065088, 0.102021724, -0.04157453, 0.07788963, 0.021774236, 0.09729168, -0.09730201, 0.092653565, -0.058910713, -0.10644055, -0.074685454, 0.08025259, -0.05872406, 0.0040553426, -0.018319545, 0.005859441, -0.098834805, 0.04964977, -0.058044244, -0.010103069, -0.074775085, 0.012336969, -0.037394583, -0.09849637, -0.047221273, -0.06021723, -0.0817842, 0.032336205, 0.07563523, -0.025365256, -0.016425686, -0.09561269, -0.097437344, -0.060099326, 0.06846337, -0.053673558, 0.07417083, -0.05869811, 0.067765445, -0.04091521, -0.040997006, 0.08744675, 0.088613644, -0.09741685, 0.08658944, 0.08021276, 0.06861709, -0.011314505, 0.098144695, 0.016794827, 0.025475357, 0.033575833},
{0.12530807, -0.0373629, 0.052435856, -0.04027221, 0.090460196, -0.004733816, -0.10429455, -0.035357215, 0.048476055, -0.05608592, -0.050129227, -0.10971424, 0.023792595, -0.0815895, -0.03127639, 0.04821026, -0.03505323, 0.09608368, 0.055979535, 0.036432747, -0.10492563, 0.023244467, -0.119238585, 0.033025682, 0.044829413, 0.10432389, 0.041949224, -0.008416066, -0.0047753644, 0.019322729, -0.039238766, -0.024438107, 0.059448496, 0.03936242, 0.07396649, 0.077204384, -0.03340796, 0.0032226092, 0.0339133, -0.041847017, -0.051144082, -0.06857546, 0.08644141, 0.05007497, -0.058454067, 0.09872863, 0.08640449, 0.074592285, 0.09059106, 0.022709707, 0.12732698, -0.03694144, -0.09018843, -0.10116796, 0.016463913, 0.11742711, -0.09984237, 0.009105764, -0.01148296, 0.0039105467, 0.03261591, -0.087071925, -0.06545679, -0.10576437, -0.015511848, 0.03845308, 0.0028395148, 0.01581078, -0.045351267, -0.046840563, -0.07719723, 0.09349773, 0.034732938, 0.010268383, 0.10392243, 0.00056977855, 0.17144798, -0.0055224076, 0.12936375, -0.012426292, -0.040836334, 0.10199045, -0.009743785, 0.085177, 0.09447839, 0.06814216, 0.08395701, 0.044557534, 0.078249946, -0.021168742, 0.09104387, 0.033826925, -0.08761251, 0.040028643, -0.026892455, 0.08945875, -0.061678883, 0.036231894, 0.017632313, -0.0046532974, -0.015001759, 0.07672877, 0.00951557, 0.037888274, -0.00592098, -0.012131764, -0.08463002, -0.028188772, 0.03663201, -0.10818817, 0.013517947, 0.061948135, 0.1358417, -0.07488019, 0.0015567988, -0.093581684, -0.08495423, 0.03608857, 0.04338377, 0.10655357, 0.059474558, -0.062072095, 0.033096313, 0.06950091, 0.042814583, -0.0268677, -0.05330509, 0.06988324},
{0.025464844, 0.0017729849, 0.10172052, 0.08628806, -0.016895117, -0.049109697, -0.03200158, 0.013040014, 0.015916362, -0.020588085, -0.036550395, -0.018169027, -0.028245918, -0.088512905, 0.064336, -0.08305333, -0.087414965, 0.06662677, -0.04199918, 0.13448983, -0.0021981874, -0.027134895, -0.027400898, 0.052814037, -0.033835907, -0.040057883, 0.1000289, -0.0061137085, 0.06982086, 0.04469949, -0.05036406, -7.8260804e-05, -0.021661233, -0.08567061, -0.0050422917, -0.079664476, -0.0820609, -0.044469528, -0.024963565, 0.032743603, 0.11693288, 0.016668253, 0.15495521, -0.05250144, 0.024166845, -0.08979249, 0.016863719, -0.00010776761, -0.07579679, 0.042391714, 0.0033645642, 0.05899495, -0.015099512, 0.07335342, 0.03273326, 0.03058484, -0.09481095, 0.06807612, 0.11391834, -0.0101844845, -0.0910437, 0.0923177, -0.01959118, 0.056842417, -0.073688015, -0.020598635, -0.102305904, -0.05284758, 0.062104035, 0.07343763, 0.008870082, -0.0032240627, -0.10391628, -0.003204382, 0.0034154803, -0.11565686, 0.18515666, 0.034884796, 0.1061685, 0.026782336, -0.108968325, -0.052098483, 0.026556872, -0.07011272, -0.028747965, 0.068436675, -0.059439667, -0.16022505, 0.014515684, -0.0057946765, 0.010441588, -0.04182661, -0.0135441795, -0.0012931555, -0.060299993, -0.10266185, -0.012958527, -0.014040257, -0.03213731, -0.054899603, -0.021890834, 0.005129754, -0.029359234, -0.07648916, -0.08761997, -0.11669696, -0.0062690503, -0.058230035, -0.06394087, -0.01788417, 0.12686953, 0.011142641, 0.12593447, -0.102365375, -0.05306562, -0.097561784, -0.0019050703, 0.07195808, -0.05699416, -0.09672488, -0.01895408, 0.031730298, 0.05835869, 0.059591763, -0.08374661, 0.11368371, 0.0875356, -0.021464318},
{0.07518473, 0.0023461136, -0.020389289, -0.08782558, -0.10957174, -0.04624509, 0.002268126, -0.026884064, -0.050938927, -0.10653756, -0.052526806, -0.12926513, -0.0005858467, -0.112768784, -0.086712226, -0.0724469, -0.09281549, -0.06408809, 0.098149315, -0.01312456, 0.058547784, 0.08219398, -0.112417266, 0.14954387, 0.07373346, 0.042253055, 0.006712865, 0.042402066, -0.010203775, -0.06411731, -0.111428395, -0.047424935, 0.08205408, 0.049746487, 0.09579141, -0.056388702, 0.034638863, -0.06856571, -0.037919484, 0.12554576, -0.029871754, 0.0051295385, 0.014022053, -0.04414511, -0.050758574, -0.044308044, 0.035644174, 0.030078616, -0.065384746, 0.077761546, -0.06263094, 0.0025674254, -0.050238363, -0.0043119085, 0.056403667, 0.052350797, 0.07550013, 0.05903183, 0.071506664, -0.01686913, 0.0403836, -0.019652331, 0.036930308, 0.03361392, -0.048557088, -0.07288347, -0.052915134, 0.013813376, 0.0029441658, 0.012510339, -0.054384258, -0.07878586, -0.033616684, -0.1202569, -0.043900445, 0.02560256, -0.031478927, 0.07393558, 0.09729595, 0.13621296, 0.038688317, 0.0668547, 0.037699685, -0.0016128293, 0.009633722, -0.10329577, 0.07779425, 0.042631634, 0.07969007, -0.026723953, 0.03284133, -0.0127471415, 0.07506564, 0.11511081, -0.06259374, 0.043219686, -0.035044678, -0.009299768, 0.04340949, 0.0934979, -0.0075826943, 0.022326766, 0.06683519, 0.020233974, 0.036179032, 0.04799581, 0.07443418, -0.035234056, -0.10371969, 0.03847415, 0.1511717, -0.074992955, 0.12454202, -0.078913465, 0.05773422, -0.043995693, 0.06903725, 0.020677999, 0.030986333, 0.027867645, 0.004494338, -0.0750868, 0.12073252, -0.06392768, 0.002875559, -0.052493367, -0.030392073, 0.03028547},
{0.054910604, 0.013732496, 0.046782743, 0.035932213, 0.06750047, -0.0002073124, -0.106908776, 0.06291367, 0.038726985, -0.008547492, -0.08656839, -0.062047876, -0.05930704, 0.05912689, 0.0866428, 0.05290817, -0.049173813, 0.06766426, -0.039672192, -0.033164646, 0.0591938, 0.08846351, 0.05170554, 0.08503833, -0.012739764, 0.07772712, 0.098882616, -0.040585566, -0.016344128, 0.07678331, 0.043996315, -0.09807183, 0.038076717, 0.029741712, 0.08894749, 0.070609465, 0.045432612, 0.14785175, 0.10912721, -0.032849677, 0.04186283, 0.051829487, -0.08044773, -0.076337345, -0.08207378, -0.013901173, 0.091194496, 0.020236177, 0.04247524, 0.12603617, -0.034416016, -0.022818014, 0.09052808, -0.09998613, -0.096134536, -0.11161392, 0.10132636, -0.08687861, 0.11931695, -0.024973309, -0.08846217, 0.06857876, 0.10676121, -0.08723229, 0.031592384, -0.09259717, 0.0050493474, 0.041806832, 0.0110070035, 0.069006614, -0.035640735, 0.07772278, 0.0956326, 0.0029317695, -0.09498893, -0.050679386, -0.088059925, 0.03844212, -0.05983571, 0.019043619, -0.060459588, 0.00033240765, 0.1393623, 0.08000902, -0.026927011, -0.11031956, -0.10049963, 0.113293074, -0.10012525, 0.07292839, 0.04641014, -0.048402544, -0.08483343, -0.114554405, 0.053167988, 0.045357406, 0.048667237, -0.08553252, 0.048589095, 0.09145863, 0.031895116, 0.024346732, 0.062407393, 0.09031026, -0.020779895, 0.1300837, -0.05197787, -0.08934421, 0.10046612, 0.070426315, 0.026771573, 0.09821986, -0.036359858, -0.08617434, 0.026039913, 0.03873007, -0.038370978, 0.035663083, 0.028702442, -0.03787645, 0.016796527, -0.027563492, 0.04876397, 0.0052142367, -0.005886741, -0.0057638455, 0.016698355, -0.09475238},
{0.01008899, 0.019291973, -0.06431713, 0.0809315, 0.019107, 0.039577484, -0.04780113, 0.10047561, 0.04990363, 0.08760962, -0.03723301, 0.037778284, -0.01712516, 0.031072289, 0.10858041, -0.04521403, -0.08403913, 0.03248445, 0.13474266, 0.049638797, -0.003353939, 0.0018048502, -0.04673636, 0.09364361, 0.08429301, 0.08811754, -0.063266225, -0.08593717, 0.047667157, 0.012090242, 0.060961302, 0.073506415, -0.026234983, -0.093852475, -0.11004348, -0.100529194, 0.013631615, 0.041471988, 0.09192672, -0.011407458, 0.071324095, 0.08641259, -0.04706644, -0.025566692, -0.08030122, -0.026587082, -0.09293897, 0.005753605, 0.046181366, 0.07629644, 0.084219195, -0.02362056, -0.11495229, 0.043633725, 0.077866375, -0.088848606, 0.07800185, -0.09914906, 0.102171294, 0.05434572, -0.07448546, 0.003553653, 0.09874976, -0.087631114, -0.08003262, -0.03949448, 0.055590913, -0.066795945, -0.07120672, 0.077703804, 0.081987806, 0.06588995, -0.09830784, 0.019406898, -0.07720184, 0.116818324, -0.0922462, -0.093741484, 0.06172797, -0.05551169, -0.07562233, -0.065437734, 0.047541294, -0.0011446341, 0.049061894, 0.09705734, -0.102251224, 0.024315935, -0.050552525, -0.07903528, 0.11173841, 0.03140575, 0.10283989, -0.023070462, 0.077604845, -0.052253265, 0.0072569177, 0.07791202, -0.03461734, 0.01025109, 0.10256377, -0.064514525, 0.02923675, 0.057562545, -0.101692386, -0.058946524, -0.006266398, -0.050869647, -0.01789749, -0.019727604, 0.016202476, -0.02939979, 0.06539295, 0.07621755, 0.083753675, -0.033799693, 0.00011948847, 0.022201315, 0.056681734, -0.044698276, 0.081365556, -0.077513754, 0.09426899, -0.07625541, -0.04275465, 0.020441137, -0.05902256, 0.060519516},
{0.057427328, 0.06967108, -0.07069981, -0.079414785, 0.026293807, 0.06828791, 0.040902633, 0.08360316, 0.098900124, 0.01683119, 0.09929475, 0.08484549, 0.08502741, 0.087325804, 0.1016273, 0.06620917, 0.058518324, -0.019367944, -0.0022716476, -0.07516384, -0.0769884, 0.06901766, -0.0071469992, 0.0098228725, 0.048680663, 0.11908642, 0.013283114, 0.09018881, 0.13382071, -0.07454833, 0.026584063, -0.08284095, -0.014673848, 0.032797255, -0.07914385, -0.072286755, -0.105222635, 0.09236739, -0.003968243, -0.05286161, 0.08872335, 0.021695614, -0.026183525, 0.060460906, -0.033070344, -0.08578605, -0.021143869, 0.040517393, 0.04532747, -0.06416824, -0.035547473, -0.016647562, 0.0127768405, -0.012544854, -0.015657276, 0.021763887, 0.048470844, 0.08394335, 0.035786197, 0.017248588, -0.02167037, 0.03391821, -0.0867824, -0.0653334, -0.061591405, 0.04869675, -0.061314657, -0.09604118, 0.06168824, 0.08188691, -0.05855074, 0.047794696, -0.052849792, 0.06474767, 0.06394674, 0.013885258, 0.09783727, -0.05073822, 0.104635395, -0.048365943, -0.04719337, -0.09904885, -0.039545733, -0.010161123, -0.068579555, -0.01940242, 0.0064230487, -0.06089043, -0.015605131, 0.06573324, 0.09453187, -0.078865714, -0.0092292875, 0.10374909, 0.050147343, -0.07605852, -0.014950164, -0.12353285, 0.08377035, -0.08167743, 0.070194095, 0.054092996, -0.07327987, -0.06974429, 0.055577654, -0.032463502, 0.02729948, -0.0918227, -0.0054439805, -0.10707592, 0.040824465, -0.07221163, 0.0090257395, -0.07728764, 0.03225325, 0.046933804, -0.050335255, -0.0072672367, 0.04309048, 0.056522846, 0.07295824, 0.011346937, 0.08342437, 0.093313165, 0.052259445, 0.058186993, 0.052520104, -0.012429249},
{0.043219488, -0.04167477, -0.058990426, 0.09371713, 0.056965478, 0.060300544, 0.044995073, -0.0684232, -0.105479255, 0.020928144, 0.07459957, -0.09799896, 0.10117197, 0.05401941, 0.09114787, -0.10013915, 0.0041553397, 0.03411415, 0.06991644, 0.017143063, -0.008598274, 0.022948753, -0.040640473, -0.011235727, 0.023501143, -0.0431201, -0.07965703, 0.1077914, -0.05654816, 0.010350894, 0.028624821, 0.07849989, -0.07281867, -0.040170237, -0.020436065, 0.023174232, 0.07070708, 0.00036870863, 0.037391946, 0.057680007, -0.064139575, -0.031743027, 0.044054314, 0.061167963, 0.050358336, 0.096963875, -0.050926853, 0.013607222, 0.09430978, 0.10484486, -0.032216076, -0.095527865, 0.05691545, -0.09769631, -0.04670224, 0.089640215, 0.086222194, 0.026394993, 0.12531173, -0.031946287, 0.093769684, 0.079803675, -0.038495336, -0.03023281, 0.0035865605, -0.014172667, 0.082311295, -0.09117328, -0.05874097, 0.08538892, -0.106387496, -0.10648883, -0.0010380968, -0.038414847, -0.07662579, 4.7974798e-05, 0.068723954, -0.06512886, 0.023293277, 0.07543783, 0.01779878, 0.054523483, -0.058381025, -0.11550378, 0.08435788, -0.09663341, 0.05136054, -0.064801455, -0.0338217, -0.0018499122, 0.10863761, 0.004181334, -0.06645832, 0.011951342, -0.06667978, -0.06605777, -0.0015903264, -0.08027384, -0.025646774, 0.05886805, -0.027677663, 0.0630506, 0.022219326, 0.06643169, -0.09746409, 0.018391564, -0.123489395, 0.100527205, 0.047283825, -0.08795123, 0.098957025, 0.0037783235, 0.057771318, 0.063614964, -0.07052475, 0.043357816, -0.02971525, 0.10552679, 0.073027246, 0.08495097, 0.1309142, 0.02356657, -0.0110949185, 0.063704215, 0.064283445, -0.0117286835, 0.07412959, -0.008561509},
{-0.06081069, -0.030695014, 0.10407355, 0.037560064, -0.01759668, -0.06237301, -0.041099604, -0.0036085472, 0.08726759, -0.047485366, -0.07767526, 0.0689807, -0.050917428, -0.07517988, 0.07404997, 0.0055706445, 0.05523165, -0.0435801, 0.072708234, -0.08206586, -0.029827356, -0.018876202, -0.046467703, 0.07162501, -0.047585454, 0.07061536, -0.034615893, 0.093047716, -0.06364553, -0.07826412, -0.03655756, -0.086718366, -0.075026765, 0.040673845, 0.010859741, -0.036233306, 0.046166357, -0.013949378, 0.046564173, -0.035981365, 0.059827767, -0.080864996, -0.01887255, 0.09127717, 0.016956696, -0.06291321, -0.035959154, -0.09651177, 0.072647855, 0.0698614, 0.04207159, -0.00394395, -0.06893056, 0.05194017, -0.024910249, 0.08185728, -0.02063166, -0.009643711, 0.08042369, 0.0011886775, 0.03736215, -0.06695195, 0.10327508, 0.04941629, -0.026782148, -0.092545755, 0.06497422, -0.07625262, 0.046217356, 0.09313103, 0.019114751, -0.086955905, -0.08367486, 0.06290416, 0.1241647, 0.09407265, -0.05831901, -0.06239583, 0.02223912, -0.0041254982, 0.06696929, -0.10215376, 0.09195632, 0.06827023, 0.037576705, -0.0766092, 0.08981959, 0.021078276, -0.0067874026, -0.102383144, 0.122567326, -0.014068184, 0.08169614, -0.019577213, 0.05460018, 0.02110453, 0.057830364, 0.044114858, -0.07492677, 0.03786497, 0.07214877, -0.018350562, 0.02335301, 0.036311135, 0.06993338, 0.0036527598, -0.011442728, 0.027800271, -0.0237535, 0.013200662, -0.058837175, 0.00872761, 0.015592546, 0.048846763, -0.03854925, 0.114076614, -0.045547333, -0.090769246, -0.11212356, 0.067445666, 0.09729738, -0.026610762, 0.091031365, 0.07172467, -0.10457436, 0.016466724, 0.0599148, 0.050278157},
{0.0020458477, 0.0944196, -0.02150037, -0.010569729, -0.04140701, 0.01837711, 0.0048500053, 0.10354163, -0.05430595, 0.0488787, 0.09201946, -0.12834594, -0.038917053, -0.116269976, -0.06077048, -0.09622474, 0.067183085, -0.06656421, 0.13642724, -0.014141635, -0.021994416, 0.071034074, -0.11010892, 0.1156035, -0.0647794, 0.072362505, -0.03618828, 0.10308016, 0.054362647, 0.03733805, -0.1086984, 0.0028808976, -0.1090017, -0.040476803, 0.04346745, -0.059249274, -0.034572676, 0.023501275, -0.074146636, 0.13892248, -0.02034486, 0.07526696, 0.029670756, 0.06083901, -0.13911995, -0.10373469, -0.089076646, -0.026591184, 0.032331824, 0.07256516, 0.120787084, -0.042255893, -0.0923146, -0.025230391, -0.027379818, 0.07502511, -0.043481186, 0.09359753, 0.048055045, -0.03714471, -0.0815822, -0.0806043, -0.045179073, -0.081979215, -0.024061494, -0.0061420053, 0.0954722, 0.013575032, 0.02270461, -0.006144731, -0.07043401, -0.07026978, 0.07799201, 0.06429988, 0.12462527, 0.032519404, -0.03949587, 0.09020166, 0.07520912, -0.002166349, -0.124756955, 0.051840648, 0.113540284, 0.07096927, 0.022111904, 0.07717724, 0.00018683687, 0.061928276, -0.030223345, -0.06671763, 0.062620185, -0.06621938, 0.10295135, -0.074222386, -0.12024449, -0.09368311, -0.024965778, -0.03044208, -0.013741877, 0.08983919, 0.06557079, 0.018317448, 0.022774983, 0.065702036, -0.062492356, 0.017267715, 0.009139347, -0.0032741164, -0.0019020512, 0.09506661, 0.13666408, 0.05151692, -0.014228358, 0.101542585, -0.096226536, -0.042570423, 0.0065884306, 0.092238024, -0.08637429, -0.060837172, -0.044275198, 0.058549125, 0.053624563, -0.019803647, 0.09811962, 0.061444025, -0.03893976, 0.045756403},
{-0.0005831688, -0.03563904, 0.088638335, -0.03186364, -0.015860977, -0.035937168, -0.03793744, -0.08690276, 0.020965397, -0.084211715, 0.10569155, -0.048282843, -0.007301863, 0.023634927, 0.12841201, -0.085315675, -0.07335095, -0.008620178, -0.0027342297, 0.035405457, 0.06722314, 0.033349704, 0.013345132, 0.083854854, -0.08214711, 0.09247141, -0.027582504, 0.029374696, 0.031361587, -0.0104289055, -0.13772018, -0.10256606, -0.00960982, 0.012126687, 0.04511385, 0.044895303, 0.019794105, 0.044902112, -0.0013161902, 0.050010417, -0.015501827, 0.07326849, 0.065345034, 0.038628094, 0.029595938, 0.02703173, 0.012252562, -0.068524756, -0.048994817, -0.0068736267, 0.124351285, 0.008841753, 0.058402166, -0.07780667, 0.051942125, -0.0152583085, 0.008941433, 0.006936349, 0.12123921, -0.029301789, -0.046255503, 0.02669351, 0.0007909114, -0.049218755, -0.04568178, -0.011261115, 0.044501983, -0.09306081, -0.012972786, -0.021864038, 0.09208812, 0.060951877, 0.085975975, -0.059361324, 0.02319552, 0.063234694, 0.05346025, -0.07728662, 0.14546566, 0.12779057, -0.020171225, -0.07129784, 0.062450584, -0.04845705, 0.017310102, -0.09554709, -0.09431931, -0.051629994, -0.03455136, 0.053140517, 0.07770401, 0.057688408, 0.0653556, 0.08649297, 0.003049399, -0.050984826, 0.033037305, -0.0653308, -0.092788145, 0.069520995, -0.09492432, -0.10324914, 0.029078964, 0.060507223, -0.05184, 0.065159164, -0.075799525, 0.076340966, -0.04297761, -0.034682743, -0.04600195, -0.0016637743, 0.09615028, -0.102203034, -0.022204258, -0.04775165, 0.045484513, -0.009725317, -0.06415159, 0.1024261, 0.08112424, -0.064423315, -0.032445796, -0.057620022, 0.06533238, 0.036625072, 0.048528824, -0.017189546},
{-0.019395657, 0.0126907695, -0.0058148922, 0.062475976, 0.003266995, -0.0073300377, -0.05573971, -0.032849565, 0.08096321, 0.09202388, 0.11070222, 0.03125659, 0.10953639, -0.09838865, -0.0072630425, -0.13088648, -0.05333019, 0.09874397, 0.007951599, 0.1029481, -0.031214507, 0.07703839, -0.09769903, 0.057558898, -0.06623282, -0.089286625, 0.028167767, -0.020800482, -0.06077138, 0.07740436, 0.038576815, -0.012215429, 0.08935872, 0.07553977, 0.09262116, -0.0593368, 0.0031435722, 0.03838369, -0.08998686, 0.08118961, -0.04949742, -0.010815747, -0.07408009, 0.022104459, 0.037318893, 0.093801826, -0.02217836, 0.057511955, -0.08070384, 0.080912836, 0.01053845, -0.001051411, -0.12550141, -0.10626772, 0.08600475, 0.002271086, 0.042321824, -0.03861119, 0.10815948, -0.09638202, 0.020639976, -0.058437906, 0.037142456, -0.04044921, 0.07606037, 0.077633105, -0.07997348, 0.061838493, 0.03603433, 0.0032741274, 0.012904052, 0.090572506, 0.07183701, -0.025657373, 0.08747169, -0.016309608, -0.07320052, 0.07037282, 0.00010602224, 0.13532726, -0.06369636, 0.0623004, 0.061874863, -0.010877726, -0.11383959, 0.035899922, -0.10434927, -0.024306167, -0.09380588, -0.059496652, 0.08960411, 0.0023017873, 0.050455317, -0.04947382, 0.0015777164, 0.005243145, -0.0043006837, -0.020431647, 0.057277218, 0.021669105, -0.02244708, 0.07019693, 0.04619287, -0.041953884, -0.14139664, -0.06393723, -0.14160208, 0.08838332, 0.022899069, 0.023630967, 0.1493867, 0.1030599, -0.0329094, -0.08312965, -0.023618579, -0.059169367, 0.014336502, -0.030553684, -0.069270656, -0.10181805, -0.004719304, -0.072554775, 0.046335243, 0.0045109205, 0.084558025, 0.019160204, 0.10793879, -0.08017361},
{0.13577764, -0.097442456, -0.02818149, -0.12876308, 0.04432274, 0.06599657, -0.0042927805, -0.006078601, 0.09676796, -0.05230191, -0.018911479, -0.015775546, -0.07383271, -0.06396421, 0.12931006, -0.05276781, -0.022964073, 0.06632294, -0.02886735, -0.07588073, 0.028500004, 0.048363782, -0.09248031, -0.09242497, -0.09622799, -0.075426325, 0.020384405, -0.041416705, 0.08698285, -0.057251867, 0.03226635, 0.00666866, -0.016807472, 0.099624254, -0.06891419, -0.025650427, -0.09556614, -0.037045363, -0.04538235, -0.027467739, 0.04255958, -0.008176371, 0.094016515, -0.07647694, 0.058676757, 0.06713515, -0.06299803, 0.0071637062, -0.06344208, 0.009072611, -0.02103888, -0.080812745, -0.10949461, -0.10298124, 0.038875505, 0.08634682, 0.026654582, -0.10082207, 0.015845248, 0.08196807, 0.032582544, -0.031212145, 0.0077636745, 0.07296352, 0.07127555, -0.0832565, -0.026038267, -0.09357217, 0.09738072, 0.11351478, 0.09110262, 0.02327787, -0.09254416, 0.025324855, 0.027922936, 0.09656607, 0.041253433, -0.01174143, 0.061654102, 0.08788167, -0.031784333, -0.0050302595, -0.0054746876, -0.019938566, 0.06819427, 0.039827734, 0.067029014, -0.034433067, -0.06517353, 0.022634985, -0.05300917, 0.06368331, -0.049434505, 0.075092085, -0.07369471, 0.07293618, -0.091005735, -0.07818005, 0.032340057, 0.04148197, -0.09056628, -0.051720627, 0.011063, -0.099515125, 0.037843827, -0.05069849, -0.051393483, -0.08213371, -0.009937305, -0.0005397798, -0.019944865, 0.027363405, -0.055603955, 0.06332199, -0.09543047, -0.00030339957, -0.098505616, 0.10262108, 0.030064275, 0.0071074218, -0.049547814, -0.08484674, -0.033604376, -0.059014708, -0.018536367, 0.013296188, 0.04066837, 0.060098086},
{0.13215423, 0.003270888, 0.09748296, 0.02120216, -0.036743887, -0.005664304, 0.057255607, -0.021503218, -0.082091555, 0.016684107, 0.10178361, 0.029805185, -0.024907446, -0.10591286, 0.07645615, 0.0071939128, -0.06626968, -0.021512268, 0.12000256, -0.059454273, -0.088799894, 0.06437109, 0.04602956, -0.06486958, 0.05218426, 0.08122015, 0.001787425, -0.10580541, 0.09555674, 0.045369186, -0.0987429, -0.05353276, 0.021722874, 0.114268444, 0.07168433, 0.03543758, -0.019899344, 0.021795448, -0.06405416, 0.086105585, 0.016959678, 0.021112353, 0.046801947, -0.001657103, -0.12654509, 0.08368989, -0.019432113, -0.066169225, -0.015132338, -0.080786206, 0.11467403, -0.025846094, 0.027671795, 0.04919055, -0.040206492, -0.082703754, -0.0058716657, -0.060315393, 0.026421495, 0.06340179, 0.061429128, 0.061574645, 0.09045586, 0.075878814, 0.018217377, -0.088096015, 0.07440138, -0.021653377, -0.014765577, 0.124711655, -0.04944469, 0.026745385, -0.043436624, -0.08651974, 0.082027905, 0.04785851, -0.027818356, 0.05623682, 0.058042955, -0.0055557727, 0.021336999, 0.061393067, 0.02922256, -0.07188521, 0.035912346, -0.013692442, 0.004564615, 0.0668177, 0.06312775, -0.111711815, 0.0576542, 0.064969, 0.05171156, 0.09848311, 0.03634021, -0.03629019, -0.06768581, -0.081996895, 0.05290608, 0.046517745, -9.0807676e-05, 0.05597951, 0.058945905, -0.049079705, -0.059397172, 0.106194794, -0.05045426, -0.008135681, 0.09383267, -0.08168222, 0.0872591, -0.098958805, -0.096681796, 0.053526428, -0.035165988, 0.12746327, -0.10809861, -0.096046776, -0.04173331, -0.066569105, -0.03691964, -0.057887305, 0.09225132, 0.09941092, -0.049276497, 0.029751774, 0.084524624, 0.08831384},
{0.052362483, -0.11589883, 0.09689186, 0.05486029, 0.008516315, -0.048259344, -0.040282458, -0.021523856, 0.022292316, 0.02450949, 0.12248287, -0.014910533, -0.017381188, -0.055142518, 0.14349964, -0.1124711, -0.05546747, -0.015935462, 0.065503, 0.041546475, 0.06963082, -0.009021557, -0.09447088, -0.006748284, -0.11288137, -0.016117044, 0.023493547, -0.06736271, -0.0060847998, 0.08356806, -0.115043126, 0.08308044, -0.020964708, 0.1260059, -0.022848776, -0.023700682, -0.041620772, -0.045130022, 0.02422097, 0.028118147, -0.13053077, 0.106003776, -0.12115743, 0.08670504, -0.03894852, -0.039652262, 0.012702368, -0.065153725, 0.061258763, -0.01998803, 0.08766826, -0.018420547, 0.026667204, 0.0020529588, -0.051147893, -0.041808836, -0.018037744, 0.07260279, 0.00010485555, 0.07718184, -0.11012634, 0.032834508, 0.047042906, -0.06673692, -0.084775634, -0.016930232, 0.038445134, -0.015711233, 0.07851599, 0.032313116, -0.048031185, -0.07114306, 0.068345934, -0.027272709, 0.129975, -0.018273463, -0.063836, 0.039711222, 0.11985011, -0.092090115, 0.022444142, -0.06950097, 0.035162732, -0.10422156, 0.059702747, 0.07074279, -0.11309065, -0.056249484, 0.015473084, 0.05348011, -0.037339617, 0.046920378, 0.10612112, -0.04552911, -0.043834575, -0.07845482, 0.06852023, -0.1156113, 0.059122596, -0.024490155, -0.059960466, 0.019360468, 0.0028164294, -0.010937259, -0.05042933, 0.12768432, -0.01766056, -0.07888591, -0.087188765, -0.076213084, 0.09285642, -0.07440936, 0.070675656, 0.032788284, -0.10529105, 0.15279447, 0.059674114, -0.06411674, -0.0922727, -0.058312297, 0.113097034, -0.016679125, -0.07101525, -0.048595898, -0.0668163, -0.14515841, 0.083232224, -0.0210837},
{-0.007072415, 0.021345492, 0.036367223, -0.13178605, 0.03757655, 0.05756198, -0.0982751, 0.015664972, -0.039491124, 0.0040514097, 0.06406364, -0.037256118, 0.08291491, 0.016524808, 0.06540799, -0.096377455, 0.020425819, -0.06659334, 0.07899885, 0.062327117, 0.0066327727, 0.08863908, -0.11196582, 0.05761762, 0.0075508663, -0.06011688, -0.0017281226, 0.03364768, -0.057277676, -0.030890599, -0.0971274, 0.021669233, 0.09422635, 0.12839489, -0.06574255, -0.043684203, -0.11377882, 0.0080737695, 0.08254025, -0.10570183, 0.021530261, 0.014203757, -0.0752436, -0.04247482, -0.010253824, 0.072242245, 0.026210293, -0.006251237, 0.03636092, -0.023598053, 0.08166735, -0.03579838, 0.06451454, 0.090184994, 0.06265177, 0.049950313, -0.07353811, -0.031207316, -0.090588644, -0.03779809, -0.09318968, -0.046453062, 0.008856176, -0.034139328, -0.073960796, 0.035695188, -0.027345514, 0.08609879, -0.08629973, 0.05651141, 0.06569214, -0.04465749, 0.09465946, -0.00037747397, -0.055244397, -0.036309775, 0.06601809, -0.014298916, 0.00014024311, -0.11699255, 0.11274261, -0.04928359, 0.03364059, 0.04805509, 0.067992225, -0.08889437, 0.07901191, 0.044622373, 0.008316736, 0.01836571, 0.1341063, 0.060603824, -0.0012345836, 0.07153534, 0.027912602, 0.02760838, -0.0038611963, 0.076865695, 0.037366338, 0.016916081, -0.07416331, -0.10706127, 0.07767668, -0.034972884, 0.06908342, 0.07114211, -0.04858433, 0.0488476, 0.10229122, 0.011483743, -0.011525143, -0.08342309, -0.065647446, -0.03555419, -0.05964066, 0.13185295, 0.09560891, -0.05078379, 0.018131858, 0.10047345, 0.024288222, -0.00018196079, 0.07932388, 0.06626615, -0.090827644, -0.018854344, 0.03389017, 0.080573365},
{-0.038361393, 0.08814893, 0.068743825, 0.081200875, -0.10607303, 0.105524704, -0.019340154, -0.058359187, 0.041770354, 0.093302384, -0.06697956, -0.020457316, -0.07800309, -0.07170341, -0.03059755, 0.028730685, -0.052519944, 0.0963832, 0.049536977, -0.05015287, -0.021844987, -0.0346491, -0.053366538, 0.14806694, 0.06874786, -0.013910235, 0.08763623, -0.053649813, 0.010985157, -0.10598538, -0.032742247, 0.014285868, -0.10275288, 0.0396207, -0.0044697076, -0.02635893, -0.07230584, -0.063106865, -0.060219947, -0.042662468, 0.08472905, -0.039748706, 0.062226538, -0.09958318, 0.07914095, -0.012290465, -0.10324368, -0.057889484, -0.043427803, 0.022270601, 0.04354681, 0.06776661, 0.042424377, 0.0149020115, 0.031798795, 0.017305989, 0.0966577, 0.049480632, 0.09686684, -0.08477199, -0.09458057, 0.06882499, -0.09018252, -0.045569647, -0.011467859, 0.030777238, -0.0053243507, 0.047386304, 0.079076216, 0.15832967, -0.0027031854, 0.055143848, -0.05486153, -0.023047565, -0.072717555, -0.02544943, 0.113745615, 0.021004438, -0.0489849, 0.07223469, 0.04005312, -0.0015128553, -0.087128945, -0.043945078, -0.04734515, 0.09247229, -0.06260316, 0.004399023, 0.12283874, -0.0074429465, 0.003834976, -0.11755587, 0.06391905, 0.0005007315, -0.03330185, 0.09220967, 0.09782584, 0.052883796, 0.076653145, -0.10047281, 0.059812397, -0.021903213, -0.090471745, -0.07252818, -0.06423495, 0.054457232, -0.0070910277, 0.04184972, -0.05567904, 0.07006656, 0.14258447, -0.033241168, 0.06415137, -0.06832297, -0.05550805, 0.013606043, 0.07559805, 0.02926004, 0.009133836, 0.043743744, 0.05981682, 0.053634293, 0.005080947, 0.009572375, 0.0028282106, 0.07734343, 0.050875142, 0.08231102},
{-0.037157267, -0.027598115, 0.02752121, 0.098950624, 0.005689999, 0.035325363, 0.05503611, 0.041612223, 0.09829496, -0.07730606, 0.08912642, 0.09789229, 0.04253967, -0.03255651, -0.10532933, 0.074005306, -0.0007146067, 0.018627487, -0.034218613, -0.052788798, -0.05374164, -0.036098693, 0.03804995, 0.094807625, 0.116474696, -0.0050026756, -0.065289855, 0.08232289, -0.016673272, -0.09736039, 0.10338433, 0.08170912, 0.041848022, 0.060729764, 0.068960905, -0.0065476713, 0.03339663, 0.00757388, 0.05267607, 0.040283523, -0.0029003862, 0.043570206, 0.13826431, -0.0067899004, -0.054161374, -0.011633406, -0.0765969, -0.041148067, 0.024758011, -0.024651082, -0.11822778, 0.07123366, 0.101305105, -0.10176159, -0.018894523, 0.102932066, 0.015219385, -0.033775248, 0.027377278, 0.00021293129, 0.020139763, -0.018553423, -0.056091983, 0.05516626, -0.008730024, -0.04014121, -0.079379864, -0.088890456, 0.015253291, 0.043591738, 0.019762373, -0.0959157, 0.026542485, -0.092675455, -0.075733624, -0.07135165, -0.0062532104, -0.10446655, -0.07841584, 0.126666, 0.009166345, 0.09679429, 0.0524828, -0.027095642, -0.04648869, 0.005116335, -0.020342147, 0.050114196, 0.087130666, 0.094109796, -0.07748622, 0.008956091, -0.060632348, 0.012186191, -0.050535645, 0.09517276, -0.0712371, 0.040833037, -0.09495275, -0.08403274, -0.0539941, -0.068717994, -0.027651675, -0.097188614, 0.076915585, -0.050312012, 0.046237048, 0.021926126, -0.062430233, 0.012949286, 0.10999069, 0.052735046, -0.022733422, -0.007913176, 0.028651714, -0.020958029, 0.0762125, 0.06755553, -0.07563815, 0.04603587, 0.093786046, -0.058224395, 0.00952886, -0.031696245, 0.05750625, 0.023355156, 0.0879778, -0.03484139},
{-0.10412292, -0.068033405, 0.026983708, 0.0675618, -0.060378388, -0.034208, 0.016961865, 0.061700612, 0.039619267, 0.029880956, -0.047515422, 0.06960932, 0.03534978, 0.099697, 0.05275283, -0.0038281325, -0.08071308, -0.09212626, -0.0319521, 0.11834977, 0.0021487775, -0.072694264, 0.0238391, -0.025724392, -0.0028953354, -0.013510554, 0.005737064, 0.09807767, 0.0835815, 0.061746467, -0.051455606, 0.008438046, 0.022362748, 0.006393597, -0.060343094, 0.060123365, -0.07736611, 0.085215576, 0.004139299, 0.07403228, 0.12759508, -0.035236716, 0.11772362, -0.09471439, 0.0037142597, 0.043135032, -0.01910796, 0.10647894, -0.10171296, -0.08423549, -0.080778114, 0.02786836, -0.10089395, -0.10306137, -0.044630416, 0.07714844, -0.0647801, -0.021297887, 0.08579779, -0.031099895, -0.018787548, 0.007845938, -0.02095183, -0.10099131, -0.04776008, 0.032801516, -0.029437732, -0.054750692, 0.094935395, 0.09756131, 0.043319367, -0.05012832, 0.027614385, 0.0725639, -0.10252566, -0.027466467, 0.021261666, -0.09132536, 0.02363782, -0.015365795, -0.030200673, 0.052877933, -0.085749865, -0.06837149, 0.06320156, -0.06678227, 0.072801195, -0.11821159, 0.021432484, -0.030261118, 0.055147726, 0.037156045, 0.0696134, -0.030466704, 0.09032898, 0.08485381, 0.0903212, -0.028143749, 0.062401485, -0.08191148, -0.06680784, -0.105822474, 0.019696716, -0.04105743, 0.09564785, -0.028211657, 0.090358526, -0.036228325, -0.10120862, -0.05252192, 0.004311813, 0.036664873, -0.015885804, 0.0061653005, -0.07512211, 0.10193332, 0.04151978, -0.06879774, -0.049743917, 0.035343915, 0.014808604, 0.1036461, 0.07826286, 0.03217476, -0.023611031, -0.056518577, -0.015556164, 0.034038495},
{0.027339185, 0.046521194, 0.042053718, 0.1195687, 0.061618418, -0.019722305, 0.07262196, 0.02476947, -0.05475593, 0.03187214, 0.033349983, 0.05085969, -0.001172762, 0.084267646, 0.02475246, -0.011029056, -0.009721259, -0.05285671, 0.07467377, -0.006910146, 0.08878413, -0.019468399, -0.087326795, 0.0028699143, 0.049266703, 0.076051146, 0.04986404, 0.04297696, -0.0019201968, -0.10022082, 0.0038332585, 0.0567995, 0.052939758, -0.07660489, -0.010822487, -0.060181968, 0.03824929, -0.12058725, 0.026489042, -0.0133706, -0.012061368, -0.0023907572, 0.050668698, 0.04351981, -0.09378148, -0.021539932, 0.048717737, 0.051563628, 0.0316097, -0.032107286, -0.039101165, 0.010683484, -0.028626041, 0.037950736, -0.033088803, 0.0029761866, -0.0068212072, 0.024710804, 0.05296878, -0.09839483, 0.04436112, -0.08879945, 0.0841102, 0.009179011, 0.06649621, 0.05032609, -0.11200028, -0.03858488, 0.030111687, -0.078232184, -0.009852107, -0.014191771, 0.026075348, -0.092560925, -0.037659004, -0.029519876, 0.12288202, 0.06461054, 0.066585906, 0.1024519, -0.018898336, -0.0001616925, -0.07008783, 0.05517347, 0.07830186, -0.057046182, -0.05190588, -0.0064730495, 0.066649795, 0.04583597, 0.0024521272, -0.099870734, 0.025588587, 0.075771004, -0.069389634, -0.031925812, -0.018824808, 0.055788144, -0.05959459, -0.06673522, 0.06617077, -0.08944455, -0.06312896, 0.009802453, 0.051321298, -0.11179297, 0.08222962, -0.0054795616, -0.089660585, 0.085596986, 0.013667024, -0.054715443, -0.016856004, -0.038738344, -0.013077192, 0.10806299, -0.09723387, -0.062849164, -0.022203555, -0.0473253, 0.08339517, -0.031487107, -0.082663245, -0.035777032, -0.067685254, -0.0024499872, -0.09354112, -0.0786047},
{0.03305253, -0.08310856, 0.082824335, 0.12341802, -0.0726239, -0.07365439, -0.0043064337, 0.047332317, -0.052265793, -0.07159828, 0.050750326, -0.11604922, -0.038227968, -0.05136588, 0.07292986, -0.06980706, -0.096943215, -0.06830436, -0.049393993, 0.09399194, -0.030237244, -0.051392555, -0.12063062, 0.0733102, -0.031150283, 0.108330786, -0.002884627, -0.064377695, 0.12251219, 0.0919613, -0.005779923, -0.014296561, -0.040611077, -0.09806046, 0.08694922, 0.07168431, 0.057868697, -0.009090415, -0.04725038, 0.12474337, -0.0076906914, -0.08942619, -0.01818626, 0.04927829, -0.075873025, 0.048964184, 0.065024346, 0.044458494, 0.014547177, -0.08755272, 0.12557596, 0.0095908195, -0.08306647, -0.05389064, 0.04425186, 0.014620385, -0.08909272, -0.08816822, 0.0829837, -0.05697445, -0.07685593, -0.045179613, -0.046040967, -0.04787956, -0.002940245, 0.040753942, 0.0027617803, -0.0069193467, 0.08800242, -0.026827706, -0.03115213, 0.007055338, 0.020663977, -0.051585283, -0.039017517, 0.0571793, -0.014088718, -0.06288144, -0.06573848, 0.0909723, -0.094870605, 0.08399245, 0.014129666, -0.077775575, 0.09206753, -0.01737394, 0.076319516, -0.12951416, 0.12555912, 0.094034635, 0.023446402, 0.0523328, -0.034233496, -0.02306732, 0.06312995, -0.011123933, -0.0104406625, -0.050013028, 0.06088165, -0.023726515, 0.08370966, 0.09076547, -0.063497305, -0.10455103, 0.070282795, -0.15045306, 0.06526504, -0.07373727, -0.15572217, -0.07305275, 0.09393993, -0.010840885, 0.08152529, 0.057055846, -0.042727076, 0.055620696, -0.10555388, -0.05357083, 0.024427729, 0.07285556, 0.09367259, -0.005519475, 0.08399526, 0.06782683, 0.088264644, 0.035812598, 0.063890785, -0.057231445},
{0.111546375, 0.06563845, 0.16076325, 0.058889963, -0.07604261, 0.09759793, -0.044335403, 0.031590298, -0.0071979016, -0.07793973, 0.10608773, 0.033897255, 0.011404074, -0.05847346, 0.03921946, 0.037689168, 0.06748926, 0.084696, 0.0065481737, 0.045780916, 0.006194311, 0.05709501, -0.15852241, 0.11998504, 0.08214432, 0.12618643, -0.014053141, 0.07894294, 0.10992084, -0.027611708, -0.13749172, -0.05292381, 0.023893889, -0.16497624, -0.067231566, 0.08038314, 0.007908072, -0.17698286, -0.07659566, 0.04978577, 0.060447063, 0.0076230243, 0.049419455, -0.08949633, -0.05736568, -0.06529141, -0.104571745, 0.042665813, -0.004667148, -0.1468203, 0.15127796, 0.026458666, -0.03383878, 0.005759113, 0.091668084, 0.16170157, -0.043372612, -0.028079614, 0.093546264, -0.07949906, 0.08837942, -0.10259554, -0.1679998, -0.055795424, 0.097853005, 0.043265093, -0.06021449, -0.06902829, 0.0077325418, -0.028916668, -0.02813963, 0.054785747, -0.03867358, 0.0048117707, 0.00636944, -0.081385925, 0.06972324, -0.019337311, 0.05949331, 0.014925173, 0.04471889, -0.025986113, -0.031615656, -0.041642733, -0.03984861, -0.08303071, -0.024730625, -0.04857197, 0.058868602, 0.020884829, 0.047872458, 0.014528245, -0.0016789734, 0.13950533, 0.09969081, -0.10311574, -0.017424233, -0.036790956, -0.06874373, -0.090178534, 0.103103384, -0.06517442, 0.07691492, -0.0053785816, -0.04742759, -0.039592724, -0.14467901, -0.044003185, -0.10620045, -0.04280381, 0.184974, 0.032348394, 0.06386765, -0.031192595, 0.0696654, -0.09358071, 0.046377, -0.08672945, 0.09346092, -0.007832274, 0.10715417, 0.069702365, 0.029113961, -0.056082983, -0.0919135, 0.008713988, 0.1110198, 0.058109727},
{0.12142513, -0.08847909, 0.067392536, 0.09166816, -0.054151066, -0.059003573, -0.102410026, 0.07348259, 0.033156008, 0.0852648, -0.063260585, -0.14676401, -0.0356137, -0.04134047, 0.06979634, -0.0291569, -0.055292424, 0.06562174, 0.0285461, -0.061588272, -0.101911016, 0.038277842, 0.01637454, 0.17812322, 0.08049641, -0.0045046513, 0.035452865, 0.088737465, -0.018216826, -0.050005298, 0.03468778, -0.08527459, -0.10993946, -0.036149263, -0.051399667, -0.040280644, 0.069306836, -0.095672645, 0.01950942, 0.06615855, 0.10432187, 0.05609654, -0.011595648, -0.016925491, 0.011248118, 0.09306309, -0.07652761, -0.017992936, 0.015944876, -0.109876625, 0.12945801, 0.10472217, -0.0016617177, 0.05566817, 0.021355018, 0.17214236, -0.016441321, 0.059586674, 0.111148134, -0.06538839, -0.03677788, -0.008190918, -0.076436594, -0.046107896, 0.029774114, 0.07961967, -0.06292508, -0.060103808, 0.026502889, 0.038223434, -0.027200395, -0.1014253, -0.06614894, -0.10764248, -0.05255365, -0.07951912, 0.13073666, 0.09234686, 0.09790169, 0.09330284, -0.016904645, -0.06515448, 0.017494231, 0.09738742, -0.07493073, 0.06749811, -0.035570778, -0.029332045, -0.038188778, -0.094947495, 0.04333548, -0.11148464, -0.02233766, -0.04455781, 0.12518232, -0.05163872, 0.078443795, -0.13908026, -0.076584116, -0.027314834, 0.0116911605, -0.004658643, 0.09226035, -0.07986708, -0.10562441, -0.16179886, 0.042087052, -0.0899575, -0.12287196, -0.099662, 0.143101, 0.03646083, 0.014085455, 0.07909937, -0.07286506, -0.020152882, -0.048078813, 0.040792212, -0.08637113, -0.032127284, 0.1292377, 0.026144898, 0.027020758, 0.07190518, 0.089114115, 0.08968503, 0.024669277, 0.058091935},
{0.09483717, -0.038550403, 0.03916268, -0.005028142, 0.07794231, 0.054779336, 0.031368166, 0.02031073, -0.09141566, 0.08349736, 0.092944324, -0.090721436, 0.074467465, -0.09251286, -0.03707988, -0.07852803, -0.039163526, -0.10956818, 0.07837278, 0.04255773, -0.028813075, 0.04592646, -0.115140714, -0.0010753586, 0.081345886, 0.06250762, 0.069068156, 0.11271952, -0.011563884, 0.0070508807, -0.034345858, -0.0044035567, -0.10214016, 0.023974251, -0.11394412, -0.07012921, -0.085639924, 0.030166207, 0.032992225, 0.12086096, -0.09302224, 0.034733117, 0.11460664, 0.07165802, -0.11894059, 0.015155665, 0.026377961, -0.060946885, -0.044312797, -0.10664198, 0.06973496, -0.013246305, -0.10074415, -0.096498966, 0.10368578, 0.041443944, 0.05102244, -0.03410288, 0.12228574, -0.05066905, -0.052594025, -0.0912926, -0.07980882, 0.09664437, -0.06375587, 0.09030596, -0.09430346, -0.027197689, -0.06041922, 0.020979287, -0.018728767, -0.025971858, -0.09550278, -0.044180635, 0.0021963443, -0.004857818, 0.00832665, 0.017753951, -0.023645863, 0.026278611, -0.07452431, -0.07223326, 0.008646626, -0.048137445, -0.07808807, -0.010832235, -0.11340545, -0.08810397, -0.04748672, -0.026498936, 0.14109477, 0.0024817314, -0.0022277236, 0.010042173, 0.101408415, 0.06149192, -0.089411445, -0.07396728, 0.023794616, -0.011215612, 0.000545159, -0.05221866, 0.00796897, -0.05901877, -0.057628047, 0.083840564, 0.07206673, -0.01571824, -0.10807053, 0.098343834, 0.11177546, -0.012641266, 0.12606876, 0.04475852, -0.082099274, -0.029051641, -0.043825623, -0.04640348, 0.05148534, 0.018064119, 0.022309909, -0.02395793, 0.049634416, 0.019575339, 0.02928187, 0.13094692, 0.10582908, -0.030525964},
{-0.10409858, 0.04020695, -0.0047171474, 0.07775219, -0.108132765, 0.09273234, 0.06491334, -0.048554674, -0.053245842, -0.100384034, -0.054075655, 0.04557135, 0.058745135, 0.07871516, 0.01858572, 0.021268355, 0.003457404, -0.031103328, -0.009308461, -0.056345668, -0.012293761, -0.04745109, -0.02738316, -0.09299612, -0.022257421, 0.14444362, -0.026633577, -0.05538054, -0.057170812, -0.08767325, -0.04849359, 0.09264467, 0.01547093, -0.059156995, 0.0601435, 0.048101116, 0.06320459, 0.079744615, -0.042266794, 0.13422358, -0.12731948, 0.025389984, 0.011410047, -0.013507334, 0.005877154, 0.09883203, 0.028157562, -0.11224275, 0.021663547, 0.077414446, -0.013084761, -0.06986702, 0.017940199, 0.040878996, 0.044871718, -0.10887847, 0.1056786, -0.07661497, 0.12777942, -0.014976582, 0.056079134, -0.0771136, 0.09683847, 0.08728942, 0.009791963, 0.03956295, 0.08127049, 0.013072163, -0.065309376, 0.102661535, 0.066822216, 0.0646166, -0.0057570934, 0.045948055, 0.018031854, 0.020415897, -0.071670055, 0.025079131, 0.14248908, 0.06797566, -0.13330898, 0.05818163, 0.15658271, -0.10544663, 0.0068297344, 0.06312193, -0.10839689, -0.00012617081, -0.07063852, -0.084839724, 0.045277897, 0.082649015, -0.07479814, -0.097608134, 0.010837699, -0.048253704, -0.07732236, 0.064610325, 0.04139441, 0.0021621212, -0.05689035, 0.0058578216, -0.09479128, 0.10149418, -0.09524047, -0.03349801, -0.1000717, 0.026611393, 0.050653905, 0.00089706277, 0.090161115, 0.051337287, -0.049336787, -0.0037387016, -0.022270009, 0.034316115, -0.07206156, 0.0024195313, 0.019102605, 0.09871222, 0.104906626, -0.053469725, 0.073961146, -0.046770085, -0.049641974, -0.05560315, 0.08523898, 0.10379584},
{-0.06498973, 0.12186588, -0.08850914, -0.07467065, 0.08677622, -0.05845345, 0.075725764, 0.08818227, -0.08769976, -0.03601774, 0.059619572, 0.006873667, 0.10654486, 0.083336905, 0.11834405, -0.10828488, 0.048871923, 0.08195325, 0.13899422, 0.0077928714, 0.0049947905, 0.072710216, -0.0110988105, 0.025180861, 0.05062577, -0.0038795958, 0.052891225, 0.009908755, 0.09903498, 0.05695621, -0.04105524, -0.08850966, 0.044238765, -0.072384626, -0.0309845, 0.07854819, 0.0896894, 0.11292221, 0.10223417, -0.038841635, 0.049655266, 0.064849004, 0.083783366, -0.04799011, -0.10097893, 0.075741954, 0.04260084, -0.0862442, -0.10341264, 0.105205044, 0.0805322, -0.10414156, 0.083101235, -0.09276708, -0.009224787, 0.06545831, 0.14989322, -0.093260445, -0.006333645, 0.053826258, -0.04840684, 0.07711693, 0.09580073, -0.009903379, -0.04275834, -0.00620272, -0.022887649, -0.010365918, -0.023837447, -0.047645684, 0.08778457, 0.056625158, 0.06385133, 0.108309425, -0.107440144, 0.14386238, 0.04271586, -0.09095284, 0.12818041, -0.049730025, 0.017899266, -0.013687797, 0.08007782, 0.08677348, 0.056094665, 0.07567443, -0.1142361, -0.03251076, -0.067394465, -0.075291544, 0.117042735, -0.022297556, -0.104588464, -0.055511575, 0.0372552, -0.07284188, -0.10241094, -0.049213592, -0.030666905, -0.106219225, 0.03430593, -0.020133283, -0.0117724985, -0.084024325, -0.058097724, 0.09726208, -0.08346072, 0.05215831, 0.0949813, 0.087670855, 0.056153264, 0.048114344, -0.117820635, 0.08639812, 0.054608062, 0.12416566, 0.040519927, 0.097948596, -0.022190427, -0.05024178, -0.04241948, 0.07184191, 0.024933057, 0.05281262, -0.056013335, 0.09019883, -0.092238836, 0.087016314},
{0.04989889, -0.036283795, 0.07509914, -0.03463961, -0.07125695, -0.053615637, -0.08435174, -0.029031955, -0.058415685, -0.039917164, 0.033601563, 0.06777723, 0.026555277, 0.09630987, 0.06648132, 0.01674433, 0.051375497, -0.054966718, -0.07150713, -0.07462509, 0.073134154, -0.024188446, -0.12933075, -0.09162131, -0.085763864, -0.07250664, -0.079707555, -0.07700415, -0.073790506, 0.08668411, -0.029970251, 0.08286537, -0.05575808, 0.038303033, -0.07340549, 0.079820536, -0.08813583, -0.04066339, -0.04927524, 0.060701415, 0.08773667, 0.03902337, -0.03488137, 0.08160576, 0.03762272, -0.08738231, 0.07946257, 0.07971457, 0.031673282, 0.07291052, 0.12580623, 0.09919351, -0.0625378, -0.021418868, 0.09871283, -0.05239474, 0.11993238, 0.089410305, 0.09484279, -0.059412166, -0.10208869, 0.06585348, -0.038495623, 0.009693578, 0.0248719, 0.0589613, -0.10309716, 0.09081517, 0.040307067, -0.027951553, -0.009310546, 0.05226748, 0.09895827, -0.06743872, 0.062437374, 0.10341837, 0.1071169, -0.039840102, -0.049984463, 0.012638784, -0.04130748, 0.04720369, -0.060631625, 0.054496694, -0.022912294, 0.03824283, 0.027490458, -0.010376302, -0.087428644, -0.077860184, 0.030509343, 0.045818064, 0.10517302, -0.027426453, -0.006808577, -0.052469168, -0.005651444, -0.03177954, 0.09168008, 0.042254165, -0.025727123, 0.05124987, -0.09677665, -0.022979535, -0.004495239, -0.06599777, 0.016511507, 0.052974846, 0.060878754, 0.06691142, 0.013033804, -0.09391464, -0.077273205, 0.035409573, -0.0635883, -0.035007443, -0.03511823, -0.014979236, 0.028718024, -0.0035983548, 0.10756797, -0.113540746, -0.01788716, -0.040843807, 0.009196624, 0.053998105, -0.05399222, 0.044386815},
{0.08739075, -0.0017297788, -0.04850429, 0.045635663, 0.09192383, -0.073765785, -0.082218856, -0.07451852, 0.051155522, -0.062124647, 0.033387568, -0.09621287, -0.06505961, 0.026578128, 0.09752718, 0.020186394, -0.08244168, 0.07538577, 0.052137956, 0.021065483, 0.07676733, -0.07972992, -0.07116077, 0.10464276, 0.040762257, 0.09326598, 0.0866375, 0.051736504, -0.062327463, 0.0902589, -0.041648135, 0.06243733, -0.08913229, 0.084630765, -0.07388741, 0.020499958, 0.057008773, 0.08562622, -0.049455598, 0.030304095, -0.032361172, 0.073749214, 0.068210475, -0.064154625, 0.033554614, -0.0840909, -0.016448557, -0.11649202, 0.05300811, -0.05370524, -0.034201175, 0.04867491, -0.089063324, 0.101096034, 0.048885196, -0.07352903, -0.00050844473, 0.098350644, 0.115975805, -0.111973844, -0.06270822, -0.02945962, 0.1020643, -0.09853175, 0.03055735, -0.04009953, -0.07970673, 0.08193934, 0.11191498, -0.00236317, -0.060090944, -0.06150284, -0.10553189, -0.081594, -0.028866867, 0.07640911, -0.065931715, 0.104891986, 0.022110932, -0.06298403, -0.075096376, 0.018064424, -0.003313705, -0.023334708, -0.030983904, -0.049085792, 0.07293401, 0.053712625, 0.05792753, -0.035157844, 0.00030135913, 0.069272704, 0.040790215, -0.050711572, -0.018973615, -0.046050128, 0.06935009, -0.07720944, 0.1110191, 0.028659865, 0.08370805, -0.07598322, 0.013241305, -0.0807396, -0.044990398, -0.055807713, -0.10034037, 0.01185475, -0.0077887685, -0.05266522, 0.1386733, 0.05703534, 0.08364534, -0.029586252, 0.003916934, -0.091226436, -0.045272436, -0.04456642, 0.080587946, -0.07976512, 0.039489064, -0.040214103, 0.07873657, 0.070966646, 0.043301865, 0.07153801, 0.06993059, 0.049853444},
{0.09610497, 0.09391479, -0.0048167314, 0.012788084, 0.07776211, -0.099211946, -0.023331331, 0.028786927, 0.039485127, -0.021393985, -0.03877003, -0.036230076, 0.07336287, -0.022123855, 0.022717077, -0.10426959, -0.032247394, -0.020489907, 0.08972674, -0.09609456, 0.078113176, 0.0077676456, 0.052135028, -0.03248633, 0.048544608, 0.017892417, 0.057971254, 0.02620508, 0.077968396, 0.031359654, 0.08417166, 0.09523956, 0.06521479, 0.04804205, 0.09111839, -0.03378613, 0.00776361, -0.007640638, -0.08504896, 0.059397522, -0.06971959, -0.04839565, 0.121654026, -0.06520714, -0.044516243, -0.08015682, 0.06237349, 0.06979337, 0.0060066506, 0.10319207, 0.13873672, -0.054167356, 0.035513036, -0.09800146, 0.06455056, 0.09263676, 0.07409008, 0.079222426, -0.020661665, 0.05077198, 0.020368015, 0.013710472, 0.00733829, 0.04666844, -0.02346085, 0.065415345, 0.043637596, -0.0020899922, 0.04495156, -0.056528743, 0.019230919, -0.010920214, -0.06656283, 0.05903158, 0.07828631, 0.11239764, 0.088264085, -0.030923858, 0.044024434, 0.08504311, -0.03338572, -0.090270184, -0.030314652, 0.08508757, 0.07048779, 0.019424852, -0.060548235, -0.004706261, -0.030492166, -0.007790724, 0.07206813, 0.029026484, 0.07129012, 0.09667552, 0.009962992, 0.07413292, 0.08064459, 0.05671086, 0.061154027, -0.050507624, 0.03523761, -0.056914493, 0.026422422, 0.0053289235, -0.061327286, 0.036556758, -0.09372296, -0.05250928, -0.049057323, -0.01611361, 0.03531963, -0.041592956, -0.081457265, -0.095590666, -0.032893285, -0.0025793125, 0.023757506, -0.10409546, -0.099929586, -0.08057958, 0.040153146, 0.03210972, 0.030886646, 0.06216549, -0.10044335, -0.038840123, -0.069910504, 0.10161405},
{0.09481592, 0.030800585, 0.11986818, 0.04366234, 0.023218874, -0.08312573, -0.09102485, -0.00097194314, -0.0823071, 0.00685741, -0.04112156, -0.12685466, 0.059031166, 0.011159657, 0.037433714, -0.10628005, -0.106782205, 0.05885433, 0.12292507, 0.10941489, 0.06961799, -0.025505438, 0.03720433, 0.019977335, 0.014904607, -0.05377413, 0.04558955, -0.007912164, 0.07476721, 0.075083874, 0.039398897, 0.0900861, -0.08989002, 0.057489943, 0.056692276, -0.004768357, -0.100947395, 0.05423441, 0.1000346, -0.0077078734, -0.03333954, 0.041072622, -0.028750591, -0.013245974, -0.015956674, -0.007279853, 0.0376444, 0.007744181, -0.023702301, 0.05941395, 0.0028451774, -0.057845287, -0.067164585, 0.024968063, 0.028735071, -0.01355148, -0.08566572, -0.007561952, -0.059807584, 0.09077556, 0.038129933, -0.07547127, 0.012901625, -0.092251554, 0.102234796, 0.0716391, -0.1040821, 0.022231802, -0.008385235, 0.06774496, 0.057373475, -0.05255398, 0.010631405, 0.07180914, -0.0060036676, -0.07009396, 0.0620535, 0.0785909, -0.04990202, -0.036729574, 0.0012054115, -0.10641147, -0.0072091944, -0.015101202, -0.10716575, -0.100600965, 0.07571109, -0.078156486, -0.119993135, 0.008903152, 0.008786382, 0.020652369, 0.08967884, -0.0795226, -0.054160792, -0.066896126, 0.0068715364, 0.0357196, 0.06139277, 0.04362671, 0.0026301518, 0.07220173, 0.007828533, 0.088871345, -0.11080551, 0.012473696, -0.030474367, -0.08208151, -0.11609755, -0.102545105, 0.11487265, -0.023592554, -0.08608681, 0.10139344, -0.049394503, 0.1290723, -0.05874167, 0.008390166, 0.032297526, 0.019556314, -0.03394713, 0.029166741, -0.0072165504, 0.09988809, 0.009848155, 0.06391817, 0.009151335, -0.05875162},
{0.07684223, -0.012977737, 0.11286139, 0.012619302, -0.051952727, -0.06566703, -0.008547643, 0.03784649, -0.027763389, -0.0963604, 0.030336278, 0.056689013, 0.050111085, -0.04119872, -0.054043483, -0.017995834, 0.07228445, 0.061934296, 0.11610238, 0.053609528, 0.053325757, -0.023581829, -0.07053615, 0.036980517, 0.09280958, 0.021817014, 0.0034306117, 0.038714737, 0.06666032, 0.07448512, -0.037258472, 0.024571802, 0.038606983, 0.028796405, 0.03394788, 0.061207473, 0.07727094, 0.045178827, 0.04148736, 0.0103723835, -0.112542756, 0.015447341, 0.022496516, 0.02586497, -0.08486994, 0.09429287, -0.0010807216, -0.022760222, -0.09511804, 0.058689162, 0.008546954, -0.098053426, 0.016349448, -0.032741684, -0.079932556, 0.0024449076, -0.0823452, -0.073438436, -0.046411358, -0.013585666, -0.0005453708, -0.01734457, 0.06441687, -0.040608518, -0.06779556, 0.023772467, -0.070202574, -0.08677929, 0.038570102, -0.026701035, -0.053885683, -0.0017376007, -0.00634028, 0.09348839, 0.010745396, 0.049913395, 0.047487304, -0.0334325, 0.0081413, 0.030266928, 0.052570283, -0.05666997, 0.07470602, -0.111952655, 0.037188265, -0.10627101, -0.008645351, 0.00903432, -0.006117529, -0.015328569, 0.15088856, -0.07815447, -0.090936854, -0.046012156, 0.061012927, -0.027480692, -0.082315944, -0.103542075, -0.07461487, -0.01904717, -0.037305564, -0.05271364, -0.10460033, -0.060944453, -0.04215316, 0.060677405, -0.06174465, -0.062233765, -0.033566445, 0.014644803, -0.014734498, -0.10078425, -0.05158274, 0.011985463, -0.01162681, 0.015509806, 0.05751799, -0.044809468, 0.08184006, -0.088765, -0.04522686, 0.008807446, -0.03384526, 0.014023096, 0.08082576, 0.027518725, -0.027927238, -0.07686699},
{0.03684765, 0.022839205, 0.07850977, 0.026881503, 0.027501496, -0.07571892, -0.086842954, 0.050251648, 0.035259157, -0.0445973, 0.016156835, -0.069508426, -0.035295095, 0.024796635, 0.07714355, -0.085341804, 0.03922302, -0.046799153, -0.02950112, -0.076655366, 0.023032252, 0.12881732, 0.05697928, 0.07903847, -0.00349507, 0.036717746, -0.024636496, -0.0802683, 0.08058619, 0.02119288, -0.028695796, 0.09128817, 0.074154556, -0.050758664, -0.09202356, 0.058350805, 0.03583094, 0.09325339, -0.089869395, 0.0002853796, -0.066892184, 0.04219778, -0.01715457, 0.010509792, -0.063726924, -0.07543148, 0.07743563, 0.07626578, -0.059769798, -0.009732452, 0.14842884, -0.044477593, -0.05992446, 0.04313253, 0.01097355, 0.09225631, 0.08105787, 0.00814122, 0.004912914, -0.08392664, -0.07803649, -0.004277447, 0.09263909, -0.06057956, -0.027866453, -0.10855232, -0.022654286, 0.02404192, 0.10439056, 0.08977012, -0.0072819283, 0.03328389, 0.041135684, 0.09745416, 0.096672244, 0.00012689971, 0.10065984, -0.036198646, -0.0105583165, -0.052161515, -0.026090313, -0.023468554, 0.09751503, -0.0129264565, -0.10678826, -0.10848432, 0.05132289, 0.102125645, 0.008419522, -0.018232042, -0.039833035, -0.022626614, -0.02727203, 0.11438027, -0.12152445, -0.036077924, -0.03635139, -0.0028798033, -0.090833716, -0.023790412, -0.10394436, 0.02925025, -0.06698989, 0.005050063, 0.019661073, 0.08231595, 0.024003176, -0.078910396, -0.08806891, -0.107061066, -0.023479376, 0.06473997, -0.042422548, -0.064123556, 0.0027809665, 0.025733797, 0.07735151, -0.044574756, -0.09990736, 0.0486158, 0.055782568, 0.027775634, 0.13604729, 0.009018005, -0.0526561, 0.0659129, -0.0012175569, 0.09106909},
{-0.06315212, -0.074079014, 0.03260629, -0.0024928038, 0.043050375, -0.073630124, -0.010670494, 0.008296587, -0.021815449, -0.053896934, 0.1327578, 0.0055323974, 0.10454838, -0.098195754, 0.11997177, 0.059690602, 0.0010226815, 0.06244429, 0.07595267, -0.054246012, 0.055169065, -0.028610036, -0.082956485, 0.017281666, -0.11518168, -0.027556198, 0.014198478, -0.026074365, -0.07163894, 0.040431403, -0.0748449, 0.03450181, -0.029556248, -0.024188057, -0.082411975, 0.08321483, -0.103413254, 0.011388878, -0.02294577, 0.059453484, -0.060834944, -0.05608826, -0.052723058, 0.040240966, -0.012774688, 0.07071299, 0.013796352, -0.054949082, -0.06545995, 0.097142644, 0.09205722, 0.06995121, -0.110599674, -0.050681308, 0.026440084, -0.007328035, 0.059417907, -0.10489266, -0.030286655, -0.08003027, 0.059756737, 0.05291009, -0.10804902, -0.011022881, 0.035122424, -0.09073655, -0.0648149, -0.0076651424, 0.042699922, 0.04558935, -0.07677256, -0.09499458, -0.010465063, -0.015570312, -0.0142029, -0.027271278, 0.09993653, -0.023640662, 0.013266879, 0.053538125, -0.0005743946, -0.062632605, 0.01277045, -0.084476404, -0.102796145, 0.042922705, -0.008869008, 0.03687925, -0.010403041, -0.08011433, 0.14168818, 0.041924935, 0.023342267, 0.04388903, -0.13871273, 0.062405303, 0.09589873, -0.043100398, -0.050281286, 0.042213127, -0.040517807, 0.092174225, -0.020635191, -0.090932004, -0.00826921, 0.029400902, 0.0077094315, -0.10375533, 0.028352406, 0.034738548, -0.049170893, -0.07140995, -0.07490507, -0.09393686, -0.03747201, -0.026232442, -0.056156557, 0.003458418, -0.08828259, 0.079130486, -0.0044855056, 0.03724322, -0.053261857, 0.02611286, 0.08238278, 0.08488909, 0.014130471, 0.05665364},
{0.09259143, -0.1087964, -0.019005295, 0.07449899, -0.10612314, 0.08463648, 0.094978504, -0.09547742, 0.088772014, 0.054496154, 0.11646673, 0.022819757, 0.10528358, 0.051680196, 0.14107573, -0.10021123, -0.012192789, -0.0010351622, -0.03704684, 0.10119075, -0.008237537, -0.010242317, -0.08832645, 0.049611412, 0.021625066, -0.11235504, -0.019422818, -0.090162344, 0.10589057, -0.06836041, 0.015402954, -0.019593773, 0.08799979, 0.10264583, 0.10199751, 0.07040903, -0.001953693, 0.04657443, -0.031343527, -0.036854167, -0.030552879, -0.09938691, -0.099389665, -0.0015896608, -0.0597088, -0.086429134, 0.06875537, -0.06606278, 0.05469455, -0.061720368, 0.1433188, 0.03188388, 0.07076409, -0.019326815, -0.017804883, -0.043183684, -0.0020592161, -0.029261686, -0.05503702, 0.056253742, 0.05360331, -0.011419332, 0.10833405, -0.056290187, 0.028530583, -0.044065464, -0.00472138, -0.00798741, 0.008326651, 0.03064167, 0.003552743, 0.052163158, -0.06499304, 0.08412478, -0.052911565, -0.055288248, 0.06701185, 0.07498886, 0.13453317, -0.050934963, 0.008096558, 0.058125973, -0.020550912, -0.0045063286, -0.009240007, -0.083610445, -0.10184628, -0.046131372, -0.13767603, -0.0054970165, -0.023135012, -0.060608804, -0.066347, 0.025110334, -0.026720967, 0.013439596, 0.04739611, -0.052585054, -0.08087823, 0.03497769, 0.09812719, -0.021578118, -0.011324456, -0.048049998, -0.11625541, 0.08394248, 0.045019682, 0.029010398, 0.058022812, -0.08943215, 0.1329399, -0.03022892, 0.036942277, -0.016123837, -0.03497804, 0.07382475, 0.030994382, -0.082035586, -0.035991777, 0.035930738, 0.03576679, 0.079110846, 0.039719827, 0.08031305, 0.06384669, 0.024631565, 0.01803897, 0.011462344},
{0.059032243, -0.06307765, -0.07788967, -0.045311444, -0.07468753, 0.09012036, 0.01758987, 0.1065388, -0.0080014095, 0.017931633, 0.10373345, 0.05720386, -0.019909168, 0.0036887606, 0.08502404, -0.059987172, 0.03762133, 0.07094861, -0.012105837, 0.10717894, -0.10484727, 0.05913501, 0.012697744, -0.061329145, -0.05468294, -0.044804722, 0.07691106, -0.089793816, 0.035443418, 0.088796966, -0.10674952, -0.08111748, -0.08962453, 0.14701357, 0.11282325, -0.091548644, 0.021968083, -0.016361842, 0.01873058, -0.08774955, -0.05623415, 0.001806207, 0.019652888, -0.07075193, -0.054917384, 0.008226658, -0.051055405, -0.118468404, -0.090322666, 0.081843466, -0.008555201, 0.09522423, -0.10105079, -0.056746513, -0.08391603, -0.0047336915, 0.08378076, -0.10381289, -0.06744845, 0.015094314, 0.017991249, -0.060354657, -0.05391795, 0.018018804, 0.09530614, 0.02223823, -0.02130934, -0.043881245, 0.02752388, 0.036513828, 0.028631553, -0.042569052, 0.03259541, 0.13235876, 0.1088923, 0.08763414, 0.01734221, 0.083729625, 0.07436171, -0.027432712, 0.122147374, -0.08789109, 0.1271603, 0.055674795, -0.034542345, 0.008763965, -0.039718207, 0.07615822, -0.040224094, -0.048770215, 0.010005722, 0.084336914, -0.019153938, 0.09139932, 0.05119583, -0.053808186, 0.023180038, 0.08237865, -0.0028298998, -0.06802976, -0.00820227, -0.095883, 0.097883016, -0.083296396, -0.030986194, 0.07862679, -0.10764089, 0.025175229, 0.058306728, 0.014746603, -0.0006938528, -0.08754, 0.037579328, -0.08245718, -0.042647272, -0.0029351106, -0.085341245, -0.008378454, -0.009385293, 0.035357624, 0.03917167, -0.11972916, 0.11088754, 0.036641352, -0.024071917, -0.08321773, -0.04858393, 0.08122619},
{-0.017046163, 0.02706816, 0.0847346, -0.08213543, -0.036305264, -0.02229613, 0.027189424, -0.08080822, 0.06876734, -0.012584947, 0.1559539, -0.036700074, 0.03902382, -0.10932365, 0.017650062, -0.014111924, -0.026368855, -0.03132912, 0.1268423, 0.06123446, -0.025383482, -0.015244444, 0.01029452, -0.11170786, -0.006998351, -0.06915538, 0.030773975, -0.093209065, -0.05369016, -0.03216336, 0.0005880367, -0.078738235, 0.04813958, 0.08174196, 0.057430323, -0.051390123, -0.113513105, 0.010002616, 0.090912364, -0.05624031, -0.07069748, 0.08253187, -0.11965207, 0.093878895, 0.04791412, -0.09269822, -0.01133351, 0.006379863, -0.04897459, 0.079253756, -0.0380565, -0.105133, 0.060174286, -0.052758712, -0.07541968, 0.037457615, -0.053599503, 0.06838469, 0.030305877, 0.048509248, 0.03257513, -0.063049406, 0.08968377, 0.08717537, 0.09896666, -0.1046022, -0.08053201, 0.053585753, 0.022406375, 0.11173499, 0.08819281, 0.02949006, 0.021669745, -0.017962735, 0.058774322, -0.058944046, -0.10578028, 0.012612142, 0.10996432, -0.024670504, -0.06780423, 0.008887701, 0.010692586, -0.07860547, 0.085901126, 0.07770586, -0.044396464, -0.018771041, -0.12874798, -0.03769319, 0.050494406, -0.036283568, -0.030689709, -0.028566783, -0.05666143, -0.043153167, 0.07106112, -0.08469879, -0.09747476, -0.029504709, -0.038575985, 0.010581847, -0.039825823, 0.05614026, -0.021523744, -0.013516507, -0.04567227, -0.09179346, -0.029403158, 0.040633954, -0.0191007, -0.10208875, -0.06710249, -0.0804325, -0.039491095, 0.08817071, -0.05031816, -0.07047181, 0.037153885, -0.033451892, 0.0145130735, 0.0601644, 0.10770879, -0.048904344, -0.06341329, -0.13058048, -0.033697966, -0.10637008},
{0.057770915, 0.070685014, 0.12713271, 0.06513154, -0.08343243, 0.009761892, -0.053650536, -0.021500833, -0.0034243837, -0.038172945, 0.13948844, -0.024492605, -0.03539113, -0.009991867, 0.03695027, 0.03916301, 0.090985574, -0.07607005, -0.056152947, -0.020335536, -0.03899981, 0.048009682, 0.078651994, 0.12835234, 0.089489855, 0.013695755, 0.007819466, -0.037847877, 0.08673879, 0.049613755, -0.1027817, 0.029959317, -0.071613, 0.069542095, 0.02357461, 0.00897784, 0.04002798, -0.12628508, 0.058813587, 0.01917632, -0.041254196, 0.016250163, 0.042484853, -0.05464803, -0.08560213, 0.08930918, 0.10245088, -0.00597289, 0.06692889, -0.025437001, -0.07765907, 0.06036511, -0.11905802, 0.02459916, -0.058063556, 0.08615293, -0.067216285, 0.09394486, -0.052401572, 0.037632212, 0.07755589, -0.008468015, 0.022184929, 0.10632864, -0.10243486, 0.06333769, 0.001575648, 0.04747139, 0.062020626, 0.06243625, 0.07425356, 0.080492504, 0.095168725, -0.12339142, -0.030594943, -0.07834139, -0.045808557, -0.067238554, -0.07604475, 0.1405638, 0.03824021, 0.019837797, -0.007529466, 0.08696108, -0.026312577, 0.017428908, -0.036898434, -0.008566387, -0.002286031, -0.08629613, 0.10990274, -0.041328996, 0.097331405, -0.027738819, -0.028672379, 0.027639315, -0.08287059, -0.07372399, 0.02586377, -0.10577784, -0.013800032, 0.046477262, -0.003160352, -0.1011955, 0.078594424, 0.06688929, 0.04572681, 0.08970314, 0.023540836, -0.09802023, 0.09924629, -0.09860103, 0.10479591, -0.09406875, 0.105497524, 0.031008802, 0.08920372, 0.09113291, -0.06694652, 0.0041766316, -0.0073153665, -0.09022904, 0.021268522, -0.08573089, -0.017601281, -0.0661079, -0.008626338, 0.059006147},
{0.054474127, -0.046681702, 0.07105539, 0.12494032, -0.034772977, -0.08610677, -0.106365435, -0.058250636, 0.0028331429, -0.04892401, 0.04197599, 0.043717634, 0.0750438, -0.04383218, 0.06496713, 0.0086742705, 0.07170372, -0.09166123, -0.01967103, 0.041355547, -0.025307942, 0.10350002, 0.13926771, 0.100150995, 0.070389904, 0.019167898, -0.08017448, 0.026194543, -0.082017064, 0.0056215255, -0.044266354, -0.021562515, -0.07417485, -0.0783673, -0.07139085, 0.0042914553, -0.041593615, 0.047740206, 0.052536916, -0.050321355, 0.11562817, 0.009095445, -0.01061982, 0.0702221, -0.038472507, 0.029068554, -0.054413326, 0.09284073, 0.08717699, 0.050141085, 0.042022746, -0.0062372163, 0.117277674, -0.043735832, -0.07458849, -0.03537704, -0.026606975, 0.044252515, -0.069427915, 0.09782203, -0.08880794, 0.09407665, -0.056057837, -0.011371382, 0.0050445944, 0.04761086, -0.080510795, 0.07540791, -0.10880079, 0.01937521, -0.10439565, -0.017770974, -0.02375488, 0.05196669, -0.004767992, 0.04113847, -0.014588806, 0.068659484, 0.02374159, 0.045227904, -0.036846146, -0.001733847, 0.024241531, -0.09548863, -0.019332113, 0.089649715, 0.14510094, 0.05782097, 0.042755272, -0.017743489, 0.040451407, -0.048149575, -0.07570573, 0.07415721, -0.04084985, -0.051787168, -0.06306787, 0.0099104345, -0.11657344, -0.054710332, 0.028477445, 0.03990276, -0.07366123, -0.07906528, 0.07774088, -0.09133939, -0.045663077, -0.0711527, -0.093759604, 0.02345563, -0.097880654, -0.053616576, 0.11058216, -0.059800353, -0.07669009, 0.016930783, -0.045089856, -0.061503824, -0.09174198, -0.016548522, 0.0017565608, 0.029559692, -0.06638201, -0.07534822, -0.039062947, 0.035028566, 0.04329194, 0.03752394},
{0.09173026, -0.08528984, -0.056644093, 0.10559395, 0.0434882, 0.01357732, -0.07741747, -0.053719282, 0.07124229, -0.09333133, 0.0035102072, -0.03169305, 0.04313339, 0.009830956, -0.10429202, 0.006119384, 0.07405695, 0.09271865, -0.0018010917, 0.11830669, 0.09347061, -0.09750603, 0.0074386424, 0.115705274, 0.025538277, -0.07172439, -0.024859738, 0.0046381084, -0.009226024, 0.09423274, 0.004274791, 0.010504885, 0.04285749, -0.09347733, -0.06476663, -0.090482116, -0.06891915, -0.018243067, -0.10160159, -0.053434547, -0.061595093, -0.0805484, -0.049258783, -0.10199279, 0.13450728, 0.08889525, 0.087809145, -0.028178947, 0.0260026, -0.09403448, 0.0032157248, 0.10098453, 0.02207272, 0.097904116, -0.064196005, -0.07318951, -0.07797961, 0.08776511, 0.011795238, 0.06098603, 0.040389508, -0.059779324, 0.031353444, 0.021979451, 0.02517718, -0.11496542, 0.061357945, 0.055212542, 0.055947497, -0.058022372, -0.092442796, -0.07840005, -0.06558707, 0.09008294, 0.07266995, 0.047207516, -0.056798972, 0.103759006, 0.0044310386, -0.026283478, 0.14549942, 0.0007403046, -0.018339612, -0.08379526, 0.075866655, -0.040338404, -0.063494645, -0.040734388, 0.07472916, -0.0025789551, -0.056134924, 0.08555802, 0.010910295, 0.04572245, 0.06065629, 0.08833869, -0.06739038, 0.019643249, -0.011091672, 0.07755631, -0.04902969, -0.048190612, 0.0037666534, -0.042681813, 0.07584194, -0.08728511, 0.037995674, -0.06323214, -0.057734355, -0.042701427, -0.025477482, 0.09613052, 0.053697176, -0.100446075, 0.049243763, -0.05483131, -0.059835963, 0.08531231, -0.10677294, 0.0065796897, -0.090431646, -0.008961085, -0.08096513, 0.03899209, -0.10465935, -0.0083402125, -0.02824392, 0.075554274},
{0.052670915, -0.06677483, 0.005432637, 0.049029447, -0.10213244, 0.040394336, 0.074772954, 0.0044059083, -0.043960974, 0.08000682, -0.08449905, -0.041519128, -0.07221744, -0.09598433, -0.029922338, 0.06077998, -0.025097642, 0.046137616, -0.025514686, 0.12496606, 0.05874287, 0.08150481, 0.101834804, 0.13557939, 0.12941846, -0.013631673, -0.0739079, -0.08085345, -0.016950034, 0.05524461, 0.04027499, 0.020001978, 0.012214223, -0.08999948, -0.019433854, -0.073432386, -0.08250514, 0.066527836, -0.035403274, 0.12826921, 0.026270797, -0.021893226, -0.0305835, -0.053093288, 0.05760217, -0.101990566, 0.036866307, 0.089484766, -0.006931573, 0.041320138, 0.07628551, 0.015687287, -0.078915395, -0.0421212, 0.07542822, -0.050800424, -0.10852411, -0.032280892, 0.0071529797, -0.017261636, 0.039943423, -0.060809355, 0.09877787, 0.072857514, -0.037208125, 0.09505041, -0.11323264, 0.07032178, 0.024953006, 0.06178803, -0.01313061, -0.10232959, 0.0330963, -0.026253516, -0.103765324, 0.009145402, 0.07904228, 0.024411842, -0.06816837, 0.11403939, 0.009747068, 0.0805299, -0.12079017, -0.096212484, -0.029243013, -0.053632125, 0.0030057374, -0.0065735225, 0.062885, 0.058783565, -0.037245773, -0.038016908, -0.053160038, -0.016115814, 0.11058679, 0.10348125, -0.09681778, 0.011149496, 0.03456105, 0.011662923, 0.05794145, 0.026574649, 0.051133893, -0.10241885, 0.009302036, 0.06164278, 0.07416509, -0.016241187, -0.035518765, 0.053219162, 0.018550543, -0.03548292, 0.117150836, -0.06644116, -0.07128559, 0.06366779, -0.026256932, -0.07558945, 0.012117448, 0.02089338, 0.07840613, 0.08532399, 0.046931785, 0.071923606, -0.07973551, 0.10408483, -0.096631415, 0.084918484},
{0.10593579, -0.08952514, 0.14273144, 0.052819706, 0.093603395, 0.031352922, 0.06746721, 0.100271136, -0.06816639, 0.00055484474, 0.062207717, -0.0014867553, -0.0048901485, -0.12696709, -0.10720264, 0.09435994, -0.032289043, -0.06642777, 0.07873871, 0.053700007, 0.03716602, 0.09410911, -0.09143037, 0.074185036, 0.10977576, -0.02726898, -0.058455564, 0.08023155, 0.14693512, -0.05857045, 0.059942912, -0.093021646, -0.06397833, -0.027381474, -0.04964249, -0.102728084, -0.08154569, -0.05607056, -0.105042666, -0.01648847, -0.0004103316, -0.057375126, 0.120529324, -0.09661813, -0.055027366, -0.09457653, -0.010945089, 0.12223073, 0.05766608, 0.032374516, 0.039229028, -0.022116803, -0.10635083, 0.046464927, -0.0606736, 0.0126276435, 0.019705333, 0.08699758, 0.011357671, 0.024169857, 0.054871727, -0.06352024, -0.15229276, -0.04889407, 0.08840673, 0.0551872, -0.072364055, 0.06476222, 0.06321021, 0.041316267, -0.058447603, 0.096091, 0.036325946, -0.08806007, -0.075729005, -0.08063216, 0.115910806, 0.057119116, 0.06318726, 0.048347212, 0.004574497, 0.008795619, -0.013010054, 0.047292773, 0.11584449, 0.047142927, 0.08074175, -0.13980092, 0.12910406, -0.05848623, 0.055779614, -0.1156743, -0.028578691, 0.12159102, -0.005944619, 0.06277305, 0.08383444, -0.13333331, -0.14457262, -0.04850646, -0.08691636, -0.050405744, 0.093342006, -0.095139235, 0.01829055, -0.065011695, -0.09990901, -0.09269018, -0.13762659, 0.059320927, 0.012358692, 0.05515091, 0.16184786, -0.09431901, -0.09436724, 0.04524354, -0.012916229, -0.04907864, -0.1074467, -0.105019994, 0.006686645, -0.06685753, -0.027355706, 0.015013498, -0.036364302, 0.091264196, -0.03482862, 0.07735131},
{0.07384638, 0.053000867, 0.18584089, -0.07199442, -0.10786783, 0.013046443, -0.10926079, -0.03600002, -0.032782547, 0.09477712, 0.09609292, -0.01243541, -0.10306791, -0.009444094, 0.052141927, 0.06439018, -0.0825414, 0.037837133, 0.021783493, 0.08699825, 0.041695274, -0.015192697, -0.011453863, 0.12630945, 0.13557452, -0.041770183, -0.11003394, 0.14128327, 0.14313667, -0.041842412, -0.035656795, -0.06746541, 0.05619292, -0.08084231, -0.010246591, 0.001820359, -0.04344371, -0.12257858, -0.10431645, 0.009636165, 0.015702497, 0.009324089, 0.014976315, 0.019495824, -0.06771771, 0.09494987, 0.01975052, -0.06957742, -0.04621299, -0.08467884, 0.09925073, 0.1023823, -0.11685819, 0.0054238616, 0.03867951, 0.15421763, 0.04042084, -0.09057972, 0.11453668, -0.07503085, -0.011121471, 0.060128774, -0.14705998, 0.0833884, -0.059929408, 0.02512205, 0.039376877, 0.06511387, 0.15039718, 0.07622915, 0.052910134, 0.031269874, 0.099692166, -0.17873785, 0.11035654, -0.050579563, 0.1701643, 0.0762974, 0.019785935, 0.06405426, -0.05854412, -0.09658502, 0.0056287767, -0.061631493, 0.05040568, -0.05808102, -0.10808704, -0.15591677, -0.038334414, 0.022846388, 0.034126233, -0.10658479, -0.049111858, 0.114201024, 0.016941411, -0.06265326, 0.011140585, -0.041248143, 0.03896578, -0.003983833, -0.0056653693, -0.07992412, -0.06565249, 0.050075457, -0.064865775, -0.012101262, -0.11874556, -0.10029731, -0.03627045, 0.06629025, 0.02139658, -0.10097265, 0.011745594, -0.10412358, 0.023146734, 0.02690348, 0.040406756, 0.06676102, -0.067717455, 0.04286775, 0.04860138, 0.018212223, -0.02355571, -0.02725761, 0.06955303, 0.03932431, 0.10341918, 0.014515809},
{0.15946911, 0.11333802, 0.17460915, 0.06822257, 0.020066919, -0.08060536, 0.030511035, 0.058280066, 0.009049244, -0.09895632, 0.020428829, -0.16742353, -0.07888223, -0.08364642, -0.05294003, 0.05241822, -0.027080841, 0.015300138, 0.13736226, 0.058382332, -0.03230012, -0.040288735, 0.011103613, 0.15107608, 0.10341302, 0.075591326, 0.048953, -0.023049759, 0.044883993, 0.03358758, -0.010503586, 0.0641827, 0.049796265, -0.027150314, -0.10882898, -0.07242088, 0.05842712, -0.14551897, 0.036417738, 0.04077766, 0.062454365, 0.029133826, 0.10061406, 0.07554313, -0.045653436, -0.013899263, -0.03941673, -0.056710213, 0.022644296, 0.049829826, 0.050842207, -0.09678233, -0.04554128, 0.03922616, -0.05439841, 0.13981418, 0.087091744, 0.10352898, -0.010157311, 0.02570078, -0.019280074, 0.002028164, -0.083658434, 0.0053119957, 0.045708314, -0.0972245, -0.045843173, -0.06389842, 0.09148287, 0.15337433, -0.02678799, -0.051812146, 0.018652767, -0.14900054, 0.02580635, -0.08268501, 0.1440828, 0.00026467443, 0.16245303, 0.13995495, -0.15286995, 0.056209415, -0.110268526, -0.04368989, 0.008141294, -0.028512971, 0.04989148, -0.021060502, -0.09645561, -0.035155915, 0.04105491, -0.008282301, -0.048606444, 0.10008183, 0.03824689, 0.094797224, 0.045648947, -0.15768605, 0.07661835, -0.0018422902, -0.049706124, 0.016328221, 0.05327781, 0.0799716, 0.013048756, 0.037282556, -0.11793138, -0.07591156, -0.14355806, -0.111026295, 0.15321714, -0.009616442, 0.07814678, 0.046814207, 0.04992637, 0.047797002, 0.04750257, -0.06301445, -0.038693503, -0.048313174, -0.018189708, -0.06763194, 0.0059898123, 0.036279097, -0.054623004, -0.017876035, -0.058548786, -0.054538023},
{-0.04531597, 0.05721785, -0.110040106, 0.07666728, -0.08963722, 0.007755108, 0.07883593, 0.096903324, 0.0030562878, 0.031865552, 0.029826311, -0.11535054, 0.05393434, 0.05396903, -0.03070832, -0.065080486, -0.07118255, 0.029645242, 0.15156943, -0.08861462, -0.00045089299, 0.020987904, 0.020065922, -0.13210414, -0.030112598, 0.07120183, -0.023475042, 0.088202745, 0.1272342, 0.029537331, -0.020775931, 0.018514575, 0.028028404, 0.113403685, 0.002956054, 0.017350731, -0.02830524, 0.1189706, 0.042249408, 0.034070347, -0.021783872, -0.022538446, -0.018064242, 0.052248947, -0.020203033, 0.0762598, -0.044964835, 0.004498037, 0.0043515638, 0.11053087, 0.077150516, -0.10402747, -0.04616652, -0.08571255, 0.0940737, -0.014361722, 0.0053983913, -0.036072582, 0.017957427, 0.011559924, -0.039090823, -0.1097106, -0.02909071, -0.039663106, 0.03520146, 0.060586095, 0.05513446, -0.001397498, -0.020915672, -0.0069830073, 0.017085258, -0.09979717, 0.07572982, 0.109321065, 0.033115055, 0.15078092, 0.05234258, -0.01718396, -0.014283743, 0.10801464, -0.07081149, -0.030969657, 0.026081156, 0.067381226, -0.10063288, -0.086255305, -0.11692625, 0.1251429, -0.15242125, -0.035631474, 0.13247938, -0.042444725, -0.086513214, -0.033435702, -0.014685846, 0.039147526, -0.091275215, 0.057346318, 0.15375352, -0.04186628, -0.070332125, 0.11519627, -0.0011324165, 0.03687145, -0.058698013, -0.050194845, 0.03781225, -0.016515186, 0.117411986, 0.06898588, 0.06340651, 0.05186586, -0.1459094, -0.10929666, 0.018545821, -0.10280082, -0.07147619, -0.09735275, 0.048789095, 0.053333074, 0.1009782, -0.026194062, 0.06934789, 0.16274072, -0.044725597, 0.052611753, -0.06312669, 0.052394517},
{-0.102143034, 0.022546155, -0.11779221, 0.05101923, 0.05657986, 0.012324408, -0.0004939532, 0.086399436, -0.09040839, -0.10101838, -0.12881716, -0.07735027, 0.077079386, 0.024990099, 0.05689699, -0.002547225, -0.04933965, -0.032566797, 0.079870716, -0.08150276, 0.006008655, 0.022107715, -0.1156402, -0.0060931356, -0.08994122, -0.023835644, -0.077642955, -0.06627098, 0.045470502, 0.07470779, 0.10438893, -0.031817917, 0.097944796, 0.12153119, -0.12220195, 0.095478304, -0.051052734, 0.16594335, 0.105782524, -0.051640626, -0.07789906, -0.010796204, -0.031304203, -0.04937564, -0.09033574, -0.016157266, -0.08376369, -0.035066392, 0.081032515, 0.14939101, 0.1340096, -0.05771516, 0.05761814, -0.07928888, 0.076869816, -0.013154152, 0.12793438, 0.08233191, -0.016139591, 0.055896256, 0.08429756, 0.006853979, 0.059966724, -0.04840749, -0.05304249, 0.012500136, -0.11335696, -0.03515, -0.004075736, 0.07538081, -0.004783831, -0.0488551, 0.060323656, 0.04818723, 0.091577865, 0.052480828, 0.05929373, -0.014609776, 0.104449995, -0.020427147, 0.03532615, 0.08282031, 0.10522867, 0.028848656, -0.07647799, -0.11232137, -0.058522925, -0.016770208, -0.10611888, -0.07499487, 0.032623995, 0.0034852752, -0.09145996, -0.065051, -0.09269424, 0.05743386, -0.042029522, 0.024243157, 0.01607068, -0.0155848935, 0.009520926, -0.0018595781, -0.10406885, 0.07661685, 0.014282952, 0.10168575, 0.0738863, 0.040732034, -0.0102796685, 0.081960835, 0.042959984, 0.061713904, -0.1313743, -0.07202577, 0.07476582, 0.094888665, -0.018659495, 0.004153557, 0.08661128, -0.024297476, -0.014191302, 0.0013571734, 0.049847372, 0.024963519, -0.088101126, -0.07156644, 0.031304512, -0.058085885},
{0.043597005, 0.13232389, 0.050283093, 0.063934386, -0.035210744, -0.05402935, 0.02659151, 0.09296535, 0.09994297, -0.0019986778, 0.0048537278, -0.08604502, 0.06880408, 0.10573792, 0.05197666, -0.05670422, -0.051752385, 0.03276958, -0.00032679053, -0.11937601, -0.08474693, 0.13506234, -0.064707674, 0.038930785, 0.04577285, 0.03359668, 0.06783886, 0.08721561, -0.10599383, 0.018565701, -0.028036073, -0.039586786, -0.107131824, 0.102163844, 0.029167812, 0.016730642, 0.06435381, 0.15422593, -0.035852168, 0.028593527, -0.04726999, -0.04555305, 0.02347535, -0.040821336, -0.11745823, -0.092738114, -0.09444341, -0.06272953, 0.079874754, 0.13113098, 0.030036524, 0.078265354, 0.050101664, -0.04452961, -0.071401685, 0.05720015, 0.029148867, -0.0030905008, -0.042906996, 0.03691681, 0.048698682, 0.0068101166, 0.13786852, -0.033009686, 0.10515411, -0.049060524, 0.03853631, 0.056158334, 0.050623544, -0.07266279, -0.06702263, 0.057923492, 0.087755114, 0.037565872, -0.010610131, -0.029444957, 0.0926214, -0.017443173, 0.11453864, 0.012379001, -0.13201419, -0.046192378, 0.15085195, -0.11576915, -0.027248498, 0.09144988, -0.10093965, 0.060304537, -0.02394615, 0.06214263, 0.1410576, -0.10108046, 0.05952546, -0.13297732, -0.10202645, 0.06019236, 0.031968713, -0.028342517, 0.05927317, 0.039786145, -0.026187196, -0.023470664, -0.10048133, 0.01666195, 0.03695635, 0.11830113, -0.04098212, -0.0017324549, -0.10183498, 0.0076909503, 0.03146481, -0.032014973, -0.091083385, -0.06549659, 0.0953913, -0.030370682, -0.049603354, 0.038215846, -0.032940112, -0.016238451, -0.035486665, -0.0677575, 0.032942858, 0.06679843, -0.050428785, -0.10513354, 0.000431564, -0.015484279},
{-0.012018154, 0.049868997, -0.07257245, 0.0773285, -0.087255955, 0.077066734, 0.019766994, -0.06671865, 0.07851617, 0.034467593, -0.0026067079, -0.005394809, 0.07082226, -0.080654345, 0.091511674, -0.10039001, 0.003277262, 0.06554936, 0.060568847, 0.0068086544, -0.103742115, 0.05729153, 0.08099043, -0.067868926, 0.0031921356, 0.040363226, 0.056998875, -0.041524928, 0.107478656, -0.0708695, -0.012025293, 0.021264685, 0.046765212, 0.06667022, -0.06802571, -0.032141924, 0.014324172, 0.0334123, 0.094073035, 0.04032765, -0.097211, 0.10496014, -0.041226674, -0.03156583, -0.0027649743, -0.08225254, -0.04893476, 0.014647595, 0.028949559, 0.050974984, -0.06497078, 0.07949205, -0.106161505, -0.10720953, -0.004994273, -0.021471748, 0.12888744, -0.090404406, 0.12192366, 0.005793363, 0.036759682, 0.07908479, 0.061634194, 0.008416399, 0.037452817, -0.046298828, -0.06396015, 0.08912273, 0.02510775, -0.09290199, -0.025003048, 0.020304836, -0.099673264, -0.07660764, 0.019430833, 0.13653938, -0.06567116, 0.017997153, 0.029753663, -0.02537566, -0.01895352, 0.014247961, 0.111924596, 0.016441707, 0.082615316, 0.09235615, -0.106945455, 0.06860451, -0.036424726, -0.048363358, 0.017432697, -0.056947872, -0.041089274, -0.07552958, 0.021320954, -0.04801759, 0.061015368, -0.020410571, -0.015228105, -0.041040756, -0.09910258, 0.10901686, -0.057752173, -0.07810965, -0.007041019, -0.03832091, -0.0022269113, 0.055899408, -0.0065869717, -0.063190065, 0.13476884, 0.018718272, -0.08524235, 0.006789077, -0.0098942295, -0.034216125, -0.06468633, -0.055306632, -0.088279, 0.05716677, 0.088658504, -0.10347428, -0.048994973, -0.035573706, -0.063765466, 0.05030511, -0.07471846, -0.058771223},
{-0.084525965, 0.1060624, 0.023622474, 0.08220701, 0.014161822, -0.033414938, 0.092362866, 0.011699699, -0.096713424, 0.0030414462, 0.059220415, 0.03761694, -0.07026699, -0.06349572, 0.031136123, -0.0052624657, 0.06900908, -0.059845824, 0.032000862, 0.047939047, 0.00830376, 0.09321911, -0.077531874, 0.06977195, 0.084842876, -0.06267571, 0.066339225, -0.04420651, 0.038217433, -0.02500155, -0.07540574, -0.023609813, -0.078488424, 0.09163062, 0.058858585, 0.044329926, 0.089326926, -0.035408787, 0.042182926, 0.114750065, 0.039321456, -0.065003715, -0.024669865, 0.028691297, -0.121280745, 0.00823019, 0.039161816, -0.11165587, 0.03494139, 0.10580034, 0.055551045, 0.02425021, -0.014763525, -0.06195416, -0.039762206, -0.07999252, 0.00444267, -0.085492656, 0.0071092667, 0.07103299, -0.018665116, 0.06311747, -0.085031494, -0.029726282, -0.015773475, -0.074078575, -0.10905135, -0.037049733, 0.029654542, 0.097834855, -0.0062671066, 0.04295273, 0.08844747, 0.10334551, -0.027785713, 0.083940454, -0.079365395, -0.031030118, -0.048709676, 0.033483107, -0.114031136, 0.042531446, -0.014817168, -0.089185975, -0.107216, 0.03405337, -0.01995056, 0.08412122, -0.0057625924, -0.056288797, 0.04594447, -0.05161541, -0.050037056, -0.10743039, 0.036057215, -0.055278905, 0.053950742, -0.11460515, -0.03212094, -0.03396465, 0.019406766, -0.046579573, -0.030230284, 0.06877047, -0.05005791, -0.033876687, -0.009357388, -0.023708338, 0.0866547, 0.011957273, 0.13825893, -0.037035882, 0.075128324, -0.0861242, -0.07669358, -0.05277838, -0.047565665, -0.1026256, -0.044770803, -0.0098736435, 0.03153367, 0.047541473, -0.039251737, 0.05580498, -0.01591023, -0.03599365, -0.058761813, 0.09129191},
{0.042710867, 0.050386343, 0.0085418755, 0.009564351, 0.06398777, -0.003393352, -0.046022672, -0.049318206, 0.052173406, 0.045675248, 0.026603458, -0.039618958, -0.044224687, 0.08586122, 0.0670896, -0.100797296, 0.01798011, -0.11017813, 0.0076491726, -0.09767107, -0.07085318, -0.0796014, -0.03977279, -0.019492906, 0.015131688, -0.086116366, -0.09571841, 0.05565558, -0.08052063, 0.08645737, 0.057003703, 0.05109811, 0.079463065, -0.079504, -0.080140196, -0.0006659335, 0.0053480524, 0.01390235, -0.020284804, 0.07892685, 0.0025305308, 0.032610357, -0.068827204, -0.10780473, 0.049378958, -0.026316008, 0.032335415, 0.0063331686, -0.1060435, 0.03903182, 0.08259782, -0.06103333, 0.06497681, -0.0076509784, 0.00077382475, -0.03565514, 0.118456945, -0.031960532, 0.036855295, -0.098580375, 0.024644446, -0.082004644, 0.0038197136, 0.042647824, -0.043716274, -0.0025826374, -0.090322256, 0.08117987, 0.10396918, 0.0027195571, 0.08826911, 0.07383799, 0.10300703, -0.047451388, 0.037596203, 0.07828519, 0.026165534, -0.0024042055, 0.102439255, 0.028758688, 0.08906007, 0.06106934, 0.044953708, -0.052747037, -0.10157651, 0.07527336, 0.08718654, 0.07646417, 0.04657488, -0.038623553, 0.1183029, 0.0040594833, -0.064636484, -0.06336768, -0.069667615, 0.07489449, -0.007491909, 0.058753148, -0.049194545, 0.074774176, 0.02234158, 0.00094047526, -0.011157092, -0.10000819, -0.036020484, 0.010315878, 0.017262623, -0.03372358, 0.008361463, 0.0059552104, -0.035294034, 0.10572632, -0.08642615, -0.10024734, -0.021786347, -0.05881435, 0.02966177, -0.077518314, -0.076402836, -0.035881944, -0.0021412296, -0.03847726, -0.008865912, -0.008327222, 0.079091206, 0.031001342, -0.012518903, 0.035833787},
{0.087025985, 0.061804503, 0.09905289, -0.029717362, -0.0024563584, 0.095052645, -0.03459334, -0.0011214837, 0.073824644, 0.07461062, 0.02833717, -0.12002753, 0.019306723, 0.04320502, 0.13461746, -0.05540347, -0.0916273, 0.06378819, 0.034994785, -0.040325142, -0.07540733, -0.040492557, 0.0037672913, -0.05697631, -0.1169173, -0.010538201, 0.09940768, -0.052417465, -0.05527665, -0.021797702, -0.051256403, 0.008005938, 0.04658836, -0.084722474, -0.057190157, -0.015203825, -0.07024511, -0.067668684, 0.033052385, -0.041102204, -0.082349144, -0.0752572, -0.008718545, 0.07783883, 0.0041500963, -0.101882905, -0.052675087, -0.087984025, -0.08154875, -0.057180785, 0.027255753, 0.08667892, -0.022175955, -0.105971314, 0.017091677, 0.0066313134, 0.036991518, 0.06861515, 0.047354452, 0.01750535, -0.0271623, 0.08413934, 0.05442639, -0.057748172, -0.09999058, -0.04059971, 0.05242508, 0.06821656, -0.032009747, -0.0797095, -0.012253944, 0.010438981, -0.06620813, -0.061849453, 0.04952775, 0.08242277, 0.007644286, -0.05031589, 0.13811755, -0.071379155, 0.07573952, -0.01640632, -0.04073179, -0.06730644, -3.190916e-05, -0.053528715, 0.016305065, -0.00089685956, -0.023886431, -0.06610061, 0.03318277, -0.086535245, 0.078627676, -0.02330149, 0.04539119, -0.09384628, -0.0903109, -0.04497892, 0.039486375, 0.102064475, -0.09659143, 0.09390092, -0.035846967, -0.019396275, -0.009803057, 0.061854795, -0.084982865, -0.10335104, -0.06955871, -0.06308073, -0.025666036, -0.038542412, 0.05056295, -0.096960045, 0.067050785, -0.02420942, 0.07376306, -0.08139318, -0.041524347, -0.028002068, 0.06823903, -0.058998547, 0.13272144, -0.031491153, -0.08501962, -0.05506232, -0.0038691943, 0.048708547},
{-0.025097486, -0.02329694, -0.08794973, -0.09917727, 0.096934505, 0.054368496, 0.047168624, 0.05330798, -0.106591135, -0.04027646, 0.12167173, -0.029762913, -0.06058214, 0.054766066, 0.07106952, 0.038070474, 0.07147878, -0.07207258, 0.11975453, -0.03970127, -0.099835455, 0.033919316, -0.059204567, 0.023650296, 0.09180697, 0.07732215, 0.031489376, 0.02313641, 0.06845926, -0.005718208, -0.094205394, 0.06704249, 0.08560915, -0.090277284, -0.020773252, -0.070403, -0.11234221, -0.05378451, 0.037881978, 0.11518361, 0.074544646, -0.026347265, -0.0389001, -0.027982976, 0.025385614, -0.06108867, 0.02077651, -0.032330662, 0.09728393, 0.07909546, 0.045011256, -0.010043345, -0.009062304, -0.076829575, 0.104959846, 0.09332996, 0.03181862, -0.091996886, 0.054887295, 0.0054548606, -0.08180093, 0.09365054, 0.025908614, 0.057472214, 0.035281986, 0.022335451, 0.029346256, 0.03955829, 0.029923996, 0.09729126, -0.040672995, -0.1107903, -0.07572464, 0.07242832, -0.050817557, 0.13693368, 0.03561088, -0.0053208396, -0.02053285, -0.015608021, -0.068545744, 0.07857512, 0.085416175, -0.10347848, -0.084039815, 0.07495551, 0.030407868, -0.011531041, 0.023668826, -0.09760481, -0.044699185, 0.08753008, -0.09217876, -0.014849599, -0.10539171, 0.0077521354, 0.07378596, 0.03959485, 0.07492828, -0.10300325, -0.0019475371, -0.08944031, -0.08778756, 0.0017456859, 0.037451275, 0.051157296, -0.088871285, -0.06659266, 0.060533762, 0.028305234, 0.08982281, 0.10248496, -0.061296444, -0.1066605, 0.01675769, 0.07539689, -0.012289792, 0.055228427, -0.04533942, -0.0020508543, 0.059227113, 0.059556052, -0.068248026, 0.029023962, 0.047008827, -0.10955949, 0.027221283, 0.06412603},
{0.03869805, 0.09103254, 0.045501422, 0.065385826, -0.032738917, -0.064130306, 0.07293428, -0.05760567, 0.07953015, 0.06410216, 0.08118769, 0.0693829, 0.062339183, -0.101303816, 0.062447146, 0.061773036, 0.005928173, -0.0023983617, 0.07054739, -0.04068473, -0.0009706968, -0.082775794, 0.05987542, -0.06665315, -0.024447428, 0.051943146, 0.052609757, -0.073048525, -0.0394789, -0.051853124, -0.012088916, -0.04422464, -0.05764952, 0.0066263718, -0.03930266, 0.09527292, -0.039068356, 0.033576213, 0.10105949, 0.0121761095, -0.0034891376, -0.025111765, -0.06307225, 0.08248241, -0.09353501, -0.013116114, -0.10570317, 0.025126843, -0.067667946, -0.09578426, 0.016464306, -0.049778834, -0.07286361, -0.062348593, -0.016125351, -0.08141778, 0.068410605, 0.053998396, -0.056402475, -0.098078735, -0.03062679, -0.034123365, -0.050685834, 0.048539758, 0.005588107, -0.07582373, 0.06506918, -0.07208702, -0.073916994, 0.084576994, 0.059887156, 0.08915074, -0.085803896, -0.0005672907, 0.07657989, 0.03323379, -0.06785422, 0.056691855, 0.14170069, -0.05703832, 0.09887368, 0.10212004, -0.08377712, -0.009581411, -0.09563342, 0.041055724, -0.06043276, 0.09676465, -0.02551814, 0.024074037, -0.043533236, 0.087564416, 0.04999326, -0.022119276, -0.13596383, -0.018174373, 0.08947608, 0.06615579, 0.05848946, -0.023234122, 0.105985224, -0.022810413, -0.08413869, -0.022006042, -0.02184407, 0.0038229409, -0.014650064, 0.05105978, 0.04542365, -0.102579996, 0.0007525448, 0.017660119, -0.017364537, 0.06519795, 0.051556498, 0.074056715, -0.0039040016, -0.037245207, 0.08379807, -0.03274163, 0.106055126, 0.022809664, 0.028413078, -0.037546262, -0.098456495, -0.007309628, 0.13354234, 0.063875206},
{-0.07207466, 0.011655917, 0.076926425, -0.0856321, -0.11420934, -0.07121928, -0.048041984, 0.035986602, -0.023485683, -0.10044119, 0.010193809, -0.11517997, 0.0014037661, -0.11708594, 0.06132392, -0.048702028, 0.044086292, -0.0359799, 0.08943474, 0.070646875, 0.023890825, 0.084560305, 0.040557902, 0.03651494, 0.034065638, -0.003794654, -0.03953478, -0.001994448, 0.079454, -0.026099091, -0.11491468, 0.043425556, -0.0071768807, -0.078064814, 0.024740325, -0.022455672, -0.03773738, -0.04276792, 0.09740751, 0.031042263, -0.05326522, -0.037018523, -0.06914163, 0.0014846686, -0.13165963, 0.01919105, -0.019200653, -0.0027905796, -0.09144121, 0.037180148, 0.046324603, -0.056850065, -0.051975876, 0.08942554, -0.012080193, -0.048307627, -0.09255484, -0.08739419, -0.001048235, -0.10260602, 0.090031736, 0.03731115, -0.0059459773, 0.038990915, -0.03476473, -0.10258269, 0.030019473, -0.067270525, 0.0006555971, -0.06904973, -0.089609064, -0.0901365, 0.00075885653, 0.032946873, 0.0173816, 0.056150377, -0.0882631, -0.07116708, 0.1377707, -0.012266349, -0.0027628369, -0.052225254, 0.102452874, 0.03850288, 0.028804028, 0.07265637, 0.038605504, 0.047438018, 0.07351934, -0.09412208, 0.10224605, 0.09670217, 0.06748651, 0.0075985407, 0.03306907, 0.045692295, 0.09611189, 0.03761294, -0.11444703, -0.053219512, 0.06777942, 0.081801675, 0.056358594, -0.048460916, -0.048722234, 0.11660834, -0.07396255, -0.004687412, 0.054317906, -0.063931085, 0.05321005, 0.051414505, -0.06408406, 0.076621056, -0.10483235, 0.08326542, 0.09183264, -0.021291077, 0.011844925, -0.07770547, 0.079010375, 0.022424722, 0.10737908, 0.059896234, -0.017269276, -0.11884149, 0.113753825, -0.025438987},
{0.062980406, 0.0038981207, -0.003939607, 0.06931391, -0.046117757, -0.07398009, -0.067787856, -0.06532557, 0.056959346, 0.0314015, -0.02753184, -0.0837655, 0.09071723, 0.00013213104, 0.08271951, -0.017970024, -0.07770358, 0.07765841, 0.116130814, -0.06064569, -0.09968075, 0.0695741, -0.11590564, 0.07066143, 0.061851885, -0.025798988, 0.0689254, -0.07006598, 0.012760686, 0.021797955, 0.07412984, 0.09062032, -0.09157399, -0.0663504, -0.07489954, -0.106194735, -0.050661523, 0.109381035, 0.078211516, -0.027809538, -0.07685495, -0.012286387, -0.052463245, 0.050423745, -0.1352942, 0.02516529, 0.009612858, -0.093373746, -0.09002106, 0.0912828, 0.13081723, 0.05390954, 0.056566752, 0.08560976, -0.10012474, -0.023449576, -0.09236756, -0.10034591, -0.0016187814, 0.08795531, 0.08676823, -0.04499544, -0.010152635, -0.041820988, -0.009646937, 0.059108917, -0.020838981, -0.08418897, -0.11267348, 0.1084064, 0.058077224, -0.025980964, 0.0035388544, -0.05783828, -0.016470933, 0.030320978, -0.02417001, -0.012726888, 0.039015125, -0.036141425, -0.0074780127, 0.07174744, 0.12182066, 0.072930135, -0.122613, 0.030538738, -0.012293768, 0.063568704, -0.0057923454, -0.0295875, 0.088217326, -0.077434696, -0.07362877, 0.006155914, -0.049784638, -0.10487442, -0.09203923, 0.031885415, -0.016882176, 0.09030254, 0.028655648, -0.08570635, -0.016807718, -0.014247172, -0.12605481, -0.03327348, -0.056656286, -0.07985817, -0.09914695, -0.06074853, 0.07618914, 0.051648557, 0.068146504, -0.060258783, 0.045574605, 0.005004977, -0.035424713, -0.02683527, 0.011702062, -0.07784853, -0.0086440435, -0.023158632, 0.11272895, -0.05202433, -0.09080455, 0.022826869, 0.15331662, -0.01136444},
{0.048083607, -0.108258314, -0.078297034, -0.11834681, 0.055383243, -0.05002745, -0.07865495, -0.02473376, -0.09402744, 0.060481966, 0.08178937, -0.029654294, 0.12312881, 0.09683737, 0.05762451, 0.026414104, 0.056182988, -0.04701496, 0.033494167, 0.09889577, 0.03366352, 0.048896227, 0.05382357, -0.09420862, 0.06614606, 0.039768297, 0.06375588, 0.07411762, 0.042063512, -0.059551474, -0.01685435, -0.10719691, -0.01994203, 0.13124943, 0.0479099, 0.0027827148, -0.008727404, 0.08510539, -0.06654695, -0.09579214, 0.06267218, -0.06992607, -0.09436881, -0.03692606, -0.01141138, -0.08604763, -0.022660948, -0.07997712, -0.024340764, 0.10300434, -0.02257704, 0.056151167, -0.08533014, 0.0762494, -0.054979764, 0.09865363, 0.016911507, -0.03386949, 0.019846786, 0.010419717, -0.10603047, 0.026066402, 0.08292946, -0.07338981, -0.10276272, 0.025257805, 0.06297327, -0.017812304, -0.02289833, -0.015842363, -0.09577922, 0.021117497, -0.028401598, 0.11442756, -0.032822236, 0.03243674, -0.0025840313, -0.06395675, 0.11749097, -0.05313475, 0.025626488, 0.08938971, -0.05347083, 0.055030648, 0.05346935, -0.020981975, 0.08097274, 0.12118636, 0.019081227, 0.012750118, -0.0018997664, -0.054511067, 0.04019043, 0.04257857, -0.06720843, 0.0672078, -0.10596645, -0.0717223, -0.031707466, -0.032698117, -0.08628923, 0.081713594, -0.024112627, -0.0030565187, -0.12125418, 0.09302343, -0.02918934, 0.06977675, 0.06495414, -0.08408353, -0.068754286, 0.07547887, -0.04374619, 0.06547149, -0.004437037, 0.061217427, -0.005948139, -0.100245565, -0.011510051, -0.074568816, 0.07339978, -0.040222716, 0.07574753, -0.0814595, 0.059933856, -0.041871138, -0.042622685, 0.080900535},
{0.024039984, -0.05761276, -0.010236549, 0.00018542712, 0.0827522, 0.031117141, -0.09069282, 0.02231893, 0.019346163, 0.05900809, -0.015792502, -0.015680598, 0.051680356, 0.06630898, 0.10272079, 0.019851116, -0.0826632, 0.033484578, 0.13508743, -0.07201623, 0.041864768, -0.064418264, 0.07816866, 0.06833402, -0.036002368, 0.02254006, -0.10244565, -0.05005762, -0.009199843, -0.032885805, 0.031586315, -0.046213374, 0.0901355, 0.0945479, -0.034237105, 0.016100856, -0.089573614, 0.10751946, 0.018612599, -0.04389676, -0.0518227, 0.01289621, -0.021631587, 0.099035524, 0.07632303, 0.07487361, -0.0469417, 0.073529065, 0.0020029694, 0.0391299, -0.007846907, -0.002334237, 0.10579645, 0.075886, 0.09671889, 0.005625025, -0.06956632, 0.040580526, -0.10894054, -0.10765573, -0.036716964, -0.079091415, 0.036050647, -0.037610933, 0.008520067, 0.081341304, 0.019890381, -0.03364312, -0.0036136892, -0.0226679, -0.064689755, -0.11259298, 0.09667884, 0.105815805, 0.0296056, 0.09197388, 0.032141063, 0.070776135, -0.05678398, -0.01930215, -0.009008267, -0.06100761, -0.042463735, 0.05673251, -0.10463154, 0.07106695, -0.035369016, 0.11471848, -0.0035678246, 0.06449133, 0.098617695, -0.029714866, -0.0027547106, 0.012002431, -0.08268294, 0.10586184, 0.04027781, 0.07767076, -0.07755175, 0.035783842, 0.022001058, -0.056788735, -0.018923072, 0.08810745, -0.10345518, -0.05429789, 0.03601576, -0.06941413, 0.07039302, 0.0075983447, -0.031932995, 0.015745565, -0.093790606, -0.08764836, -0.056638785, 0.07398512, -0.039856333, 0.08427782, 0.05000429, 0.01453945, 0.023534914, 0.022717513, 0.0155573515, 0.012206865, -0.09100787, -0.03515149, -0.0042361086, -0.023731224},
{-0.031602465, -0.029108088, -0.044586115, -0.014455604, 0.02381855, 0.020648092, 0.07092255, -0.06150794, 0.04954639, -0.06541179, 0.15864179, -0.019795276, -0.06083703, 0.050340187, 0.060805306, 0.1296677, -0.07019943, -0.01365639, 0.05267521, 0.071656674, 0.016181024, 0.05665853, 0.10305597, 0.07307849, 0.11276407, 0.01651424, 0.09501544, -0.062686555, 0.006695282, 0.06591071, -0.023340695, 0.018101746, -0.10532004, -0.047338076, 0.1610107, -0.09926213, 0.09276811, 0.021457883, 0.039431915, 0.0100045735, 0.005734367, -0.09345848, 0.045276202, -0.06416985, 0.10722075, 0.09385354, -0.028704144, 0.113976836, 0.10328251, 0.03554931, 0.09130963, -0.09977452, -0.02615189, 0.0011098105, -0.049854167, -0.06796254, -0.034508903, -0.01230339, -0.13731278, 0.088759355, 0.049575504, 0.073743515, 0.014940791, -0.06533569, -0.030828148, -0.079696335, -0.051004734, 0.06049414, 0.004318028, -0.0060899216, -0.042824768, -0.024522614, 0.085573554, -0.12388985, 0.12513597, -0.07755365, 0.050873403, -0.097230166, -0.020016007, -0.062424913, 0.13542522, -0.09832283, -0.047529146, 0.07837119, -0.041208442, -0.10201924, -0.018297695, 0.036682807, 0.003722683, 0.034204863, 0.022167781, -0.05165085, -0.015324913, 0.04005755, 0.09969123, 0.082438454, 0.06887214, -0.0020831295, 0.019748142, 0.029783636, 0.036640614, 0.07452892, -0.0019433066, -0.08350673, 0.10394194, -0.10843852, 0.09038173, -0.03481711, -0.05613508, -0.019585092, 0.064022884, -0.008319534, 0.123855926, -0.050478972, 0.06267853, -0.00809369, 0.008710945, -0.0835227, -0.060517658, 0.0040005296, 0.08936482, 0.094023556, 0.09167589, 0.06195583, -0.051021375, 0.04139922, -0.009770041, -0.06059993},
{-0.060368024, -0.05118667, -0.07599141, 0.09341164, -0.04303721, 0.019723147, -0.0754565, 0.050226808, 0.06201102, 0.08385731, -0.036542904, -0.05562286, 0.08873669, 0.019444184, -0.030326461, -0.00020605692, 0.07686597, 0.05525228, 0.051572792, 0.17900036, -0.037886564, -0.081827916, 0.15829003, 0.1014199, 0.10322338, -0.13952255, 0.043925017, -0.022432677, 0.021248015, 0.079260126, 0.1195497, -0.033952165, -0.01581275, -0.06161551, -0.048399612, 0.086869724, -0.049815953, -0.0866819, -0.03099608, -0.07900845, -0.051313393, -0.060863707, 0.00052899634, -0.009810709, -0.048128802, -0.085019566, -0.101655364, 0.14018404, -0.0603954, -0.017460767, 0.017873857, -0.098716244, 0.1218377, -0.039372336, -0.09525625, -0.003756247, -0.1425522, 0.0948361, -0.035648502, 0.08556451, -0.03869078, -0.053317413, -0.043071732, -0.056917492, -0.058213606, 0.098186724, -0.011018681, 0.051522136, -0.0054303026, -0.035869103, -0.08160798, 0.059341997, -0.00524164, 0.045512803, 0.058498796, 0.05515976, -0.05954431, 0.059937894, 0.037313048, 0.007909955, -0.02226167, 0.08001684, -0.119407706, -0.10066228, 0.09597181, -0.07004575, 0.11477028, 0.011810432, -0.03611376, -0.087912165, -0.046905328, 0.124809824, 0.053514987, -0.023766771, -0.016214032, 0.095477566, 0.03903964, 0.12128809, -0.10937476, 0.09210189, -0.06770101, 0.06270911, 0.047940366, 0.0013132989, 0.15564495, -0.096172065, 0.059341576, -0.10446418, -0.04331848, 0.08795656, -0.106418826, -0.03762473, 0.104401, -0.09290144, -0.015705742, 0.035503488, 0.04920959, -0.045708694, 0.0015814987, 0.06969829, 0.060358953, -0.03703883, -0.06334135, -0.14377512, 0.10207096, 0.08354905, 0.040233918, -0.12016243},
{0.023070905, 0.04239899, -0.073956355, -0.05458261, 0.046831038, -0.10379733, -0.036230933, -0.065927036, -0.06947801, -0.08778239, 0.090028934, -0.041980077, 0.07217714, 0.04071229, -0.098575644, 0.038903374, -0.0976351, -0.070768, -0.03075409, 0.031456374, 0.02485931, 0.045164805, 0.16420382, 0.041036416, 0.030778961, -0.007390597, 0.020018546, 0.013756461, -0.05575778, -0.060637, 0.10294114, 0.06985607, 0.017625963, -0.113912046, 0.04025831, -0.081561096, -0.05436283, 0.012733485, -0.045098066, 0.021126607, -0.05896723, 0.025089726, -0.061875824, -0.039184798, 0.15395504, 0.025786636, -0.006916903, 0.1549097, 0.02259858, 0.07291953, -0.13491912, 0.104366004, 0.112733506, 0.028027976, -0.03018587, 0.099740714, -0.058225345, 0.00196594, 0.04825213, -0.10407603, -0.11217615, -0.051403757, 0.052352104, 0.08292706, 0.047184467, -0.08963373, 0.04440793, 0.015308902, 0.051896967, 0.066124424, 0.097979486, 0.05133826, -0.106543176, -0.09588735, -0.023299925, 0.011822893, 0.03101299, -0.026960671, 0.0432767, 0.06738498, -0.006490609, -0.050213873, -0.09248145, -0.10742865, 0.0052146707, 0.061549086, -0.047481615, 0.04738364, 0.018475296, -0.06993102, -0.043065403, 0.008876772, 0.028210834, 0.10314196, 0.12079349, -0.08179175, -0.007578723, 0.150194, -0.07947993, 0.008678153, 0.0010111332, -0.042469066, -0.023261305, -0.03046196, 0.09469089, -0.109125614, -0.036451407, -0.035346083, -0.05888579, 0.030436039, -0.096550524, 0.06155753, 0.091423266, -0.05126409, 0.08360578, 0.010585632, -0.02087975, 0.07689659, 0.026592132, 0.016341507, 0.07550941, -0.0021998156, -0.059987005, -0.01751456, 0.05697742, 0.07400821, 0.011262363, -0.13860531},
{-0.08164226, -0.0071601537, -0.0113490755, -0.051059093, -0.020130215, 0.022507623, -0.07553168, -0.07590196, 0.022716045, 0.055950478, -0.044184785, -0.042335603, 0.036421668, 0.09826346, -0.10383868, 0.09503255, -0.070735626, -0.004748553, -0.1095248, -0.0678898, -0.041388083, 0.05810075, 0.010212911, 0.074736126, 0.057533965, 0.027901812, 0.00798305, -0.047322284, 0.08413936, -0.06080914, -0.056461517, 0.08812279, -0.10930241, -0.039461844, -0.00052464945, 0.021913022, 0.08443801, -0.06539134, 0.020436153, 0.12707733, 0.101414986, 0.061613977, 0.055737462, 0.09349359, -0.020596087, 0.09961799, 0.081760615, 0.11363484, -0.073609024, -0.047372058, -0.018620962, 0.02377893, 0.014898977, 0.06401697, 0.06803019, 0.019655047, -0.02247588, 0.036138594, 0.05167592, 0.043933257, 0.03205576, -0.027266711, -0.002525899, -0.0034177005, 0.06533259, -0.096834764, 0.052215032, -0.039821677, 0.031031476, 0.020297222, -0.09950959, 0.034853283, 0.084636986, -0.067656375, -0.031662207, -0.046537098, -0.090210244, -0.07158156, 0.031885233, 0.051736604, 0.10460084, 0.10024856, -0.062553406, -0.08395846, 0.021861963, 0.08399976, 0.112886764, -0.11854745, -0.050746553, 0.048710883, 0.044190597, -0.0016544753, 0.00675229, 0.0098257605, -0.05806204, -0.051276773, 0.07937789, 0.089892015, 0.087219276, -0.06462081, -0.012975179, 0.026365792, -0.09203214, -0.006149411, -0.05487367, -0.095629565, 0.1003008, -0.07939855, -0.11129433, 0.08615676, 0.05806148, -0.069356985, -0.00025446314, 0.005428002, 0.09692393, 0.0077333115, 0.0548016, -0.070392996, -0.07833544, 0.09771736, -0.05015474, 0.054487906, -0.037889935, -0.13325079, -0.07077761, 0.115869306, 0.016464708, 0.05180273},
{0.059548665, -0.04568684, -0.0308925, 0.030181363, -0.026962921, 0.028740644, -0.03181506, -0.10121827, 0.09089582, 0.09027921, 0.054858312, -0.022961525, -0.060060453, 0.015790105, 0.035226956, 0.06480837, -0.0066504916, 0.02328319, 0.07161887, 0.0617575, -0.09566712, 0.044482537, -0.12195981, 0.14169073, -0.038860165, 0.0063827303, 0.056657348, 0.06731433, 0.0309949, 0.0032464592, -0.025138576, 0.040086314, -0.034026913, -0.12624148, 0.072535776, -0.10464482, -0.067973316, -0.14259355, 0.042391844, 0.10369167, -0.036102407, 0.007776253, 0.030649716, -0.09302032, 0.0137836095, -0.033350196, -0.10054913, -0.04544121, 0.043877766, 0.025250882, 0.019606583, -0.04743395, -0.13125381, -0.054638978, 0.06577653, -0.024984997, -0.10882896, -0.104117446, 0.05439071, 0.05224545, 0.042973228, 0.055668037, -0.15161319, 0.047391325, 0.037225023, -0.04901754, -0.10687184, -0.003508456, 0.051626116, 0.05702422, 0.0099996915, -0.058992647, 0.07427676, -0.06203133, -0.03131898, -0.06861189, 0.11569367, -0.08852254, 0.029233897, -0.032045875, 0.015913587, -0.095703386, -0.05460446, 0.0801547, 0.07980737, -0.02637132, 0.028397176, -0.14841552, -0.009553286, -0.10410481, -0.060484007, -0.031458095, 0.016627356, 0.03102852, -0.03822695, -0.05189765, 0.02351527, -0.03138748, 0.002495469, -0.017607711, -0.021341376, -0.016314685, -0.04031158, -0.035882525, -0.06118871, -0.09549561, -0.014394792, 0.060358, -0.06979087, 0.040360376, 0.1210487, -0.037572585, 0.0341759, 0.007945164, 0.04099463, -0.033312757, -0.10143516, 0.026385382, -0.11102416, -0.040812626, 0.04883698, 0.054050826, -0.0063334275, -0.009489004, -0.09333875, 0.05865112, 0.07751339, -0.035394564},
{0.16824196, 0.046628244, 0.0853204, 0.0607331, 0.018182317, -0.085885145, 0.0715254, 0.030849725, 0.08516446, 0.06804153, 0.030871592, -0.16564047, -0.08257126, -0.06753565, -0.075541526, -0.12217296, 0.073788576, -0.110835716, -0.020239282, -0.00537143, 0.030443123, 0.10308328, -0.13285393, 0.18456355, -0.016970297, 0.06623579, -0.065590985, 0.14522831, -0.0016036367, -0.09794319, 0.031983543, -0.10909304, -0.09238126, -0.10676936, -0.050870482, -0.06144542, -0.087840475, -0.10538755, 0.054762222, 0.17420429, -0.0068502403, -0.016152136, 0.06442925, 0.09212867, -0.05390107, -0.091832854, 0.07362883, 0.07177614, -0.103132285, -0.0978493, 0.036890212, 0.055622697, -0.07664181, -0.057477426, 0.062702745, 0.11759543, -0.08146114, 0.07317439, 0.06334779, -0.060919154, -0.09172541, 0.050017424, -0.16378134, 0.07657634, 0.060105816, -0.05955821, -0.025533296, -0.07821846, 0.03457743, 0.11338335, -0.06516433, 0.008337645, 0.08811757, -0.0919161, 0.09044251, -0.116532676, 0.13944982, -0.06278972, 0.14713302, 0.13959739, -0.045522917, 0.10614622, -0.040312827, -0.045588836, 0.02034068, -0.09939041, -0.010710503, 0.028046386, 0.10876589, 0.059953764, -0.016863232, 0.029128818, -0.012321845, -0.029026518, 0.02672146, 0.053922117, -0.04302215, -0.1177972, -0.103463665, 0.031655267, -0.065252736, -0.023252731, -0.0732784, 0.046554834, -0.09237305, -0.016228823, 0.037040092, 0.05116791, -0.027957993, -0.0908553, 0.08394602, -0.0344615, 0.12496208, -0.029839814, -0.022811964, -0.043946195, -0.029057145, 0.023807466, -0.017414724, 0.038046703, 0.03287314, -0.07403613, 0.07604872, 0.11516539, -0.06549853, 0.05676496, 0.11929975, 0.08726156},
{0.093265034, 0.05665332, 0.053290773, -0.045288257, -0.05302041, 0.0039927736, -0.0072991448, -0.005530946, -0.018427387, 0.058606863, 0.06135967, -0.15364191, -0.11784142, -0.058649033, 0.12708384, -0.03772972, 0.011621903, -0.04313064, 0.04362711, 0.040961437, -0.06541174, -0.07778622, -0.037568, 0.09402488, -0.096798696, 0.06552937, 0.06299326, 0.03529288, 0.18881263, -0.08515282, -0.026506227, -0.09384613, 0.08415256, -0.1276134, -0.08098425, 0.09187005, -0.01474852, 0.03008684, 0.013235651, 0.18095407, 0.015177293, 0.081583336, 0.11292519, 0.044641517, -0.12322151, 0.04204439, -0.005319111, -0.14554638, 0.10046229, -0.14192483, 0.042933315, -0.07848946, -0.013796478, -0.031097619, -0.052541297, 0.11821982, 0.1505624, -0.0346407, 0.05972231, -0.045600556, -0.0058889003, -0.011484546, -0.05728628, 0.048064694, 0.066312715, 0.08941313, -0.04208248, -0.039155155, 0.09082251, 0.025493493, -0.0712663, 0.0538208, -0.07528942, -0.06239339, 0.011854891, -0.071697675, 0.06567877, 0.09918651, -0.020732459, -0.025593773, -0.03125499, -0.04813519, 0.09364999, -0.059377324, -0.106288396, -0.076765835, -0.09068401, -0.052799016, -0.115894094, -0.0260259, 0.083411664, -0.044134125, -0.03474564, -0.0013527182, 0.08958583, -0.08791633, -0.09263703, -0.022912987, 0.13661222, 0.042540014, 0.08193812, -0.012110698, -0.048058018, -0.05318807, -0.15208846, -0.06582773, 0.03203391, 0.062066995, 0.007936845, 0.087145455, 0.15328811, -0.050951127, 0.05801746, -0.0685401, 0.099954784, 0.052285623, 0.051433828, -0.02408617, 0.091670305, -0.06543118, 0.15907742, -0.09739688, -0.040586848, 0.07804612, -0.008732997, 0.17968675, -0.09894392, -0.03259067},
{-0.10890817, 0.03448825, -0.14271131, 0.021549515, 0.08370042, 0.035013497, -0.042444374, 0.09295541, -0.05845363, -0.03900238, -0.017458105, -0.09570952, -0.036412336, 0.02350449, -0.021465832, 0.009997765, 0.07759319, -0.090790264, 0.11618849, -0.18033573, -0.046855524, 0.073722586, -0.084773876, 0.032475434, -0.113851674, 0.053832106, 0.05079764, -0.08518782, -0.09944691, -0.10223838, -0.010060753, 0.07362619, -0.0034128954, 0.12881102, -0.07249914, -0.04626434, -0.03546876, 0.13933802, 0.06412103, 0.08654066, -0.07960406, -0.047579862, 0.009576733, 0.0064724684, -0.065298, 0.072601624, -0.08530801, -0.11158203, 0.02260147, 0.07289347, 0.026861448, -0.079692505, -0.084222734, 0.027836097, -0.030738965, -0.11112219, 0.07523229, 0.040372, 0.149368, -0.04722043, -0.06225777, 0.054651085, 0.060252454, 0.07170302, -0.10655903, -0.033932667, 0.04513611, 0.08354318, 0.0898928, 0.055668935, -0.006121543, -0.07528519, -0.077042714, 0.1564173, 0.082100116, 0.038082216, -0.071259044, 0.05082369, 0.058961175, -0.044431604, 0.003207946, -0.002614595, 0.060653795, 0.029508904, -0.13762191, 0.040343996, -0.076330155, 0.02098754, 0.005540391, -0.09772302, 0.17979857, 0.06518846, 0.032707646, -0.014038102, -0.009196846, 0.06334306, 0.054261476, -0.05442311, 0.05484293, -0.08565242, 0.06667252, 0.16096194, 0.06713709, 0.07064779, -0.13111399, 0.15759864, -0.0150942085, 0.06639674, 0.1343678, -0.10305348, 0.013763981, 0.029250726, -0.051462214, 0.05400301, -0.007205449, -0.036168125, 0.09363816, -0.06739646, 0.08291276, 0.09868206, 0.013533286, 0.07144404, 0.12616128, 0.06918175, 0.04732029, -0.060708508, -0.116218455, 0.08245555},
{-0.061907418, 0.15794161, -0.12673682, -0.031231513, 0.09176658, 0.09954618, -0.013591116, -0.02892211, 0.03537269, -0.06734258, -0.15425418, -0.042225793, -0.057244763, 0.09105598, 0.13195004, -0.0934965, 0.06946126, 0.014073379, 0.023996172, -0.035028394, -0.089473166, 0.08155155, -0.030885834, -0.17690551, 0.011736164, 0.04883826, -0.021343373, -0.04383971, -0.14008567, -0.071990564, 0.06116493, -0.05948166, 0.07394233, 0.15857017, -0.016899206, -0.076303355, -0.1020479, 0.14828779, -0.033524588, 0.047973257, -0.006893104, 0.047976896, -0.10986744, -0.06774146, -0.016256332, 0.073332034, -0.10201276, -0.16769812, -0.048835132, 0.07948514, -0.017878575, -0.06579503, 0.06328019, 0.061513666, 0.09001827, -0.029398784, 0.10170426, -0.09878354, -0.06195792, -0.05149248, -0.076756544, 0.030545183, 0.15536363, 0.047839016, 0.10254595, -0.11579674, -0.045934714, 0.101769984, 0.11278534, 0.13546297, 0.047651064, 0.07711258, -0.021207236, 0.16107225, 0.03035437, 0.117601864, 0.028121524, -0.024087898, 0.13274485, -0.09086048, -0.021428248, -0.09456579, 0.1933326, 0.06605485, -0.111532554, -0.10329443, -0.059656568, 0.17728923, -0.1299202, -0.0815286, 0.104027435, -0.009890025, -0.07185142, 0.021922696, -0.057774357, -0.00690303, 0.07757531, -0.012948899, 0.14426039, -0.08540535, 0.06959033, 0.10837911, -0.10578487, 0.001278095, -0.05666219, 0.16325156, 0.04223304, -0.10562039, 0.07304094, -0.05043866, -0.09111103, 0.049675554, -0.054349154, 0.0031141639, 0.061216623, 0.05029485, 0.031396836, 0.044521585, -0.014293914, -0.0369422, 0.14465517, 0.059990652, 0.14297512, 0.030249814, -0.073196635, 0.047753137, -0.11626541, -0.02923553},
{0.09095761, -0.077195995, 0.026235014, 0.07760315, 0.08899113, 0.0982078, -0.100518696, 0.041574836, 0.06742175, 0.100706294, -0.04443066, 0.02628454, 0.10780785, 0.063018255, 0.15897502, -0.12579927, 0.050551374, 0.0885336, -0.0034787, -0.123311944, 0.09254111, 0.06661589, 0.085052975, -0.120384604, 0.04315186, 0.11588648, 0.0049585234, 0.0665531, 0.058892522, -0.0003574212, 0.0399606, 0.0444147, 0.046907347, 0.115974896, -0.008661376, -0.098918036, -0.026058298, 0.13001132, -0.005919923, 0.04114155, -0.12342224, -0.0645809, 0.0769883, 0.07961231, 0.0031770272, 0.044395987, -0.089332126, -0.020833101, 0.09888457, 0.059605077, 0.044211417, 0.028294504, -0.038311232, 0.08610077, -0.063082404, -0.070396185, -0.030566635, -0.0028413013, -0.01474453, 0.0023808484, -0.02585718, -0.11130091, 0.14330187, 0.052504808, 0.038569838, 0.07094438, 0.04350464, 0.050221622, 0.0040423702, 0.11313928, -0.060177885, 0.03228844, -0.08554491, 0.083915845, 0.06717442, 0.036262963, -0.061389383, 0.010838725, 0.047118284, 0.0647808, -0.055085734, -0.08154537, 0.0636722, 0.040362515, 0.016049992, 0.0785584, 0.044770937, 0.045611013, -0.00043079533, 0.033826843, -0.00637745, -0.11187624, -0.06570086, 0.055201527, -0.12003767, -0.031512685, 0.03242807, 0.06919386, 0.16080372, 0.062145963, 0.05193214, -0.036802404, -0.109982766, 0.009233072, -0.018939719, 0.1359843, 0.020454427, 0.090450786, 0.035087593, 0.08546516, 0.015272665, -0.075919926, -0.13065131, 0.08559032, -0.036048844, 0.053530473, 0.08084142, 0.05763121, 0.023901366, -0.08043596, 0.085838415, 0.06702479, 0.07423485, 0.024004906, 0.037424713, 0.08968893, -0.09345486, -0.052676897},
{-0.089922525, 0.07323707, 0.0826659, 0.043493282, 0.0025409104, -0.04535834, -0.0068081543, 0.0566411, 0.0010163933, 0.05622047, -0.029623011, -0.080737375, 0.08041863, -0.10246398, 0.10188334, -0.12702839, -0.08209504, -0.07927692, 0.00895881, -0.042148452, 0.030634861, 0.051277447, -0.036241204, 0.04054713, -0.0527511, 0.107761405, 0.08200283, 0.09273458, 0.025248855, -0.06903273, 0.030703096, 0.030633619, 0.073872425, -0.05013896, -0.10447003, -0.0028055236, -0.114155285, 0.08587378, -0.040466677, -0.0059902966, -0.101690605, -0.0788295, -0.019331368, -0.0733755, 0.043350346, -0.051800087, -0.07980022, 0.03950073, -0.09416664, -0.06030566, 0.10225565, -0.094181046, 0.06636937, -0.06782417, 0.07322757, -0.09856894, 0.03503386, -0.048001096, 0.06267466, -0.09088203, -0.0035946986, -0.09896923, 0.031585228, 0.08235793, -0.043504663, 0.056442842, -0.036984082, 0.099266335, 0.093447715, -0.018497875, -0.0729444, -0.10229143, -0.05029607, 0.064734325, -0.009057883, -0.068294935, 0.101975925, -0.0021034926, -0.056754634, 0.055869542, -0.07655089, -0.0068144575, -0.023448974, -0.0673242, -0.117320076, 0.0636071, 0.05148347, 0.06432668, -0.08462845, 0.09314673, 0.11502936, 0.07920325, -0.040292725, 0.009930842, 0.018059203, 0.008376822, 0.057030946, 0.004328572, -0.03779111, -0.00962884, 0.005779028, 0.04122598, -0.06522942, -0.084647916, -0.0602095, 0.005975516, 0.04329552, -0.093051955, 0.05913548, -0.07328525, 0.026985724, 0.028580427, 0.04857183, -0.030109692, 0.05787736, 0.08233187, -0.022786781, -0.09274057, -0.00837533, 0.023861393, 0.056651846, -0.08884788, -0.032487478, 0.054297987, -0.06997034, 0.09538592, 0.1114465, -0.06924603},
{0.08803625, 0.028711565, 0.032790158, -0.06543337, 0.07021175, 0.0741186, 0.07935019, -0.0738778, 0.04161288, 0.0028700978, -0.024785614, -0.07205023, 0.07502436, 0.080194265, 0.12643713, 0.07047451, 0.074834995, 0.013559002, -0.07229983, 0.085900016, -0.08870862, 0.023381164, -0.09091079, -0.0726069, 0.086571775, 0.06425051, 0.0016665426, 0.07795522, 0.09306633, -0.016899139, -0.039774675, -0.006402275, 0.011854182, 0.029206157, -0.07516552, 0.10269199, -0.014625119, -0.045356944, 0.0035266252, -0.026303202, -0.037978202, -0.045477465, 0.043954585, 0.07170807, -0.03084167, 0.041269694, 0.04871708, -0.06618423, -0.08841124, 0.0022147568, 0.041115094, -0.0022548884, -0.050475784, -0.014519724, -0.018237732, -0.07453082, 0.017772615, -0.079504736, 0.04372531, 0.011126621, -0.08240317, -0.0739104, -0.06306395, -0.07632236, -0.08301177, -0.019118804, 0.0066819317, 0.094782144, 0.04867117, -0.059269246, 0.0493911, -0.034842167, -0.004090041, -0.009770556, 0.054107968, -0.032845523, 0.035642073, 0.031188414, 0.0727694, -0.021121515, 0.016438149, -0.059722856, 0.102097906, -0.077860974, -0.06503699, 0.08779559, 0.08924914, 0.07729812, -0.009571668, 0.057495467, -0.041752674, -0.048874263, -0.054120466, 0.025000025, -0.11626445, 0.04011032, -0.04215543, 0.018519286, -0.06777203, -0.061676394, 0.07656816, 0.03189818, 0.00961663, -0.04350049, 0.05099928, 0.013804725, 0.096082486, 0.05171451, 0.07164893, -0.007743273, 0.1050895, 0.026394531, 0.08004656, -0.01472473, -0.08331798, 0.040319294, -0.07836025, 0.016001604, -0.09532141, 0.032763794, 0.0019995265, 0.011763056, 0.019784935, 0.0051616677, 0.025495797, -0.07523589, 0.0100483745, 0.05318264},
{0.039295223, 0.07882285, -0.05561777, 0.06391894, -0.09295346, 0.05919464, 0.008427406, 0.07117468, 0.011226356, 0.08679026, 0.05766769, 0.01896969, 0.045448344, -0.093483895, 0.057206955, 0.040526252, 0.037379883, -0.07830735, 0.13645224, 0.090731144, -0.034960352, -0.02111055, -0.0970119, -0.09650221, -0.11983231, 0.05227268, -0.009532836, 0.051430527, -0.028506324, -0.074677356, 0.046779588, -0.03351297, -0.0999445, 0.11963589, 0.07205205, -0.01590452, -0.026037427, 0.059031133, -0.047349006, -0.08323698, 0.031742916, 0.03880228, -0.040196445, -0.09080122, -0.0037678124, 0.056081753, 0.00067935884, -0.09269418, 0.028058901, 0.10429109, 0.0019687812, 0.07855794, -0.02504416, 0.023575706, -0.029755965, 0.07734275, 0.023797456, -0.03978838, 0.10571137, -0.09453426, -0.04892942, 0.062129486, 0.08421631, -0.012080625, -0.063148305, 0.03530555, 0.087589495, -0.032671757, -0.02711667, 0.033055604, -0.02005743, -0.054579213, 0.0022145808, 0.051137183, 0.116374925, -0.030498425, -0.017287247, -0.059901197, 0.116008, 0.11266462, -0.08823799, -0.010681704, 0.08314748, 0.008472643, -0.015017483, 0.06953355, -0.08193713, -0.014681832, -0.08094692, 0.100014, 0.13506673, -0.014197398, -0.07530831, 0.018085755, -0.09245186, 0.057547256, -0.021021955, -0.00045747324, -0.07296275, 0.04477544, -0.03471809, 0.029751347, -0.0732521, -0.010592215, 0.06859543, 0.11045964, -0.1046252, 0.059118345, 0.06289384, -0.024585085, -0.00014679182, -0.04319182, -0.09190319, -0.012677628, -0.047022346, 0.08026973, -0.10857408, -0.07351115, 0.03535034, -0.021043204, -0.042383756, -0.019149197, -0.053303223, 0.039700434, -0.04865989, 0.017434241, -0.06930651, 0.024951406},
{-0.004287387, 0.036910005, 0.109298825, -0.115582466, -0.1009709, 0.0147578195, -0.008619083, -0.0024017617, -0.09884644, -0.04128088, 0.044828556, 0.033073884, 0.040102318, -0.054139204, 0.05963312, 0.060834527, -0.07265294, -0.061028138, -0.034124844, 0.015846584, 0.034285113, 0.05825784, -0.11624302, 0.04473056, -0.021596562, -0.08469892, -0.073642686, 0.048111163, 0.03588903, -0.050287038, -0.07247515, -0.05336208, -0.0795618, 0.11379718, 0.019954063, 0.031469297, -0.1044572, 0.090832986, 0.06751751, -0.08440831, 0.028337494, 0.013768822, -0.051827833, -0.06748442, -0.04215842, -0.028573226, -0.08942189, -0.07940245, 0.020560816, 0.014995867, -0.012768949, 0.03083612, 0.050243445, -0.006977756, 0.09687248, 0.03886886, 0.029873207, 0.09790909, 0.0072126472, 0.08298947, -0.016368555, -0.04244009, 0.056074057, -0.100177, 0.040013105, 0.09590836, 0.059978873, -0.10530051, 0.06210753, -0.009464339, 0.0017832508, -0.07097281, 0.07974115, 0.117264, 0.124555156, -0.0538538, -0.066897586, 0.017900191, 0.062907085, -0.037118703, -0.0071761133, -0.03982752, -0.03372898, -0.09080973, -0.0147726545, -0.10696059, -0.10691167, 0.10630478, 0.0066234847, 0.070588246, -0.032986186, -0.029957607, -0.030019857, -0.036619786, 0.047260683, 0.040120408, -0.025433704, 0.07147525, 0.074821115, 0.07850708, -0.034918845, -0.055484407, -0.024330605, -0.1058813, 0.06976922, 0.13047782, 0.076236844, -0.0027653826, -0.09658486, 0.059658412, 0.12902357, 0.052936643, -0.0905131, -0.07388311, -0.0057991073, 0.12946802, 0.015891954, 0.0626664, 0.009484376, 0.032940194, 0.049223892, -0.03200221, 0.10852425, -0.009830316, -0.031155601, -0.057421107, 0.12598217, -0.0768237},
{0.04218912, -0.05724997, -0.06708105, 0.062436093, -0.08114899, -0.08337605, -0.08991316, -0.07318042, -0.038870804, 0.024921715, 0.08816138, -0.006522579, 0.044158343, 0.018692695, 0.040348653, -0.007934225, -0.0039483304, 0.08740801, -0.022712473, -0.021621147, 0.069205426, 0.07528606, -0.00035199526, 0.095523484, 0.06761662, 0.06468709, 0.040367905, 0.0054554315, 0.059326466, -0.09995884, 0.08196128, -0.02256431, 0.051033907, -0.0021195235, -0.0067820023, -0.053473048, 0.04217464, 0.014436832, 0.06664897, -0.02998525, 0.0417935, 0.074279696, 0.02299817, -0.03983101, 0.0018013621, -0.10466759, 0.07373048, -0.09201987, 0.03882025, 0.036255207, 0.1058326, -0.03183025, 0.022363994, -0.034533553, -0.005096011, -0.04135, -0.028128592, -0.008226596, 0.11035864, -0.06641167, -0.005517223, 0.026575366, 0.070287265, -0.07951048, 0.005190484, 0.07130783, 0.038111087, -0.07441109, -0.029372633, 0.08097046, 0.051004093, 0.01660657, -0.07901701, -0.03384494, 0.08021395, -0.019523248, -0.09058449, 0.09126459, 0.098293535, -0.08036342, -0.07120735, 0.019126266, -0.045474812, -0.048306815, 0.0564689, 0.036616825, -0.08276435, 0.08366255, -0.042943906, -0.023580743, 0.060818683, 0.0797692, 0.019052148, 0.098263085, -0.090331756, 0.007786371, -0.031760134, 0.011551061, 0.03983469, 0.053755835, -0.07511787, -0.027845828, 0.06665828, -0.098618135, -0.11237388, 0.009993941, -0.10259844, 0.02174108, 0.03427124, -0.044209793, 0.04883263, -0.05543033, 0.0435583, 0.09419758, -0.012316532, -0.035926107, -0.09732291, -0.09272418, -0.02107838, 0.07393937, 0.045694094, 0.0034761908, 0.021483999, 0.025737805, -0.08287122, 0.08039939, 0.105902284, 0.042209245},
{0.021114137, 0.06460489, 0.056930322, -0.043952033, 0.00043624765, 0.012978174, 0.055035677, -0.017141663, -0.07671574, -0.04948658, 0.13522643, 0.0019277906, 0.11265142, 0.012581677, -0.04012197, -0.10313313, -0.09864553, 0.016992813, 0.07110512, -0.009877079, 0.019402392, 0.10818308, -0.024359653, -0.06931591, -0.09775199, 0.077244125, -0.035274394, -0.070206895, 0.00918257, 0.08225689, -0.008988624, -0.0090165, 0.041130424, 0.058654968, 0.06808837, 0.06642886, 0.08624275, -0.037067924, -0.092160024, 0.0603006, -0.06537724, 0.07015459, 0.01917582, -0.04136938, -0.05220777, 0.021944828, 0.06709257, -0.03157325, -0.028411515, -0.09177344, 0.061619356, -0.09361464, -0.011293055, -0.0797952, 0.06025739, 0.12020641, -0.017045857, 0.07905288, 0.0034640024, -0.06171811, -0.045814127, -0.105477005, -0.043783505, -0.08563737, 0.09926446, -0.0743284, 0.082080334, 0.015965313, 0.008264573, -0.0026918326, -0.030245477, 0.036681555, -0.011816867, 0.018038373, -0.029643431, -0.0017918841, -0.032504875, 0.0065348074, 0.0045676925, 0.051325288, -0.0083898455, 0.02400957, -0.028841136, -0.040813435, -0.0591904, -0.03354417, -0.020350803, -0.005520513, -0.08473093, 0.03892301, -0.017727917, -0.07244316, -0.032976113, 0.10157299, 0.07756721, -0.060132857, -0.06757599, -0.099561915, 0.094120815, 0.00983087, -0.0755249, 0.009592606, -0.06472677, -0.10596157, -0.117173545, 0.11978378, 0.018576741, -0.08974655, 0.08965888, -0.07877879, 0.019895738, -0.0771717, -0.014126526, 0.05087236, 0.10353236, 0.053760123, 0.07655336, -0.005250059, 0.015812343, -0.004546024, 0.10809491, -0.10875924, 0.0424999, -0.09799639, 0.08583978, 0.04879636, 0.12213953, -0.017553011},
{0.112160675, -0.059650246, 0.06293426, -0.010052374, -0.110717416, -0.03368932, 0.014602617, -0.0510627, 0.06486505, -0.093065, 0.054212704, -0.032733973, 0.03888041, -0.021970224, 0.1190411, -0.07493709, 0.07800345, 0.04745717, 0.051761635, -0.06661728, 0.032953452, -0.032227308, 0.08108742, 0.0920246, -0.03855339, -0.06470603, 0.07461382, -0.08112494, 0.08523237, -0.077892475, -0.116010085, -0.0237972, 0.08208141, 0.07671862, -0.0673378, -0.082270704, -0.00800063, -0.00239395, 0.07090247, -0.06994383, -0.11578657, -0.025267027, -0.021386398, -0.029205475, 0.023149652, 0.06145019, 0.023079574, -0.023337165, 0.095472455, 0.051460944, 0.047317553, -0.038731754, 0.06992256, -0.08818255, 0.013363883, 0.012530169, -0.02752237, 0.022482783, 0.048790723, 0.07274969, -0.04477471, 0.0074201706, 0.08422898, -0.07574146, 0.059839234, 0.02957125, -0.04782575, -0.0089219585, -0.028561749, -0.034691192, -0.03396679, 0.09150445, 0.05266586, -0.0791289, 0.015966577, 0.12921797, -0.083794504, -0.011536963, 0.016148811, 0.08073836, -0.020219836, -0.05474706, 0.100550465, -0.0047424235, -0.0890337, -0.046854094, -0.09671077, 0.056460526, -0.028716538, -0.023890764, 0.12717406, -0.02042422, -0.08078997, 0.039030276, -0.08408209, 0.10076806, 0.06307317, -0.06893453, -0.10340542, -0.10503756, -0.0561274, -0.01122457, 0.0055208355, 0.06840822, -0.06398864, -0.053282294, -0.059674982, -0.107957885, 0.0015354365, 0.03344378, 0.09874692, 0.03821133, 0.0751383, 0.063602135, 0.096950516, 0.020654978, -0.085973814, -0.086773545, -0.07359475, 0.010627545, -0.035874695, 0.07600965, -0.07026679, -0.022910185, -0.057966188, -0.1051872, 0.087128684, -0.09863542},
{-0.06268159, 0.04098426, 0.05394385, 0.06912762, -0.039133254, -0.058795318, 0.036729332, -0.0033876076, -0.034919433, 0.0737724, -0.008789795, 0.052992154, 0.068398006, -0.008284833, -0.07344332, 0.0050129546, 0.02083021, -0.019222982, 0.08167636, -0.036670174, -0.0096153375, 0.113005295, -0.062464252, 0.06151721, -0.09761813, -0.057223134, -0.012417495, 0.08247188, 0.03586702, 0.031385597, 0.033923004, -0.110099986, -0.08275043, -0.0101713985, 0.035130866, 0.024356393, -0.026719416, 0.12234543, -0.015762985, -0.041570686, -0.08182646, 0.07236156, 0.07876301, 0.027659249, -0.09314648, -0.015028361, -0.012258992, -0.056071136, -0.010923535, 0.08809486, -0.069967695, -0.028314248, 0.061900325, -0.06871627, -0.083797365, 0.012097929, -0.10808146, -0.029043548, 0.013219288, 0.036524065, -0.01648296, -0.051799405, -0.010293867, 0.03154908, 0.07032268, -0.024193676, -0.10210041, 0.070008695, 0.069958165, -0.009624135, -0.025029829, -0.01623968, 0.09261741, -0.006227693, 0.067029774, 0.049594257, 0.080832355, -0.0008041486, -0.05078826, 0.020292604, 0.033511538, -0.0033845603, 0.09695372, -0.0070002573, -0.03521239, -0.045186765, 0.010792326, 0.0753559, -0.038521655, -0.08179705, 0.09567336, 0.08711569, 0.029412776, -0.0669946, -0.13699381, -0.101229936, -0.0056309327, -0.04782812, 0.07086767, 0.017793164, 0.09950176, -0.040084362, -0.08025704, -0.05131269, -0.036542468, 0.07729545, 0.018076843, 0.08732716, 0.051732704, -0.05707233, 0.009190997, 0.0343104, 0.095842116, -0.077299684, 0.005973026, 0.01656819, -0.09330453, -0.008327313, 0.058421485, 0.051089063, -0.015753819, -0.033428922, 0.013107273, -0.058933754, 0.08975668, -0.052365527, -0.025896123, -0.015851676},
{0.0013564792, -0.002628316, -0.10643262, -0.08524197, 0.038167592, 0.020579726, -0.023775969, -0.02293142, -0.0591094, 0.0014714822, 0.08959368, -0.008284931, 0.1272306, -0.095193036, 0.09963233, -0.077664785, -0.027742019, -0.034899935, 0.016882917, 0.10514866, 0.08273885, -0.07032303, -0.10910479, 0.053372737, -0.09931588, 0.05329845, 0.09577598, -0.022476276, -0.028441636, 0.08940918, -0.060489595, -0.0094366055, -0.084371, 0.013921114, 0.05683728, 3.0131812e-05, 0.047302604, -0.027909527, 0.019941755, -0.03245287, 0.03972014, 0.02527824, -0.013122497, 0.087822154, -0.030093344, -0.0051316703, -0.07107358, -0.070525795, -0.031773143, -0.054398622, 0.10000388, 0.017354064, 0.09768205, -0.06467185, -0.049633484, 0.0527087, -0.13042763, -0.08116505, 0.0013577517, -0.057609875, 0.06706111, 0.082449794, 0.037092198, 0.07402761, -0.088298626, 0.042381402, -0.080953434, 0.051674634, -0.13608357, 0.090304375, 0.028701328, -0.026642177, 0.0154282, -0.00351418, 0.059435338, 0.032993305, -0.13005058, 0.10659225, 0.052302986, -0.04120279, 0.03287185, -0.009259656, -0.020902412, -0.104511335, -0.018289044, 0.03023541, -0.042723853, -0.07196852, 0.078134835, -0.10095277, 0.005277798, 0.090824425, 0.060131073, 0.006709645, -0.1267175, 0.08300567, 0.07781008, 0.09758997, -0.047166016, -0.028856233, -0.046747707, 0.1113557, -0.10497722, -0.0035028905, -0.08186543, 0.13137917, 0.07683949, -0.07109559, 0.07194773, -0.010528913, -0.0625107, 0.08390355, -0.07320136, 0.00786885, 0.0020438135, 0.073798046, 0.09713846, -0.033898033, -0.10523875, -0.018914044, -0.008288405, -0.089168064, -0.023407739, 0.053168613, 0.042336434, -0.05921224, 0.095116414, 0.08013717},
{0.11302782, -0.1088147, 0.055018403, -0.12647435, 0.04975684, 0.015039317, -0.02026337, -0.00050477684, -0.024407655, 0.025894612, 0.12202409, -0.010242548, -0.027148081, -0.07572362, -0.011339357, 0.0649272, -0.06297171, 0.043099493, -0.06913222, 0.11771618, -0.06335395, 0.096965626, -0.06464252, 0.037225276, -0.075477995, -0.12670279, -0.08921369, 0.07002222, 0.043954153, -0.11028879, 0.018381447, 0.078932546, 0.08441963, 0.0055955825, 0.08457851, 0.0044100108, -0.030603696, -0.053410944, 0.11993286, 0.0075728367, 0.04458601, -0.09211286, 0.04395913, -0.10548305, 0.052205116, -0.060715236, 0.05504732, -0.071901895, 0.008445017, 0.0399716, 0.103151135, -0.10515452, 0.099330455, 0.0892294, -0.07575526, 0.07164298, 0.002502477, 0.012234926, -0.035730943, -0.008075586, -0.03326857, 0.08195327, 0.04726818, -0.10006789, 0.029775947, 0.077102974, -0.0968285, 0.049729764, 0.030155469, 0.045723703, -0.05952539, -0.0058663124, -0.0133449435, 0.020714788, -0.008499141, 0.10473588, -0.05260636, 0.012344897, 0.09088965, 0.07799507, -0.06441261, -0.08056853, 0.13317461, -0.09757939, -0.016691288, -0.07969163, -0.09357044, 0.09889231, 0.057150193, 0.04988823, -0.010150038, 0.11782936, -0.05262349, -0.045972105, -0.08453992, -0.08458448, -0.015043974, -0.03425085, -0.08926737, -0.068556935, -0.045292083, 0.022805465, -0.076709285, -0.06200954, -0.10011954, 0.0760865, 0.02474046, 0.022436103, 0.06642862, -0.08664389, 0.027954038, -0.03156291, -0.018522913, -0.07390514, -0.004762411, 0.10591652, -0.08062304, -0.045754645, 0.06362633, 0.0054369867, 0.059605304, 0.014783309, 0.040091895, -0.07050929, 0.10260336, -0.070482716, -0.050273933, -0.09098048},
{-0.031392455, -0.08692756, -0.14208509, -0.048206948, -0.09272848, -0.048635773, -0.09234927, 0.046152934, -0.08549113, -0.02442199, 0.08229888, 0.12631892, 0.1456602, 0.06375869, 0.124546655, 0.10323073, -0.10698338, -0.09356081, -0.007271158, 0.15592335, -0.015938863, -0.017184421, -0.067511074, -0.040995907, -0.010988728, 0.060632657, 0.012482164, -0.08149288, -0.01909996, 0.05413246, 0.01805052, 0.009415063, 0.10116449, 0.13281141, 0.018883169, 0.021823118, 0.0676842, 0.039097082, -0.06255573, -0.16403963, 0.031718623, 0.02320224, -0.008176866, 0.010314217, -0.00553672, -0.07257621, -0.077897355, -0.078440495, -0.0839983, 0.03568648, 0.01700728, -0.0828833, -0.004512531, -0.10741691, -0.07359707, 0.0028523675, -0.041299578, 0.063718244, -0.10077297, -0.01564271, -0.10692803, 0.022477541, 0.0064632455, 0.037651926, -0.011422336, -0.05731153, -0.08779818, 0.047427133, 0.06794644, 0.09181444, -0.008240714, -0.0933694, -0.082022876, -0.0023055065, 0.11277945, 0.033513397, 0.0758151, -0.049324557, -0.067852624, -0.042351507, 0.12255468, 0.056480095, -0.11955753, -0.10317444, 0.048550215, 0.054657053, 0.17933393, 0.023813413, 0.0012794508, 0.08713349, 0.08408142, 0.053582028, 0.04508266, 0.20307633, 0.025261749, 0.09782851, -0.08330549, 0.07455745, -0.09941122, -0.024105035, -0.08682178, 0.14826633, 0.0052258177, -0.05038629, -0.04741305, -0.021978907, -0.09877638, 0.039888524, 0.01541557, 0.043527212, 0.05200628, -0.08931716, 0.10130126, 0.056546647, 0.05016634, 0.0514668, -0.11070128, 0.011941269, 0.018119594, 0.026264101, 0.071963824, 0.1405194, -0.026740517, -0.039449587, -0.09899124, -0.09344749, 0.089478835, 0.07738162},
{0.043312337, -0.08328024, -0.112140045, -0.09203902, -0.07225609, 0.02806741, 0.019958045, -0.06909828, -0.046144012, -0.02728784, 0.026146282, 0.09384157, 0.119439974, 0.0049899425, 0.005603602, 0.10709475, -0.041249976, 0.011980255, -0.018105697, 0.024741577, -0.09513353, 0.0572389, -0.029883342, -0.043938812, 0.10613579, -0.12691523, 0.059292696, -0.10507905, 0.014235307, -0.0622041, 0.08534174, 0.013422792, 0.08776669, -0.045995187, 0.14450736, -0.02706326, -0.0649075, 0.0078764865, -0.047670946, -0.0068374677, -0.017160594, 0.0029088035, 0.08855016, 0.017038984, 0.14505635, -0.03331636, 0.020678207, 0.08754271, 0.085705176, -0.07404959, -0.11836558, -0.05238357, 0.09064655, 0.024635311, 0.023362264, -0.10390899, 0.008225576, 0.022304311, -0.059537493, 0.037823193, -0.095321886, -0.00905562, -0.15075606, 0.08983271, -0.024635628, 0.10280484, -0.030063245, -0.08825252, -0.018491918, -0.057340927, -0.10492975, 0.0057559726, 0.029951304, -0.03950976, 0.012511576, 0.11681693, 0.03637383, -0.03902358, -0.13830492, 0.016763039, 0.14957295, 0.0409811, -0.02665533, -0.017555801, -0.0086833285, -0.03173506, -0.013013548, -0.12298277, 0.052844122, -0.044382934, -0.036687564, -0.07210771, 0.055575803, 0.1886691, 0.11212385, 0.08978012, -0.06660101, 0.06651531, -0.12309726, 0.018927455, 0.09195162, -0.006610217, 0.09649908, -0.095263265, -0.047046006, 0.060482897, 0.051696204, -0.030801678, 0.041343175, 0.02398403, 0.03554771, -0.014921062, 0.02197567, -0.085907035, 0.0050171763, 0.108848214, 0.048510976, -0.0116028935, 0.008962152, 0.099678084, 0.013702539, 0.12781067, -0.07564735, 0.07580636, 0.060155958, -0.113358304, 0.0705256, -0.038662057},
{0.013586329, -0.04871952, 0.07436389, 0.11765446, -0.09008036, -0.049445156, -0.088124365, -0.009579614, -0.04390864, 0.055981636, -0.023793347, 0.007918468, 0.11734367, -0.067022644, -0.09541415, 0.12158004, 0.030361962, -0.021303648, -0.068354234, 0.1068807, -0.003657646, 0.046204917, 0.059825763, 0.10145333, -0.04308185, -0.06058279, 0.09569111, -0.07242441, -0.025489239, -0.047334913, 0.020866549, 0.07209682, 0.0989819, -0.05254833, 0.0382287, 0.016813029, 0.05805501, -0.029975854, -0.052054044, -0.042580325, 0.09453138, -0.089038804, -0.06819331, 0.06420417, -0.05829296, -0.095560044, 0.07365981, 0.0060786456, 0.018606916, 0.033869017, -0.13517965, -0.04375851, 0.13499679, -0.07181169, -0.0284722, -0.024539463, 0.054058496, 0.005346276, -0.030383717, 0.05484242, 0.095629245, 0.06408934, -0.09048428, 0.10317537, -0.04938126, -0.04076351, 0.013135198, 0.10134128, -0.060749527, 0.044035684, 0.096354865, 0.08512814, -0.049007375, 0.13570361, -0.1059424, 0.023404289, -0.003977189, -0.011594579, -0.14687976, 0.044545755, 0.038754366, 0.01646635, -0.060979683, -0.10173629, 0.09652759, -0.004773716, 0.06656915, 0.036687545, 0.044912316, -0.017309321, -0.09677505, 0.02477943, -0.09915844, -0.058605358, 0.113179214, -0.08994171, 0.007596031, 0.0629286, 0.057500113, -0.02510485, -0.026581287, -0.010131583, 0.013873199, -0.092157386, -0.024287924, -0.0069070417, 0.14259821, -0.011972099, -0.009940625, 0.022714999, 0.08564614, 0.092543095, -0.0073528425, 0.017087713, 0.068324625, 0.05879244, 0.020999912, 0.018082932, 0.046094675, 0.09475364, 0.011025025, -0.054932278, -0.06997542, 0.0332469, -0.101002134, 0.06356897, 0.016020328, 0.020763453},
{-0.065348186, -0.1126491, 0.06665657, -0.050632287, -0.07139148, 0.04614243, -0.012423734, 0.059498563, -0.06356865, 0.054843098, 0.06800949, -0.10338043, -0.023584362, 0.020572314, -0.012195707, -0.020760754, -0.10331936, -0.10017154, -0.1108823, 0.034190506, -0.045005903, -0.06578814, 0.051949408, -0.04293212, 0.10244027, 0.027303308, -0.0072588874, 0.01260079, -0.034971666, 0.05997286, 0.074285485, -0.043006513, 0.07201205, 0.057988774, -0.012672783, -0.0065322686, 0.015808929, -0.09086903, 0.017930401, 0.051524006, 0.099847674, 0.033839583, -0.05765092, -0.082968615, -0.0031570652, -0.103922434, -0.080794394, -0.007256391, 0.10000168, -0.08744598, -0.07615877, 0.050918892, 0.036556404, 0.032063667, 0.014322549, -0.0038844072, -0.023962554, 0.058758497, 0.021685878, -0.07285173, 0.06437647, 0.024582764, 0.101571776, -0.03442464, 0.024901658, 0.010767033, -0.052941523, 0.03333272, -0.091589294, 0.1196493, 0.057930294, 0.034880962, 0.03496541, 0.018702399, -0.054381583, 0.010481642, -0.019241298, -0.0792562, 0.032169893, 0.012512976, -0.0036593408, -0.08757487, -0.09909921, -0.09874029, -0.041168272, 0.063321814, 0.09655753, 0.048867982, 0.048386343, 0.022700688, -0.0639776, -0.0010356489, 0.08527848, -0.03037265, 0.10865432, 0.0892292, -0.08086548, 0.046158973, -0.07609775, -0.07222561, 0.0025608689, -0.016318372, 0.002864386, -0.01897791, 0.12350449, 0.0008097598, -0.05855427, -0.028179398, -0.05967102, 0.057230413, 0.05914792, 0.08991289, 0.036213767, 0.002405189, 0.017213188, 0.06143854, -0.0431265, 0.052418903, 0.010899684, -0.08234459, -0.060957767, -0.050472315, -0.04991858, -0.12680134, 0.030813202, -0.0378786, -0.016436681, 0.0010510497},
{-0.020447318, 0.013685925, 0.14619194, 0.0473668, 0.08387658, -0.10123181, 0.022544144, 0.02990061, 0.058298543, -0.008231342, -0.082205124, -0.06891902, -0.057397958, -0.052753925, 0.061324213, 0.0065742084, -0.019503517, 0.07740723, -0.0068831765, 0.049015548, 0.045464836, 0.07713811, -0.07525362, -0.015683169, 0.13197184, -0.0075603225, -0.07448609, 0.08065317, 0.09403487, 0.043751292, 0.11328591, 0.0056212703, 0.021893317, 0.0054189693, -0.10110835, 0.091972955, 0.005381205, -0.14987145, 0.04924715, 0.103454396, -0.02352708, -0.018552557, -0.04506354, 0.0035062782, -0.020926245, -0.0961404, 0.104599595, -0.033346277, -0.07538262, -0.05794665, 0.051890325, 0.027099103, -0.022683356, -0.07109255, 0.0068457425, -0.05493608, -0.028163822, -0.026932612, 0.012626961, -0.018564997, -0.047615558, -0.010634066, -0.09602513, 0.08423227, -0.03771674, -0.040345117, 0.087495625, 0.08696459, -0.06480344, 0.058038767, 0.043439846, 0.03369641, -0.025709003, -0.022007301, 0.02493681, -0.092667155, -0.017759696, 0.054035977, 0.06845655, 0.09710045, 0.0527693, -0.021295547, -0.1138186, -0.110217206, 0.04301426, 0.05394313, -0.036881916, -0.041522574, -0.033245146, 0.02335495, 0.05813232, -0.0013477987, 0.065254614, 0.003345678, 0.0824851, 0.0028112605, 0.037357032, 0.046115298, 0.06689731, -0.069415614, 0.0296783, 0.04492536, 0.022469945, 0.06352925, -0.04232634, -0.072047636, -0.06075112, -0.0877503, -0.026582846, 0.045974366, -0.047296237, -0.08862453, 0.05249755, -0.10331262, 0.10332458, 0.06170255, 0.014589407, 0.013113134, -0.012815536, -0.05848085, 0.08769019, 0.06434321, -0.07653231, -0.027370779, -0.06858491, -0.0529844, 0.044352986, 0.08337933},
{0.14563732, -0.060952555, -0.024741367, 0.090927504, 0.07294861, 0.051785544, 0.039573796, -0.090956785, -0.011137456, -0.07994127, -0.13127142, -0.0920341, -0.056793813, -0.018392226, -0.003206101, -0.12305896, 0.066161446, 0.016278919, 0.09288635, -0.12261357, -0.095761895, -0.098291375, -0.17158502, 0.044064548, 0.1334703, 0.013107516, 0.073332444, -0.03034206, 0.1832787, -0.095799804, -0.029818946, -0.012436471, 0.011221365, -0.07958321, -0.04982236, -0.0029234583, -0.11076325, -0.035707686, 0.027094712, 0.08519211, 0.11347402, -0.037325494, 0.063558795, -0.109433815, 0.025488764, 0.085211284, 0.058901712, 0.0028342821, 0.096801385, -0.12985064, 0.04980846, 0.06803523, -0.08778863, 0.017758561, 0.008781567, 0.11198205, 0.15701263, 0.03442973, 0.1523413, 0.057408664, -0.077275485, 0.079157, 0.04628936, 0.057133317, -0.0069718063, -0.098288976, -0.062584095, 0.09822495, 0.08547852, 0.15889007, -0.06526996, 0.013046388, -0.01834537, -0.13769144, 0.0637092, 0.08067932, 0.014514576, -0.035432823, 0.0110423, 0.12017532, -0.10309656, -0.10330364, -0.11284331, -0.0753936, 0.027423315, -0.07207014, -0.07761962, -0.09713039, -0.07496322, 0.01644237, 0.13180436, 0.03392811, -0.0971036, 0.01580843, 0.03037219, 0.0442625, 0.06712492, 0.03596868, -0.006125261, -0.021257937, 0.10136509, 0.10226103, -0.021242695, 0.05438392, 0.012541725, -0.043977603, 0.017881695, -0.069677964, -0.1898788, -0.013667095, 0.0068498747, 0.003947638, 0.16174096, -0.09920844, 0.09117912, -0.171416, -0.07924196, -0.08619992, -0.10579578, 0.0924318, -0.048749465, -0.0527316, 0.09428839, 0.010631973, -0.07571559, 0.08650194, -0.10754621, 0.071617305},
{0.12108119, 0.17116569, -0.048641335, -0.068265386, 0.096085496, -0.017694883, 0.038137365, -0.06803952, -0.061148945, -0.02451478, -0.0028346085, -0.13349406, 0.051397868, -0.13890181, 0.09022219, -0.083979234, 0.06812019, -0.07174337, 0.14620908, -0.0751388, -0.053195868, 0.12539254, -0.16779335, 0.047742613, 0.035147455, 0.094428524, 0.013176015, 0.09474399, 0.070340656, -0.051651895, -0.0076195975, -0.05418221, 0.0733882, -0.116941035, -0.14795125, -0.036511876, -0.040570017, -0.053521678, 0.0465865, 0.09133608, 0.05532029, -0.03506013, 0.08740975, 0.023909524, -0.049814586, -0.10223606, -0.09412465, -0.14912574, -0.07976344, 0.03128782, 0.01599898, 0.07581906, -0.11668785, 0.018298736, 0.08521184, 0.042665336, 0.14037444, -0.026254296, 0.04697328, -0.031873748, -0.058836456, -0.007291441, 0.04268218, -0.06621085, 0.060376972, -0.0042175534, -0.0699484, 0.087001115, 0.16487367, 0.13824442, -0.024213558, 0.014923798, 0.03651397, -0.020897422, -0.0862905, 0.074609116, 0.15989096, 0.08490886, 0.03194042, -0.00914951, -0.03656214, -0.08604102, 0.10437848, -0.09845408, -0.01279123, 0.010509407, -0.15489468, 0.07762826, 0.041702114, -0.07499198, 0.012358218, -0.08139042, -0.10054519, -0.12532368, 0.06619189, 0.024691463, 0.087369084, -0.13604124, 0.14938954, 0.0011304542, -0.08063085, -0.0077013043, 0.060056277, -0.09257616, 0.019027852, -0.032843955, -0.0028160394, -0.078022085, -0.04458812, 0.07198425, 0.13368984, -0.029021308, 0.03301611, -0.063206464, -0.03728658, -0.10644785, 0.09627654, 0.02204226, 0.03266243, -0.08643923, 0.07531586, -0.070049785, 0.024890298, 0.070391744, -0.04083728, 0.12909783, -0.039440054, -0.025004005},
{0.043845996, -0.012113163, -0.12745094, -0.0029624347, -0.026926512, -0.021281473, 0.017082557, 0.06363143, -0.027015619, -0.022323534, -0.1215963, 0.019594997, 0.004902863, 0.11992918, 0.02232433, -0.018624213, 0.0010917317, 0.034275524, 0.018334707, -0.041096848, 0.066166714, 0.13726017, 0.047780078, -0.105209306, -0.03091228, 0.003877507, -0.00465284, -0.071968704, 0.029128086, -0.028156264, 0.08410473, -0.0030723403, -0.013038665, -0.0003545395, -0.16172548, 0.08573902, 0.08592995, 0.15166289, 0.11001528, 0.1196749, -0.15135217, -0.009720057, -0.039644044, -0.089542, -0.13924995, -0.061525293, -0.03697229, -0.09129289, -0.079336055, 0.09087828, -0.08897627, 0.094330415, -0.10630389, 0.0553236, -0.1042281, -0.08361054, 0.123796836, 0.057505712, -0.025353381, 0.061561987, 0.051433016, 0.093119204, 0.17806384, -0.07028478, 0.099341914, 0.0912997, 0.036445115, 0.09028953, 0.15063432, 0.14988184, 0.0030135806, 0.05678122, 0.09210801, 0.15576847, 0.0009533465, 0.1437837, -0.036837548, 0.044675305, -0.02457312, 0.092291035, -0.12619409, -0.010798059, 0.065181315, -0.086926624, -0.16023378, -0.0013390514, 0.049969733, 0.1237818, -0.15659718, 0.033859912, 0.12929209, -0.01505568, -0.07785573, -0.007263235, -0.03254546, -0.06652537, -0.06461094, -0.067438535, -0.0012242615, 0.004619904, 0.02275902, -0.03246597, 0.08956809, -0.019333348, -0.04241798, -0.020123418, -0.00889025, -0.043049887, -0.025407795, 0.009140924, -0.09573673, -0.089200065, -0.05250057, -0.07813446, 0.010732256, -0.07588553, 0.074658774, 0.0507856, -0.026968025, -0.042782962, 0.12965062, -0.049484137, 0.07320582, 0.06128535, -0.007497318, -0.0061550452, -0.07140585, 0.11973376},
{-0.037427433, 0.070245035, -0.12801732, -0.077762134, -0.10346325, -0.026477978, -0.022791835, -0.07086727, 0.019583434, 0.08324112, 0.032199807, 0.01944665, 0.006182816, -0.06009957, 0.05990036, 0.038749028, 0.057507355, 0.016458832, 0.0769079, -0.049954318, -0.10536797, 0.1463457, 0.041014176, -0.12000872, -0.034266304, 0.17054638, 0.01292235, 0.023516044, -0.07528287, -0.026955083, 0.11797374, -0.10129419, -0.064923674, 0.07040602, -0.14418414, 0.09377246, -0.097685054, 0.13508493, 0.10751818, -0.04744153, -0.15056242, -0.10169844, -0.14681223, 0.06587244, 0.04737732, 0.08025561, -0.077131994, -0.09575637, 0.04949072, 0.014587081, 0.032288488, 0.09400515, 0.088217966, 0.047501847, -0.041878402, 0.0058960924, -0.016183704, 0.07855153, 0.11698731, 0.07879397, -0.010590343, 0.084299, 0.071174785, 0.07064322, -0.028866373, -0.09135881, -0.08272692, 0.018859655, -0.04420161, 0.06679, 0.096136026, 0.015538892, 0.0463818, 0.07888106, 0.006662474, 0.034373462, -0.04257983, 0.1006099, 0.14476949, 0.011220151, -0.15919551, 0.060917646, 0.019939652, -0.063136965, 0.021643436, 0.04228756, -0.028200598, 0.13098696, -0.038996994, 0.07773366, 0.16843031, 0.029504519, 0.0784246, 0.040836386, -0.105786785, 0.08011824, -0.06232924, -0.095181696, 0.13027288, 0.0797399, -0.105443366, 0.0192374, 0.08280583, 0.03576061, -0.04142391, -0.011498157, -0.057663072, -0.06743769, -0.04727032, 0.033857167, -0.023954956, 0.04434216, -0.14816901, -0.008267105, 0.07948911, -0.06602498, -0.0805893, 0.09865336, 0.0033206334, -0.043569297, 0.06351898, 0.05498049, -0.00015647832, -0.01311862, -0.025847442, 0.027382595, -0.024453681, 0.113290675},
{0.07901514, -0.040234953, 0.00464198, 0.05887596, 0.01770476, 0.018267497, 0.07512616, 0.0035483092, -0.05689271, -0.02603092, -0.0961176, 0.061747357, 0.029011635, -0.03817736, 0.07405938, -0.04306394, -0.114456154, -0.038624898, 0.0060693175, -0.14883755, -0.07956697, 0.1287658, 0.071709864, -0.087009415, -0.10577797, 0.1516021, -0.0652238, 0.014070051, 0.0811839, -0.09609819, -0.023525458, 0.0083434675, -0.1052994, 0.07790596, 0.030661505, -0.07085977, 0.06344947, 0.13183683, 0.12027012, 0.030501872, 0.032008845, -0.0977091, 0.07205309, -0.0916341, -0.032957084, -0.034316164, -0.031465538, 0.024797045, -0.05369234, -0.047225047, -0.0332056, -0.07829183, 0.009080894, -0.07636762, -0.09780995, -0.08659574, 0.1554796, 0.040320307, 0.009059662, 0.061443653, -0.085572, -0.00028825225, 0.16446492, -0.0010313392, -0.048092593, -0.057503093, -0.0074762283, -0.047184117, 0.008709413, 0.10744721, 0.016001968, -0.09412003, -0.08735882, 0.0729031, 0.0022824232, -0.026475927, -0.04400283, -0.06314406, 0.038826514, 0.06321557, -0.07442626, -0.06437199, 0.12422867, -0.03387342, 0.04071705, -0.0016943451, -0.0071447217, 0.042711895, -0.040407695, -0.04543741, 0.00045618895, 0.024850754, 0.105513915, -0.109771125, -0.083837934, 0.06883952, 0.078251705, 0.06758052, 0.08598385, -0.05361752, 0.038199857, 0.13683851, 0.06460085, 0.106429115, -0.044844933, -0.012975962, 0.013412279, -0.100906745, -0.041291695, -0.11179161, -0.051548976, 0.08714758, -0.07754977, 0.045527857, 0.08797318, 0.020334946, -0.102704674, 0.104427814, -0.06852777, 0.06729922, 0.054930616, 0.060233146, 0.09085413, 0.022541469, -0.073783785, -0.039019924, -0.072256364, 0.06302754},
{0.03085773, 0.083050475, -0.0698899, 0.09302569, 0.07384864, 0.098670855, -0.036314107, -0.029825658, 0.06919925, 0.021846607, -0.093791135, 0.059758022, -0.01061782, -0.018384311, 0.028560692, -0.02026154, 0.04540932, -0.016026713, -0.079035744, 0.04115959, 0.025452245, 0.0043406314, 0.016295126, 0.026453102, 0.030906815, -0.0075688586, -0.052207455, 0.037524134, 0.0012596124, -0.03737303, 0.033892926, -0.023923371, 0.0740192, -0.07551741, -0.0997386, -0.07509887, -0.012266328, -0.04793378, 0.056351557, 0.09178574, 0.09401689, -0.0175291, 0.015364228, -0.04497832, 0.054642808, -0.06217342, -0.0017605573, -0.0410659, 0.042312443, -0.07592285, -0.058020692, 0.058095828, 0.028512865, 0.0361123, -0.053478647, -0.10111838, 0.0823813, -0.029371478, -0.07698766, 0.0038875854, 0.099679075, -0.0538567, 0.008171937, -0.079504505, 0.04601182, -0.056574162, -0.0068626413, -0.09696018, -0.07292224, 0.08694095, 0.067729235, 0.0299933, -0.08665849, -0.08753354, -0.098533645, 0.023351695, 0.106849484, -0.057677772, 0.057850167, 0.08851846, -0.058183, -0.049478553, -0.030788641, 0.07997006, -0.013535268, -0.0135767795, -0.012701387, -0.052049402, 0.07489728, -0.043980286, -0.034689732, 0.03555486, -0.087823585, 0.015801921, -0.08984494, 0.013822146, -0.09892063, 0.041633677, 0.042714104, 0.07805166, 0.01320681, 0.11152517, 0.0047102203, 0.078350574, 0.061848607, -0.02776676, -0.08990822, -0.019762496, 0.0046330444, -0.08450492, 0.0018986583, -0.07567101, -0.07294696, 0.0039149984, 0.07958165, 0.031624697, 0.08465101, -0.044702623, -0.08767731, -0.07188944, -0.050525293, 0.08316605, 0.047647376, 0.022354744, -0.022908494, 0.081769995, 0.036125027, -0.08886567},
{-0.076581866, -0.077613235, -0.099453345, 0.094538435, -0.029908208, -0.061971415, -0.0014735289, 0.011392705, 0.06213759, 0.022839233, 0.061813, 0.0473324, -0.05796841, -0.054014705, 0.047636043, 0.08875513, 0.07865134, 0.014435603, -0.08376217, 0.07396781, -0.061344214, 0.07771188, 0.05905943, -0.058367845, -0.112950064, -0.054799914, 0.07039872, -0.05081046, 0.03058495, -0.028054193, -0.03646331, 0.08588578, 0.017532812, 0.08455461, 0.045606643, -0.010093935, -0.06064261, 0.1088019, -0.04768237, -0.059981156, 0.042714268, -0.052419785, 0.115938395, -0.07110586, -0.041116957, 0.08031822, 0.079698175, -0.03813456, 0.104958445, 0.091305226, -0.031385038, -0.02644153, 0.014872565, -0.043673787, 0.010851152, 0.10019216, 0.000834374, -0.10027256, -0.046060137, 0.012897753, -0.029472848, 0.047107622, -0.06405905, -0.06846653, 0.089156, -0.010591032, -0.042313296, -0.08897885, 0.063257165, 0.0763462, -0.070538625, -0.08384471, -0.02585639, 0.08326958, -0.045498606, 0.12148423, -0.06644261, -0.09683447, -0.029505244, -0.08585489, -0.0117814755, -0.027010098, -0.029973023, -0.03660114, -0.065953955, 0.016800797, -0.01215241, -0.07754247, 0.08520668, -0.09188925, -0.016469534, 0.037501756, 0.081214085, -0.054409795, -0.02285987, -0.09693141, 0.05114001, -0.08247813, 0.02175441, 0.04057929, -0.0012588277, 0.123415776, -0.103039175, -0.021053948, -0.08231207, -0.06348801, -0.030620102, 0.07025479, 0.10358346, -0.092863254, 0.108128935, 0.07509753, -0.016913388, 0.09222642, -0.051610228, 0.08505472, -0.03308869, -0.06563427, -0.021055935, -0.0126347095, 0.07998, 0.06420934, 0.024902362, 0.11032321, -0.029517546, 0.029891353, 0.07412903, 0.04075993},
{-0.052153874, -0.06412045, -0.07358239, -0.06758613, -0.041306093, 0.083015636, -0.02419555, 0.031019956, 0.09580022, 0.00784488, 0.08736206, -0.07387317, 0.016369719, -0.07998379, 0.064262316, 0.034271568, 0.033592492, -0.08520076, -0.079055525, 0.025905162, 0.048509978, 0.03472191, -0.093065254, 0.0047815302, 0.018013122, 0.017189685, -0.011776229, -0.054964643, 0.02320735, -0.05114323, -0.09348406, -0.08422413, -0.021335835, 0.084610224, -0.061171968, 0.06648177, 0.035855297, 0.037556604, -0.07705594, -0.08009916, 0.040007748, -0.034788437, -0.035021182, 0.08586386, -0.044093408, -0.05557839, 0.099466935, 0.066218175, 0.030329108, 0.091995806, 0.0361775, -0.097736165, 0.017893378, -0.09669312, 0.08158034, 0.039498616, -0.07447447, -0.017629087, 0.11351766, -0.02376952, 0.06859737, -0.0070868474, 0.09044719, -0.097981855, 0.015618667, 0.03055103, 0.035800274, -0.023941614, 0.06311419, 0.07243659, 0.04050703, -0.011544417, -0.030804232, -0.07469767, 0.018346751, 0.11056445, -0.0047410354, 0.043910503, 0.0775799, -0.066029094, -0.09288546, 0.015513621, 0.10525045, -0.104979075, -0.054437768, -0.08891523, -0.03538851, 0.062329598, -0.061227627, 0.035560936, -0.028033668, 0.025499277, -0.019139424, -0.039832056, -0.07860756, 0.0549075, -0.05345364, -0.0440609, 0.028743709, 0.0071479827, -0.034918107, 0.0029199794, -0.032154366, 0.0034377798, -0.08155384, 0.06942825, 0.021271266, -0.06765806, -0.05702692, 0.07307599, -0.02019178, -0.013874225, -0.01690836, -0.10205516, -0.06794393, 0.016830122, -0.000665732, -0.08467333, 0.0673609, 0.03317295, 0.086821474, -0.10582242, 0.013143861, 0.1171387, 0.074900895, 0.024198636, -0.0005636769, -0.008306277},
{0.08282156, 0.018430011, -0.09521529, 0.063654706, -0.023326559, 0.09497549, -0.026800977, 0.0020462796, 0.01749207, 0.035970435, -0.08140936, 0.01254112, -0.03869055, 0.05575356, 0.076100476, -0.055246066, 0.09491585, -0.05639705, -0.040855292, 0.0070602437, -0.02534511, 0.10944229, -0.017633611, -0.09297853, 0.08074327, -0.061331075, -0.024639413, -0.07709527, 0.078579895, 0.08161015, 0.0943777, 0.05251504, -0.042417016, 0.036733042, -0.093111955, 0.07350252, -0.08369158, -0.03685198, 0.03936359, 0.05920134, 0.08310221, 0.0012677014, 0.020269629, 0.04166557, -0.08543551, 0.082292154, -0.012620807, 0.000115688454, -0.070532754, 0.004982988, -0.06056752, -0.090694346, -0.020640764, 0.09719256, -0.023862593, 0.024864342, 0.025661688, -0.087258674, -0.04281663, 0.09202689, 0.078874595, 0.06568282, -0.06278335, -0.057325006, -0.07783601, -0.017150626, 0.04335475, -0.098942794, 0.008158451, -0.03828624, 0.05750487, -0.019332346, -0.04812716, -0.026226124, 0.017091023, 0.07549559, -0.054523237, -0.08142643, 0.06008781, 0.1109473, 0.017471049, -0.0944381, 0.014988837, 0.07683495, -0.0014281163, 0.05096898, -0.029160466, 0.123758286, -0.036329407, 0.099486634, -0.021333016, 0.09890159, -0.060414337, -0.010086114, -0.12079739, 0.023342311, 0.051870912, -0.010265227, 0.10936652, -0.0987639, -0.07705864, -0.023528693, 0.034806818, 0.010856129, -0.07309301, -0.022440597, 0.070600145, -0.0898553, 0.012522628, -0.058032185, -0.0801991, 0.09246145, -0.09529538, 0.03226151, -0.03144414, 0.105837874, -0.019771112, 0.007253684, -0.09033252, -0.07519068, -0.060303964, -0.031219581, 0.084145136, 0.029060042, 0.020497248, 0.038600687, -0.03030185, 0.07879543},
{-0.09450367, 0.028018845, -0.060269386, 0.051215917, -0.10940107, 0.044177234, -0.09761121, 0.07571155, 0.034181744, -0.079861745, 0.12476649, 0.015713291, 0.02480279, -0.035035655, 0.031030495, -0.08468822, 0.070896156, 0.020908378, 0.04003364, -0.026908137, 0.058507033, -0.09056733, -0.092703715, -0.08069501, 0.043019526, 0.017117675, 0.00181405, 0.012930143, 0.10004897, 0.024115236, -0.07974285, 0.07456275, -0.10770425, 0.09078375, 0.03941113, -0.03277969, -0.093613535, 0.0684687, 0.026975187, -0.03300214, 0.0005009868, 0.069841355, -0.05630884, 0.0508587, -0.10776866, -0.038278442, -0.036222942, 0.062831156, -0.009532161, -0.06614714, -0.047860898, -0.02499234, 0.015552064, 0.004002454, 0.02807206, -0.0668483, -0.08685494, 0.032489866, -0.09241644, 0.023550628, 0.071871646, -0.030282833, 0.08569888, 0.0901065, -0.077390626, 0.03008301, -0.030540904, -0.03728424, 0.012047446, 0.058932938, -0.011364317, 0.053100336, 0.06797667, -0.09059815, 0.04108038, -0.050914973, 0.059728846, -0.0748357, -0.07364076, 0.0017654559, 0.022578755, 0.02233243, 0.07455093, 0.00771238, 0.094561175, 0.08036384, 0.053926002, -0.09014487, -0.030169388, -0.018230338, -0.07400199, 0.09429712, 0.09043361, -0.061240878, 0.024693912, 0.022097483, 0.040620923, 0.09103808, 0.013469, -0.02774781, 0.019522846, -0.05797075, 0.07830465, 0.089430094, 0.076798104, -0.083481945, -0.030121699, -0.06667982, -0.0014326961, 0.048293173, -0.07703284, -0.05565701, 0.015408844, -0.03449673, 0.022516966, -0.040628552, -0.020017514, -0.0017661005, 0.046973262, 0.008195765, 0.07239865, 0.09054316, 0.112552196, 0.038853016, 0.024826571, 0.04965447, -0.052954644, -0.10444163},
{0.00028153154, -0.083845474, 0.038369402, -0.012657304, -0.05191328, -0.091241516, 0.03834039, -0.021413274, -0.061998967, -0.09379099, -0.009332415, 0.0938315, -0.018975427, 0.049791686, 0.040558923, -0.038762905, -0.023075739, -0.04167015, 0.09225574, 0.10439179, 0.029334193, 0.031500123, 0.011847088, -0.038605817, 0.0072609866, 0.005511464, -0.009071623, 0.10465921, 0.08696185, -0.09826237, -0.06739346, 0.081886046, -0.04431626, 0.04330907, -0.041115977, -0.090970844, 0.01820676, 0.008909532, -0.037522916, -0.031681005, 0.10490445, 0.06430088, 0.096494064, 0.08789174, -0.105390236, -0.043019973, -0.0078217015, 0.018038118, -0.05269491, -0.08083751, 0.11120277, 0.055451304, 0.07900053, 0.0015207323, 0.05360329, 0.00562313, 0.073097825, 0.10484737, 0.003170199, -0.091648206, 0.07882539, 0.0003243215, 0.07252802, -0.045953292, 0.06730008, 0.015365846, 0.0336099, -0.049521733, -0.093161315, 0.08781851, 0.021518879, -0.055581607, 0.10158791, 0.03431869, 0.062273737, 0.09046898, 0.085739754, 0.056300804, -0.010950383, -0.055604335, -0.054867387, -0.04873192, 0.04745945, -0.07184743, 0.05384676, 0.06849923, -0.039350346, -0.028196702, 0.012728018, -0.080830306, 0.011678183, 0.06860964, 0.042323068, -0.058357533, 0.039274063, 0.0719361, -0.07470204, -0.08639323, -0.078487396, 0.07762177, 0.10295351, 0.05763142, -0.0147065455, -0.011347413, -0.02624071, -0.069000185, -0.076228194, 0.07293984, 0.09310515, 0.084222525, 0.0759769, 0.1015826, -0.008574449, -0.08709506, -0.024113849, -0.040683195, 0.007666982, -0.022676982, -0.04244005, 0.014260232, 0.03305193, -0.061340157, -0.03830159, 0.007996725, 0.09773746, -0.06517766, 0.1145926, 0.0096240025},
{-0.022048246, -0.018096114, -0.083331786, -0.05426059, 0.043484457, -0.0066289455, 0.012884751, 0.019812629, -0.09782896, -0.08724599, -0.07872318, -0.0055804895, -0.06317132, 0.012443464, 0.075901985, 0.093274884, 0.04336123, -0.07677124, -0.019615307, 0.11493238, -0.105260864, -0.017433114, 0.10041876, 0.05677345, 0.022145255, -0.062685, 0.023770362, 0.06406695, 0.10549413, 0.04570827, -0.024392877, -0.058294896, 0.027793843, -0.0012219792, 0.106093414, -0.09138219, 0.057877786, 0.059350986, 0.09585208, -0.05671626, -0.086148694, 0.08881801, 0.08925007, -0.030702742, -0.0025446967, 0.030994873, -0.051999185, 0.107622586, 0.0965147, 0.021945398, 0.020613723, -0.051952343, 0.07948738, -0.08706397, 0.013367437, 0.08016537, -0.01548805, -0.052763354, 0.10809249, -0.0805878, -0.07109819, -0.03683328, -0.09254947, 0.07194784, 0.050571516, 0.06564851, -0.10931885, -0.04371675, -0.06628691, 0.09256974, 0.08237524, -0.06701378, -0.061831605, -0.020418031, 0.08702124, 0.08858377, -0.108596034, 0.07430038, -0.05274269, 0.112034425, 0.07521455, 0.026662469, 0.0629917, 0.025712088, 0.0638309, -0.012127788, -0.011511012, 0.054606047, -0.10111793, 0.019305535, 0.015667316, 0.011233301, -0.0057076886, 0.0080600185, -0.08760552, -0.096056454, 0.0855671, -0.006780442, -0.09990278, 0.053948805, -0.074338734, -0.0066454615, 0.03835199, 0.07268265, 0.078493476, -0.0335124, -0.00068626757, -0.025500266, 0.060853604, 0.06755351, 0.117965735, -0.09409573, -0.09282269, -0.071739614, -0.10076359, -0.04528601, 0.040309444, -0.030740261, -0.033159725, 0.04377331, 0.006693785, 0.053450383, -0.022723587, -0.025231255, -0.015349619, -0.07263549, 0.039747424, -0.049918264},
{-0.08838012, 0.073128216, 0.04076309, 0.02918253, -0.0022848148, 0.023847625, 0.07387198, -0.05765645, -0.045301538, 0.07864255, 0.074902125, 0.011189688, 0.09854799, -0.018507687, 0.0665142, -0.0645657, -0.109344624, -0.029363316, -0.07240417, -0.07372179, 0.058848772, 0.024975443, -0.025887346, 0.08150263, -0.048772402, 0.014763244, -0.044014033, 0.08437753, 0.00947098, 0.07079654, 0.047262598, -0.084988035, 0.060665824, 0.0840094, -0.060503922, -0.027180493, 0.003290022, 0.051072944, -0.050721183, 0.07507167, -0.08160216, -0.022591256, 0.011426089, -0.09018866, 0.07132429, 0.0760493, -0.10658348, 0.0694885, -0.08768527, 0.008391688, 0.103599995, 0.09527239, 0.06256378, -0.05685277, 0.06007524, 0.07611727, -0.09650841, 0.07938488, -0.028388191, -0.037220776, 0.020981513, -0.07859843, 0.047486376, 0.064825684, -0.0056548715, 0.0011789183, 0.026206253, 0.056559205, -0.030752143, -0.037199337, 0.04774111, -0.040947676, -0.105149895, 0.0891308, 0.118857354, 0.11833094, 0.009858742, -0.036472723, -0.049644962, -0.073417276, -0.050440233, -0.06594147, 0.10012423, 0.08918087, 0.06554039, -0.09698226, 0.040094387, 0.020354992, 0.0068747937, -0.053089444, -0.05070393, 0.101913445, -0.0076906085, 0.06417769, 0.039898474, 0.016612008, -0.039953046, -0.07018009, -0.04091971, -0.083112895, -0.03852579, 0.043491896, 0.053866755, 0.017287396, -0.058401145, -0.018753232, -0.075741, -0.02333783, 0.017003527, -0.031216267, -0.04650348, -0.07770829, -0.045610715, 0.024197575, 0.09019239, 0.10265952, -0.01587663, -0.034872234, 0.09363449, -0.033059604, 0.05373075, -0.067440875, 0.10535694, 0.10871126, 0.002289787, -0.0963765, 0.116630286, -0.09148552},
{-0.040503245, -0.09433774, 0.082936615, -0.036068622, 0.013818738, -0.042308837, -0.066666655, 0.07430318, 0.028363317, -0.054040633, -0.031463087, -0.060257748, -0.0492678, -0.06557689, 0.067327686, -0.005661398, 0.035209183, -0.043138802, 0.10228807, 0.02171103, 0.08946343, -0.007758051, 0.05495332, -0.11484498, -0.024364352, 0.039859585, -0.100593716, 0.021283315, 0.0069844676, -0.055531375, 0.102654025, 0.012956717, 0.04980803, 0.12558079, -0.06972309, 0.090170175, 0.04023317, 0.12543304, 0.09280871, 0.05101978, -0.07538651, -0.05070012, -0.058521125, -0.042976078, 0.065011695, 0.030995568, -0.042551503, 0.029446898, 0.10609399, 0.0974251, -0.066983625, 0.09322542, 0.10121594, 0.0907098, -0.09398049, -0.044078983, 0.058375698, -0.04012026, -0.077851065, 0.01413974, 0.079614244, -0.028832022, -0.09085055, -0.045113157, -0.021990791, 0.06480689, 0.0960997, 0.09974389, -0.018878253, -0.05161243, -0.034453005, -0.053507235, -0.07574861, 0.059111312, 0.012477763, 0.12366158, -0.10501128, 0.050445795, 0.11767183, -0.11426803, 0.013280019, 0.0024998933, 0.003437175, -0.008516052, -0.07062179, -0.015514248, -0.059164193, 0.102202184, 0.054125726, 0.09505835, 0.0008485089, 0.12612914, -0.04379285, 0.0005869218, -0.022889424, -0.08644195, 0.004641734, 0.05463775, -0.006511213, -0.038284063, -0.010861851, -0.01776715, 0.032295853, -0.0910326, -0.053666234, 0.053854667, -0.01068771, -0.090679385, -0.019695979, -0.07554402, -0.06949364, -0.088673405, 0.05612721, -0.07194837, 0.034808263, 0.02450315, -0.012436317, 0.1021605, 0.07366053, 0.0062411577, 0.07147981, 0.0010493663, 0.050434977, 0.0956294, 0.048094854, -0.051489074, 0.124799564, -0.09379359},
{0.062304653, 0.0064773816, -0.10326023, 0.018102864, 0.09690872, 0.07705137, 0.049207564, -0.08710865, -0.06381646, 0.043655634, 0.12537102, -0.092225075, 0.14760463, 0.07658151, 0.015691733, -0.002682587, -0.023606569, -0.1116734, 0.05139347, -0.022031123, -0.018055178, -0.072973095, 0.037615325, 0.010441441, -0.072892964, -0.021691082, -0.08024656, 0.0063051204, 0.020371376, -0.01691182, 0.030588042, 0.0392672, -0.045680903, 0.06691493, 0.053277183, 0.06394053, -0.081136994, 0.007828407, 0.04877334, 0.045861866, -0.13033469, -0.035233997, 0.037986495, 0.049374096, -0.07639755, -0.005639831, -0.013731338, -0.10937628, -0.04527592, -0.06589532, -0.009892794, -0.0051952824, -0.037515078, -0.009752825, -0.07079075, 0.05250054, 0.0674678, 0.064307556, -0.0032064829, 0.07236267, 0.042187214, -0.074227735, 0.017916478, -0.06379482, -0.060240723, 0.020304928, -0.047204867, 0.005370751, 0.061860733, -0.09457626, -0.080777906, 0.07806272, -0.0017733425, -0.051152956, 0.048741806, 0.069116205, -0.001433647, 0.0756211, 0.048705753, -0.03144609, 0.083263725, -0.039869815, -0.060912557, -0.06800436, 0.056894846, 0.09237599, -0.044433806, 0.10855159, 0.019432623, 0.024187814, 0.10977581, 0.09931357, 0.044378772, 0.05949314, -0.098193474, 0.016018175, -0.05550594, 0.10315202, -0.109904066, -0.07861311, 0.010026112, -0.0045518847, -0.012784511, -0.052929115, -0.04242593, -0.04070644, -0.047802217, -0.024859136, 0.104750745, 0.07690259, -0.056107786, 0.05012177, -0.099743396, 0.037311357, 0.023729444, 0.16619846, -0.02749799, 0.041781142, -0.093732454, -0.022749372, -0.054852724, 0.07704586, 0.015075371, 0.07346379, -0.02081398, -0.061148047, 0.096471995, -0.023326442},
{0.09561294, -0.03309681, 0.1151475, -0.03703636, -0.08929428, 0.018891037, -0.104265295, -0.009264208, -0.028229102, -0.039007843, 0.10231616, 0.08234831, 0.006886339, -0.058358934, -0.10727191, -0.037930302, -0.069028236, -0.07421327, 0.05698578, 0.04812557, -0.061188202, 0.030825958, 0.028190868, -0.04643722, 0.13572456, 0.032968234, 0.07229157, -0.15174028, -0.14685133, -0.06251835, -0.014213759, -0.0841699, -0.09308754, 0.027070703, 0.11027386, 0.031202313, -0.040604312, -0.091358654, 0.052743077, -0.07379736, -0.014258827, -0.0057173446, 0.046258174, -0.045045536, 0.031475287, 0.014683224, 0.0535243, 0.07402285, -0.029802173, -0.12923403, 0.042560022, -0.017536089, 0.07449025, -0.009348548, 0.011590235, 0.10759262, 0.0050033513, -0.003730081, -0.06339887, 0.08879137, 0.025704913, -0.058299642, -0.19654642, -0.052029863, 0.06758553, 0.05960017, -0.048102163, -0.03989645, -0.134993, -0.028493887, 0.029077724, -0.03858252, -0.06372443, -0.123635545, 0.18106255, -0.026081542, 0.06330327, -0.026970886, -0.1258403, -0.042119965, 0.08580302, 0.099168256, -0.016711209, 0.08983336, 0.10643117, -0.0973778, 0.052590318, -0.020933835, 0.07901755, -0.035314657, 0.073188774, -0.06322316, 0.065430135, 0.047233943, -0.059942454, 0.049415007, 0.03822899, -0.07697769, -0.1763699, -0.052919734, -0.01858677, -0.06938136, 0.05459069, -0.0560617, 0.02145614, -0.055563904, 0.040371478, -0.047852334, -0.09434286, 0.0051193265, -0.049034264, 0.014107332, 0.13369948, 0.008480763, 0.103733465, 0.012865854, -0.06777888, 0.086355284, 0.027245995, -0.10457154, 0.052901313, 0.04538187, -0.014128213, -0.114805445, 0.096908, -0.12390212, 0.14277363, 0.03607497},
{0.080256745, 0.019181052, 0.039584454, 0.07313293, -0.07247391, -0.06561229, -0.098328464, 0.05179189, -0.10237467, -0.03882356, -0.0006977595, 0.121172026, 0.10864052, -0.028485773, -0.048975036, 0.17402416, -0.08418742, -0.04547391, -0.12865591, 0.026692884, 0.025198868, -0.03876833, 0.0123505145, 0.045393407, 0.14487004, -0.1576104, -0.09460133, -0.06749743, -0.042210586, 0.028872998, 0.026917052, -0.034254197, 0.04436695, 0.046127174, 0.13750637, 0.104305714, 0.10907807, -0.104381956, 0.07251839, -0.10500103, 0.069970764, -0.0016392246, -0.07140579, -0.021252856, 0.06863437, -0.07084489, -0.10461686, 0.1356723, -0.06666495, -0.012719732, -0.0046288827, -0.04451427, 0.14538422, 0.007352591, 0.0025222078, -0.04335023, -0.054138057, -0.100904614, -0.025429837, -0.084922075, -0.050333824, 0.039887983, -0.005770145, -0.04021117, 0.01457727, -0.057434056, -0.08579358, 0.074078545, -0.06476704, 0.037198644, 0.043469284, 0.036505785, -0.082528315, -0.050487783, 0.022181576, 0.0874172, 0.027203077, -0.06769471, -0.10424988, -0.077956066, 0.029590635, -0.061580095, -0.1605602, 0.046189547, 0.023042995, -0.03623214, 0.155403, -0.019253617, 0.100949414, 0.04183791, -0.107319646, 0.09500183, 0.051933467, 0.08880818, -0.036801316, 0.021267265, 0.06525572, 0.032646365, -0.14056396, 0.02929312, -0.089475416, 0.09758478, 0.061819736, -0.017021656, 0.10131258, 0.060461387, 0.12715179, 0.018863982, 0.06703598, -0.028091269, 0.060765784, 0.037431657, 0.15182482, 0.06988861, 0.065720946, 0.05258432, 0.045737147, 0.059524536, -0.0066164667, -0.07005586, -0.08867321, -0.021659201, -0.026034914, 0.024187293, 0.0008320287, -0.14239752, 0.15033302, 0.0020189686},
{0.017277507, -0.031824984, 0.058944896, -0.06537102, 0.07215502, 0.10372861, -0.016659366, 0.10194492, -0.033467673, 0.10101724, 0.103547126, 0.09137025, 0.14559948, 0.14200829, -0.051413044, 0.043958124, 0.032984793, -0.07939468, -0.12209591, 0.08298287, 0.049503848, 0.026946086, 0.07880226, 0.07940511, 0.06997538, -0.002575641, 0.020060793, -0.14973192, 0.008114123, -0.012886362, 0.106619515, 0.010888066, 0.00807381, 0.09205065, -0.016860364, 0.069037944, -0.057085842, 0.08343001, 0.011751325, -0.11670638, -0.08173002, 0.023416832, 0.018327927, 0.09926948, 0.10410803, 0.018729385, 0.0004170686, 0.007852606, 0.03209102, -0.088608496, 0.08620428, -0.062942386, 0.032297526, 0.0066981274, 0.10045092, 0.07737876, -0.13439247, 0.018803611, -0.15720382, 0.03525104, -0.0827275, 0.012274655, 0.020423852, 0.10123466, 0.004259102, -0.0109051345, -0.050548572, -0.08233442, -0.022862969, 0.034276694, 0.030961229, -0.08625009, 0.015634835, 0.11733421, -0.086867474, 0.03180014, -0.051034447, -0.048343826, -0.15229662, -0.13196068, 0.07061242, -0.07816091, -0.11990091, -0.10977685, 0.12783785, -0.045571875, 0.05675617, -0.1002826, 0.08003864, -0.03192769, -0.019745495, 0.14174594, -0.08437717, 0.05394393, 0.10868746, -0.080014795, 0.052382782, 0.1469146, -0.06294966, -0.058127016, 0.10460977, 0.09105477, -0.009914068, -0.010756351, 0.1643663, -0.09580598, 0.13454169, -0.07946066, 0.05109906, -0.009466205, 0.054018628, 0.057806402, -0.05391418, 0.050241355, -0.05637721, 0.03538847, 0.08285456, 0.021286115, -0.09753358, -0.009390473, -0.015013725, 0.00881232, -0.09558412, -0.06883603, -0.083266005, 0.022919573, 0.13296671, -0.008591143},
{0.060792703, -0.06249013, -0.027803296, 0.123796165, -0.061658435, -0.0006785467, -0.097578645, 0.08350122, -0.043007538, -0.017118484, 0.12741765, -0.02591567, -0.06672647, -0.05912805, -0.09379998, 0.12349789, -0.10183145, -0.078087054, 0.061965376, 0.09309211, 0.054219633, 0.114143044, 0.09718038, -0.08940306, 0.03146981, -0.038924735, -0.008225961, -0.05534952, -0.046290837, 0.08022391, -0.046936557, -0.06107492, 0.092799045, -0.070161305, -0.013575958, 0.0963138, -0.044104617, 0.050468653, -0.07968805, -0.06961656, -0.0676737, -0.066434175, -0.13134599, 0.05269853, 0.080316514, 0.0061785495, -0.019161567, 0.12509362, -0.013235427, -0.05334126, 0.0021398216, 0.009217337, 0.052817862, -0.04475191, 0.099848986, 0.030967534, 0.033795998, -0.08548277, 0.061757427, 0.01819697, 0.049954697, 0.054460727, -0.054284427, 0.09605989, -0.02949401, -0.082849324, -0.015745856, 0.048607588, 0.012840432, -0.035433255, 0.05013042, -0.108953565, -0.059322715, 0.050537247, -0.057043068, 0.0042785946, 0.010632563, -0.047329545, -0.08296452, 0.001991168, 0.15996827, -0.0057507902, -0.015209608, 0.07247193, 0.10962424, 0.08685572, 0.0293669, -0.00019222539, 0.108588696, -0.012638324, -0.08714136, 0.021221995, 0.06146118, 0.005732749, -0.0162372, 0.029056907, -0.08636159, -0.036728993, -0.0053528305, 0.02821602, -0.019125953, -0.066196635, -0.021646049, -0.00857611, 0.14482829, -0.11373602, 0.1276068, 0.07685658, -0.0938634, -0.012083884, 0.013283355, 0.08733708, -0.10130065, 0.09833877, 0.007263854, 0.11105719, -0.021954486, 0.07004389, 0.031673063, 0.041010186, 0.033135805, 0.0803058, 0.042987913, -0.09155838, -0.05611434, 0.015475085, -0.053349376, 0.06372159},
{0.032622986, -0.10325241, -0.0787334, 0.058493428, 0.07027657, -0.08889312, 0.08537255, -0.020399123, -0.026459828, -0.10511564, -0.049278513, 0.08457875, -0.052031633, 0.04864212, 0.017268514, 0.026985878, -0.111462034, 0.03267269, -0.017833145, -0.12932612, 0.08373136, -0.039043617, 0.07653203, 0.044781834, -0.04094632, 0.09729649, 0.006583524, 0.1554788, 0.10138166, 0.079790324, -0.042774826, 0.027417507, -0.021199593, -0.091909684, 0.037808202, -0.08632321, -0.026657099, 0.007851084, 0.0025663627, 0.033317212, 0.089417584, -0.061648536, -0.011057573, -0.012816774, 0.011008818, 0.029710094, -0.09237652, 0.06871667, 0.036627144, 0.1080332, -0.04391029, -0.0053933486, -0.062103406, -0.012357215, -0.09300741, 0.11867895, 0.010702717, -0.09125763, -0.01818866, 0.08916776, -0.05789331, 0.07308273, -0.032547005, -0.045593742, -0.023669586, -0.10302489, 0.0507867, -0.044726234, -0.036474712, -0.029315086, 0.032737102, 0.06826905, 0.10173637, -0.04850785, -0.14219457, -0.012831605, -0.011410272, -0.106353216, -0.015934609, -0.045723256, 0.008863018, -0.077605106, 0.060127694, 0.025102556, -0.042561103, 0.05198138, 0.039398406, 0.021378813, 0.074663036, 0.03686741, -0.038082283, -0.09154193, 0.0467913, -0.1161595, -0.03588184, -0.10605072, -0.09481636, 0.055182997, 0.14307226, 0.09294212, 0.021936119, 0.072376646, -0.023641676, -0.0261276, 0.0007302005, -0.09844231, 0.07963595, 0.07844653, 0.034051985, 0.057695232, -0.111585066, 0.06290831, -0.1206999, -0.006461762, 0.02112867, -0.14431345, -0.018824674, -0.106141455, 0.018655378, -0.10487091, 0.0037620948, -0.01151616, 0.08495735, -0.09154123, -0.09724298, 0.12375703, 0.040501148, 0.02828677},
{0.047733236, 0.12462032, -0.06461482, -0.068230316, -0.075559884, 0.0434286, -0.0681737, -0.045725062, 0.059332117, 0.029164925, -0.007220695, 0.046859793, -0.0039108708, 0.045567658, -0.039867632, 0.03206171, -0.08378968, -0.050736178, 0.07790759, 0.026913155, -0.079052396, 0.1218019, 0.06096243, 0.07623597, -0.101026624, 0.09835398, -0.10488812, 0.114247814, 0.08616962, -0.016840734, 0.06779487, -0.0033155603, -0.004513668, -0.14688355, -0.1348608, 0.017920213, 0.06092353, -0.0576416, 0.08186848, 0.13012533, -0.04935414, -0.0032882094, 0.1363636, 0.07172606, -0.1319443, -0.09276716, -0.018019035, -0.07594948, -0.003527619, -0.10663879, 0.06574779, 0.0127168745, -0.08151353, 0.06865547, -0.10491226, 0.011637281, 0.06421139, 0.10053098, 0.038712155, -0.03970474, 0.022729311, 0.046255704, 0.10507624, -0.08267705, 0.037193358, 0.015320254, -0.10362575, 0.023221463, 0.14829403, 0.15933672, 0.06947391, -0.06307897, 0.07122876, 0.059443872, -0.10853643, 0.04953064, 0.05128989, -0.017179206, -0.016522758, 0.13771151, -0.07080021, 0.024965301, 0.06326612, -0.031160655, 0.089246735, 0.013715912, 0.029424943, 0.09011889, 0.028710812, 0.034878626, -0.010341208, -0.15917987, 0.04769312, 0.048943162, -0.119660735, -0.020755269, -0.10518548, 0.05518648, -0.035001583, 0.03373596, 0.029337913, -0.06738672, 0.00704072, -0.091643386, -0.124516554, -0.010371894, 0.01984895, -0.020551471, -0.1251031, -0.066464126, 0.12828551, 0.1029377, -0.13169946, 0.06745808, -0.03797575, -0.12076697, 0.03468818, 0.08974111, -0.007857898, -0.05741022, 0.14445701, -0.12903184, 0.10354142, 0.014001755, 0.03550963, -0.008838916, -0.15444866, -0.04479683},
{-0.028418167, 0.0018321457, 0.07773125, -0.030114748, 0.060441017, -0.077295214, -0.08109512, 0.009316616, 0.049727097, -0.06320053, -0.11312153, -0.08236785, -0.10515886, -0.044968866, 0.020807674, 0.0023445103, -0.004725382, -0.07079416, 0.11467972, -0.049423784, 0.0753531, -0.061228752, -0.045109753, 0.031562354, -0.09462294, 0.17443453, -0.07041885, 0.14126255, 0.15775225, 0.021689506, -0.02978058, -0.032707095, 0.022771528, -0.03149271, -0.030967493, 0.09826819, -0.10171114, -0.013269271, 0.1172155, 0.07284813, -0.026037173, -0.08700295, 0.046115294, 0.07476835, -0.103281684, -0.013367364, -0.0542084, 0.031454265, 0.099185824, 0.082603335, 0.072087884, 0.06944162, 0.0017329265, 0.029637761, -0.022666536, -0.15702581, 0.15387668, -0.05083231, 0.16724913, -0.11057526, 0.06940638, -0.054319296, -0.0030707864, -0.020772599, -0.093404196, 0.08681402, -0.0744003, -0.032976188, -0.022418132, 0.02158344, -0.022117414, 0.080123395, 0.10375936, 0.07857519, 0.036020752, 0.034266464, -0.015995644, -0.08764878, 0.059071224, 0.046626702, -0.10838487, 0.096609935, -0.012214934, -0.105944574, -0.0005740249, 0.03567713, -0.11910136, 0.08002379, -0.090022355, -0.072793715, 0.16032477, -0.12612113, -0.035428554, -0.11347621, -0.058566667, -0.0817609, 0.060631618, -0.09674602, 0.062078193, -0.009836309, 0.0384105, 0.043465327, -0.07853444, 0.055635408, -0.10073109, -0.02800033, -0.08310859, -0.013556671, -0.118604764, 0.04115206, 0.076739825, 0.057283938, -0.14436348, 0.040885568, 0.042558372, -0.16831268, 0.079824135, -0.08637239, 0.07808144, -0.07000099, 0.115524486, 0.0528623, 0.15578349, 0.06220326, 0.057649106, 0.118816085, -0.1514728, -0.03058611},
{-0.1000886, 0.1496811, -0.11205754, -0.04033081, 0.0873897, 0.04502833, -0.036364757, 0.056345433, -0.058004946, 0.06436856, 0.024280947, -0.027525606, -0.022305291, 0.05044975, 0.10841873, -0.13619116, 0.015357678, 0.04375994, -0.023817496, 0.0036152333, -0.049598325, 0.09159934, 0.0727659, -0.02946011, -0.12900375, 0.038528867, 0.025401305, 0.08456238, -0.018721655, 0.012080277, 0.07518748, 0.09489471, -0.072480954, 0.093203284, -0.011593126, 0.033851907, -0.022704044, 0.09686562, 0.066608965, 0.024848355, 0.014007316, 0.04233168, 0.07202813, 0.0810792, -0.109962426, -0.042552337, 0.013685539, -0.07476811, -0.05894181, 0.11558966, -0.07681366, -0.07627036, 0.1024096, 0.012933729, 0.030850127, -0.12287452, -0.011286776, -0.1030503, 0.14032233, 0.10203191, -0.03853325, 0.025614137, 0.0035881528, -0.073217295, -0.074101016, -0.03297504, -0.013079269, 0.009799205, 0.12076555, 0.1119808, -0.02769724, -0.09115963, 0.006572552, 0.16419762, -0.027641715, 0.012729536, -0.0827989, -0.030145586, 0.12172709, 0.058903966, -0.06647917, 0.03730865, 0.070221744, -0.013048335, -0.02818211, -0.08331867, 0.0015384792, 0.08320825, -0.030175207, -0.089123085, 0.15412316, 0.033353873, -0.07691571, -0.16969372, 0.01672056, -0.030444779, -0.060818393, -0.02703541, 0.029151933, -0.07907013, -0.0087206215, 0.020131227, 0.022532675, -0.06292008, -0.13753721, -0.043869827, -0.048651744, -0.003198689, -0.03136549, -0.04444819, -0.10274052, 0.04051785, -0.07583875, 0.056340378, -0.08831629, -0.087738685, -0.0971827, 0.059234783, 0.05392023, 0.08643867, 0.13970736, -0.084941335, 0.07873442, 0.07228263, 0.08451754, -0.002407659, -0.034718152, -0.041329533},
{-0.06833278, 0.13481052, 0.025293518, -0.059768748, 0.06277361, 0.031105831, -0.10097432, 0.10408652, 0.07543424, 0.030978352, -0.13276014, 0.03221672, -0.10149866, 0.03189755, 0.13375476, -0.005595503, 0.04539411, -0.09768148, 0.070774935, -0.1694944, 0.07673651, -0.066968426, -0.030289406, 0.04692067, 0.0037629744, 0.032211993, 0.05507564, 0.10001572, -0.058644395, -0.0817435, 0.1366021, 0.077168085, -0.101246424, -0.062840864, -0.05017011, 0.023403887, 0.076644726, 0.0019801839, 0.060970813, 0.070530266, 0.07327227, -0.039626457, -0.06635954, -0.025957527, 0.008133678, -0.10925675, -0.08153284, -0.107973136, -0.07346599, 0.022375306, -0.10753984, 0.044962853, -0.05177266, 0.04461187, -0.041994624, -0.04296679, 0.009644724, 0.017396383, 0.0046581468, 0.089189656, -0.0037336426, 0.08848539, 0.029474217, -0.020580508, -0.09403023, -0.053108413, -0.07670406, 0.10357764, 0.06661564, -0.009465063, -0.03598248, 0.06555697, 0.028064743, -0.0043463977, 0.019449947, 0.120814055, 0.052163385, 0.03751062, -0.037962895, 0.0030108935, 0.03168961, 0.05027972, 0.03877593, 0.030764667, -0.0167022, -0.08084554, 0.07238137, -0.040485214, -0.08734528, -0.056437436, -0.045426432, -0.122387275, -0.038189545, -0.056206156, 0.072134264, -0.08660324, 0.083216086, 0.10337386, 0.1553679, -0.013295181, -0.031953722, 0.12378676, -0.053748205, -0.016078562, 0.044159822, -0.011831801, 0.10579077, 0.020871572, 0.098250985, -0.004073625, -0.005921117, -0.087585464, -0.08565283, -0.07371062, -0.0747834, 0.050403006, 0.02614046, -0.045216497, 0.07213996, 0.08346106, 0.09677131, 0.041991226, 0.12838362, 0.15085843, -0.05492568, -0.06635746, -0.14842506, -0.03432047},
{-0.0194655, 0.014037841, -0.033622406, 0.07604788, 0.088601425, -0.02767004, 0.08042356, -0.0030786023, 0.023956269, 0.07141501, -0.0026488008, 0.106167585, 0.01631199, 0.067447424, -0.078108124, 0.0010837165, -0.08941839, 0.097886436, 0.055804342, -0.09354185, -0.092444114, 0.040743884, 0.12180933, 0.024292657, -0.030505408, 0.08924671, 0.059177928, 0.038812812, 0.06878921, 0.054109327, 0.012092532, -0.07940091, -0.09638713, 0.078201815, 0.046842355, 0.010815666, -0.021818653, 0.057294223, 0.11745652, 0.04808744, 0.00832145, -0.06935546, -0.09216843, -0.009348933, -0.007189204, -0.095005676, -0.08332148, 0.00067186827, 0.015621237, 0.038586717, -0.038242918, 0.011102356, 0.072758935, -0.00781787, -0.05032077, -0.05197863, 0.1400355, -0.0582866, 0.07302467, -0.07539304, -0.030341635, -0.09087523, 0.13486874, 0.028408647, -0.06229384, 0.007742022, -0.00014337004, -0.033415847, -0.022602383, 0.041621678, -0.09998437, -0.11094635, -0.017405786, -0.005130947, -0.11838785, 0.09790807, -0.09344483, -0.08724178, 0.09250671, 0.09413738, 0.07356718, 0.027198762, -0.054285895, 0.07681673, 0.056406662, -0.009683819, 0.016211474, -0.018477323, 0.10161913, -0.016308056, -0.07862787, -0.017278627, 0.0402105, 0.04078583, 0.07677605, -0.085413, 0.00044830143, 0.027203167, 0.034051802, -0.1012505, 0.036309868, 0.10300548, 0.03083959, -0.06391011, -0.06109406, -0.018485883, 0.045674067, 0.011713355, -0.040912397, -0.07926976, -0.053349294, 0.058352396, -0.121709935, 0.031025965, -0.05533957, 0.035854448, -0.042118084, -0.051364027, -0.081743404, -0.08411819, -0.019829776, 0.09589283, 0.07557428, -0.022187654, -0.04456965, 0.08174622, 0.026692057, -0.08685947},
{-0.047523163, -0.07882953, -0.064028546, 0.13327023, -0.036996856, -0.0852938, 0.07552195, 0.09221326, -0.06934773, -0.0999539, -0.023570351, 0.06694259, -0.005738987, 0.1057245, 0.065624416, -0.0375708, -0.038950704, 0.089786194, -0.0668556, -0.052319184, -0.05820908, -0.047124363, 0.11905656, -0.05518812, -0.05465217, 0.14890045, -0.08760507, 0.03258584, 0.043172564, 0.09087251, 0.043766864, -0.010266067, -0.009521142, 0.026376724, -0.08486532, 0.10234379, -0.039415263, 0.0792254, -0.04718393, -0.026976194, 0.01932502, 0.086819366, -0.0335839, 0.036316287, 0.13107157, 0.04652429, -0.061086092, 0.025166033, -0.046663303, 0.089865625, -0.07724954, 0.03792484, 0.09839176, -0.0141203, 0.01354143, -0.03994019, -0.011774021, 0.03793773, 0.036906287, 0.059359897, -0.10650153, 0.05780516, 0.12920612, -0.024589606, -0.10035249, -0.047398593, 0.043772005, 0.10085979, 0.07217525, 0.10570037, 0.033456873, -0.07546521, -0.032467827, 0.033636685, -0.024994867, -0.09819411, 0.055947833, 0.020925015, -0.09696378, 0.10359501, -0.09452141, -0.03630399, -0.013197492, 0.09666946, -0.050739318, -0.04945702, 0.010029417, -0.022676336, 0.13671528, 0.03407041, 0.08094697, 0.090627626, 0.10211313, -0.004191702, 0.0287891, -0.090094894, -0.02910734, -0.05000689, 0.004135947, 0.012556046, -0.033184215, -0.047370847, 0.09509334, -0.104256995, 0.06029389, -0.06877439, 0.04725484, 0.09441741, 0.10490069, -0.08654444, 0.06181286, 0.03440912, 0.019960625, -0.031541526, -0.04446758, -0.13682914, 0.08432533, -0.037251964, -0.099719994, 0.094599456, 0.02136538, -0.08871014, 0.040682223, 0.009638537, -0.063627414, -0.034808215, -0.119060725, 0.00838085},
{-0.0340418, -0.0053390577, 0.048753746, 0.1271167, 0.0047101835, -0.08875471, -0.021237401, 0.0026237667, -0.09820402, -0.0071424693, 0.0068178964, 0.04700192, -0.11371899, -0.010196565, -0.014190394, 0.059660967, -0.04935401, -0.10804638, 0.06647789, -0.063497126, -0.098101035, -0.08399394, -0.012832147, -0.033591364, 0.10825535, 0.028475069, -0.040040582, -0.035036236, -0.03191203, -0.03503269, -0.027450169, -0.0726709, 0.096171394, -0.0016381502, 0.05323627, 0.0068656425, 0.024481332, -0.004694703, 0.05704305, 0.019736469, 0.061250683, -0.0926015, 0.10894565, -0.089272715, 0.10629256, -0.058992572, -0.049209327, 0.0017264814, 0.10078491, -0.09953457, -0.043592464, -0.10400905, 0.061972428, 0.01492749, 0.07408592, -0.08160179, 0.0047855363, -0.059942853, 0.06579453, -0.11299166, -0.02757573, 0.096397735, 0.08856126, -0.044059455, 0.04970205, 0.03659383, -0.08291138, -0.006473586, 0.07228023, 0.06805907, 0.031025438, 0.015628863, -0.02011457, -0.011503401, 0.055537745, -0.0154799055, -0.07523126, -0.0019043311, -0.09199422, -0.0774949, -0.074235335, -0.07301204, 0.058299482, -0.038766343, 0.08909786, 0.06594344, 0.020182583, -0.08059909, -0.04908192, -0.08587291, 0.0464145, 0.024474492, -0.008597456, 0.021672105, 0.11778666, 0.042218566, 0.011322379, 0.100097716, 0.12624384, -0.07244812, -0.0071872473, -0.06187288, -0.0759385, 0.027030915, 0.05035746, 0.067455545, -0.012007958, -0.07910819, -0.047323674, 0.047464542, -0.06881946, 0.029951006, 0.061016712, 0.02544231, 0.0063810423, 0.075230785, -0.06838525, -0.026486538, -0.04265449, 0.07365556, -0.087461054, -0.034199093, -0.079316825, 0.022613695, -0.06738886, 0.10452613, -0.06882784, -0.027312055},
{-0.013177015, 0.0404918, -0.04623312, -0.07255753, 0.05923856, -0.041206464, 0.043960925, -0.007201709, -0.0871717, -0.008330286, -0.107939914, 0.12388972, -0.05573487, 0.008295476, -0.07208657, 0.04831823, 0.08641521, -0.00431829, 0.06486222, 0.031034864, -0.11428384, 0.020829707, 0.039137904, 0.009902788, 0.0601734, 0.1385675, 0.05465152, 0.10999353, 0.010130773, 0.05132422, -0.027650926, 0.055618223, 0.056043833, -0.05007548, 0.04559442, -0.07681979, -0.054143187, -0.04689252, 0.056167547, -0.036238596, 0.056694865, 0.08559561, -0.031270165, -0.11125773, 0.10954199, -0.027938487, 0.073868334, 0.12005551, 0.10201801, 0.060020186, -0.022983529, 0.02668275, -0.011652859, -0.017041601, 0.050201595, 0.06794011, 0.12618712, -0.08565328, -0.07486831, -0.029470697, 0.00345433, 0.011932124, 0.116902106, -0.09405249, 0.07151209, -0.011763451, 0.081427895, -0.052832864, 0.02394431, -0.07853462, -0.09712186, 0.08372036, 0.014907107, -0.010927257, -0.09931613, -0.042656936, -0.028424462, -0.09102963, -0.03413803, 0.025447762, 0.01998978, 0.077002555, 0.021210525, 0.056851726, -0.0812837, 0.06556401, -0.028997554, -0.059474938, 0.12898242, -0.05625056, 0.020495603, -0.08643839, -0.019637749, 0.046743967, 0.06904698, 0.003323406, 0.07095316, 0.080130614, 0.02897049, 0.09468654, 0.035931855, 0.11245406, -0.0063343165, 0.074212, 0.085062824, -0.08985689, 0.12841079, 0.011935436, 0.07898434, 0.08384942, -0.04766064, 0.023092002, 0.056154467, 0.052523624, -0.071765944, -0.11408173, 0.0023250955, 0.044839174, -0.011754257, -0.060206767, 0.023499968, 0.012898082, -0.077853344, 0.005798131, -0.04788401, -3.6951955e-05, -0.066923805, 0.047947127},
{0.08724846, -0.037558313, 0.08416075, 0.040153682, -0.0160332, -0.06508629, -0.044966225, -0.036400065, -0.028600931, -0.08774261, 0.10823777, 0.062641345, -0.015849333, -0.033263743, 0.02126223, 0.026709538, -0.021436818, 0.061146915, 0.08510767, -0.07683639, 0.012511955, -0.024678182, 0.0057175434, -0.06079219, -0.04953612, -0.034400508, -0.020681068, 0.059823457, -0.020729408, 0.08362885, 0.034752775, 0.023261944, -0.02455291, -0.01349198, 0.06244408, 0.08133343, -0.10372837, -0.03286549, 0.06247241, 0.005246446, 0.08147567, -0.010881372, 0.078878626, 0.02186716, 0.023342738, 0.023509037, -0.10590428, -0.037295304, -0.04915669, 0.10375362, 0.101353854, 0.066776365, 0.009727716, 0.03396215, 0.08102445, -0.0330423, 0.034336947, -0.021067776, 0.10503979, 0.056122076, -0.1082707, 0.0022060622, 0.032853827, 0.062400043, 0.03441015, -0.06773407, -0.014420059, 0.02047661, -0.07786453, -0.046653274, 0.047417928, -0.08678947, -0.036880493, 0.07083041, 0.036483373, -0.029999994, 0.06121221, -0.058460034, -0.080138855, 0.037515473, 0.08974331, -0.046133973, 0.025371367, -0.0405373, -0.07936977, -0.079859406, 0.0017625437, 0.07326356, 0.08268094, 0.09537849, 0.09724459, 0.084888935, 0.027013078, -0.10528131, -0.06565412, -0.06450994, -0.016455293, 0.06342713, -0.03386847, 0.047771007, 0.0037765428, -0.0076116454, -0.04350364, -0.025261536, 0.013222962, 0.10495085, -0.061362788, -0.014144611, -0.052699793, -0.0952078, -0.06983344, 0.07334831, 0.046962246, 0.022615306, 0.03463927, -0.0832396, -0.021242457, -0.045476373, -0.07693136, -0.10463928, 0.0018344233, 0.008516376, 0.022081757, 0.06149883, 0.09810813, 0.07980108, -0.06532404, -0.08293393},
{-0.008900218, 0.01592496, -0.07916157, -0.010969159, 0.060189463, -0.050016496, -0.04473543, 0.0059676617, -0.07046945, -0.0034932569, -0.0050224187, 0.017880127, -0.043603104, 0.10049226, 0.0030798258, 0.0063890093, 0.02650314, -0.037434895, 0.08053891, 0.07305592, 0.027830115, 0.05777111, -0.013904458, 0.013056888, -0.05110407, -0.046871454, -0.09295624, 0.10603002, -0.08906168, -0.082321316, 0.069605395, 0.0693723, 0.060827043, 0.08423356, 0.008404458, -0.013238426, -0.026264459, 0.09884158, 0.06841657, 0.033787064, 0.09172741, 0.05292602, 0.007104993, -0.012936567, 0.031112317, -0.09188649, -0.03428051, 0.035825666, -0.1025476, 0.016769243, -0.054764863, -0.0582668, 0.0882922, -0.047910318, 0.042574614, 0.035187896, -0.04541295, 0.03513302, 0.07806019, -0.076260656, -0.027958555, 0.0060777017, -0.075905845, 0.036087126, 0.10529426, -0.07069172, 0.0051981835, 0.105170056, -0.019971576, 0.059511185, -0.08277247, 0.050850786, 0.0740011, -0.07580956, -0.106652796, 0.098112, -0.089924075, 0.1043793, 0.036757335, -0.07428351, -0.02388336, 0.08719382, 0.0008164297, -0.100478515, -0.053283747, -0.097598985, -0.06697301, 0.061689742, -0.058116596, -0.03185671, -0.0072779125, -0.10022865, -0.030706353, -0.02691175, 0.062732995, -0.012127034, 0.080975145, -0.07430628, -0.032714065, -0.010926791, 0.006976299, 0.07353722, -0.0121039795, 0.03703563, -0.077708274, 0.034147095, 0.06148175, -0.042169183, -0.043980047, 0.050082743, 0.060787894, -0.06566256, 0.041205738, -0.018318329, -0.03054291, 0.08584768, -0.06622555, -0.020889841, -0.09134257, 0.021472514, -0.090698004, 0.018488314, -0.10429705, 0.020853609, -0.0079103485, 0.028994847, 0.01664694, -0.023611266},
{-0.06613979, 0.017665839, 0.07856948, -0.031115197, 0.03448119, 0.06834054, 0.069944255, -0.10498256, -0.015708968, 0.0019066706, 0.0058148326, 0.108140916, 0.07914753, -0.02634814, 0.03507975, 0.029419668, 0.024131322, -0.021002261, 0.051093634, -0.090651594, 0.07232684, 0.047711436, -0.028256625, 0.0044306335, -0.04899619, 0.051851977, 0.07932382, -0.07596267, -0.021918353, -0.048900016, 0.12815613, -0.015254043, -0.10224177, -0.061399788, -0.076936215, 0.041107148, -0.043754905, -0.04913828, -0.092051946, -0.043546658, 0.02027971, 0.104395315, 0.06776225, 0.096411526, 0.12917724, 0.021948274, -0.034266353, 0.11450246, -0.03870245, 0.002344018, 0.019095343, -0.10578816, -0.053261068, -0.05249596, 0.025454134, -0.07286485, -0.04447311, 0.06677006, -0.09338911, 0.026978903, -0.004184774, -0.05059608, -0.08966113, 0.059328333, -0.036944948, -0.09139786, 0.06484946, -0.078041896, -0.077910535, 0.048219353, 0.01795055, -0.029971888, -0.023409232, 0.09853033, -0.08293966, 0.031957887, -0.010281649, 0.017855994, 0.08597045, -0.07779598, -0.024014257, -0.090431266, 0.0889611, 0.082744315, -0.004025156, 0.06099454, -0.07193385, -0.041598164, 0.12705357, 0.057833683, 0.07239709, 0.08735637, 0.0024009496, -0.07509152, 0.13072613, 0.09236127, 0.057105467, 0.05011656, 0.08883986, -0.03670703, -0.10095372, 0.029822528, -0.007778732, -0.005632788, -0.04023552, 0.06445576, 0.09503611, -0.019109165, 0.013092112, -0.012723524, -0.05231591, -0.0029336363, 0.044009898, -0.044544082, 0.014276192, -0.1059917, 0.08327414, 0.09751965, 0.04550361, -0.0037991628, -0.000179648, 0.00708958, -0.03694521, 0.07835373, -0.09735405, -0.020862548, -0.05509023, 0.07104317},
{-0.05337386, 0.10130165, -0.001126668, 0.029784126, -0.1071018, 0.031926826, -0.091109954, 0.03565125, 0.09120794, 0.06246555, 0.026109211, -0.012337865, 0.006503121, 0.08398814, 0.014406915, -0.011267237, -0.089496545, 0.06268161, 0.07405255, -0.09539267, -0.10252965, 0.064363636, 0.06885251, 0.078434475, 0.05500916, -0.079112634, 0.060753826, -0.024977963, 0.053827222, -0.11075373, 0.07648444, 0.0466472, 0.0026510009, 0.011521971, -0.041776918, 0.09939295, -0.011473745, 0.1012443, -0.04032596, -0.0052052434, -0.044612654, -0.032097653, 0.112405665, 0.07689794, 0.023616893, 0.089985676, -0.08406161, 0.11831533, -0.01908356, -0.08726876, -0.048235506, 0.0876053, 0.023523476, 0.08586044, 0.10473092, -0.09782859, 0.069052525, -0.10235076, -0.04402933, 0.025768146, 0.06347908, -0.10438678, 0.019824695, 0.090928316, 0.106056854, 0.02949029, -0.030468801, -0.083474234, -0.06589653, 0.038929436, 0.030284712, 0.087108016, -0.06835137, -0.004963319, 0.010406554, 0.04765055, 0.033847693, 0.09600657, 0.043491475, -0.0141753545, -0.0047439975, 0.0127205625, 0.06403056, 0.018804587, 0.12390303, -0.07774304, 0.074491456, -0.008508368, 0.026216973, -0.024506874, 0.037753657, -0.047677964, 0.08633451, 0.06492198, 0.11838036, -0.039402343, 0.062407926, -0.035113003, -0.090468325, 0.037774026, 0.023892984, -0.0044609997, 0.090617225, -0.07406528, 0.089346975, -0.027944943, 0.02589295, -0.016530799, 0.05582408, -0.08200621, -0.060589015, 0.09322515, 0.008083606, -0.016339393, -0.076712996, 0.08522008, 0.03020565, 0.08236152, -0.013788485, -0.028873034, -0.10169153, 0.015822176, -0.10516629, 0.033731837, 0.09436947, 0.02855392, -0.10014648, 0.028078532},
{0.0317631, -0.027138302, 0.069629736, 0.054214854, -0.08603686, -0.03952139, -0.07175224, -0.047331702, 0.07262394, 0.055749774, 0.06400555, -0.029627798, -0.059698056, 0.07668032, -0.006654824, -0.082336046, -0.0055630747, -0.06461022, 0.10101948, -0.008673749, -0.099574514, 0.0525487, 0.08003503, 0.082126, -0.06771875, -0.0037442145, 0.09743164, 0.06435137, -0.034043048, -0.054632857, 0.076149546, 0.023227898, 0.022585865, -0.01183101, 0.1083955, -0.06455016, -0.08197718, -0.05454819, -0.00067431375, 0.026875425, -0.091342196, -0.048940253, 0.009996272, -0.033491023, -0.07639433, -0.07290625, 0.081458345, 0.039786853, 0.0660215, 0.042635653, 0.08652126, -0.07185981, 0.11130588, 0.0951999, 0.012892447, 0.034683753, 0.060410894, 0.003583081, 0.07209736, 0.031104105, 0.068833366, 0.07695748, 0.026699988, 0.008130521, -0.084424086, -0.10686464, 0.06299535, 0.09365985, -0.08916502, 0.103967905, 0.040064897, 0.09055458, 0.009236023, 0.092636086, 0.053386774, 0.02100135, -0.077817954, -0.028197259, 0.009853761, -0.09469803, -0.015941236, -0.024652556, -0.01423831, 0.035851624, 0.09285807, -0.055873945, 0.093117245, 0.0045241406, -0.034273706, 0.06501578, -0.025981063, 0.034350373, -0.057292067, 0.1067769, 0.03891288, -0.043538414, -0.07443157, 0.012433382, 0.07534603, 0.038092017, -0.0017496273, 0.027356368, -0.033166308, 0.01725962, -0.062538214, 0.016841896, -0.07187686, -0.08385597, 0.025067953, -0.07574491, -0.05565419, 0.024186075, 0.05213168, -0.034431703, -0.025628485, -0.06954516, -0.10514616, -0.044158652, -0.09778689, -0.06940523, 0.018555963, -0.08922795, -0.092915095, 0.007131116, 0.07188824, -0.075414464, -0.023747524, -0.05785423},
{-0.074144445, 0.09939402, -0.032747854, -0.039522875, -0.015466182, 0.08789046, -0.045133203, 0.022846356, 0.090456665, -0.03204529, 0.082878344, 0.07060817, 0.119202234, 0.0490668, 0.11831455, 0.10442604, 0.09227911, 0.006370985, -0.0119530205, 0.07965583, 0.04808799, -0.077137694, -0.023777653, 0.03903353, 0.017250875, -0.0438935, 0.047013257, -0.09182529, 0.05671944, -0.091719344, 0.08680811, -0.07267081, -0.025517028, 0.08478625, 0.031744532, -0.057548556, -0.05303826, 0.1022982, 0.013373816, 0.0084067425, 0.07296958, 0.08250931, -0.056600843, -0.018346895, 0.05898263, -0.06883578, 0.056927204, -0.018741451, -0.08740502, -0.02268198, 0.099871926, -0.014855258, 0.07075432, -0.0046974723, -0.04496984, -0.04266598, -0.04595884, -0.06454629, 0.06642684, -0.05888217, -0.07764166, -0.03787984, -0.030033737, 0.06166579, -0.06207768, 0.09244173, 0.07037539, 0.08584835, 0.04036669, 0.017393094, 0.032534882, 0.04957816, -0.09543792, 0.13099809, 0.028138999, 0.0020685242, -0.10223965, -0.073761344, -0.043531474, -0.062801, 0.04565261, 0.056531712, -0.017694155, -0.05333, 0.0826466, 0.026267596, 0.08298983, 0.09004501, 0.031410445, 0.0712526, 0.050832607, -0.07765934, -0.058506977, -0.006098975, 0.012768902, 0.05686839, 0.015511945, 0.07761931, -0.091268025, 0.023951858, 0.0761265, 0.054247685, 0.036672056, -0.053091418, -0.046128575, -0.04486053, -0.015127395, 0.074029185, 0.11678571, 0.061237086, 0.10206656, -0.05133983, 0.07087032, -0.017015869, -0.060092777, 0.13526043, -0.018700311, 0.08265403, 0.070970505, 0.03926657, 0.10637928, 0.056770045, -0.071144305, -0.019936917, 0.039687097, -0.08519044, 0.0050510177, -0.0074161445},
{-0.09538158, 0.012063844, -0.012190039, -0.1175881, -0.084578864, 0.03808549, 0.03656989, 0.011925384, 0.05698204, 0.012472607, 0.06983811, 0.00662682, -0.011085328, 0.08835123, 0.029228637, 0.0061381613, -0.050975222, 0.0043169395, 0.048717078, 0.055287667, -0.09133275, 0.003171244, 0.011642536, -0.041228537, 0.044085484, -0.08560443, 0.060762074, 0.0835352, -0.018930018, 0.06191392, -0.024822988, 0.054851912, 0.043443818, 0.046246313, -0.052174803, 0.08176229, -0.005790597, -0.035100564, -0.0044750227, 0.06322319, 0.034075964, -0.034244165, -0.019354723, 0.040792905, -0.032801315, 0.020221919, 0.08801082, 0.053119183, 0.10573959, 0.04092966, -0.00398535, -0.04852712, -0.04735045, 0.01600865, -0.012919895, 0.016366309, -0.05569645, -0.046722036, 0.026805252, -0.018314738, 0.06369039, -0.0474952, 0.09264885, -0.063697994, -0.07388506, 0.014681216, -0.016376488, -0.0638573, -0.12644905, -0.064313516, -0.004071949, 0.09417782, -0.096049644, 0.13706864, 0.093965925, 0.026104117, 0.0046362183, 0.07782759, 0.005605966, -0.0006946864, 0.078727715, 0.020685762, -0.010724124, 0.008939306, -0.029544137, -0.07160878, 0.022636505, 0.042343985, 0.03719855, -0.018559419, 0.062046606, 0.052894026, 0.031440258, 0.113994345, 0.031615414, -0.06592208, -0.026969917, -0.08790203, -0.10898594, 0.010398626, -0.030205034, 0.037733264, -0.053811736, -0.011148132, 0.08846403, 0.09404978, -0.08156442, -0.07090524, -0.06833493, 0.097942345, 0.05537542, 0.05047585, 0.06628758, 0.0042935773, -0.0057947636, 0.11985638, -0.016887836, 0.030175775, 0.07175205, -0.020139657, -0.032886185, 0.051870283, 0.0057224454, 0.09075003, -0.0718277, 0.045795172, 0.04651642, -0.107275955},
{0.04944267, -0.17335947, 0.027761286, 0.022497192, 0.08416318, 0.060930952, -0.06732858, -0.01212772, -0.00049038976, 0.05700469, 0.14275765, -0.0109732, 0.005800969, -0.050171353, -0.05468593, 0.074525155, -0.10447578, -0.093047954, -0.091793224, 0.19115202, 0.048726484, -0.05534201, -0.056144856, -0.0046569183, 0.13325234, -0.035251576, -0.079689205, 0.010366706, 0.060954608, -0.018758345, -0.001866434, -0.1069175, 0.01389178, 0.01612182, 0.0122035565, -0.021960495, 0.026130598, -0.10590211, -0.0653438, 0.031762574, 0.08993463, 0.030144826, -0.025791774, 0.018187381, -0.042153254, 0.028424105, 0.07009536, 0.038311258, -0.049020514, -0.10757236, -0.041718885, 0.0431249, -0.036438875, -0.109215125, -0.024458386, 0.05084347, -0.030393654, -0.08729062, -0.021618474, 0.06690248, -0.08081716, -0.056295596, -0.016848328, 0.08254267, 0.010136768, -0.0111834705, -0.09935588, 0.09041305, -0.09299447, 0.07608773, -0.032233905, -0.012678313, 0.016887486, 0.030916134, 0.03346132, 0.02938859, -0.1079582, 0.0662702, 0.017276758, 0.007272238, 0.049171038, 0.022460267, -0.16955075, 0.05841639, 0.15765773, -0.026514195, 0.116758846, -0.16744171, 0.018066978, 0.05066597, -0.032426175, -0.01939608, 0.012949735, 0.029194256, 0.01583638, 0.0637857, -0.029645309, 0.094685905, -0.1391968, 0.05180636, -0.09711105, -0.120147616, -0.05721968, -0.024145745, 0.10687639, -0.065536514, 0.105879985, -0.08559594, 0.02951427, 0.056364644, 0.022944683, -0.05867312, 0.1697145, -0.020396579, 0.041379184, 0.07633018, 0.06566387, 0.041379392, 0.08461422, 0.0026440024, -0.07578632, -0.10025002, -0.028590674, 0.02669671, -0.0936811, -0.022452215, 0.047917996, 0.063478924},
{-0.04733146, -0.029046277, 0.047583267, 0.04300828, -0.1145479, 0.031111345, -0.08637958, -0.022972137, 0.032345176, -0.10409711, 0.06298827, 0.05334077, 0.11309748, -0.058014188, -0.103215665, 0.12720124, -0.033147294, 0.066301204, -0.0035962388, 0.03960325, -0.006383865, 0.09505799, 0.0828874, -0.032590378, 0.10764524, -0.0048093894, 0.08763314, -0.07853378, -0.14137459, -0.101631135, 0.07787677, 0.055826835, 0.060108367, -0.057959583, -0.011864771, -0.09652524, 0.031824235, 0.067763835, 0.1482392, -0.14825818, 0.052805245, 0.030829296, -0.09931276, -0.03284128, 0.047180206, -0.026847854, -0.006759383, 0.10975464, 0.05460371, -0.09953241, 0.11620047, 0.101643905, -0.024050366, 0.021165887, -0.08557752, -0.03559688, -0.18450838, 0.0576196, 0.031079724, 0.007595346, -0.016274478, -0.06203507, -0.16978917, 0.054036587, -0.06734146, 0.10596819, -0.015322204, 0.07205795, -0.13394527, 0.063840084, -0.009755741, -0.02861656, -0.081062704, 0.018994765, 0.13636547, 0.004004996, -0.05949586, -0.04745873, -0.042580504, -0.0972456, 0.1618735, -0.042766497, -0.14348845, 0.058481976, -0.0043441695, 0.01306043, 0.02057439, -0.036307022, -0.06911848, -0.0036496313, 0.058516875, 0.020224927, -0.084598795, 0.13320029, 0.021123582, 0.056017473, -0.06794205, -0.057134904, -0.10964179, 0.059016943, 0.07205406, -0.06238264, 0.013119573, 0.04484245, -0.022480458, 0.07465349, 0.055346135, -0.07317345, 0.05205062, 0.06471579, 0.115041636, 0.059561193, 0.14758496, -0.059965808, 0.025355533, 0.15264772, -0.03507981, -0.07758586, -0.07101015, 0.031199843, -0.08251461, -0.02947894, -0.079120666, -0.12616737, -0.09908024, -0.01756713, 0.14096816, -0.035318516},
{0.030661639, -0.071026735, -0.089613415, -0.08824352, -0.04999981, 0.06482871, 0.05238764, -0.06882453, -0.099244885, -0.04899924, 0.16107032, -0.036926914, -0.019702615, 0.0064026257, -0.061397497, 0.076022014, -0.0021546397, 0.09325915, 0.064588524, 0.100307845, 0.018548341, -0.0024759856, -0.032214947, -0.06306862, 0.08157428, -0.020784892, 0.050090555, -0.07065039, -0.0026829191, 0.041294288, 0.13909045, -0.107591085, -0.049298402, 0.05318048, 0.066986665, -0.053737916, 0.064625666, 0.0612164, -0.010949721, -0.14810878, -0.027594525, 0.039478853, -0.07709534, -0.056055516, 0.09931249, -2.6288071e-05, 0.023348063, -0.0066536656, -0.04576705, 0.04551246, -0.06130193, 0.046187073, 0.12496394, 0.08020347, 0.03586209, 0.09579716, -0.031216301, -0.059252083, -0.057496957, -0.08106461, -0.054844834, 0.048439614, 0.09838877, 0.105648756, -0.064623244, -0.033966463, 0.021968313, 0.03515488, -0.15299398, -0.018966543, 0.0138493, 0.017199533, -0.028124243, 0.13583817, -0.08281461, -0.0019985058, -0.06553859, 0.02477336, -0.069143526, 0.022911347, 0.1486638, -0.06195759, 0.07329141, 0.034389626, 0.052725904, 0.07821862, 0.046728022, 0.021794107, 0.033698764, -0.073086224, -0.11040195, 0.16606262, 0.08640055, 0.055196594, -0.019057203, 0.013790272, 0.02777338, 0.109279625, -0.023192987, 0.021488637, -0.09953551, -0.06342561, 0.038982574, -0.048804533, 0.16336145, 0.1341377, 0.11921513, 0.08319762, 0.05997045, 0.053297155, 0.014616667, -0.026405387, 0.050377715, 0.06831401, -0.031497285, 0.1389344, 0.063376665, -0.02869977, -0.05432283, 0.06879312, -0.08504233, 0.08104476, -0.023791417, -0.12781876, -0.07270749, -0.136542, 0.016147595, -0.0411452},
{-0.09059913, -0.1318413, -0.1318084, -0.0121224355, 0.033243798, 0.045391917, 0.06642355, -0.1029267, 0.06020005, 0.010018744, 0.14784017, -0.036319062, 0.019122548, 0.06897404, 0.07921842, 0.09858938, 0.0693742, 0.015025049, 0.025182957, 0.08137127, -0.018037362, -0.020074695, 0.16754118, 0.03403586, -0.089568965, -0.073519446, 0.080248274, -0.010034581, -0.11614632, -0.07656371, 0.14830771, -0.085333295, -0.031058965, 0.15504166, 0.007145401, 0.022337645, 0.013783, 0.10428613, 0.036546905, -0.08865922, -0.12524521, -0.044960946, 0.00068994594, -0.057121687, -0.04747941, -0.079031184, 0.077099636, -0.026832782, -0.06942822, 0.13086654, 0.09834873, 0.020124152, -0.033010542, -0.01485008, -0.04560068, -0.050534837, -0.04059903, -0.049262162, -0.042935703, -0.052841164, -0.010428346, -0.105384596, 0.16305558, -0.0750388, -0.10032542, 0.07060935, -0.036547605, -0.007089123, -0.16925065, -0.034340207, 0.07313063, -0.019839155, 0.040732697, 0.080445364, -0.110467, -0.10377516, -0.09462741, -0.08877969, 0.043696716, -0.013182103, 0.07519366, 0.094985545, 0.06145223, -0.026152752, 0.057386007, 0.099635206, -0.08161704, 0.004821635, -0.09394906, -0.056786694, 0.0706824, 0.048944242, 0.10078326, 0.07794985, -0.11120679, -0.102692954, -0.030082837, 0.14542718, 0.004411977, 0.049561203, 0.019750103, -0.052470215, 0.047809716, 0.068004474, 0.043316863, 0.05262242, 0.0908595, 0.026177576, 0.00843603, 0.065549485, -0.06887467, -0.064588726, -0.11733516, -0.092573225, -0.09723866, 0.04146379, -0.07145664, -0.03751509, -0.11235222, -0.080845326, -0.07069006, -0.12657124, -0.108510785, -0.047833223, 0.052603513, -0.16348693, 0.03634007, 0.048240658},
{0.0780367, -0.14427346, 0.027778028, 0.089640416, -0.06947051, -0.049267806, -0.010050272, 0.014116049, -0.027149454, 0.0061911643, 0.003611446, -0.0032724978, 0.090450324, -0.07613492, 0.0038726178, 0.04661897, -0.0072212047, 0.058930177, 0.10621761, 0.014821862, 0.033989206, 0.04740943, 0.15738122, 0.052554935, -0.09340091, -0.07317059, -0.101128, 0.018784668, 0.012137271, 0.045065485, 0.09372977, 0.07813399, -0.047245856, -0.0363658, -0.04122939, -0.04368515, 0.04548366, 0.09132301, 0.07081145, -0.05379369, -0.03695098, -0.075843275, -0.038844112, -0.042835373, -0.066557825, -0.06323152, -0.029987551, 0.124090984, 0.009828351, -0.025349002, 0.04091744, -0.036326893, -0.030823007, -0.029763643, 0.0010246262, 0.05303823, 0.12197258, 0.016782597, 0.010465223, -0.082483076, 0.08631166, -0.046245012, 0.15987821, -0.0896243, -0.0903949, -0.059283216, 0.05071432, 0.054072484, -0.024016635, 0.01656723, -0.03381233, 0.08949307, -0.04314539, 0.11549712, -0.021322304, 0.026462436, -0.14412494, -0.007252693, 0.06919103, 0.057269435, 0.105699286, 0.032635853, 0.084599845, 0.04285309, 0.100354046, -0.028158903, -0.057566136, 0.08072028, -0.022405915, 0.028534878, -0.035312835, 0.14486998, -0.0110341385, -0.038034014, -0.02361563, -0.05619516, -0.098015, 0.16663888, 0.05207587, -0.08645038, -0.012729585, -0.117690414, -0.02433647, 0.010780722, 0.07252393, 0.122871354, -0.005472567, -0.03299076, 0.062008668, -0.07941562, -0.023132103, 0.05488217, -0.058050152, 0.029961837, -0.08121441, 0.048244383, 0.020122226, 0.041470945, -0.0060376558, 0.077684075, 0.13401401, -0.029365756, -0.09956422, 0.04945422, 0.037675694, -0.09234532, -0.023542456, -0.043095518},
{-0.067401305, 0.075012274, 0.04955246, 0.046651196, -0.041061234, -0.07500568, 0.03751503, 0.049678266, 0.025773332, -0.08160718, 0.008478122, 0.06298392, -0.090612225, -0.13201618, 0.010833425, -0.013060572, -0.035495404, 0.0017529445, 0.04922647, -0.16489236, -0.011759036, 0.05767443, 0.066558026, -0.0643239, -0.14076188, 0.07830879, 0.075202584, 0.09416884, 0.01789683, 0.08862577, 0.12095336, -0.05614133, -0.04625702, 0.07384899, -0.14121062, -0.0810494, 0.0758789, -0.030757204, 0.013658172, 0.135181, 0.085939035, -0.026819102, 0.07019008, -0.067539304, -0.110197805, 0.079467446, 0.059504822, -0.086777635, -0.07129573, 0.07590306, -0.06364029, -0.03196249, -0.004760613, -0.05556095, -0.033980504, -0.001669243, 0.17521846, 0.0002509281, -0.019247234, -0.10050628, 0.0015953901, -0.031282704, 0.13456318, -0.0141376555, 0.037757352, 0.08744208, -0.031083284, -0.09873545, 0.015146971, 0.017882494, 0.05191051, -0.10917324, -0.09930293, 0.057087794, -0.109624915, 0.02545294, -0.071907036, 0.058086023, 0.08945861, 0.0012971835, 0.037078463, -0.07190855, 0.040743865, 0.01081218, -0.032256898, 0.090170115, 0.023287885, 0.11966993, 0.017756095, -0.083194, 0.109359235, -0.13185166, 0.0067653507, -0.0794807, -0.11086291, 0.05573237, -0.100982286, 0.026757583, 0.1093277, -0.07847637, 0.011753552, -0.045157198, -0.1011888, -0.092860304, -0.008314184, -0.028957462, -0.026753433, 0.017226527, 0.02388812, 0.06850389, -0.025560156, -0.08018518, -0.100484684, 0.05271236, 0.009654358, -0.07417182, -0.1065352, -0.008793868, 0.0505819, -0.067938164, 0.11700474, -0.09990852, 0.11457412, 0.08451727, 0.04252337, 0.009846544, -0.11167357, -0.08327126},
{-0.04764716, 0.15754391, -0.024159476, 0.06419182, 0.064575925, -0.092748985, -0.053061895, -0.0013290495, -0.08657187, 0.052983508, -0.028234048, 0.043695495, -0.10920543, 0.06470574, -0.029798407, 0.006514287, -0.004016051, 0.02166538, 0.017513141, -0.08815418, -0.07485843, 0.027475817, 0.0068456135, 0.05989053, 0.060666207, 0.1754503, 0.022715973, 0.10799379, 0.0023043233, 0.0028750193, -0.096387126, 0.0995922, -0.01771019, -0.061697308, -0.12924549, 0.060661685, -0.0029490811, 0.109534815, 0.06304448, 0.12497636, -0.056725767, -0.10323001, 0.1026893, 0.009902278, -0.12021275, 0.01820781, 0.038570136, -0.1532494, -0.032161824, -0.0033236414, 0.1146727, -0.09051539, -0.15382592, 0.08471281, -0.036594845, 0.0054820594, 0.11987588, -0.09907862, 0.1393766, -0.0047509056, 0.06914818, -0.055237174, -0.048378, 0.057305947, 0.052028492, 0.014722395, 0.047578845, 0.09453678, 0.18057819, 0.017178984, 0.10440464, -0.097381145, 0.004066713, -0.02663732, -0.06999447, -0.0934256, 0.07444974, -0.054460626, -0.012739096, 0.119412296, -0.021960014, -0.1022292, 0.07436307, 0.08110981, 0.067836516, 0.058730286, -0.15499814, 0.036229007, -0.05516539, 0.075651884, 0.040799018, -0.17154029, 0.022730842, -0.14905393, -0.1098084, -0.09433694, -0.07945233, -0.035980396, 0.059418604, -0.0061448812, -0.0050516874, 0.046070877, -0.050670423, 0.104066, -0.094919726, 0.056960545, 0.03091318, -0.09876312, 0.06897526, 0.09053586, -0.010632287, -0.0996665, -0.020653877, -0.04401845, 0.09556091, -0.115206726, 0.072961345, -0.08819775, 0.09569067, 0.031313434, -0.021035714, 0.029094271, -0.026178403, 0.17167625, 0.012397505, 0.08735814, -0.069524795, -0.09478655},
{-0.067962795, 0.008741946, 0.051411983, 0.13012563, -0.08129571, 0.03713925, -0.08222164, 0.07652688, -0.0500657, -0.032238476, -0.031535216, 0.03096507, -0.013912512, -0.061682433, 0.021925407, 0.005237318, -0.015743988, -0.033454638, -0.024330165, -0.05634074, 0.06572126, 0.08529284, 0.07291194, -0.05213902, -0.07463986, 0.07421439, 0.049797144, 0.015628343, -0.007653608, 0.090129875, 0.07218474, -0.028424116, 0.020055467, 0.033240877, -0.13870592, -0.054977044, -0.055787113, 0.0743674, 0.055853568, 0.14907052, 0.009135257, -0.029856257, -0.011096914, 0.07918816, 0.09157401, 0.03673138, 0.10478674, -0.10802406, -0.034837343, 0.009262248, 0.0045621432, -0.09387868, 0.01652934, 0.053789, -0.1035873, -0.1130068, 0.09967785, 0.041803673, -0.027844077, -0.02077207, -0.041560937, -0.09071499, 0.15556422, -0.07554607, 0.09127283, -0.07260289, 0.048588492, -0.038489193, 0.11387652, -0.01014227, -0.0064535495, 0.0826596, 0.09680362, 0.0044897, 0.012149985, 0.109463476, -0.051915646, -0.10473064, 0.004976359, 0.07748343, -0.1355009, 0.038327277, 0.11204123, -0.07151648, -0.09319937, 0.0568657, -0.0073565124, -0.020846864, -0.057564165, 0.07941949, -0.037057187, 0.040990606, -0.033624284, -0.05277881, -0.022180405, 0.037812173, 0.021304041, -0.08628879, 0.111583844, 0.10243814, 0.019086972, -0.037519462, 0.052190382, 0.0468449, 0.070461825, 0.026772939, 0.0992506, 0.017450549, 0.120783955, -0.06241712, -0.11565184, -0.048978627, 0.036081824, -0.06636964, -0.028685391, -0.02605383, -0.05952289, 0.09676941, -0.022408316, -0.103874214, -0.003302732, -0.10089411, -0.011722249, 0.05045765, 0.10044254, 0.0041415878, 0.005193259, -0.032193612},
{-0.028237965, 0.024787463, -0.011795314, 0.020104773, 0.026654411, 0.013036884, -0.06564138, 0.08757804, 0.053749442, 0.019791797, -0.039019614, 0.059750944, -0.0055270046, 0.008035138, 0.13055103, 0.035477348, 0.04889649, -0.09392368, -0.0051730275, -0.076590054, -0.03445056, 0.05471241, -0.0016423415, -0.0041477885, -0.004360402, 0.101240166, -0.013902161, 0.015183239, 0.10423969, -0.057188123, 0.096029244, -0.03403085, -0.009810972, -0.034253437, -0.13293417, 0.094975956, 0.009376475, 0.07975138, 0.104674175, 0.09409873, 0.08829923, 0.041860074, -0.012756227, 0.098605946, -0.0662682, -0.017965985, 0.07592629, 0.018680485, 0.0830259, 0.048219565, -0.109423645, -0.06338924, 0.060479205, -0.09495965, 0.0064025, -0.060587645, 0.09949816, -0.032095008, 0.030942902, -0.10833424, 0.045592133, -0.07466339, -0.0059912642, 0.03474167, 0.0022825897, -0.06699168, -0.034323312, 0.04231049, 0.037769094, 0.032523677, 0.040581875, 0.066883296, 0.10454376, 0.08086638, -0.05507903, 0.051505852, 0.07841251, -0.061359692, -0.015717681, 0.045585454, -0.12588476, -0.008214086, 0.03910683, 0.019574666, 0.09766645, -0.0795387, -0.014735952, 0.15008222, 0.045615047, -0.09901663, 0.09837255, -0.097284436, -0.031097934, -0.024551347, -0.0057121245, 0.040974274, -0.089285, 0.08568126, 0.11827837, 0.002889514, 0.014644034, 0.08596619, 0.058391016, 0.100832164, 0.08538576, 0.07473431, -0.0053128977, 0.003149291, 4.4070373e-05, -0.019411102, -0.011869579, -0.10173759, 0.016365249, -0.08049615, 0.08511557, -0.13098434, 0.0703714, 0.019574821, -0.07731381, -0.036129944, -0.1146359, 0.00019027719, -0.08706937, 0.111350454, 0.0033492073, 0.121049084, -0.020102916, 0.071647026},
{-0.1277673, -0.009781784, -0.008913742, 0.06488969, 0.0142715825, -0.07391602, 0.053057767, -0.06681416, 0.09615588, 0.08352892, 0.051489163, 0.10535435, 0.0555353, 0.10848639, -0.033685796, 0.036124136, 0.04938059, -0.09488173, 0.04580335, -0.0022774606, -0.0664655, 0.053987138, -0.01950717, 0.040732626, -0.013955339, -0.01564721, -0.033653695, -0.044088043, -0.028582137, -0.051954992, -0.046210177, -0.078166164, 0.09753029, -0.024890542, 0.005999246, 0.0018872317, 0.03853399, 0.008926773, -0.08265926, 0.053466942, 0.0388654, 0.091894776, 0.038661767, 0.08197413, 0.08695224, 0.016479572, -0.037588082, 0.11618849, -0.02463726, -0.10515397, -0.09024173, -0.037172265, 0.09525722, -0.011575649, 0.003913656, -0.023485022, 0.09340516, -0.03156016, -0.06810925, 0.07897576, -0.09200833, 0.0066678766, 0.07262824, -0.009169862, 0.016179867, -0.006679571, 0.07953989, 0.04859045, -0.026707506, 0.031730514, 0.072703324, 0.09672193, -0.03639137, 0.011211207, -0.06323861, 0.08495019, 0.10664343, -0.054078147, -0.087188445, 0.10387209, 0.03521488, -0.030707955, -0.029485665, 0.017286956, -0.049542833, 0.00393707, -0.008668435, 0.04706047, 0.0021829528, 0.06339639, 0.049976975, 0.029798886, 0.051554233, -0.12996767, 0.06414225, 0.07173738, -0.08904846, 0.054943252, 0.14572775, -0.09272026, 0.011229284, -0.056488663, 0.06322571, 0.089122415, 0.009334705, -0.10120601, 0.089919835, -0.0007179436, 0.06581258, -0.10772252, 0.033761654, -0.05673384, -0.07769137, -0.03335186, -0.0798896, -0.057543978, 0.08743971, -0.018199943, -0.09101674, 0.0425096, -0.0062248837, 0.070060894, 0.070821024, -0.08618215, 0.04644856, 0.09528857, -0.022243759, -0.049520876},
{-0.089380786, -0.028268622, -0.0035397355, 0.041094445, 0.060130622, -0.10210982, 0.031065786, 0.09461965, -0.048230473, 0.008799024, -0.0126888435, 0.037912767, -0.09530028, 0.02431393, 0.07126192, 0.09977768, -0.08939407, 0.08779953, -0.093390755, -0.088504106, 0.030865734, -0.02440301, -0.040005915, -0.032808866, 0.023208717, 0.021305598, 0.028247928, 0.122216165, -0.017400099, -0.074793, 0.027329091, -0.0076135197, -0.039416943, 0.06784341, -0.06587754, 0.032734368, 0.029285062, 0.06563964, -0.013593508, -0.029716793, 0.100983396, 0.0832918, 0.02710071, 0.036354326, 0.080395564, 0.030310782, 0.0075491443, -0.05197348, -0.06200616, 0.027666064, 0.021730132, 0.07075593, 0.10328905, 0.100970976, -0.04919278, 0.08110482, -0.031886112, 0.027941018, 0.0017757169, -0.0821763, 0.07896728, -0.021519855, 0.014586999, -0.020661488, -0.07112522, -0.008532025, 0.04778818, -0.09504177, 0.016096473, -0.018998597, 0.07209504, 0.089016944, 0.040181994, 0.09632072, -0.06162382, 0.03116032, 0.047256693, 0.07529211, -0.111962564, 0.05097563, -0.013696284, -0.09365296, -0.11622544, -0.100072004, -0.0041503045, 0.00733944, 0.061599426, 0.029808277, -0.01618684, -0.012690507, -0.116170555, 0.08035999, -0.04457008, 0.048319258, 0.15785147, 0.0084088, -0.01924406, 0.01483852, 0.054957703, -0.08600923, -0.0021474287, 0.020226369, 0.058478475, -0.046793226, -0.0021438173, -0.09491517, -0.057007257, -0.016864372, -0.079764724, 0.06570554, -0.09788538, -0.091120966, 0.0545269, 0.005948014, 0.011934407, 0.022455147, -0.112660654, -0.057119012, 0.06719484, -0.06967963, -0.073086455, -0.040763147, 0.022683933, 0.029233905, 0.03901191, -0.017156733, -0.11316564, 0.09259709},
{-0.021880947, 0.04809541, -0.019847179, 0.11489563, 0.0646936, 0.066385254, -0.085505955, 0.011242852, 0.085397705, -0.040057376, -0.03375928, 0.1305161, -0.040153604, -0.032789648, 0.047009382, 0.060673006, -0.10348895, 0.029482216, -0.10185733, 0.039782826, -0.06934007, -0.038073827, -0.040861063, 0.08109732, -0.038505055, 0.12247281, -0.016696315, -0.024373187, 0.06761463, -0.08910059, 0.061948452, -0.08868498, -0.008166696, -0.11499018, -0.107047886, 0.07665239, -0.061798766, 0.04286269, -0.05045923, -0.07015164, 0.05512325, -0.030888684, -0.009237941, -0.043881025, 0.063601315, 0.000865232, -0.003717199, 0.15508972, 0.09674382, -0.02692343, -0.042148598, 0.0680476, 0.06564158, -0.07855788, 0.011139259, -0.050564576, 0.10338281, -0.07147221, -0.112087086, -0.053600255, 0.046294827, -0.07352259, 0.14392707, 0.056916863, -0.022058502, 0.018498763, 0.057010308, 0.05731003, 0.11331015, -0.079121955, -0.054407798, -0.03391946, -0.048096254, -0.05202404, -0.04479007, 0.0035038362, 0.06328979, 0.03164901, -0.051983096, -0.027519105, -0.05674807, 0.010101974, 0.08165573, 0.08446677, -0.016262116, 0.05339777, 0.0053663063, -0.094554506, -0.0040111085, 0.06384812, -0.029890273, -0.018065281, -0.0001411289, -0.10609838, 0.12180349, -0.073134184, 0.08569631, 0.12373627, 0.04238, -0.10293996, 0.06205198, -0.02694613, 0.032553155, -0.07295556, 0.04881939, -0.028868932, -0.0017618866, 0.014957592, 0.020191515, 0.08464209, -0.13822661, 0.057721987, 0.0042148577, 0.09124715, 0.022378653, 0.036751013, -0.0061760107, -0.106020175, 0.041434817, -0.050170157, -0.07247853, 0.06450436, 0.0120074, -0.07497342, -0.083176516, 0.14251113, -0.07518033, 0.09826764},
{-0.13045703, -0.05372645, 0.027609555, -0.006915656, -0.10335098, 0.017439462, -0.09810385, -0.031212151, -0.097757876, -0.009565152, -0.003907344, 0.061348073, 0.005193207, 0.06657358, 0.04653023, -0.028924113, 0.07826895, -0.10741094, 0.048693765, 0.00949292, -0.039741907, 0.021993596, 0.09693647, 0.013727494, 0.020772986, 0.09550239, 0.043971483, 0.12042736, 0.044338137, 0.059507288, 0.003543852, -0.020977035, -0.017285788, 0.042797, -0.09863045, 0.10108462, -0.05650727, 0.092543125, 0.101552635, 0.0032449353, -0.03298332, 0.031149223, 0.0707912, -0.00912585, -0.008107311, -0.096122324, 0.057742864, 0.093372904, 0.04032767, 0.009090441, 0.045698434, -0.029044762, -0.04678575, 0.0071798977, -0.026158452, -0.045605384, 0.08612003, -0.08847661, 0.08729898, 0.0813337, -0.038864415, 0.09251302, 0.097499184, -0.0231155, -0.07396184, -0.10896013, 0.068380065, 0.041814208, 0.08543132, -0.07438517, 0.059639465, -0.06418428, 0.007485047, -0.068366125, -0.009068193, 0.00374096, -0.023849612, 0.061274424, -0.09920986, 0.018556124, -0.047473066, -0.09594547, -0.08760983, 0.048696876, 0.08857484, 0.024763098, 0.073661655, 0.022721356, 0.07865227, -0.046851926, 0.074248835, -0.06231757, 0.09598547, -0.103602745, 0.04556735, 0.030400127, -0.026781335, 0.0043094917, 0.11204915, 0.06301978, 0.1061963, -0.056887753, 0.04584398, -0.06162363, 0.118761204, -0.0068492894, 0.05927568, -0.023190107, 0.02083947, -0.024370732, -0.0348129, 0.069617525, -0.09129631, 0.08297865, 0.01005359, -0.11104821, -0.010474219, -0.022259638, -0.040452033, -0.0068981275, 0.019850638, -9.792214e-05, 0.020620942, 0.104001954, 0.0010534972, -0.053761948, -0.071291514, -0.0068030786},
{0.09277513, 0.051317573, -0.0304343, 0.11136772, 0.091382794, 0.0043320507, -0.005469684, 0.03902538, -0.08245601, -0.09377851, -0.10414942, -0.049399883, 0.08222376, 0.04865331, -0.020439673, -0.02291797, -0.061589234, -0.09849584, 0.033687238, -0.08569111, 0.047347132, -0.08750225, 0.05077093, 0.089048475, 0.08751878, -0.036753923, -0.077400394, 0.0073828627, 0.06366704, 0.09536827, 0.12453883, -0.10670371, -0.09760782, 0.011191362, 0.07982715, -0.028795496, 0.055597227, 0.020948276, 0.10399777, 0.121410266, 0.10230253, 0.0701011, 0.036273655, -0.052638557, -0.04733349, -0.045510534, -0.039108463, -0.07276761, 0.05396551, -0.04296066, -0.123924084, -0.042896822, -0.062936895, -0.002128814, 0.02691184, -0.0046020118, 0.112842895, -0.09631298, -0.075138144, 0.0003696456, -0.09117629, -0.005389049, 0.023971027, -0.04324606, 0.09660688, -0.08695258, -0.0010538917, -0.060820833, -0.015992304, -0.09145902, 0.042870373, -0.06089407, 0.074362665, 0.011741609, 0.0818526, -0.009954156, 0.006760799, -0.033595614, -0.0815527, 0.101974756, -0.07149112, -0.08802943, -0.027683508, 0.04900219, 0.10762441, -0.084589235, 0.024972066, -0.04192234, 0.09053561, 0.069929585, 0.07086164, -0.06301577, -0.03815338, -0.011131083, -0.0056396876, 0.013148129, 0.0038949028, -0.019531362, -0.04328761, 0.06154482, 0.034565136, 0.07984449, 0.009403781, 0.08831622, -0.043880694, 0.073673956, 0.13005508, -0.075340524, -0.0013605478, 0.007573617, 0.07737078, -0.059334658, -0.0038599018, 0.088990346, -0.013323113, -0.09305982, 0.031056052, -0.033931606, -0.01697314, 0.103616625, -0.03408173, -0.021377169, 0.0090980455, 0.075062886, -0.10378587, 0.08130394, 0.02279726, 0.05205502},
{0.0058174655, 0.10774133, -0.0841925, 0.13621873, -0.10653883, -0.06602621, -0.07175391, 0.04337743, 0.010463133, 0.010007434, -0.107464, -0.078571536, -0.031862713, -0.07190786, 0.029623415, 0.06667716, -0.048141114, 0.046144307, -0.107119106, -0.09476934, 0.025122939, -0.04022795, 0.004009823, -0.091869, 0.043009188, 0.0113040535, -0.03867311, -0.033241514, -0.063313976, 0.00484525, 0.08648083, -0.03338996, -0.08348954, 0.08720266, -0.0033651427, 0.083994485, -0.07193495, -0.101705454, 0.054202106, 0.043739896, 0.12084597, 0.02127418, 0.03696683, -0.003800117, -0.032988552, 0.072442256, -0.003320381, 0.052435793, 0.07209948, -0.07897115, -0.068370186, -0.037188604, 0.03966551, -0.0129174525, 0.046771526, -0.052790646, 0.10622012, 0.0914197, -0.09911115, 0.030763999, 0.030422159, -0.08259121, 0.06302507, -0.056566607, -0.04313215, 0.027960414, -0.064659245, -0.006381683, -0.013169968, -0.048475273, -0.0064924, 0.06806785, 0.04685679, 0.035904415, -0.070324026, -0.09211395, 0.10569735, 0.0065768436, -0.05290766, 0.008314915, -0.06674444, 0.03275922, 0.07705508, -0.009968487, -0.018446356, -0.039185792, -0.007411573, -0.013433731, -0.045140978, 0.096476406, -0.043184258, -0.02484315, -0.07247788, -0.07091535, -0.063946515, 0.023428828, -0.040943034, -0.050917696, 0.11545705, 0.01208543, -0.08049782, -0.07239157, -0.014115255, -0.032496676, 0.07705906, 0.08454429, 0.06439798, -0.06715102, 0.11447546, -0.013041448, 0.038776964, 0.08661181, -0.039824065, -0.018763896, 0.055283383, -0.049868647, 0.06139991, 0.09688668, -0.00019296429, 0.0045574084, 0.076634124, -0.08152531, -0.009036357, 0.013094757, 0.04383649, 0.09089183, -0.07844028, -0.07478382},
{-0.09526302, -0.0819272, 0.08877981, -0.04048403, -0.021288581, 0.039016947, 0.054784544, -0.006662853, 0.040773973, 0.0780348, -0.090255186, 0.06032272, 0.036569066, -0.07624839, -0.002233135, 0.0017421081, -0.1055946, 0.060219694, -0.05455372, -0.024025636, -0.045477167, 0.082456894, 0.09605372, 0.09692862, 0.07994367, 0.032775186, 0.09665988, 0.10175342, -0.093499675, -0.05279128, 0.07138857, -0.011939263, 0.055365946, -0.09189126, -0.009164144, 0.065943964, 0.021991687, -0.06725689, -0.0039733644, 0.05657921, 0.10023484, 0.08954978, 0.08919812, -0.06422072, -0.038199082, 0.027377179, -0.05294195, 0.06551074, -0.010334685, -0.10035137, -0.0055120983, -0.059940107, -0.029097492, 0.045421604, -0.03936349, -0.08869451, -0.080359966, -0.07722771, -0.09725384, 0.024109261, 0.013868716, -0.08944055, -0.057668023, -0.021609, -0.086450696, -0.052609675, -0.0758519, -0.0059515014, -0.01245063, 0.03900226, -0.08453886, -0.015311302, -0.028836817, -0.055587385, -0.03765292, 0.03456927, 0.10283483, -0.09545269, 0.0021782552, 0.023529405, -0.052377768, -0.06246895, 0.05363008, 0.04461223, 0.088599436, 0.0161888, 0.0045190556, -0.010225555, 0.14681853, 0.053547714, -0.11384257, 0.073558345, -0.080016196, -0.13145462, 0.12233494, 0.0654967, -0.019426852, -0.007920817, 0.029802376, -0.07923149, -0.016348474, -0.014426253, -0.015113989, 0.05831316, -0.05849125, -0.006570691, 0.03860883, -0.004150418, 0.06571898, 0.018945029, -0.0055921054, -0.0967533, -0.07941278, -0.06813382, -0.0059435964, -0.09499767, -0.04719181, 0.05485277, 0.03196845, 0.021404326, -0.100175954, 0.07136849, -0.12741752, 0.008132574, -0.018525131, -0.050572228, -0.031580996, 0.09141338},
{0.076408274, 0.017136335, -0.019324888, 0.0022935923, -0.032092016, 0.0016640052, -0.08311982, -0.0929687, -0.0025525019, -0.086474836, -0.04812059, 0.03165693, 0.05171262, -0.013219573, 0.064941384, 0.069570646, -0.05922822, -0.05223125, -0.026261322, 0.04267732, 0.042554427, -0.1114708, 0.085788034, -0.09342486, 0.08142566, -0.055861443, -0.100483656, 0.017003464, -0.027484417, -0.059259485, -0.0121418545, -0.10234622, -0.023657601, 0.051937822, 0.0841759, -0.060589477, -0.04544394, -0.09832958, -0.030142449, -0.005328166, 0.059897833, 0.09234534, 0.058811583, -0.06252373, 0.13420713, 0.041307695, 0.03678158, -0.05315519, 0.03913723, -0.08237378, -0.10476436, 0.06662266, -0.032795276, -0.06736134, 0.055915102, 0.05456495, 0.09028404, 0.042656243, 0.09163084, -0.10071674, 0.0010132735, 0.017523043, -0.005879649, -0.043456934, 0.0026340112, -0.07452533, -0.035447232, -0.06978524, 0.044602167, -0.098599285, -0.08956494, -0.023513824, 0.018474147, -0.07687288, -0.07877348, 0.089387625, 0.07751481, -0.093826115, -0.044975895, 0.10662469, 0.11841317, 0.02958256, -0.010689386, -0.09882623, -0.032705028, -0.0851649, 0.12186166, 0.09457129, 0.11350605, -0.0484951, 0.021349637, -0.054788362, 0.016766965, -0.004658462, 0.06557603, -0.05211536, -0.05625153, -0.0507071, 0.021978164, 0.044227734, 0.09629415, 0.123220064, -0.0038962555, 0.076112166, 0.052122395, 0.054869078, 0.064806044, -0.072978124, -0.029947815, -0.054301247, -0.11987276, -0.044332344, 0.105519734, -0.01753586, 0.057187557, 0.048784498, -0.008534862, -0.045032565, 0.011463834, 0.07841034, 0.0052995095, 0.074417725, -0.035311893, 0.04778369, 0.085496694, -0.012840592, 0.015855564, 0.0065794936},
{0.074517675, 0.0038578652, 0.029519346, 0.046755116, -0.05022414, 0.038379848, 0.10082377, 0.013416871, -0.047870945, 0.08866499, -0.0073574325, 0.0067117075, 0.07420123, -0.012233545, -0.05531275, -0.035600387, -0.0325739, 0.060249206, 0.02280065, 0.08798318, -0.03192215, -0.016197423, -0.007828276, 0.058399376, -0.02180093, 0.00132584, -0.009370426, -0.0014520499, 0.024679974, -0.056923542, -0.070809275, 0.060018223, 0.09792771, 0.0066450434, -0.0016608961, -0.03412872, 0.06077357, 0.04775526, 0.06705846, -0.0339219, -0.07810791, 0.073759735, 0.059252307, -0.10427874, 0.028190427, -0.019168021, -0.009413727, 0.051697556, -0.041306548, 0.014058864, 0.08345098, -0.048056375, 0.00088302186, 0.06011932, 0.09160277, 0.0017753491, -0.083687454, -0.04207115, -0.016848108, -0.09439407, 0.053709745, -0.038591333, 0.104911536, -0.007909328, -0.082263514, 0.095586546, 0.0939973, -0.047042526, -0.04259232, 0.06130735, 0.0358776, 0.077400886, 0.023419023, 0.10201375, -0.049673676, -0.037533678, -0.017440146, 0.018453106, -0.012877811, -0.07011627, 0.1191098, 0.076946735, 0.042272747, 0.036458623, 0.10501328, -0.10425143, 0.12279782, 0.05391223, -0.08607466, 0.04462214, -0.08605073, -0.06450245, -0.08114746, -0.061389856, -0.068737045, 0.017554134, 0.09639101, 0.03739726, -0.01402322, 0.10057101, 0.06721339, -0.06619108, -0.10132288, -0.035316065, -0.037567325, 0.01586597, 0.030595396, -0.11189209, 0.051018555, 0.095836125, -0.028439559, -0.041175023, -0.031297546, -0.09062124, -0.00047598034, 0.02040231, -0.021579305, 0.10049416, -0.09537553, 0.02238138, -0.038713504, 0.06864465, 0.052845757, -0.09008221, -0.039125547, 0.03782979, -0.04153223, 0.08787109},
{0.09921588, -0.032685116, 0.006820599, 0.08907309, -0.083784014, -0.07927882, -0.094550826, 0.00054002553, -0.08608768, 0.08413841, -0.04694068, 0.076779, 0.13782354, 0.048014898, 0.08182695, 0.0931287, -0.09868336, -0.07560283, 0.09092595, -0.0029323145, 0.033339243, 0.11276888, 0.0011009718, 0.0056768456, 0.062774085, 0.06379848, -0.07185438, -0.002997891, -0.050932817, -0.06554118, 0.11459416, -0.10425544, -0.009388755, 0.132766, 0.1080582, 0.006813854, -0.03477973, 0.12907492, 0.04770074, -0.060244437, 0.022688495, -0.07294609, 0.018683292, 0.017776052, 0.06563192, 0.04653506, -0.04442041, 0.04966823, -0.04756939, -0.073129036, 0.05456272, 0.09471515, 0.08675019, 0.098652564, 0.005978085, -0.09563265, 0.07478661, -0.07600579, -0.010332563, -0.10806544, -0.0071668765, 0.086664736, -0.07310069, 0.052764148, 0.02654624, 0.0017982355, 0.0660144, 0.073949486, -0.05277456, -0.029012447, -0.11150158, -0.028001782, 0.020643368, -0.0030834118, 0.087092765, -0.012301168, -0.06603086, 0.018885165, 0.09968728, -0.05446449, -0.009188078, 0.036183417, 0.090389065, 0.0798852, -0.10433311, -0.049290795, 0.07870038, 0.10600763, -0.061031748, 0.0841372, 0.13082527, 0.098259374, -0.01634878, 0.10015947, -0.009688966, 0.0031433403, 0.08967279, -0.012848068, 0.022146937, -0.082467526, -0.074352354, 0.054224066, -0.0017661444, -0.068405606, 0.05950221, -0.033988725, -0.0058135604, -0.11184362, 0.026026817, 0.011510491, 0.078918025, -0.087775454, -0.057886764, -0.030777952, 0.100631654, 0.11536439, -0.018082239, -0.07609148, -0.025633553, -0.055923924, 0.10033799, -0.057268463, -0.034479458, 0.03300412, 0.018723294, -0.029007928, 0.10128083, -0.057116337},
{0.08497671, 0.024151843, 0.02051747, -0.020158876, -0.09700719, -0.08483948, -0.022428425, 0.031484604, 0.04183191, 0.0051496923, -0.005724444, 0.02321663, 0.07871608, -0.092100106, 0.007968105, -0.021842735, -0.03248924, -0.075269505, 0.003246776, 0.0914433, -0.0502545, 0.08680543, 0.010860662, 0.0617229, 0.043731567, -0.013240278, -0.10747719, 0.031230083, -0.07036002, -0.07792743, 0.089577176, 0.07426919, 0.03569235, -0.053608824, -0.005268266, -0.080538414, -0.018884296, 0.058081854, -0.032145265, 0.052293688, -0.10976202, 0.005878404, -0.12926708, -0.0053965813, 0.0944834, 0.077519454, 0.036760256, -0.1072029, 0.035773233, 0.04693252, 0.123398155, -0.101200126, 0.055128727, -0.087426715, -0.011688314, -0.10750662, -0.020068152, 0.07491879, -0.025108848, -0.052193794, -0.054050192, -0.100232586, -0.010063065, -0.014691152, -0.03472729, -0.051868126, 0.03880832, -0.049094398, -0.007230214, 0.031640366, -0.07411061, -0.05255237, -0.0993834, 0.04710747, 0.0014318546, -0.052089866, 0.042466544, -0.047615517, -0.0053288834, 0.07716171, 0.101631634, 0.03145373, -0.013437736, -0.06321539, 0.07843202, 0.019954104, -0.067909725, 0.078416735, -0.059771143, 0.029763322, 0.12938276, -0.051635604, -0.031534337, -0.026726836, -0.053029645, -0.098588504, -0.028683104, 0.057678506, 0.016152402, -0.098294646, -0.022868007, 0.09399862, 0.0066300444, 0.09554781, 0.053874392, -0.057052188, 0.10401137, -0.0061557004, 0.005567494, 0.0031568513, -0.037804585, -0.032715246, -0.058968086, -0.06940701, -0.023424357, -0.026176794, -0.030413793, 0.06078385, 0.015793601, 0.05687283, 0.12695308, 0.030240098, 0.086969696, -0.08143948, 0.04970309, 0.042430475, 0.08170874, 0.008656778},
{0.0654158, -0.042485364, 0.16896458, 0.06430924, 0.020396678, 0.034126952, 0.05999019, -0.039373115, -0.059322894, 0.051909193, 0.16161929, -0.08218855, -0.049687076, 0.007088364, -0.097789355, 0.07759933, -0.040620748, -0.06068133, 0.026378606, 0.21755819, 0.023057615, 0.14672339, -0.0101757115, 0.069388196, 0.049103737, -0.059592642, -0.01786847, 0.048315343, 0.016855404, -0.008335267, 0.07353874, -0.019289907, -0.081875265, -0.084773846, 0.063922405, -0.055893246, 0.023698004, -0.008906914, 0.04969727, 0.006554273, -0.015492113, 0.010261968, 0.11754598, -0.069868326, -0.047519233, -0.03347486, 0.006693177, 0.02358717, -0.06174321, -0.04236589, 0.11563208, 0.030959874, -0.10909535, 0.07895956, 0.023815885, 0.122874536, -0.03276146, 0.07952745, -0.046712775, -0.108569175, 0.016950423, -0.016836083, -0.20569843, -0.017342702, 0.06804928, 0.013120426, 0.093989454, 0.09215316, -0.07789322, 0.08646284, 0.051910277, -0.09795264, -0.07829765, -0.0535428, 0.114030495, -0.15634482, -0.030475091, 0.018571645, -0.031478032, -0.060420662, 0.15295328, 0.007587649, 0.00042138016, 0.021019341, 0.027644714, 0.088475965, 0.109789416, -0.07589082, 0.07766122, 0.008500498, 0.05591574, 0.13308664, -0.09178482, 0.030056251, -0.0536501, 0.008318849, -0.095759556, 0.032398384, -0.16018862, -0.011772059, 0.0761092, -0.06642073, 0.0048363823, -0.01904013, 0.05896092, 0.027725583, 0.033329383, -0.017869346, -0.028498098, -0.108746074, 0.051978886, 0.104867294, 0.08682697, 0.05485873, 0.020079926, 0.104056306, 0.0921318, -0.010890089, -0.036994264, -0.018786147, -0.09076441, 0.05537661, -0.018795824, -0.15974267, 0.042032212, -0.10337705, -0.0024847405, -0.14144123},
{0.021356598, -0.10297131, 0.08537297, 0.053384732, -0.114422046, 0.008769318, 0.03318852, -0.052838635, -0.082363755, -0.07039468, 0.08996081, -0.010882367, 0.12023085, 0.07418776, 0.081702985, 0.16513112, -0.046567734, 0.0068246755, 0.06956465, 0.21090584, -0.022900686, 0.16465485, 0.0049676867, 0.025385398, 0.14275834, -0.20102462, -0.007324444, 0.076853625, -0.12331538, 0.022926107, -0.052968066, 0.021203497, -0.1059796, 0.11552784, 0.113080226, 0.015315087, 0.0400411, -0.07225978, 0.16346087, -0.08739192, 0.042593718, -0.06122547, 0.027993899, 0.0983442, 0.03641683, 0.068271145, -0.04068669, 0.10739523, 0.01256451, -0.003991954, 0.04079779, -0.09474075, 0.12920013, 0.01767164, -0.054424614, 0.147699, -0.036764603, 0.00397636, -0.052200183, -0.00047072885, -0.024562087, 0.10118023, -0.12837386, -0.011902057, 0.011688158, -0.071932614, -0.09484561, -0.0045945644, -0.15869793, 0.10261969, -0.062956624, -0.10904418, -0.008826703, 0.005110137, 0.13647188, -0.10516427, -0.13643482, -0.10494698, -0.107439265, -0.09504994, 0.16469796, -0.07917642, -0.13927747, -0.06568112, 0.086127244, 0.05858997, 0.009676627, -0.13881466, -0.060198274, -0.054427125, -0.1206053, -0.0006587607, 0.04206401, 0.0825737, -0.15274122, -0.071835354, -0.08489501, 0.05707078, -0.0047482275, -0.06963643, -0.094719954, -0.10674338, -0.110290095, -0.049568523, 0.012114906, 0.017681312, -0.041515075, 0.01325768, 0.09863323, -0.041775785, 0.117424734, 0.07080138, -0.027967222, 0.07485104, -0.073929414, -0.0008583859, 0.07573549, -0.036594287, 0.03158451, -0.04842612, 0.07274215, -0.0007197804, -0.06834118, -0.10827127, 0.05420807, -0.073963165, 0.10635216, 0.0035111392},
{-0.011643707, -0.029515104, -0.017173968, -0.0024320413, -0.10707177, -0.06991631, -0.006547345, -0.09604512, 0.07960203, -0.09075702, 0.19296725, 0.06703208, 0.1604891, -0.041969173, 0.04365564, 0.07565596, -0.0027429457, 0.014116393, -0.021632396, 0.15867397, -0.1156581, -0.013081475, 0.07600356, -0.08537418, 0.004823612, -0.16042289, 0.037332665, 0.025075179, 0.057645295, 0.009976033, 0.13909693, 0.0532654, 0.07203699, -0.0035272443, 0.0026351733, -0.033010278, -0.03484739, 0.108032994, 0.18886663, -0.14474149, 0.020953951, -0.07872214, -0.09461523, -0.035543878, 0.13312714, -0.08950242, -0.06002037, 0.01523627, 0.04148248, 0.12541386, 0.02643754, -0.09572339, 0.13886054, -0.04664746, 0.004828796, 0.046598315, -0.18338999, 0.03172402, 0.03647219, -0.082974754, -0.021873014, 0.098863095, -0.012237824, -0.029504478, 0.06741156, 0.04245871, -0.058441896, -0.015535407, -0.00798274, 0.04522628, 0.02435851, -0.03691891, 0.028740063, -0.028765425, -0.011829138, 0.019916957, -0.03845382, -0.05714275, 0.014407667, -0.04358593, 0.08301774, 0.005676247, 0.0455797, -0.072915226, 0.12377949, -0.022501102, -0.058537204, 0.09563184, -0.00044137693, -0.024094207, 0.096907675, -0.010765032, -0.09230246, -0.04577304, -0.15608133, 0.050399303, -0.047824915, 0.05785341, 0.019252561, 0.012640424, 0.03056255, -0.14239429, -0.07716271, 0.0105667785, 0.12478011, 0.017992193, -0.007927212, 0.017303163, 0.1286911, -0.104128055, 0.03470244, 0.085545644, -0.07649999, 0.099001355, -0.07223951, -0.017019736, -0.06408415, 0.08740111, 0.10687974, -0.04858225, -0.018962737, -0.13504866, -0.051893663, -0.12758605, -0.07896371, -0.1839906, 0.20458026, -0.12812063},
{0.06314049, -0.1764199, -0.017896341, -0.10037412, 0.018502168, 0.09104188, 0.0103912605, -0.002343461, 0.04004775, -0.084567755, 0.1475167, 0.099183105, 0.14115901, -0.024690112, 0.111019626, -0.1200718, 0.053843968, 0.062167566, -0.023839103, -0.0183759, 0.0960131, 0.1746434, 0.13316149, -0.1363669, -0.12600826, -0.10781555, -0.08237783, 0.1432619, -0.00795972, -0.08772298, -0.04006556, 0.016270313, -0.017807174, 0.13974698, -0.15586792, 0.05955713, -0.05909049, 0.12595314, 0.036333792, -0.16504157, -0.086255714, 0.06828791, -0.091212094, 0.089519784, 0.05744312, -0.059873987, -0.05105698, -0.036917903, -0.016824782, 0.10029067, -0.003737236, -0.021990001, -0.0034335048, 0.009027599, -0.093339995, -0.049822524, -0.08418806, 0.033141255, -0.0064327116, 0.06606646, 0.06385394, 0.078153044, 0.068767495, 0.077422574, -0.10158484, 0.03119306, -0.08026159, -0.048753295, -0.15183593, 0.007904787, 0.022054082, -0.1097916, -0.09863984, -0.011675753, -0.08636059, -0.020332223, -0.1721371, 0.015504174, -0.032747447, -0.15257588, 0.12677608, -0.0029744506, 0.16779278, 0.08723532, -0.015266734, -0.052658588, -0.05432353, 0.021600435, -0.055845134, 0.050482582, 0.14482795, -0.007159538, 0.0014322922, 0.015303412, -0.19872594, -0.019295856, -0.06739854, 0.09662853, -0.011429842, -0.031294644, 0.04313585, -0.14489587, 0.025907964, 0.04768978, 0.10774761, 0.11414723, 0.10403811, -0.07278966, 0.15260138, -0.11012837, -0.08432759, -0.035933383, -0.03926133, 0.01264546, -0.01557076, 0.06989019, -0.08033201, 0.016898975, 0.04285282, 0.103184715, 0.02559017, 0.02546117, -0.079535335, -0.14187495, -0.01950983, -0.0058780713, 0.07521586, -0.10538928},
{0.09362829, -0.11160892, 0.042097844, 0.11371134, -0.09680007, 0.10145964, -0.04231196, 0.08198325, -0.08436525, -0.089632586, -0.009668691, 0.06166555, 0.071714945, -0.065893784, 0.102637075, -0.036235906, 0.052333515, 0.068748936, 0.027756555, -0.0073064533, -0.036469296, 0.1073303, 0.06856537, -0.07658061, -0.04232063, 0.035503987, -0.051809546, 0.050177373, -0.0029303683, -0.027861333, 0.083990835, -0.01715829, 0.092409395, -0.006839359, -0.1305062, 0.031167788, 0.019721406, 0.0026834037, 0.08789447, 0.10120889, 0.07686462, -0.019684106, -0.08465722, 0.03605445, 0.010431466, 0.06799048, 0.100202486, 0.057862923, 0.09157479, 0.16230498, -0.042612884, 0.051124275, -0.03138291, -0.08125031, -0.006171599, 0.11877011, -0.006292026, -0.012479499, 0.015245309, 0.006185958, -0.09059722, -0.028431091, 0.011525075, -0.07058628, 0.075594336, -0.03652792, -0.0010515327, -0.006410353, -0.11767204, 0.16668391, -0.041474644, -0.016492048, 0.046621084, 0.19595829, 0.009977281, -0.12543629, -0.11883649, -0.048614655, 0.087019585, -0.11061594, -0.030980127, 0.042285353, -0.0043157325, -0.0959717, 0.059070643, -0.09111143, -0.03894189, 0.1437986, -0.109272376, -0.0350736, 0.024960777, 0.1303726, -0.025773965, -0.06842159, -0.18031216, -0.043648742, -0.03882905, 0.17427252, 0.06615257, -0.10594171, -0.08250209, -0.028412027, 0.03709582, 0.013726838, -0.07851493, 0.115144186, 0.16078494, -0.052919403, 0.024800126, 0.019810475, 0.03548854, -0.07092451, -0.028242227, 0.0993678, 0.0779807, 0.12158909, 0.054203242, -0.015539877, -0.088897094, 0.07525247, 0.009030866, -0.030652763, 0.032679662, 0.021721544, -0.04804916, -0.18122298, 0.018168703, -0.16441943},
{0.011883726, -0.14183813, 0.14134265, 0.138921, 0.06358498, -0.06581615, -0.01940721, 0.038372427, 0.01925601, 0.05461088, -0.047790367, -0.0077602235, 0.029764868, -0.07583951, 0.12728488, 0.022417301, -0.05371221, -0.033615883, -0.03393526, -0.0861717, -0.033962388, 0.16606079, -0.06133599, 0.102882236, 0.015008019, -0.01661928, 0.069375806, 0.009789818, 0.09784412, -0.09776652, -0.0031179907, 0.00034862646, 0.014323287, -0.04130342, -0.04158422, 0.06658672, 0.049623225, 0.017184744, 0.04681745, 0.018920869, 0.11992656, -0.0032077953, -0.074406624, -0.045657843, -0.14524733, -0.0072150636, -0.08934072, -0.06496344, 0.07485077, -0.021927986, -0.03491946, 0.026198, -0.12243262, -0.07432877, 0.02226162, 0.07940279, 0.03424403, 0.058662444, 0.05288055, -0.09116703, 0.095082484, -0.10233217, 0.051204517, 0.0046985373, -0.017645806, -0.091913305, -0.09107613, -0.029974565, 0.08150963, 0.16600662, -0.02663171, -0.08095585, 0.013920762, 0.06956116, -0.13959822, -0.01293062, -0.06813571, 0.07967232, 0.07927223, 0.04805953, -0.10040794, -0.009219348, 0.0028590432, -0.11451774, 0.13946922, -0.08950214, -0.15064631, -0.056533523, -0.06555451, 0.07455595, 0.100962006, 0.03382121, 0.05772108, 0.040792108, -0.14675328, -0.00020100921, 0.083750576, 0.08303443, 0.07414206, 0.054358453, 0.04350035, -0.17528884, 0.083133765, -0.08799181, -0.050309643, 0.053355765, 0.105389394, 0.018306034, -0.025663234, -0.026836531, -0.013976171, -0.015539013, 0.050360642, -0.06178602, -0.060406506, -0.10420602, 0.009022443, -0.08873417, 0.07120188, 0.068320975, 0.10127081, 0.009335823, -0.0006892301, 0.013643164, 0.10070275, -0.034390133, 0.07145438, -0.014907253},
{0.15696302, -0.004544936, 0.045104954, 0.07617062, -0.018161153, 0.08608052, -0.08424168, 0.09864546, -0.058863837, -0.10319715, 0.023345446, -0.079139054, -0.06549265, 0.02113067, -0.036811646, -0.15792261, 0.024456967, -0.07790519, -0.02781908, -0.031426325, -0.07228145, 0.04418462, 0.068430215, 0.11441185, -0.042649504, 0.04302711, 0.031359255, 0.12296012, 0.13778986, -0.046409972, 0.013250602, 0.04589169, 0.09825378, -0.01733311, -0.11456547, -0.02513867, -0.044203795, -0.028641861, 0.06129919, 0.17621133, -0.022092171, -0.07692519, 0.12770267, 0.083400846, -0.069931045, 0.028297495, -0.034033246, 0.0096420515, -0.035043865, -0.124679275, -0.033344902, -0.055639423, -0.05950506, 0.086557366, 0.037858486, 0.16195606, 0.11784772, -0.07992447, 0.012810026, -0.011584637, -0.038784795, -0.031807102, 0.12720235, 0.092486575, -0.06849949, 0.039451886, -0.09917985, -0.038937315, 0.17315282, 0.046386745, 0.012139777, -0.0884654, 0.0424546, -0.1039047, -0.0048204106, 0.004154903, 0.102543145, -0.075442754, -0.046170518, 0.11759911, -0.105017915, -0.04100848, 0.09180593, -0.024037553, 0.11775465, -0.0237715, -0.07809993, -0.070698485, -0.071079254, 0.011102999, 0.08160766, 0.029200664, 0.011593282, 0.04402087, 0.033101793, -0.021976128, -0.040688448, -0.06713675, 0.055509616, 0.095411435, -0.010778286, -0.04802857, 0.017312724, 0.09327522, -0.14433348, -0.051860206, 0.10539849, 0.071264304, 0.06952139, -0.03650576, 0.093052186, 0.10370909, 0.06336327, -0.065317914, 0.0075734407, 0.011652692, -0.048866596, 0.058241278, -0.014144733, 0.013405539, 0.13862261, 0.051692225, 0.07121871, -0.005484923, 0.08946344, 0.16933896, -0.12720078, -0.07390124},
{-0.07360161, 0.11821814, 0.013542126, 0.08118547, -0.018019117, 0.018099017, 0.050761208, 0.05475758, -0.10463539, 0.06846656, -0.17602216, -0.03928491, -0.09429167, -0.0016695964, 0.049688496, -0.09630868, -0.03258201, -0.063711405, -0.024856834, -0.08595498, 0.05525098, 0.06462136, 0.112652786, 0.09506362, 0.026129117, 0.08128614, -0.094146535, 0.13356239, 0.047232047, -0.11005535, 0.054785985, -0.0113078635, -0.04330082, 0.050048515, 0.012174631, -0.105271585, 0.0027345493, -0.023836974, 0.084385924, 0.04914484, 0.03814921, -0.030547, -0.037890416, -0.04144457, 0.002968676, -0.10153763, 0.106395155, 0.046416003, -0.06153643, -0.023380097, -0.047542337, 0.036266, 0.0024626032, -0.044570435, 0.022007927, 0.062363412, 0.16476788, -0.014642738, -0.05065501, -0.10871981, -0.06553761, -0.11172401, 0.023986213, -0.036722355, -0.051024042, -0.042447142, -0.0422382, -0.0062976032, 0.13843174, 0.052136797, 0.04167088, 0.019766906, -0.068433866, 0.067973815, -0.12232745, -0.09923509, 0.020428121, 0.08634633, -0.032300398, 0.030278038, -0.12402831, -0.0033184737, 0.0006346286, 0.078482404, 0.095890194, -0.032443576, -0.10122687, 0.10045919, 0.026660237, 0.0051945536, 0.116211295, -0.14510578, -0.039635047, 0.01727643, 0.112521015, 0.012382127, 0.059534326, -0.05716318, 0.18080527, -0.10178285, -0.103116654, 0.014659862, -0.00239871, -0.023798749, 0.0074186297, 0.018064294, 0.10484528, -0.08249295, 0.11239437, -0.09244638, -0.05727664, -0.049785316, -0.060317367, -0.082281575, -0.061434694, -0.15068126, -0.07021325, -0.105757505, -0.07359296, 0.00036595762, -0.038200952, -0.066753685, -0.0633469, 0.14799492, 0.06447309, 0.026382862, -0.018502751, -0.005849101},
{0.047558434, -0.030349271, -0.035480324, 0.0035232734, 0.08172015, 0.023897111, 0.04204925, -0.091808766, 0.068131804, 0.0029317066, 0.034580518, 0.08397639, -0.014476646, 0.07617748, 0.011376022, 0.07999009, 0.027522875, -0.026595391, -0.030976534, -0.10838314, 0.052303877, 0.025430558, 0.052876055, 0.07875115, -0.04085911, 0.14222439, 0.0843563, 0.14189947, 0.119328134, 0.0816465, -0.014327101, -0.06541305, 0.060986422, 0.01202083, 0.022524001, -0.086248636, -0.08950933, 0.06723667, 0.014275276, 0.07637387, -0.05136997, -0.095060274, -0.07685451, -0.057363845, 0.029176552, 0.07662054, -0.10234105, 0.052000944, -0.006993003, -0.02456387, -0.15995823, -0.008050971, 0.049472008, -0.04692977, -0.07604632, 0.07233807, 0.0015444481, -0.028320752, -0.05696694, 0.026526947, -0.0442251, 0.08684334, 0.051229756, 0.09130904, -0.08702038, -0.015694348, -0.093751416, 0.07614316, 0.025734084, -0.07998684, -0.080720566, -0.017841538, -0.04606306, -0.038475413, -0.12941195, 0.0737297, 0.00061207113, -0.02001115, -0.05060112, 0.10898418, -0.012553543, 0.020430058, -0.06976062, -0.020455215, 0.014901188, -0.011263792, 0.0017923441, 0.006515859, 0.067522034, 0.0436047, -0.097292006, -0.12275196, 0.030119613, 0.03466574, 0.0064517586, -0.056369126, 0.0698778, 0.08126459, -0.0040565766, -0.09031969, -0.09682622, 0.021731984, 0.036274444, -0.049228184, 0.049704444, -0.0037912135, 0.07325432, 0.033557594, 0.0054349806, 0.08856993, -0.03813397, -0.019767523, 0.00080893596, 0.045576196, -0.04170148, -0.036560215, 0.07102701, -0.08625225, 0.035625283, 0.0073714852, -0.04845607, 0.10924013, -0.06568518, -0.0021123635, 0.06499794, 0.025876576, -0.00549868, -0.038367394},
{0.0074607534, 0.06408574, -0.037395198, -0.0058031515, 0.0013919575, -0.08646403, -0.10666985, 0.1029731, 0.017373942, -0.10039796, -0.046664447, 0.0930945, 0.005933451, -0.050047264, 0.0059805834, -0.060012363, 0.03045144, -0.023942776, -0.03326565, -0.029310346, -0.009994276, 0.018331543, 0.10237421, -0.0016764756, 0.075088225, 0.1362967, -0.037929885, -0.014071254, 0.06244584, 0.063991375, 0.16073488, -0.04800363, -0.031782586, -0.08165775, 0.029620882, -0.015445546, 0.09387739, -0.08690986, 0.0844406, 0.0073790154, 0.115096815, -0.09320532, 0.02224647, -0.062676005, 0.07739084, -0.004847295, 0.09395416, -8.800512e-05, -0.06581035, -0.09053924, -0.11480621, 0.014044508, 0.02166294, 0.050510406, -0.10086662, -0.062087957, 0.09057646, 0.10159369, 0.036867835, -0.06326389, -0.091309264, 0.07847127, 0.115650035, 0.06898092, -0.07164773, -0.03511048, 0.06993583, -0.035411373, 0.14651757, -0.03167928, -0.09813902, -0.09140527, 0.03912671, 0.08121687, -0.09719245, 0.025342673, 0.03411024, 0.006998539, -0.07609459, 0.071503356, 0.033294477, -0.041774936, 0.0392337, -0.054070964, 0.09482746, 0.09811841, 0.1096094, -0.024494903, 0.045902114, 0.002049418, -0.050215997, 0.023553992, 0.04352586, -0.038916703, 0.15073687, 0.07978852, 0.011842608, 0.09442295, 0.1668976, -0.06866599, 0.0011564568, 0.023653049, 0.04955437, 0.09412818, 0.14308253, 0.05687167, 0.08170193, -0.057773527, -0.012725508, -0.09697282, 0.024120696, 0.065614596, 0.06914586, -0.06926625, -0.06661758, 0.00829224, -0.08364306, -0.08652384, -0.018004509, -0.10225906, 0.043500513, -0.008449273, -0.11234364, 0.07186969, -0.066944525, 0.022522552, -0.096236974, -0.051343933},
{0.006993332, 0.10444129, -0.026268926, 0.05904048, 0.05656169, 0.04127954, -0.07922724, -0.017796315, 0.093080044, 0.06340623, -0.13123523, 0.14149286, -0.04513661, -0.03447088, 0.071647316, 0.06973875, 0.018372804, 0.06293395, 0.039719556, 0.072833456, -0.054253418, -0.12592016, -0.0029899252, -0.08242223, 0.04438022, 0.14693195, -0.0997897, 0.14268486, 0.07845527, -0.091815986, 0.031077355, -0.055577446, 0.05630316, -0.051966455, 0.0009280223, -0.014386321, -0.10484008, -0.11030404, -0.08865172, -0.056080498, 0.002055248, 0.00094367564, -0.069125704, 0.098190434, 0.011121287, -0.009317361, -0.011723943, 0.011253248, 0.01017797, -0.039204724, 0.012253965, 0.0760393, 0.10638333, 0.018659644, 0.096456856, -0.02893582, 0.10217055, -0.083911076, -0.08433662, 0.0034459706, 0.01858866, -0.029119436, -0.024255116, 0.03543946, 0.014932528, 0.05491638, 0.015418604, 0.043902338, -0.051515702, 0.06664133, 0.012213585, 0.015492161, 0.04589893, 0.09116046, 0.044813823, -0.048426848, 0.08039535, 0.027730852, -0.123279095, 0.052040827, -0.002828288, -0.07266499, 0.07365477, -0.05558377, 0.13078494, -0.024195135, -0.056524366, 0.043858975, 0.044480108, -0.07008258, -0.023559485, 0.053744882, 0.08554135, -0.123089164, 0.135558, -0.00802619, -0.03085877, 0.13884903, -0.043518204, -0.10311874, 0.006719172, 0.08679513, 0.074869104, -0.07352602, 0.032169797, 0.057806473, 0.024555428, 0.016117403, -0.010207067, -0.048099477, -0.06712348, -0.06640136, -0.04491933, 0.07865872, 0.03772205, 0.012794689, 0.029013654, -0.040277503, 0.085688174, -0.06665445, 0.025610648, -0.024603039, -0.14217994, -0.07596328, -0.07077743, 0.034438293, -0.06715128, -0.07472592},
{-0.07246325, -0.057288785, -0.08879464, 0.10824972, 0.050191626, 0.025763795, 0.041873567, -0.052396633, -0.08812875, -0.044772513, -0.060939677, 0.09965656, -0.14402837, 0.07404734, -0.052446444, 0.015795588, 0.06420155, -0.08479587, 0.006180548, 0.015942365, -0.09412981, -0.11279215, 0.15763415, -0.051925063, 0.089011446, 0.097000234, -0.0076571936, 0.14033167, -0.08126404, -0.06176809, 0.11180701, -0.034102984, -0.037682433, -0.0880239, 0.05430137, -0.10297363, -0.096106604, -0.010958815, 0.06996649, 0.029277619, 0.10471206, 0.076571375, 0.082721695, -0.10529306, 0.009912328, 0.017704893, -0.08369306, 0.049041364, 0.057762787, -0.001674973, 0.008098386, -0.054481164, 0.0122875795, 0.0917306, -0.039862998, -0.017035369, 0.008059219, -0.042264156, -0.085343465, -0.091153525, -0.10523552, 0.03387027, -0.0152319055, -0.024572574, -0.05844466, -0.05023968, -0.079441495, 0.0808544, 0.0582547, -0.060996298, 0.017991124, 0.0005786809, 0.047355056, 0.08404318, 0.04968782, 0.07228469, 0.014343185, -0.09139307, -0.105345234, 0.09697059, 0.01849285, -0.06819908, 0.02178561, -0.031237688, 0.0861135, 0.048692014, -0.03356511, -0.042753883, 0.053295095, 0.07373295, -0.005066568, 0.008818984, -0.03471949, -0.059726816, 0.14247374, 0.042670175, 0.103783324, 0.022323431, -0.03584599, 0.013047151, 0.10647905, -0.064664386, -0.02454694, -0.03313615, 0.012233843, 0.022740277, 0.07420082, -0.111610055, 0.05679748, 0.046431866, -0.01939623, 0.07438542, 0.10128218, -0.05205849, 0.021301672, -0.06524563, -0.11225236, 0.08895254, -0.09730307, 0.098638564, -0.06763767, -0.0069353017, -0.1294462, -0.07294276, 0.08951178, -0.011521559, -0.04156845, -0.10918715},
{0.050781287, 0.076557964, -0.05584428, 0.03312408, -0.08810006, 0.03305635, -0.069229126, -0.057523143, 0.046212688, 0.031081542, -0.080318354, 0.047416482, -0.023243831, 0.11230487, -0.066619836, -0.061740447, -0.070849575, 0.010972642, -0.04585207, -0.06924747, 0.021528509, -0.091174625, 0.0058206734, 0.10832813, 0.10443439, -0.044442657, 0.08055192, 0.092578925, 0.020647263, 0.072884604, -0.047464505, 0.070519, 0.06495691, -0.067157865, 0.03005845, -0.032552574, -0.06837719, 0.0050194305, -0.097463645, 0.011576647, 0.11815183, 0.010022223, -0.084410734, -0.044924516, 0.14201543, 0.03176357, 0.02602385, -0.010402308, 0.007635556, -0.022288734, 0.058481395, -0.10029421, 0.08884111, 0.03600434, -0.033820264, -0.043236315, 0.087423116, -0.09482925, -0.05431969, 0.040590644, 0.052340362, -0.023102589, -0.06323155, 0.030388504, -0.02463784, 0.06894779, -0.068361625, -0.019208305, 0.014340287, 0.07513852, 0.037820287, -0.039770126, -0.09821713, -0.06784847, -0.09632219, -0.08519632, 0.11070541, 0.007351361, -0.004374326, -0.07658942, 0.1192851, 0.07631011, -0.056535564, -0.0123641975, 0.14195053, -0.0653723, 0.12527883, -0.11295288, 0.11289911, -0.015645877, -0.045550454, -0.03254831, 0.103085905, -0.13017666, 0.0112657035, 0.0993039, 0.066101596, 0.063487776, 0.09094176, 0.05211398, 0.0733092, 0.07411965, -0.09089731, 0.041606918, 0.04311052, -0.049228895, 0.12369648, -0.013755338, -0.03770992, -0.095369704, -0.075654715, -0.082535766, -0.010214054, 0.020848189, -0.023119695, 0.0677092, 0.06008843, -0.055991963, -0.090313174, -0.079267405, -0.08432163, 0.040677145, -0.03444871, -0.004074515, 0.060253575, 0.11916969, -0.059003357, -0.039643172},
{0.029487856, 0.036024533, 0.020978013, -0.0115009425, -0.029136589, 0.039135844, 0.02015375, -0.007035695, 0.05692336, -0.0664005, 0.06009984, -0.016084852, -0.11694474, 0.08226425, -0.026820388, -0.08512079, 0.009524598, 0.064046636, 0.023383755, 0.035516795, -0.0800651, -0.10715926, -0.012939695, -0.08417652, 0.0760855, -0.037027758, -0.0256884, -0.04279522, -0.013856473, 0.087120704, -0.030401716, -0.05602638, -0.09284506, -0.09736646, -0.04693696, -0.0155102955, -0.043246936, -0.033119366, 0.063968055, 0.059801735, 0.071670815, 0.027004793, 0.067302994, -0.021461394, 0.07425958, 0.08014183, -0.03241293, 0.113531314, -0.019784778, -0.0373692, -0.07436781, 0.07169217, 0.09782265, 0.10112495, -0.09990487, 0.014690607, -0.069012694, 0.08207215, -0.069385394, -0.06383302, -0.086447924, 0.03624188, 0.084285885, 0.03423029, -0.016976006, 0.070779435, -0.008762429, -0.08537348, -0.0014957815, 0.019316608, 0.029762464, -0.026333477, -0.025048964, 0.07607681, -0.013277579, 0.006917315, -0.004724005, -0.02127245, -0.045539916, 0.10390316, -0.07434262, 0.001541324, 0.051353317, -0.015192304, 0.022002142, 0.07566471, 0.08021884, 0.06134278, -0.071740046, -0.08568164, -0.080615774, -0.09602566, -0.101431556, -0.020290442, -0.070425265, -0.021102339, -0.0672341, 0.11077397, -0.030393155, -0.08505243, 0.020777509, 0.012810528, 0.04437927, -0.052164514, 0.0711591, 0.05159811, -0.08422695, -0.098018125, -0.063063584, 0.06600113, -0.0072055086, 0.04837799, -0.00934233, 0.0111441305, -0.0053861067, -0.0056230016, 0.079440296, 0.029629141, 0.06453073, 0.07388976, -0.041814122, -0.039150275, -0.04583458, 0.06022782, 0.077310964, -0.09695317, -0.010828938, 0.09606793},
{0.07830108, -0.0461355, 0.023099277, -0.03363333, -0.079026885, -0.10166406, 0.027216658, -0.057893906, 0.017813496, -0.011460438, -0.010303368, 0.015242468, 0.040355995, 0.0064016455, 0.06439834, -0.011716764, 0.08087851, -0.024853429, -0.09156094, 0.042640027, 0.065167956, 0.0051535, 0.009297872, 0.051487997, -0.002500072, -0.03020617, -0.037017055, 0.025191655, 0.011143875, -0.053165182, 0.06407175, -0.048938822, 0.05356838, -0.046074115, -0.014509914, 0.045777906, 0.09279733, 0.062084854, -0.057480022, 0.06887739, 0.10842563, -0.0017203763, 0.07569207, 0.030878875, 0.07479719, 0.001015117, 0.070773646, -0.0046016495, 0.038620025, 0.0162555, -0.10892878, 0.046237364, 0.083831675, -0.11005775, 0.09839006, 0.0037038282, -0.03415458, -0.07598695, -0.098373026, 0.041104626, -0.06620785, -0.042903755, 0.10537167, 0.098838136, -0.042405747, -0.036758333, -0.057611257, -0.09085804, 0.016405568, 0.054501943, -0.029679528, -0.09471265, -0.0967793, 0.094572246, 0.07175578, -0.041088454, -0.032093562, 0.05872862, 0.004707881, 0.0041721384, -0.06253264, 0.040193856, -0.062073946, -0.10427558, 0.07006065, -0.008677121, -0.052631848, 0.008404166, 0.12497432, -0.0036505559, -0.06341084, -0.02727306, 0.006173454, 0.015193852, 0.025294067, -0.09560457, -0.07356358, 0.0076384177, 0.084326446, -0.08544383, 0.02916038, 0.10533683, -0.038067207, 0.008197263, -0.079903096, -0.077916875, -0.025108937, -0.09490534, 0.1251657, -0.042890266, 0.04420357, 0.07085243, 0.106615104, 0.051172968, 0.07800141, 0.076523975, 0.04792338, -0.079861164, 0.052389774, 0.03813508, -0.03863348, 0.00640832, -0.063629396, 0.01866891, -0.09759104, -0.008654636, 0.043553874, -0.018206235},
{-0.11204582, 0.09973255, -0.07193909, 0.078389995, 0.030398091, -0.055518344, 0.043437902, -0.09837443, -0.025283039, -0.0042162314, -0.08052694, 0.10073539, -0.12309939, -0.024874693, -0.061668813, 0.009609574, -0.11163956, 0.055962205, 0.030819362, 0.044824503, 0.05789648, 0.026131803, 0.10497604, -0.03594283, -0.04590632, 0.04974862, -0.084998436, 0.08958307, -0.031150796, -0.042437874, -0.013280635, 0.094741516, 0.041239962, -0.10945901, -0.0073170075, 0.053707343, -0.005237511, -0.0334169, -0.045753516, -0.02716991, 0.13094771, -0.09072878, 0.048925012, 0.046420135, 0.1288855, 0.08561455, -0.00861685, 0.084314875, 0.030150697, -0.08250945, -0.036538195, -0.066276245, 0.113859996, 0.027509665, -0.05631804, -0.024283694, 0.08620327, 0.089849606, -0.08082594, -0.018085334, -0.08804063, -0.087621115, 0.0008518394, -0.06428801, 0.08537328, 0.086656705, 0.026999637, 0.021168217, 0.07818429, -0.018007863, 0.011561849, 0.076884605, -0.06730087, 0.075958595, -0.08844257, 0.025235973, 0.07842375, 0.07278699, 0.05129026, -0.01794993, -0.0046659335, 0.07368301, -0.0041544414, -0.052285735, 0.08821488, -0.046906207, -0.026008848, -0.09260969, -0.04472021, 0.03879295, 0.02770442, 0.030545205, 0.09675053, -0.049568594, 0.099800915, 0.015811317, 0.076254725, 0.034035053, 0.06696788, 0.053644046, -0.020036697, 0.036799613, 0.0122487, -0.09693523, 0.09607987, -0.10972908, 0.047942847, -0.06988514, 0.07110526, -0.042807177, 0.06343278, 0.0005499646, -0.08289828, 0.0051464066, 0.0023682937, -0.077920154, -0.11061204, 0.04752679, 0.08365173, 0.094338804, 0.0091940565, 0.105840035, -0.12214206, 0.0007810851, 0.095257044, 0.022887597, -0.050882515, 0.08620913},
{-0.08829463, 0.10468249, -0.007501992, -0.01910801, -0.06354478, 0.009416975, 0.07130494, -0.02501066, -0.049958624, -0.008102462, 0.05508003, -0.04065944, -0.09039866, 0.08872917, 0.049534056, 0.111705236, -0.044332623, -0.08984811, -0.123955145, 0.06569672, 0.0009148165, 0.078149535, -0.033577133, 0.005143164, -0.035954542, 0.036458172, 0.05700017, 0.03604651, -0.013074871, 0.0851947, -0.0022422043, -0.109070525, -0.025302935, -0.018517656, 0.07370506, 0.03899196, -0.0777967, 0.049231812, -0.10960517, -0.010857236, 0.05747166, 0.03942029, 0.078063525, 0.027751325, 0.036018364, 0.016585913, -0.07755509, 0.09010318, 0.060665876, 0.0818515, -0.08488326, -0.051411476, 0.03622505, -0.015848333, 0.08576013, -0.027246471, 0.06254334, 0.09917806, 0.006663212, -0.022797108, 0.050484184, 0.02893102, 0.0025697767, 0.07834625, -0.106447056, 0.031073516, -0.091920435, -0.019976765, -0.06711548, 0.06970751, -0.018995991, -0.03852727, -0.06925835, -0.0763853, -0.01952003, -0.061892044, -9.7274475e-05, 0.044776842, -0.10742247, 0.054015994, -0.036064066, 0.000553526, 0.09369952, -0.008509247, -0.04155841, -0.11028166, 0.111374006, -0.02170636, 0.010137028, -0.0061853477, 0.07564879, 0.08281602, -0.10106479, -0.002567148, 0.12905587, 0.040780604, -0.08673641, 0.037198994, -0.014571702, 0.02021712, 0.027316809, 0.096301205, 0.086423315, -0.038107984, 0.108629294, 0.010780102, 0.07325238, -0.054724928, 0.023735074, -0.023017855, -0.06460342, -0.026822358, -0.09695495, 0.08850821, -0.006630495, -0.034863587, -0.03143019, -0.10065552, -0.0564548, -0.048222926, 0.0934339, -0.074859716, 0.031770248, 0.07903646, -0.07169958, 0.09270041, -0.022434704, -0.01341201},
{-0.028197175, -0.09587887, -0.081582084, 0.07437698, 0.046214912, -0.08494426, 0.053586442, 0.09831326, 0.10133259, 0.05611162, -0.020370178, 0.020593677, 0.06661048, 0.04904578, -0.046579212, 0.06634885, -0.108156435, 0.050536007, 0.0913755, -0.06724602, -0.072126284, -0.09055266, -0.0010117185, -0.111078404, 0.07175725, 0.087396994, 0.060079936, 0.101414956, 0.004189145, 0.06978572, 0.07107762, -0.082459226, 0.06438423, -0.06889801, 0.07248706, -0.057102244, 0.0008614995, -0.05525024, -0.028083945, 0.009054354, -0.08935462, 0.060281694, -0.10303239, -0.065155625, 0.05719383, 0.06128677, -0.040531762, 0.09719962, -0.05371852, -0.09241931, 0.089066364, 0.016209498, 0.055939242, -0.031552784, 0.00043729693, 0.04203701, 0.05183622, 0.0135092065, -0.06859892, -0.053909805, 0.09296161, -0.010929522, -0.05427533, 0.10045105, 0.051975116, 0.039599773, -0.07368268, -0.039201617, -0.06235475, -0.100465745, -0.0054653306, -0.02462633, -0.09681763, 0.055674158, -0.045334656, 0.094037846, 0.07875981, -0.027423099, 0.07208871, 0.075018905, 0.122322455, -0.0753539, -0.0049772146, -0.017403614, 0.023569947, 0.07601083, -0.07326247, -0.05504289, -0.06247884, -0.054314088, 0.05113367, 0.10282345, 0.08867332, 0.051749546, 0.03913782, -0.014073454, 0.0110341385, -0.034275174, 0.07930338, 0.09101717, 0.01990448, -0.066227324, 0.082338706, 0.046322703, 0.11279147, 0.03446977, 0.08614804, -0.011848611, -0.03928364, -0.035684228, -0.014993305, -0.09826395, 0.019881047, 0.0042382497, -0.06668678, -0.061103974, 0.08494398, -0.013560876, -0.038378555, 0.048034623, 0.071286395, -0.015020102, 0.020091914, -0.07403155, -0.065961674, 0.062804334, -0.03488319, 0.06093},
{-0.08951977, 0.021192003, -0.10385815, -0.05626782, 0.05921744, -0.0473529, 0.06959996, -0.045004684, -0.07238567, 0.06167555, -0.036402237, -0.07876738, -0.04882603, -0.025149042, -0.022316443, -0.0055045653, 0.020641593, 0.07034808, -0.026871769, 0.10420279, -0.016581321, -0.060664095, -0.04712011, 0.0015247398, -0.043747436, 0.0482044, 0.0839972, -0.0040631955, -0.05293115, -0.022518689, 0.05654281, -0.0029596803, -0.058067013, 0.100706376, 0.13476361, 0.010508942, -0.018828183, -0.022742871, -0.07860165, -0.014671897, -0.08149432, -0.060298007, -0.12257658, 0.094607405, -0.042398047, -0.10583253, -0.032233015, 0.00012776893, -0.01849375, 0.042853158, 0.018972391, -0.01180695, 0.10654546, -0.077279955, -0.06446765, -0.036851276, -0.01604564, -0.06382538, 0.07266126, 0.06670339, -0.08940759, -0.07005676, 0.0037527066, 0.011030205, -0.0399668, -0.03401755, 0.08457713, 0.09408757, -0.10400835, 0.001312719, -0.026893552, -0.11246846, 0.051734045, -0.018174732, 0.042306133, 0.020304885, -0.011639368, -0.061192356, 0.045548666, -0.092403814, -0.011500735, 0.0022597164, 0.10298749, -0.008000883, -0.05960386, -0.08501128, -0.022720842, -0.016911302, -0.05681114, 0.058605205, 0.014477825, 0.08434497, 0.013533577, -0.0076678386, -0.111675866, 0.05070454, 0.07306993, -0.019601386, 0.10453972, 0.050549358, 0.09789929, -0.06029947, 0.08934441, 0.075355425, 0.07035862, 0.039124, -0.03536522, 0.0935505, 0.074730486, -0.0665761, -0.02499354, 0.09905358, 0.06151487, -0.036804628, 0.07699257, 0.14266011, 0.09275099, -0.021722764, 0.056151465, 0.004942581, 0.037132036, 0.018949315, -0.033085857, -0.055911932, 0.005205378, -0.12835081, 0.065334804, -0.10435264},
{0.053104814, -0.09120614, -0.0151304435, 0.0059311735, -0.09083477, -0.0522937, -0.082247734, 0.07654831, -0.08466335, -0.09769904, -0.023078918, 0.11652632, 0.035771653, -0.044938557, 0.11020527, -0.097861215, -0.08527326, 0.08899635, -0.036241315, 0.04147861, 0.0833827, 0.025532443, 0.028545333, -0.10648566, -0.1227511, -0.051672313, 0.07140057, -0.08500741, 0.035606086, -0.018705852, -0.08935017, -0.021696744, -0.03371275, 0.14771245, 0.020269908, 0.065408505, 0.0641473, 0.06812159, 0.06698652, -0.016846962, 0.027151376, -0.05021611, 0.012319502, -0.029791515, -0.0029670433, 0.021309685, -0.05581273, -0.020645473, -0.071170256, 0.059289567, -0.013687929, -0.025987454, 0.040472835, 0.037033763, 0.04594481, 0.04429574, 0.050013214, 0.030675367, -0.012975289, 0.019342326, -0.0076743793, 0.007626859, 0.047486134, 0.006367728, 0.07183409, -0.045978088, 0.008341358, 0.047371, -0.08243297, 0.020999007, -0.02626881, 0.060329594, 0.029764578, 0.023097295, 0.037246745, 0.123143695, -0.006650176, 0.04517883, 0.076795384, -0.02090481, -0.006057545, 0.039017573, 0.0039021508, 0.023302544, 0.08355144, -0.0683691, 0.07196264, -0.031253826, 0.07692663, -0.020052116, -0.001571506, 0.09134498, 0.10246079, 0.011960927, 0.03275999, -0.01652819, -0.064222515, 0.103219956, -0.048981022, 0.020134673, 0.02769342, -0.08531755, 0.062338278, 0.03152895, 0.0024758365, 0.10942626, -0.0070608878, -0.011798952, -0.04590434, 0.072811455, 0.05178174, -0.026063599, -0.040002555, -0.017476497, -0.05405268, 0.12570216, -0.04313095, 0.08082123, 0.018969867, -0.013789184, 0.040868014, -0.0738508, -0.0021738613, -0.10912261, -0.082939364, -0.07018604, 0.0494616, -0.062924124},
{0.10878844, 0.014093679, -0.008175788, 0.046411797, 0.08408664, -0.057583075, 0.06810201, 0.019007087, -0.0970836, 0.034735292, 0.110349916, -0.03576534, 0.08466018, -0.018775236, -0.06443376, -0.039907217, -0.08833863, -0.10676823, -0.09046811, 0.23131625, 0.0012288655, 0.12978148, -0.09140792, -0.012967293, 0.0048335544, -0.020902546, -0.04414349, -0.0984562, 0.024235087, -0.075352214, 0.051924042, 0.03031956, -0.10001331, 0.07268116, -0.0125862975, -0.06897313, -0.07982119, -0.10418306, 0.08695439, -0.045838512, 0.1056196, 0.0006345734, 0.044364616, -0.08025671, 0.051238067, 0.07857286, 0.063181266, 0.1852616, -0.02281268, -0.011793666, 0.059558712, -0.029599048, 0.011068084, 0.048293915, -0.053803585, 0.18724692, -0.037489783, 0.07347205, 0.09549984, -0.026726335, -0.03489588, -0.06612366, -0.17311879, -0.000757128, 0.028444171, -0.09297485, -0.09506563, -0.08280352, -0.09083394, 0.109687984, -0.06234849, -0.047997527, -0.052221697, -0.15259975, 0.097315684, 0.027990492, -0.042303085, 0.05698797, -0.060334057, 0.112012826, -0.019245187, 0.01967366, -0.10778005, 0.057662208, -0.005257513, 0.030269505, -9.7363154e-05, -0.031796094, 0.12677151, 0.07657086, -0.049067285, 0.046225872, 0.029329032, -0.0036894046, 0.058785114, 0.0929721, 0.092158884, -0.10046702, -0.123333596, -0.007150218, 0.06974642, -0.15082742, 0.024400322, -0.080302075, -0.051545136, 0.023272824, -0.061128315, 0.055334203, -0.03784325, -0.05669432, 0.113801844, -0.060580857, 0.09808695, 0.059304703, -0.031541966, 0.11258662, 0.020196239, 0.038749397, 0.044910315, 0.07566516, -0.08291956, -0.09061482, -0.031228364, -0.097943716, 0.009132758, -0.029043337, 0.15738815, -0.042863723},
{0.09072789, -0.2010902, 0.035692662, 0.03794987, 0.01772151, 0.096420765, -0.065246, 0.09222257, 0.0538553, -0.06478229, 0.05974498, 0.028876204, 0.017337369, 0.0066954433, 0.03651093, 0.074019566, 0.07426303, 0.08549605, 0.009802665, 0.089650355, -0.06577035, 0.036950782, 0.11069842, 0.031090658, 0.002994369, -0.11765607, -0.052461755, -0.09553408, -0.037041575, 0.022867039, 0.081957415, 0.018305514, 0.07946851, -0.06874597, 0.0627403, 0.087703936, -0.024963047, 0.0094665885, 0.089701295, -0.083359286, 0.07484413, -0.08212307, -0.13022262, -0.068924874, 0.08118638, -0.0767963, -0.091815755, -0.0062567755, 0.04455039, 0.029108876, 0.08874673, 0.056602493, 0.029379698, 0.07483662, 0.052363828, 0.091621965, -0.22260539, 0.06298831, -0.012908262, -0.020584391, 0.022507409, -0.09466684, -0.04137504, -0.009675965, -0.09217116, -0.090820454, -0.07514728, -0.044329114, -0.10190388, 0.005095914, -0.026445847, -0.038515925, -0.023419395, 0.018313847, 0.09350506, 0.02284499, -0.018240819, -0.06567499, -0.067316726, 0.0022791764, 0.10663091, 0.09870368, -0.099321425, -0.011997367, 0.16375513, -0.107476525, 0.11684346, -0.099950425, 0.10047977, -0.024376716, -0.07097622, 0.02030791, -0.05590087, 0.21531071, -0.05344586, 0.030121848, 0.073040396, 0.027576609, -0.16841504, -0.024124376, -0.091372326, -0.13851075, 0.081726514, 0.04493819, 0.12966895, -0.054949164, -0.045175895, 0.0010393723, 0.1451492, -0.11134623, -0.062170334, -0.10569737, 0.17113784, 0.0996063, 0.060864463, 0.14996988, 0.08928147, 0.025450349, -0.090697, -0.031987064, 0.027515914, -0.092857875, -0.16047923, -0.14551643, -0.041572623, -0.120833844, 0.17786044, -0.079195745},
{0.015046122, -0.17358288, 0.028034572, 0.024984492, -0.07777839, 0.061238274, 0.04283152, -0.01784832, 0.09457657, 0.08591953, 0.077886574, 0.0051157176, 0.13182674, 0.025194839, 0.059072383, -0.07905806, 0.054283578, -0.05458697, -0.05070175, 0.032230135, -0.03779358, 0.00560122, 0.040922318, -0.11445436, -0.02887046, -0.029348157, 0.01220539, 0.11249537, 0.033076216, 0.004047852, 0.1146041, -0.08047256, -0.08469806, 0.026491689, 0.058347337, 0.012468964, 0.0034114306, 0.07560213, 0.1820158, -0.075046524, 0.019107178, -0.06466297, -0.08192361, 0.016793048, 0.013939077, -0.09529013, -0.014086261, -0.031586915, 0.0931004, 0.14269766, -0.02971756, -0.069194, -0.03968528, -0.07255239, 0.047264025, 0.12372998, -0.026441148, 0.058211163, -0.0990289, -0.013473512, 0.0884573, -0.10142237, 0.12601699, 0.10470787, -0.09874811, 0.09375256, -0.040599372, -0.097614095, -0.092749916, 0.05107182, -0.015416258, 0.098303415, -0.0036838725, 0.11361317, 0.066144325, -0.028912248, -0.085092425, 0.033177376, -0.15004338, 0.0338046, 0.12596565, 0.015833482, 0.123163335, 0.07956305, 0.15378188, 0.048748102, 0.028440543, 0.07590559, 0.045738105, -0.032704763, -0.040128626, 0.122926325, 0.06828794, -0.062748216, 0.023689529, -0.020159602, -0.046081945, -0.010792095, -0.08251981, 0.0011375472, -0.024752922, -0.14534189, -0.071389265, 0.041533545, 0.11983766, -0.025274532, 0.1175836, -0.09793889, 0.1866859, -0.0767702, 0.077929534, -0.06289481, -0.10508913, 0.011376643, -0.06817026, 0.03322813, 0.06706649, -0.02932375, -0.01782342, -0.093123786, 0.06338618, -0.05955329, 0.04200267, -0.12367288, 0.060472608, -0.10065257, 0.09209294, -0.16826211},
{-0.065165125, -0.0342103, -0.10359652, 0.06469857, -0.041352287, -0.057649255, 0.07021707, 0.019477755, -0.014322221, 0.028044254, -0.0044883136, 0.06762686, 0.0083546685, 0.08094598, 0.11686748, -0.031425375, -0.09372321, 0.031711742, 0.008337703, 0.0693778, 0.065501705, 0.0027704441, 0.11717652, 0.025186708, -0.06695641, -0.0029318302, 0.045008045, 0.0781285, -0.08829294, 0.05153037, -0.001285707, -0.104578726, 0.08539958, 0.06768977, 0.05107187, -0.071262166, -0.08790209, 0.064353466, 0.1939206, -0.027801475, 0.046194583, 0.089684606, -0.06737489, 0.0023233285, 0.01527714, -0.02969134, -0.032064356, -0.04533538, -0.06752199, 0.13792154, -0.0057949694, -0.017097928, 0.12970358, 0.03949093, -0.074288584, 0.12049471, 0.0902618, -0.079110846, -0.1075264, 0.018255113, 0.08647263, -0.028871601, -0.013084867, -0.03493028, -0.040684022, -0.008828428, 0.0468176, 0.021156862, -0.14385381, 0.015421695, -0.0032132948, 0.06779705, 0.027544051, 0.17983972, -0.0701912, -0.025985366, -0.13911052, -0.015956618, -0.051525325, -0.12308156, 0.15998882, 0.10646601, 0.13323805, 0.089509636, 0.036746573, 0.048554868, 0.05585838, 0.0640531, -0.11540733, -0.038934078, 0.13232154, 0.15650682, 0.06889923, -0.012513784, -0.020027107, 0.07330805, 0.08769791, 0.057291508, -0.023593623, -0.025376417, -0.006525226, -0.14990295, -0.021007622, -0.019447155, -0.043768622, 0.07692798, 0.061153017, -0.09506566, 0.16529097, -0.051094875, -0.062457632, 0.026374236, -0.08757038, -0.035263438, -0.10348099, 0.001234272, -0.016536172, -0.101902045, -0.056199297, 0.028894663, -0.055483658, -0.14739558, -0.114653036, -0.0025468958, -0.03940697, -0.03518605, 0.0940899, -0.12922613},
{0.085465215, -0.123320185, 0.10961368, 0.15752925, -0.106441684, 0.0251365, -0.09058522, -0.05025515, 0.040735006, -0.06285219, 0.070685215, 0.020106925, 0.021431705, 0.054314014, 0.093165874, -0.15421098, 0.02050301, -0.10575514, 0.05291359, -0.11555666, 0.05815317, 0.17992076, 0.11125745, 0.03337359, -0.014815188, 0.020106643, 0.05563918, 0.079481006, -0.059835456, -0.07621444, 0.02347552, -0.0009590643, -0.10981923, -0.021850407, -0.01947482, -0.097678065, 0.03808338, -0.043858964, 0.19491576, 0.015037555, 0.002528805, -0.04914332, -0.17339844, -0.051771816, -0.0021705304, 0.08994425, -0.06557508, -0.0030587057, -0.030272432, 0.122907884, -0.018393265, -0.0018565804, 0.010595694, -0.06357076, 0.08270475, 0.14086336, 0.13250831, -0.08375947, -0.086974956, 0.06899667, -0.07173934, 0.03820775, 0.10560785, 0.10145286, -0.06721504, 0.10601539, 0.040950574, 0.01780875, -0.10001349, -0.037234537, 0.098350786, 0.09909621, -0.078888945, 0.07129517, -0.031088062, -0.06901566, -0.0071046245, 0.02264224, -0.045640852, -0.104009554, 0.021499243, -0.104372665, 0.053793617, 0.070849404, 0.17052867, 0.047033742, -0.16657388, 0.061902944, 0.0551982, 0.020774152, -0.0073952666, 0.04941373, 0.09675111, -0.059547912, -0.09524216, 0.008010589, 0.077803835, 0.078967646, 0.11346228, -0.04347729, -0.09179321, -0.17993991, 0.09338264, 0.0060834065, -0.00026563535, 0.13099939, 0.11286001, -0.071189284, 0.067128174, -0.057131495, -0.063807264, 0.10032377, 0.025262937, -0.052013278, 0.079035535, -0.04835057, 0.06584745, -0.088540174, -0.06834432, -0.03216383, 0.038601726, -0.1789002, -0.065791756, -0.11059912, 0.06382057, -0.025166176, -0.0124267535, -0.062414594},
{-0.0326819, -0.09400141, 0.040931188, 0.03304485, 0.053329248, 0.08829799, -0.069556646, 0.08907519, 0.00502564, -0.051020358, -0.081948, -0.15856357, 0.02266528, -0.036827516, -0.05653564, -0.14668754, -0.00012051023, 0.057049427, 0.040262096, 0.0004619573, -0.052764144, 0.15438141, 0.009094872, 0.14161375, -0.059097275, -0.05125562, -0.070769385, 0.16934662, 0.16396567, -0.052950475, 0.042983245, -0.07189581, -0.059727445, -0.05251334, -0.15379916, -0.10409908, 0.026930926, -0.054095708, 0.117168605, 0.17345238, 0.1472174, -0.03282123, 0.013777169, -0.08168496, -0.059527706, 0.09229381, 0.03995742, 0.0939031, -0.05906256, -0.0009511209, -0.076158695, -0.049703274, -0.080408946, -0.04500947, 0.015496314, 0.08774204, -0.024675755, 0.03020157, 0.12436715, 0.037352424, 0.091640376, -0.061769217, 0.10111835, -0.06411196, 0.078195706, -0.096243724, 0.03955488, -0.07113193, -0.089193076, 0.040634476, 0.035885785, 0.034589786, -0.0743199, 0.04216814, -0.099405706, -0.06098118, 0.11034478, -0.042246006, 0.0652924, 0.13797116, -0.13149141, -0.09227211, -0.063775666, 0.06703681, -0.008935501, 0.051468205, -0.12685226, 0.0026170851, 0.13052249, 0.071726486, 0.0363112, -0.027338583, -0.05477494, 0.02386602, 0.0073378887, 0.099633336, 0.026257083, -0.04492195, 0.09250427, -0.026928037, -0.088486046, -0.14488629, -0.08506135, 0.03567648, 0.087228894, -0.11961092, 0.07639437, 0.08833476, 0.08438857, 0.050244, 0.058484074, -0.026115395, 0.07033836, 0.10072154, -0.052487545, -0.15430534, -0.0015925529, 0.053679734, -0.043930635, 0.021250367, 0.11494557, 0.009505468, -0.07199899, 0.04077014, 0.007016562, 0.04868846, -0.000637535, -0.02291298},
{0.159613, 0.070713595, 0.06500442, 0.122932695, 0.031109003, -0.051269837, -0.08961048, 0.01784753, -0.09704723, 0.08280957, -0.15647508, -0.007951019, -0.13725531, -0.06799231, -0.0027545004, -0.06899222, 0.092191495, 0.016757734, -0.0881177, -0.08071198, -0.07111196, -0.08593253, -0.05763759, -0.0132441, -0.03257408, 0.007372378, 0.05657438, 0.023085138, 0.15539749, -0.05484538, 0.06528458, 0.06608776, 0.053817295, -0.05151012, 0.029132223, 0.100570045, -0.030363422, 0.021549841, -0.02840581, 0.06691469, -0.043140937, 0.10117403, 0.11174846, -0.09944949, 0.043116044, -0.07117157, 0.05254425, 0.025148097, 0.09816104, -0.10028274, -0.009723781, -0.08594782, 0.03655562, 0.04380758, 0.09019293, 0.09858139, 0.07294833, 0.10325466, 0.100691184, 0.0031265125, 0.021557951, 0.051983137, 0.0262818, -0.105332635, -0.04063817, -0.07098534, 0.07471681, 0.060185745, 0.13958895, -0.048436034, -0.0009895763, 0.009373273, 0.0061818883, -0.15209265, -0.1316404, -0.02932246, 0.1186557, -0.01289659, 0.01962587, 0.044093177, -0.12925625, -0.050377574, -0.031665783, -0.094112456, 0.02223821, 0.0515669, -0.11989246, -0.13520806, 0.12936966, -0.009672845, -0.017948866, 0.0219906, 0.096047714, -0.15304738, 0.14213035, -0.018329844, -0.0388138, 0.056490283, 0.110700175, -0.05054575, -0.090690225, -0.05990946, -0.04384177, -0.04657422, -0.058165472, -0.07533637, -0.011258816, 0.05270225, -0.059928857, 0.08302166, 0.10287883, 0.07805529, 0.07943618, -0.043531965, 0.007189542, -0.021561265, -0.039937004, -0.063768774, 0.012106135, 0.087973416, 0.07178076, -0.08847553, 0.08751594, -0.001299371, 0.045868248, 0.18153746, 0.007961779, -0.07610771},
{-0.02300238, -0.005497177, 0.0041293367, 0.08640344, -0.084439784, -0.0076019317, 0.058945164, -0.041340657, -0.0617883, -0.07737181, -0.18132508, 0.06184808, -0.14957753, 0.103969514, 0.06516947, 0.07378154, -0.046571784, 0.029149435, -0.049123816, -0.13229375, 0.06330905, 0.028141234, 0.08725875, 0.10385194, 0.017443687, 0.101217106, -0.07311913, 0.0610236, 0.032360077, 0.07425221, 0.023630664, -0.08660222, -0.08167846, -0.052079, 0.037297525, 0.027655141, -0.014663588, 0.114095375, -0.03430112, 0.1270126, -0.034245487, 0.074264824, -0.049094625, 0.095934786, 0.06707688, 0.039434362, -0.08313715, 0.1048437, -0.08352229, 0.026103526, -0.036802325, -0.039837793, -0.04687468, 0.07056263, -0.07406094, -0.09170843, 0.1910681, 0.010267533, 0.14423765, 0.004204678, -0.072720945, 0.0817505, 0.17889094, -0.081396356, -0.017678514, -0.023971856, -0.07798813, -0.07962063, 0.12092355, 0.057895537, -0.061671775, -0.08562844, 0.021988079, -0.003672045, -0.05855605, -0.07666544, 0.005802413, 0.0066644773, -0.028077722, 0.06093039, -0.16733222, -0.0896516, 0.07065968, -0.0586739, 0.0859591, 0.021125551, -0.056646653, -0.068304464, -0.0013053763, 0.06767485, -0.090530515, -0.034804888, -0.044367034, -0.0007794936, -0.03387776, 0.0117846355, 0.0045943335, 0.13974838, 0.042143684, 0.019421816, 0.09468366, 0.08550781, 0.053163953, 0.019073546, -0.009299057, 0.07939954, 0.061037656, 0.04703102, 0.11578103, -0.0697792, 0.06335039, 0.08808544, -0.03219889, 0.007164029, 0.09691073, -0.07931847, -0.08410163, 0.098665714, -0.03371501, -0.08963444, 0.061462432, -0.046153005, 0.06251305, 0.07253227, -0.069962054, 0.0704042, -0.05535984, 0.04305035},
{0.013063828, 0.136945, -0.12632734, -0.03138834, 0.06661167, 0.034921646, 0.037719894, 0.09003572, 0.023782074, 0.020959198, -0.042002976, -0.039315492, -0.044486374, -0.05070401, 0.042688794, 0.046835203, -0.028851032, -0.010032781, -0.13192016, -0.0068138065, 0.059365965, -0.048136674, 0.044741336, 0.015994983, -0.094652236, 0.11516454, -0.04247282, 0.02233331, 0.12044493, -0.03625965, 0.07506907, -0.085094824, 0.028827835, 0.06338942, -0.10578887, -0.005721663, 0.01533973, 0.078277886, 0.04905314, 0.14730039, -0.034493472, -0.011263467, -0.078627415, -0.053381864, 0.08799153, 0.012383719, -0.0724304, 0.01787831, 0.06803174, 0.059767645, -0.10002069, -0.0430514, -0.036856025, 0.05488799, 0.07864685, -0.026166199, 0.1857617, 0.010722168, -0.04932671, 0.03136201, -0.055791803, -0.09355785, 0.04867901, 0.08801758, 0.06343949, -0.09872641, -0.013911421, 0.0867753, 0.008432252, 0.03478545, 0.035458315, -0.035748936, -0.051429193, -0.005634334, -0.15672089, -0.024302952, 0.10139651, 0.05364144, 0.03228965, 0.09457747, 0.043760754, -0.06044257, -0.0071783205, 0.009603879, 0.0026098788, 0.053225785, 0.08530659, 0.029943781, -0.0021172324, 0.048458517, 0.0863026, 0.07185092, 0.0853827, -0.12786976, 0.07328898, -0.039735034, -0.04381425, -0.05174216, -0.012609931, -0.03766469, 0.0010108799, -0.071904935, 0.02988071, 0.029623523, -0.05823763, -0.11418739, 0.12151197, 0.067488104, 0.055525597, -0.08010355, -0.12338229, -0.088581964, -0.055115286, -0.094592966, -0.02437441, -0.10355134, -0.078590766, 0.02332899, -0.02012513, 0.036466673, -0.06216592, -0.07007698, -0.07983826, 0.056503616, -0.029200234, 0.015203699, 0.016558072, -0.0068141343},
{-0.0600696, 0.08016921, 0.06115635, 0.037625004, -0.06780399, -0.008703589, 0.08431283, 0.056847364, -0.08660377, -0.03970182, -0.004653577, 0.105917424, -0.049433183, 0.016979834, -0.09443835, -0.028912557, 0.03608021, 0.058030397, -0.06913521, -0.14064837, -0.049256787, -0.07163831, 0.07520435, 0.09288479, 0.09045144, 0.027710883, -0.055705145, 0.08006216, -0.07461873, -0.10036853, -0.03187279, 0.09838926, -0.08464646, -0.0049790097, 0.0136204725, 0.017070007, 0.03274997, -0.06608453, -0.0958864, 0.009059968, 0.13830239, 0.07827917, 0.018898724, -0.09937551, 0.08012925, 0.028443018, -0.065826565, 0.12075075, -0.0026686564, 0.04913436, -0.018046884, -0.014810935, 0.06163715, -0.0791915, -0.07306272, 0.07150068, 0.071913, -0.06009697, -0.0051404857, 0.07701872, 0.066519015, 0.10954169, 0.16764952, -0.0003650412, -0.09736172, -0.03697374, -0.025411392, 0.024301618, -0.040033326, -0.12623987, -0.028506052, -0.0013189865, -0.014574394, 0.09627327, -0.08750426, 0.036386512, -0.02966206, 0.017851695, -0.10265704, 0.07904051, -0.010981581, -0.04065299, -0.08375322, 0.049816884, 0.1318624, 0.037885025, 0.0720762, -0.015650962, 0.123671636, -0.03364656, 0.08200063, 0.0791032, -0.08096313, -0.019118998, 0.05832163, 0.10213648, 0.024028048, 0.030840835, 0.1629296, 0.032474816, 0.031811774, 0.08168975, -0.0222073, -0.040234752, -0.0032327655, 0.04229872, 0.03547037, 0.004230809, -0.028208263, 0.06494265, -0.08774615, 0.07324414, -0.11087403, 0.07595697, -0.10022557, -0.06878714, 0.052951146, -0.08311892, -0.030578712, 0.036851287, -0.07750243, -0.015615024, -0.11909322, -0.094920814, 0.05884996, 0.058854043, 0.023477515, -0.027198361},
{-0.07587455, 0.032709062, 0.07886828, 0.026474683, 0.023769045, -0.0540981, 0.0063936845, -0.1065922, 0.008690603, 0.09578608, -0.07403821, 0.06824085, -0.044895258, 0.11653835, -0.059623852, 0.08367169, -0.04265164, -0.02681097, -0.14004357, -0.13876836, 0.023497239, -0.09649358, 0.03402011, -0.0591101, 0.124966145, 0.15621996, -0.038252164, 0.057972066, 0.08640148, -0.07789157, 0.068969615, -0.10135421, -0.013448688, -0.03776065, 0.0060985824, -0.06181054, -0.051581535, -0.12032857, -0.10662595, -0.0591847, 0.015978789, 0.004169695, 0.05044719, 0.034111533, 0.005322909, 0.041447323, 0.048738047, -0.039818034, -0.02731549, -0.0686926, -0.12591311, 0.1004909, 0.12117595, -0.0844333, -0.10522706, 0.0042356867, 0.028105175, 0.033127025, 0.06277007, -0.026504245, 0.054371197, 0.045875166, 0.10403001, 0.04085563, 0.029403955, 0.015163549, 0.034060996, 0.06722884, 0.14388807, 0.004196479, -0.044363752, 0.090969436, -0.089392334, 0.094469145, -0.02810499, -0.08940012, 0.081262365, -0.048291624, -0.15103488, 0.001663648, 0.11596025, -0.08353688, -0.094855495, -0.006005002, 0.0015491392, 0.06047184, 0.14119348, -0.011511884, -0.030052526, 0.042990416, -0.000982592, -0.08351197, -0.10218721, -0.04769603, -0.038187146, 0.0042392835, -0.053018145, 0.07909958, 0.11732063, -0.0056082904, -0.020149514, 0.098401025, -0.04964532, 0.00022807717, 0.07206223, 0.013397954, -0.019437993, 0.019350054, 0.046396684, 0.031086957, 0.007743223, -0.079585046, 0.049333535, -0.10180002, 0.07247445, -0.10471184, 0.029093092, -0.087439075, -0.102110244, 0.07758276, -0.1311056, -0.07274691, -0.015814254, 0.034197364, 0.09665413, 0.07343393, -0.12569886, -0.05970459},
{-0.1378666, 0.106946975, 0.09402022, 0.0029977376, -0.028515523, -0.09918666, -0.041363258, -0.10091303, 0.06070371, -0.053076267, 0.064321265, 0.04416933, -0.05021855, 0.07403034, 0.051544398, -0.081614465, 0.08569313, 0.07320096, -0.030059237, 0.009508839, 0.013480898, 0.04209757, -0.003920344, 0.032644622, 0.036553446, 0.15627706, 0.016213387, -0.054817498, 0.06586145, -0.01698489, 0.11640494, -0.002338937, -0.035369933, 0.04130438, -0.10303939, -0.02612377, -0.058025654, 0.09204725, -0.04066376, 0.0838969, -0.023392744, 0.09253387, 0.05923155, -0.09040642, 0.10377592, 0.09459004, 0.09102124, 0.096658945, 0.029194206, 0.04936406, -0.047903612, 0.050065503, -0.014781374, 0.046701204, -0.08831878, 0.11244685, -0.021000398, -0.091292724, 0.037340507, 0.089646615, 0.030865042, -0.024564698, -0.05406497, -0.08932028, -0.039724737, -0.004899537, -0.08826246, 0.0870581, 0.11156129, 0.052527085, 0.018670188, -0.07446566, -0.09037291, 0.03082071, -0.043409575, -0.1383918, -0.05654179, 0.09371798, -0.0007472455, 0.11097362, -0.049349796, 0.054874256, 0.08688544, -0.06831267, 0.13139339, -0.07679296, 0.07445196, 0.080064975, 0.12784696, -0.09403529, 0.018519556, 0.00745683, -0.0504113, -0.060291227, 0.14534764, 0.0115541145, 0.05778131, -0.051791664, 0.02771719, -0.059122313, -0.02788274, -0.048992436, -0.087156005, -0.020910352, -0.028901834, -0.035237867, -0.054960154, 0.09982175, 0.09081465, -0.10210513, -0.018436417, 0.0926688, 0.080267325, 0.02948014, -0.054265562, -0.08192972, -0.0850089, 0.06467228, 0.042892247, -0.103464976, 0.0111115575, 0.10352557, 0.0058887713, 0.057885777, -0.07638722, 0.052169252, -0.06976055, 0.029252674},
{0.05959933, 0.0999497, -0.07563796, 0.054863304, 0.011890082, 0.037195235, -0.030398585, -0.105641864, 0.07891548, -0.07962711, -0.068840854, -0.04567228, -0.037123397, -0.026284426, 0.029289985, 0.10664088, -0.022504373, -0.069844075, -0.06496856, -0.11945116, -0.07496174, -0.113770075, 0.052649383, 0.11311726, 0.047133725, 0.11509694, 0.019921117, -0.055071067, 0.11150009, 0.027786203, 0.07009187, -0.021249365, -0.07548738, 0.00035595035, -0.040167872, -0.06097761, 0.042487264, -0.046926215, -0.045058332, -0.022778908, 0.124162525, -0.09448263, -0.06928985, -0.09312265, 0.14440894, 0.08974391, -0.09490295, 0.04175827, 0.049026787, 0.08526021, 0.019381817, -0.008592449, 0.041877653, -0.005859305, -0.081248745, 0.03902069, 0.03491576, -0.03617859, -0.033976585, -0.00999238, -0.05633418, 0.05554716, 0.036273472, 0.048386544, 0.10481794, 0.008222657, -0.080294184, -0.038824856, -0.07187885, 0.06486568, 0.0151034845, -0.08941196, 0.008047007, 0.091869175, 0.015409107, -0.04965801, 0.1101994, -0.02764076, -0.102058, 0.001913172, 0.03552609, -0.016579144, -0.05195965, -0.015098044, -0.015777972, 0.054000307, 0.035007413, -0.066097565, 0.043994278, -0.10213548, -0.030852294, 0.034249328, 0.029615298, 0.033908628, -0.04638874, 0.017797485, 0.012635723, 0.09671653, 0.11738329, 0.08195332, 0.04505776, 0.017462099, -0.0802948, 0.03872657, -0.04017626, -0.11312183, -0.022070264, 0.0380409, -0.005916631, 0.08442246, -0.13245142, -0.057332907, 0.06038745, -0.030960644, 0.06667903, -0.13273874, 0.095016375, -0.0018064827, -0.106948584, 0.031489834, 0.013630226, 0.023641279, -0.14082307, -0.116308585, -0.06380052, 0.056584056, -0.09115776, 0.028326247},
{0.09033387, -0.046134476, -0.08365259, -0.035139732, -0.10586937, 0.07643357, -0.029290196, 0.013748266, -0.03696213, -0.05146584, -0.043002352, -0.010823651, 0.09440683, 0.03599308, -0.054111872, 0.032109916, -0.0015078437, 0.05586889, 0.08986941, 0.036978513, 0.07024508, 0.06642653, -0.059545495, -0.026350442, -0.024914436, 0.06827462, -0.10616203, -0.08902743, 0.053024657, -0.1097493, -0.03941379, -0.08131618, 0.058584537, 0.01925065, -0.036003467, 0.08214793, -0.040534753, 0.040839206, 0.050325826, 0.052513245, 0.03582432, -0.021120995, 0.01416299, -0.013044906, -0.046694394, -0.07428102, 0.06590764, 0.11184411, 0.0004961118, -0.0031120721, 0.0052773827, 0.049442276, 0.055998404, 0.04443258, -0.06909676, 0.10127823, 0.06524344, 0.08720568, -0.029163945, -0.061408307, 0.07814961, -0.04833188, 0.097963355, 0.065151155, -0.10317821, -0.01608619, -0.11815863, -0.030119866, -0.011229098, -0.03822567, -0.03492498, -0.018439306, -0.059760444, 0.07138117, 0.0026773494, -0.028656943, -0.009281863, -0.09374794, 0.09228273, 0.014138793, -0.06003867, 0.06904566, 0.086887635, 0.09159204, 0.07961721, -0.047985084, -0.016283074, -0.10075286, -0.024931567, -0.050525244, -0.008794245, 0.06982335, -0.097913235, 0.009577867, 0.06987405, 0.070793524, 0.006135173, 0.0884416, 0.095760174, -0.1060283, -0.05915886, 0.0011025174, -0.011738883, -0.0011409819, 0.08351433, 0.028493654, -0.03444856, 0.08495149, 0.07215968, 0.052175626, 0.04752125, -0.040073797, -0.045722514, -0.007290148, -0.03820911, 0.09517297, -0.03790193, 0.042274803, 0.014392667, -0.0074106753, -0.07074781, -0.024611983, -0.023740234, -0.030625153, -0.09458169, 0.07928254, 0.009702924, 0.055243533},
{-0.10381473, -0.021909144, 0.047164988, 0.025858901, -0.06196847, 0.103255406, -0.11112083, -0.06809877, 0.07453972, -0.10640436, 0.11541831, -0.076559916, -0.044011075, -0.006180627, -0.015380866, 0.018989798, 0.063796245, 0.03050674, -0.080254, 0.02870384, -0.0533876, -0.050626423, -0.06901126, -0.09224467, 0.023437398, -0.020192811, 0.07159781, 0.0713029, 0.031192144, -0.051021088, 0.06999822, -0.06934398, -0.09074613, 0.020081503, -0.046217598, -0.012972134, 0.03557927, -0.0084113525, -0.046966653, 0.027365005, 0.029139934, 0.09661679, 0.10605402, 0.08735436, 0.05384185, 0.06790511, -0.049156334, -0.021613713, -0.0690245, 0.09399763, -0.044693984, -0.10411462, 0.039193418, 0.05137795, 0.02836202, 0.0477674, 0.06348418, 0.06379834, -0.068997554, 0.09512065, -0.111103095, -0.01818685, 0.07012412, 0.059890673, 0.086281374, 0.005505186, 0.024225943, -0.10387414, 0.09180742, -0.043483056, 0.030314397, 0.060342748, -0.07890615, -0.054227833, -0.0084144, 0.034838215, -0.02215018, 0.021559164, 0.06371921, -0.05470718, -0.041715413, -0.05725656, 0.04507512, -0.07482016, 0.07111121, 0.0434196, 0.093107134, -0.10356965, 0.055420365, -0.022868808, -0.05501478, 0.05376468, -0.009014852, -0.06546585, -0.032426734, 0.0065671355, -0.05116459, 0.07557216, 0.017193371, 0.03644149, -0.050767854, -0.081194796, 0.06780841, -0.09589548, 0.03992358, -0.053353067, -0.06264229, -0.01649306, 0.008721525, -0.064488396, -0.032522496, 0.09130807, -0.03810955, -0.080672145, -0.06920554, 0.055237398, 0.07478394, -0.049601104, 0.0043816073, 0.056744844, 0.06977336, 0.05843633, 0.04752315, -0.04177184, 0.0465589, -0.08065138, -0.039936654, -0.030750375},
{0.09407209, -0.058677386, 0.07219846, -0.044293948, 0.054355234, -0.0044579282, 0.028083183, -0.10359477, -0.09056732, -0.008252136, 0.10753196, 0.018708281, -0.090538755, 0.036684524, -0.011429993, 0.053488288, 0.049284354, -0.06908333, -0.1251029, 0.06763338, 0.07689346, -0.008628309, -0.025588043, 0.06520742, -0.09291027, 0.028488664, -0.09009761, -0.03211989, -0.035734866, -0.06697444, 0.05727026, -0.011374793, -0.038864773, 0.012221156, -0.006908021, -0.09036904, -0.060588267, -0.008141741, -0.057093456, 0.051230308, -0.009663743, 0.054436862, 0.039500214, -0.056774274, 0.100999646, 0.009211764, -0.018677346, 0.096149206, -0.04817133, -0.082935944, -0.054868527, 0.059661195, -0.060935512, 0.006015676, -0.08428201, -0.08210099, -0.03753617, 0.049416944, 0.060265724, -0.06616295, 0.05925161, 0.016179733, -0.02298587, 0.0033255145, 0.060929894, -0.0038362136, -0.07759859, -0.035219915, 0.07244298, 0.05990032, -0.090381205, -0.09988955, -0.081327125, -0.053474654, 0.009951995, -0.06929991, 0.07751763, -0.08627251, 0.0050875535, 0.06880502, 0.050774988, -0.05834526, 0.10491527, -0.084797144, 0.09982239, -0.019228738, 0.104272045, 0.05960712, -0.072500706, 0.037376024, 0.04070395, 0.11624432, 0.065125436, 0.037544437, 0.049181025, -0.10545986, 0.09816882, 0.12250021, 0.01895407, 0.03709957, -0.009384118, -0.078489855, -0.08307704, -0.00089508295, -0.04254191, -0.03240029, 0.06422216, -0.055548962, 0.10494021, -0.028002573, -0.06361953, 0.052053705, -0.10505858, -0.08094813, -0.08368981, 0.046609875, -0.09778084, -0.03414698, -0.040926836, 0.030562863, -0.061513748, -0.061282713, -0.032654397, -0.042925347, 0.0010793954, 0.018803997, -0.061371755, 0.05877876},
{0.010557576, -0.030961545, 0.070584185, -0.026593737, -0.046161134, -0.09164908, -0.035726316, -0.088244975, 0.095421776, -0.00036438555, 0.04334734, 0.06731507, -0.038067877, -0.050446425, -0.014383524, 0.008837856, -0.018683815, 0.0697376, -0.07530576, 0.096577436, 0.011164051, -0.11391482, 0.08770004, 0.050908394, -0.105594695, -0.10186812, -0.082363054, 0.014964705, -0.051812407, -0.07731043, -0.048374116, 0.0418158, 0.051872052, -0.00199478, 0.10095004, 0.036824543, 0.0938153, 0.07642423, 0.040994268, -0.103560306, 0.01781783, -0.08207229, -0.09535154, -0.032473274, -0.077559926, -0.10579378, 0.0142109245, 0.09179688, 0.042696014, -0.050639033, 0.069721095, 0.101450264, 0.034026008, 0.0249553, -0.069450006, -0.04060097, 0.06431092, -0.060010027, -0.054101486, 0.016232958, -0.066655785, -0.08138922, 0.018252876, -0.00122495, -0.0067257285, -0.01855036, -0.05417876, 0.037688166, 0.050206102, 0.00418044, -0.04481375, -0.07320237, 0.09570664, 0.05934278, -0.030362958, -0.06337293, 0.053368554, -0.10605367, 0.035078924, -0.013896957, 0.11192803, -0.067438856, -0.094768986, 0.05666297, -0.07653147, 0.07757049, -0.006679587, -0.05367597, 0.029008701, 0.060815882, -0.09575925, -0.0319794, 0.059658676, -0.006404139, 0.059180368, -0.032799676, 0.05064085, 0.06567313, 0.05279394, -0.05255319, -0.08522655, -0.060579855, -0.070421636, -0.0077321827, 0.059221476, 0.022943445, 0.04355716, -0.03610854, -0.016342215, -0.09859754, 0.007249183, 0.092093036, -0.037460215, -0.09467363, 0.086579695, -0.021643633, 0.023833496, 0.08450979, -0.01424187, 0.026921451, -0.08426302, 0.043382395, -0.0028262343, 0.046714332, -0.02304434, 0.06874006, 0.040294856, 0.08713194},
{0.029446531, 0.0305635, 0.035242185, 0.041388188, 0.011435182, -0.090989545, -0.0024609116, 0.03889747, -0.021797381, 0.05770372, -0.06692532, 0.034929987, -0.015187331, 0.10151711, -0.008834423, 0.05281164, -0.059025124, -0.0052952208, 0.07299105, -0.034685336, -0.06872704, 0.075641476, -0.07301021, -0.019411666, 0.09263684, -0.07775255, 0.050756082, 0.00695847, -0.0369685, 0.09379548, 0.03801118, -0.044403445, 0.0013183069, 0.10570801, 0.07068992, 0.06400448, 0.06742344, 0.053310495, -0.002804152, -0.044780944, -0.06706155, -0.06957843, 0.0052181873, 0.027445657, -0.026137419, 0.049448706, 0.060187906, -0.08479099, 0.07021466, -0.0051107337, 0.042509783, -0.002897136, 0.05255354, 0.022658529, 0.0015547425, -0.015711576, 0.10166057, -0.061480567, 0.07477498, 0.022824524, -0.0011165634, 0.052172042, 0.09049794, 0.043167397, -0.03003493, 0.099902816, -0.07774027, 0.014655925, -0.0823989, 0.072719865, -0.06394253, 0.06730738, -0.10164464, 0.03720903, -0.036413405, 0.10465472, 0.036158904, -0.029585145, -0.07794621, 0.058495518, -0.057334907, -0.0486893, -0.0201224, -0.0013486743, -0.067701995, 0.06848553, -0.01517065, -0.007888767, 0.07703653, 0.08421653, 0.011090488, -0.03894195, -0.05530338, -0.067226715, -0.01534008, 0.033389628, 0.025819227, -0.025697963, -0.07348972, -0.0035190284, 0.08190052, 0.044040594, 0.06890039, -0.027614556, 0.12080402, -0.015402924, 0.0013254212, 0.060290713, -0.03667532, 0.017649494, -0.025605863, 0.10616927, -0.03088077, 0.082961805, -0.031981423, 0.13503443, 0.07689032, 0.0044065416, -0.11156603, -0.087672666, 0.056598343, 0.036642358, 0.03797216, 0.09384139, 0.057320282, -0.044225212, 0.026951302, -0.07612495},
{0.047563847, -0.08677183, 0.040908232, 0.03000413, 0.031230915, -0.027150013, 0.030200798, 0.016425759, 0.062004387, -0.062496398, -0.029166186, 0.07354016, 0.038761675, 0.035562772, 0.07552137, 0.03229567, 0.039925817, 0.085461125, -0.03204463, 0.028383754, 0.019974291, 0.10688055, 0.115693375, 0.08034559, -0.07646973, 0.039791487, 0.08256694, 0.08239192, -0.061738715, 0.07576028, 0.08437215, -0.062452223, 0.08026358, -0.0163491, 0.1352951, -0.086348966, 0.06395934, 0.047062222, -0.082179345, -0.08661232, -0.08970547, -0.062173776, -0.13095565, 0.03296348, -0.06090875, -0.047639787, -0.01667913, 0.028532106, -0.050634094, 0.1336911, -0.010823155, -0.070099264, 0.05859339, -0.028387833, -0.06191535, -0.07598242, -0.11708742, 0.07947144, 0.038165938, -0.080176175, -0.07963974, -0.07764332, -0.01830142, 0.05565439, -0.08263758, -0.08184372, -0.05939961, -0.06185021, -0.04198228, 0.023845624, 0.07309708, 0.03171659, 1.6011298e-05, -0.014802582, 0.037596352, -0.04109177, 0.032327224, -0.09261741, 0.025195034, 0.06612727, 0.074437246, -0.09016816, -0.035446938, -0.078963585, 0.082783334, -0.0637195, -0.017288266, -0.044568636, -0.018331751, -0.10200799, 0.116248876, 0.10643755, -0.0038842037, -0.015405871, -0.004289154, -0.043449663, -0.016697198, 0.006421401, -0.10122736, 0.09479943, -0.01047612, 0.022394987, 0.07744013, 0.06252341, -0.012617585, 0.06212546, 0.10772698, -0.08829081, 0.02809102, 0.043546543, -0.027433356, 0.102322295, -0.09345865, -0.0384616, 0.007022634, 0.14533712, 0.015270641, 0.0066096857, -0.04756953, -0.07592682, -0.0061670383, 0.08948665, -0.099145055, 0.07574468, 0.036548793, -0.09137276, 0.11902565, 0.08263957},
{-0.045101874, -0.02081541, 0.020644978, 0.07834529, -0.021652488, 0.094796866, -0.04422572, -0.026514933, 0.0076745674, -0.023785383, 0.076405324, 0.11539163, 0.014357724, 0.07110494, 0.109370075, 0.08915752, 0.049771447, 0.057547916, -0.024530908, 0.027930206, -0.058523994, -0.011523242, -0.08321879, -0.078423694, 0.043231644, -0.11689035, -0.044463493, 0.011915772, -0.09975264, 0.010499745, 0.101549506, 0.029389918, -0.09906223, -0.021101426, 0.09662069, -0.042003024, -0.08499894, 0.1175933, 0.016569212, 0.053654086, 0.017029207, -0.081376664, -0.13353232, -0.058921415, -0.07667667, 0.007912034, -0.02988144, -0.10894782, 0.010977365, -0.05733686, 0.10441401, -0.09064636, 0.080044426, -0.0365178, -0.01952447, -0.003680567, 0.015244085, -0.065141395, -0.026662989, 0.035101585, -0.0060584424, -0.11013449, 0.04203906, -0.09315428, 0.0666915, 0.09204025, -0.025723685, 0.068221286, -0.043246955, -0.09468238, -0.08009457, -0.055080988, 0.023161247, 0.15180176, 0.066850156, -0.06182562, 0.04373999, -0.07446944, 0.017413314, -0.08264806, 0.0664139, -0.10618619, 0.1343686, -0.053055033, 0.033286773, -0.03954842, 0.097089894, 0.06575207, 0.03995389, -0.10108889, 0.10077506, -0.0073750387, -0.009359844, 0.10772152, 0.029331025, 0.10274777, -0.044091173, -0.011595697, -0.020404214, 0.07895185, -0.060508117, -0.099998035, -0.044645745, -0.076700926, -0.07439047, -0.033012163, -0.009671703, 0.04204475, -0.060734876, 0.045722317, -0.015318828, 0.018884003, -0.069103464, 0.08688098, 0.09412323, 0.143746, 0.01004813, 0.08906244, -0.028902434, -0.06717667, -0.06827885, 0.0067591607, -0.020139515, 0.007884529, -0.10317142, -0.118876584, 0.054237362, -0.017815238},
{0.086251006, -0.12333184, 0.033567686, -0.11263593, 0.055014037, -0.09992261, -0.009564746, 0.019787222, -0.031020314, -0.09450136, 0.12211913, -0.11337134, 0.01673002, 0.07491171, -0.037629478, 0.09842065, 0.0909709, -0.0037316182, 0.08417751, 0.050876733, -0.032499004, 0.05063971, 0.046234645, 0.102014236, -0.014627522, -0.14237185, -0.055170514, -0.054231744, 0.041492287, 0.015706891, 0.050085954, 0.0064580617, 0.10017399, -0.06385343, 0.0015632681, -0.0070693986, 0.08768252, -0.062259108, 0.10390275, -0.069446646, 0.03338433, 0.010116644, -0.005073085, -0.1032512, -0.060174465, -0.012995632, -0.105447635, 0.04035529, -0.080327615, 0.012023897, 0.06538051, -0.0031745508, 0.088915385, -0.047710773, -0.098291926, 0.14455989, -0.1869382, -0.016766712, -0.12209067, -0.02225238, -0.10212773, 0.07933349, -0.10732737, -0.08745778, -0.06471072, 0.11144927, -0.031168059, 0.06860632, 0.038307033, -0.041986387, -0.050193015, 0.053360313, -0.045082483, -0.048145972, 0.16404787, 0.006082735, 0.04602402, -0.04189901, -0.0013597875, 0.011538425, 0.10940016, 0.057678714, 9.382737e-05, -0.0010845136, -0.018834168, -0.058658216, 0.091622874, -0.08091421, 0.06769202, -0.011593086, -0.081849076, 0.032480612, -0.016982667, 0.07683888, -0.093043074, -0.104399964, 0.07280323, -0.030603178, -0.13668135, 0.056842104, 0.07250744, -0.024318961, 0.022464382, 0.01499629, -0.07711502, -0.059308857, -0.079677835, -0.059574634, -0.08442219, 0.070468485, 0.045556694, -0.023666434, 0.1452262, 0.052836914, 0.0950546, 0.05372785, 0.007956618, -7.979572e-06, 0.04810442, -0.03166254, 0.027471187, 0.037124038, -0.014857984, -0.14893954, 0.090266734, -0.088815786, 0.16176735, 0.002380366},
{-0.12108464, 0.010289249, -0.09771301, -0.1209353, -0.04222105, 0.0692741, 0.032883838, 0.05714199, -0.08595743, 0.027132243, 0.09567302, 0.048899468, 0.13680747, 0.052596312, -0.07941143, 0.20262107, 0.026900832, 0.016790345, -0.050288577, 0.14003769, -0.0778127, -0.13342616, 0.0032368938, 0.0158203, 0.02763262, -0.055910558, -0.10274495, -0.20731033, 0.017380895, -0.11034678, -0.0008586297, -0.08955426, -0.042469773, 0.015603755, 0.114671655, 0.05267734, -0.057753555, 0.060610246, -0.06657894, -0.03876597, -0.024493463, 0.1011513, 0.08574671, -0.08108427, 0.02547492, 0.005102871, 0.057938233, 0.17382711, -0.057046857, -0.04825897, -0.07813383, -0.05571999, 0.1418654, -0.04481484, 0.05142799, 0.057455704, -0.12671204, 0.037190452, -0.06757921, -0.08103507, -0.027475297, -0.048980024, -0.1572526, -0.065369315, -0.066341564, -0.038178366, 0.101168334, -0.0670317, -0.034700558, 0.078676, 0.036688868, -0.013819621, -0.104544245, -0.009790943, -0.022864778, 0.070044935, 0.037074383, 0.06995197, -0.0014329503, 0.053890042, 0.005085573, 0.09491855, 0.036304865, -0.0668667, 0.03182622, 0.016887821, 0.1974652, -0.026465347, 0.027069665, 0.0071921865, -0.06847292, -0.029937778, -0.05379217, 0.098237336, 0.03566013, -0.05273672, -0.03167153, 0.067859046, -0.10170182, -0.078363374, -0.0760452, 0.21114889, -0.019763377, -0.014368914, 0.13982481, -0.059748415, -0.08224822, 0.004365593, 0.07174249, 0.09670752, 0.0937475, -0.04361794, 0.08656288, 0.06983018, 0.06999794, 0.04289208, -0.10077587, -0.054656122, -0.0032092244, 0.037184864, 0.039535977, 0.20826685, 0.027994074, -0.067249365, 0.03898202, -0.06305782, -0.0106099155, 0.1868985},
{-0.09236661, 0.11536347, -0.09246739, -0.1188984, -0.05464919, 0.001539439, -0.03748184, -0.056850854, 0.022277758, -1.1436641e-05, -0.13995895, 0.092797644, 0.06418397, 0.025661478, -0.06354149, -0.012537975, 0.049068384, 0.078713745, 0.09116346, 0.025176674, 0.06019358, -0.00065678544, -0.077606924, 0.032584712, 0.040553812, 0.10910168, -0.041403454, 0.0065952605, -0.050427232, 0.020254733, 0.01164509, -0.08426165, 0.08751197, 0.0166512, 0.17806405, 0.07246719, 0.017951237, 0.085761175, 0.037074484, -0.112861775, -0.08440009, -0.0062948093, -0.0039061506, -0.1040453, 0.07104817, -0.08690999, 0.09972678, -0.10437038, 0.10602139, -0.029258274, 0.053679544, -0.10218429, -0.011626241, 0.06886541, -0.06798053, -0.14547302, 0.111753255, -0.0043758154, 0.03289431, 0.0075093773, -0.071449466, 0.016069163, -0.067319915, 0.059240267, 0.07047397, -0.07229618, -0.06723071, 0.028540239, 0.0061004385, 0.046717394, -0.067628846, 0.010938556, 0.011230499, 0.07574011, 0.077314354, 0.033020105, -0.077297844, 0.024578094, -0.12366498, -0.055746287, 0.08406921, -0.057330392, 0.08443272, 0.03754956, -0.15531683, 0.053390164, 0.03557255, 0.08135834, -0.07655841, -0.0054700733, -0.036447138, 0.027408868, -0.09140631, 0.069836654, 0.0014251273, -0.04614048, -0.010254063, -0.089834236, -0.005403641, 8.814037e-05, 0.07032226, 0.20388237, -0.112483546, 0.07554419, -0.049562573, 0.046746682, -0.057934806, -0.105263025, 0.09316942, 0.06068734, -0.021916525, -0.0581275, 0.046755727, -0.031056631, 0.08665678, 0.062261682, -0.09767323, -0.05952065, 0.07885519, 0.049559757, -0.058189888, 0.053901978, -0.061174367, 0.13084635, 0.032606825, 0.12037099, -0.062034063, 0.04999884},
{0.06309203, 0.116897136, -0.1194339, 0.0033396035, 0.01565627, 0.073671654, -0.10398156, 0.0010815859, 0.10058242, 0.03923729, 0.09352798, -0.066901244, -0.06844474, -0.057157386, -0.05137167, -0.02693413, -0.09479569, -0.10831172, -0.081063814, 0.07237738, 0.0747125, -0.1225217, 0.078480564, -0.119558424, -0.08110678, -0.043853067, 0.025556408, 0.031663947, -0.09294373, 0.08995953, 0.009516802, 0.07571777, -0.08104381, -0.08381778, 0.14535974, 0.0040172497, 0.0138226, 0.076521754, 0.07299126, -0.054690175, 0.02889811, -0.062151868, 0.020164968, 0.0963067, 0.09803683, -0.017105058, -0.0982551, -0.05558751, 0.09346667, 0.05171467, 0.095749795, -0.0156034455, 0.054072432, -0.0343602, -0.015041381, 0.061457556, 0.024094954, -0.07372657, -0.052223336, -0.03360671, -0.04449525, 0.07015605, -0.06365541, 0.100622505, -0.01821626, -0.057866666, -0.06882619, 0.016485892, -0.007222179, -0.028256277, 0.032324404, 0.01503881, -0.04943171, -0.026686942, 0.027121121, 0.06761521, -0.02957613, 0.00435327, -0.0977664, 0.01823702, 0.09786929, 0.08378166, 0.060353525, 0.08570997, 0.00016648407, -0.01214013, 0.13534337, -0.108180575, -0.024934698, 0.014359139, -0.11526388, 0.0047595017, 0.057187587, 0.07801328, 0.015527098, 0.098495945, -0.022112839, -0.09020128, -0.13750064, 0.07367045, -0.0004901141, 0.0997683, -0.013002305, -0.03752531, 0.04875481, -0.069365755, 0.0029907317, 0.026012957, 0.07996032, -0.09686369, -0.047789864, -0.005142167, -0.027935004, 0.0041591916, 0.06296529, 0.054102436, -0.025274852, 0.03611256, 0.09505717, 0.105728865, -0.108029395, 0.063821375, 0.053360347, -0.022347284, 0.051043734, 0.13624196, -0.077690974, 0.08587519},
{0.05284435, -0.0129715875, 0.093089074, -0.042851392, 0.017124819, -0.049900018, 0.08039474, -0.04874417, 0.06571621, 0.083754286, -0.09892044, 0.07299299, -0.08604935, 0.014966072, -0.13327621, -0.117355816, -0.11103916, 0.00060856633, 0.044961095, -0.107665055, -0.034264848, -0.044496976, 0.011444822, 0.16639426, 0.031577695, 0.05723035, -0.021285962, 0.02888233, 0.06076258, 0.062038187, 0.047366805, 0.05139036, -0.070702076, -0.1019173, -0.10349864, -0.018632395, -0.06492656, -0.07847265, 0.07358284, 0.09422418, 0.15062504, -4.412234e-05, -0.038148083, 0.07560472, -0.0063164043, -0.029107196, -0.044140838, -0.017275622, -0.045583297, -0.11098394, 0.05359323, -0.07284595, 0.008355607, -0.054921906, -0.028137483, 0.01080207, 0.041346483, -0.034388326, 0.07353423, 0.0833312, -0.03454186, -0.070313916, -0.088022545, 0.055981517, 0.07842143, -0.050333478, 0.03763368, -0.020723045, 0.09028211, 0.06409245, -0.09667018, -0.10708082, 0.08638728, -0.06779285, 0.0042926655, -0.04072299, 0.044246797, -0.099115826, -0.061933964, 0.05251016, -0.01849448, 0.098874584, 0.015547508, 0.09066066, 0.13318406, -0.08812284, -0.09418804, -0.08975175, 0.0155197, -0.030258724, -0.09660142, -0.044866934, -0.09911338, 0.02607879, -0.016073385, -0.06322135, -0.011084162, 0.0020446093, -0.015815238, 0.08535068, 0.07280089, -0.077881455, -0.005109074, -0.04425094, 0.110427305, -0.10838482, -0.034512732, -0.011270452, 0.08786832, 0.0063848286, 0.020820571, 0.03232217, 0.0675766, 0.028510477, 0.09757757, -0.06711159, -0.07171971, -0.03325136, 0.057840258, -0.10330219, 0.011647822, -0.1353318, 0.026867883, -0.08249423, -0.0354634, 0.07893231, -0.061742995, 0.043466505},
{0.16287577, 0.043362457, 0.097321086, 0.11185199, -0.053977676, -0.011915706, -0.020683356, 0.007888161, -0.08427128, 0.064731866, 0.065513074, -0.12455741, 0.01252346, -0.14748833, -0.036907915, 0.0022409412, -0.04188732, -0.08784665, -0.054306936, -0.17068604, -0.104249984, -0.0837299, -0.0829123, 0.16582395, -0.04066146, -0.08686395, -0.028638558, 0.17514972, 0.025438908, 0.0006542185, 0.05602766, -0.04384257, 0.03758775, -0.024182685, -0.047691833, -0.052642867, -0.036474906, -0.114581384, 0.10889411, 0.09742249, 0.08398466, -0.0048823953, 0.0864873, -0.04595107, 0.006107538, -0.032694645, -0.03188856, -0.030170493, 0.060128212, -0.010397612, -0.06603571, -0.08427459, -0.14423953, -0.09406514, -0.042576358, 0.19806114, 0.0017675264, 0.0741595, 0.0114572495, 0.022790153, -0.0015285726, -0.07434413, -0.08108045, 0.02888155, 0.046496525, -0.016891314, 0.07484334, -0.09830862, 0.111793816, -0.044032272, -0.012950332, 0.08436514, -0.022783704, -0.14354602, 0.09824974, 0.03787341, -0.008448303, 0.019358426, -0.0373159, 0.06994349, -0.06960342, 0.08239588, 0.027023736, 0.04062902, 0.039095692, 0.04751062, 0.024534887, -0.06276655, 0.08092733, 0.027353222, 0.06868668, -0.14127669, -0.03437361, -0.076629356, 0.062976606, 0.044516116, 0.061028168, -0.09551432, -0.016965544, 0.04210125, 0.097070515, -0.18475318, 0.025012203, -0.01901982, -0.038690913, -0.08554448, 0.061167847, -0.021009132, -0.012197926, -0.0148176635, 0.06611359, 0.025891125, 0.15806973, -0.016504552, -0.045281563, -0.04235864, 0.041062232, 0.06848495, 0.096894205, -0.044348713, 0.086142965, -0.080643624, 0.014654604, 0.079433024, -0.04379102, 0.054833207, -0.022857016, 0.03584787},
{0.05721935, 0.01871493, 0.14858554, -0.009913573, -0.07659652, -0.032758474, 0.013459222, 0.014896333, -0.08938908, -0.1016974, -0.079340614, -0.09871091, -0.16057238, 0.00698976, 0.05584635, 0.019325173, 0.069349386, 0.0027565262, 0.02163489, -0.028957548, 0.008030779, 0.022604823, -0.08431905, 0.10892108, 0.12979427, -0.046893064, 0.06960967, -0.020424325, 0.14614941, -0.05016564, 0.09495841, -0.07831229, -0.10307738, -0.10896625, 0.03189317, 0.07165415, 0.0006849446, -0.05991872, -0.041721873, 0.042278916, 0.107117586, -0.08164784, -0.013481704, -0.087805346, 0.07585801, 0.016403237, -0.030654408, -0.089015484, -0.007377282, -0.015506734, -0.11351342, 0.08089276, 0.013086639, 0.09457568, -0.066434965, 0.12517488, 0.023356067, 0.0914702, 0.0005489632, -0.048314117, 0.031753562, -0.0010124904, 0.00993911, -0.08868281, -0.03795389, -0.07016963, 0.028612815, -0.07750316, 0.07923376, -0.035047937, 0.08816051, 0.0033028289, 0.06409323, -0.06918157, 0.0101124775, -0.06513159, 0.09436041, 0.03871742, -0.031099183, 0.08479095, -0.052644633, -0.10337821, -0.13772179, -0.06970998, -0.0184437, 0.09690466, -0.09356601, 0.050992217, 0.03324228, -0.10698505, 0.007526719, -0.014838901, -0.055260174, 0.024050111, -0.0055827834, -0.016282849, 0.018961206, -0.013354009, 0.09104959, -0.0842767, 0.0521684, -0.15442471, -0.092043765, 0.032396212, -0.061102767, 0.020453848, -0.058258884, -0.02642401, 0.030070249, -0.05827825, 0.054529306, -0.035714045, 0.12794845, 0.001827067, 0.008100174, -0.033232126, -0.09637804, -0.027606629, 0.015827848, -0.025012515, 0.0042657033, -0.10266779, 0.03144095, 0.0728256, -0.0006576553, 0.056061964, 0.08527912, -0.019023461},
{-0.088770546, -0.037177857, 0.08621885, 0.055390615, -0.08362562, 0.0316661, 0.07259972, -0.017198011, 0.09635374, 0.0704408, -0.091176555, -0.05938835, -0.11211534, -0.08409507, 0.07852559, 0.0013107617, -0.057392925, -0.0821414, -0.055301044, -0.12987427, -0.102213226, -0.04263382, -0.036581937, -0.03638375, 0.008936528, 0.09890635, 0.063546315, -0.03768592, 0.11257968, -0.077384375, 0.16710278, 0.04932552, 0.07419996, -0.09303457, -0.111465104, 0.04358572, -0.0055391043, -0.091767736, -0.07350445, 0.1034744, 0.119685784, 0.012514293, -0.06934431, 0.06482574, 0.05635396, 0.017710395, 0.042468145, -0.08156771, 0.04186973, 0.045293674, -0.08519322, -0.02333507, 0.05714966, 0.026075736, 0.050298452, 0.030145109, 0.1562031, -0.03171266, 0.09548072, -0.0930258, 0.0726996, -0.038168345, 0.029641904, 0.013469733, 0.018865347, 0.07132151, 0.07668108, 0.09569235, 0.031570505, -0.015774444, -0.038073357, -0.02665584, 0.03408222, 0.07337953, -0.10436336, -0.015164106, 0.10896039, 0.07050434, 0.010165724, -0.049763367, -0.07019344, 0.036423773, 0.07452478, 0.04858824, -0.06534315, 0.04143963, 0.00057980046, 0.06558156, 0.0864304, 0.09813745, 0.06154366, -0.11205319, 0.055425555, 0.00791261, 0.06601482, 0.005269699, 0.031648636, 0.12044031, 0.12855591, -0.09341805, -0.054224845, 0.07191381, -0.08428839, -0.09826107, 0.13709213, 0.0645854, -0.02991963, 0.07065201, 0.0046538957, -0.08462006, -0.13736701, -0.032736443, -0.022452056, -0.071504, 0.039561704, -0.017024044, -0.052303538, 0.0832507, -0.04293875, -0.10066304, -0.0612643, 0.064348616, 0.073587514, 0.030191278, 0.011030383, 0.15834485, -0.06889055, -0.036995184},
{-0.15615784, 0.06825084, 0.07442122, 0.09836053, -0.11107658, 0.048463076, -0.018989509, 0.07206844, -0.06851563, 0.042411715, -0.16887282, 0.15127131, -0.00052275835, 0.111235, -0.045889206, -0.07124765, 0.017169628, -0.08354205, -0.01881862, -0.14030068, 0.002158681, -0.123697326, -0.030359166, 0.060144875, 0.07924575, 0.11156406, 0.060336307, 0.14531222, 0.09764855, -0.038731623, 0.10357231, -0.05484654, 0.014120164, -0.00660166, -0.025540283, 0.049798146, 0.0457202, 0.10559245, -0.12625909, 0.12450105, 0.04690113, 0.059053972, 0.123153284, -0.008587348, -0.029544353, -0.017915394, 0.045874372, -0.08360907, 0.095087156, 0.055449717, -0.05997734, -0.04231786, 0.060637508, 0.06462845, 0.06691381, 0.09843082, 0.091006994, -0.052635387, -0.056823853, -0.090602875, -0.05513809, 0.013571584, 0.013730821, 0.029228106, 0.017717607, -0.065485135, 0.02888583, 0.10242772, 0.105998784, -0.1546613, -0.04140597, -0.077010244, -0.09428345, 0.05052598, 0.024125166, 0.03763264, 0.007776176, 0.004489854, -0.037640933, -0.02694981, -0.120456286, 0.08416559, -0.08463291, -0.010388577, 0.14291541, -0.09790593, 0.015375776, 0.09868622, -0.06411796, 0.079895094, 0.08967283, 0.022453526, -0.037900418, -0.15740123, -0.017996572, -0.03298056, -0.00085065514, 0.05508363, 0.11191195, 0.077228606, 0.0120547265, 0.10494394, 0.07841545, -0.10153075, -0.02001378, -0.039283574, 0.14265493, -0.033558976, 0.10747611, -0.07892329, 0.0059752217, 0.0177738, -0.1316525, -0.03637329, 0.013937987, -0.15905659, 0.038442515, -0.08144364, 0.06839749, -0.04683445, -0.09214719, -0.054144315, 0.05675921, -0.08486725, 0.057263955, 0.1298893, -0.1448174, -0.09462959},
{-0.13491957, -0.011724638, 0.06244489, 0.07638903, 0.023886995, 0.027201578, 0.007900484, 0.084582984, 0.09639998, 0.08371323, -0.025500821, 0.13096955, -0.04609654, -0.06702428, -0.12202015, -0.06585388, -0.038949944, -0.052429143, -0.06488548, -0.13970277, -0.08722044, -0.0084968135, 0.15220805, -0.062103134, -0.006212111, 0.14413223, -0.102332965, 0.14327607, 0.1137885, -0.112942144, 0.14747182, -0.05306481, -0.031618796, -0.108423896, -0.016183525, 0.10117715, -0.027077844, -0.12130134, -0.05556528, 0.11569336, 0.13917892, -0.085320614, -0.01582938, 0.056642, -0.026309328, -0.104668066, 0.039135993, 0.02869865, 0.08350684, 0.08124478, -0.0233683, 0.09704001, -0.019014658, 0.019393992, 0.042554155, 0.08490547, 0.092857145, 0.009081416, 0.07138148, 0.022957707, -0.032668196, 0.09207947, 0.04263331, 0.013765626, 0.09127067, -0.08284736, 0.030411815, -0.052265413, 0.04748093, -0.1501036, 0.09140693, -0.035606325, 0.097362146, 0.114762455, 0.04703724, 0.062015433, -0.06088992, -0.0096723065, -0.036344368, 0.13215499, -0.07071571, -0.017954454, 0.035171725, 0.061480783, 0.025162667, 0.085612394, 0.07311467, -0.051590033, 0.052110653, 0.03810774, 0.026456455, 0.08215005, 0.06552018, -0.14749692, -0.051389813, -0.025941432, 0.013254821, 0.100017965, 0.06381252, 0.0658253, 0.09164925, -0.07927432, -0.088270456, -0.058855068, 0.13330203, -0.14177921, 0.06827206, 0.09594049, 0.013683518, 0.03625064, -0.090449676, 0.046764016, 0.072892554, -0.087055266, 0.08800793, 0.018143103, 0.02831449, -0.0033982322, 0.015135537, 0.060841158, 0.01571322, 0.10678241, 0.036367964, -0.099680565, 0.0036187842, -0.024409618, -0.13607492, -0.087656535},
{-0.08386529, 0.03099793, 0.12537879, 0.05742259, -0.01794951, -0.08246038, -0.012054474, 0.013319276, -0.0112290755, 0.043585896, -0.15766503, -0.04752713, -0.049970005, -0.037012998, -0.07221361, 0.08803951, 0.06424729, 0.08983117, -0.10964992, -0.011926069, 0.034861892, -0.0551336, 0.075619675, -0.03719891, -0.054484133, 0.1178593, -0.025006745, -0.04222246, 0.031880435, -0.054253355, 0.1735495, -0.039922316, -0.09817993, -0.09484642, 0.019997664, -0.067106746, -0.021603247, 0.023941005, 0.0026011816, -0.01245669, -0.009924925, 0.06306809, 0.096308544, 0.022221345, 0.06127608, 0.01998972, -0.016433336, 0.16765426, 0.01717326, -0.13000365, 0.007562938, -0.07019654, 0.014628991, -0.051606927, -0.0065739974, 0.092684075, 0.14334954, -0.095010325, 0.09515223, -0.061568163, -0.006925174, 0.0027590296, 0.03137411, -0.058789674, -0.100896634, -0.064194925, -0.06359153, -0.099922106, 0.007396749, -0.071294345, -0.104125105, 0.068177074, -0.09257631, -0.043248467, 0.0072820443, -0.12830745, -0.058429915, -0.07972577, -0.048691105, 0.116517305, 0.040709052, -0.085947976, -0.10371277, -0.0032234492, 0.15222251, 0.012338309, 0.09955368, 0.058814805, 0.0799769, 0.06173214, -0.10845791, 0.0027681924, 0.045435473, -0.12425895, 0.059598662, 0.08427286, 0.026207253, 0.093200505, 0.13185899, 0.035659105, 0.0923755, 0.026233826, 0.041579, -0.014891654, 0.09978208, -0.1079947, 0.15870011, 0.0654174, 0.07022517, 0.084525965, -0.058544613, -0.07924959, 0.021190776, -0.07015566, 0.05885382, -0.11043435, 0.0061279293, -0.029430956, -0.066465914, -0.093426056, -0.026962824, 0.03884265, -0.0203718, 0.013984277, 0.023921564, 0.01588967, -0.12817149, -0.003019779},
{-0.106584266, 0.06294827, 0.014572663, -0.0065321713, 0.09190091, -0.04642638, 0.005949392, 0.08055358, 0.044374734, 0.04514724, 0.027215209, 0.13364258, -0.02601492, 0.043105066, -0.0981028, 0.10144881, -0.09291894, -0.04977341, -0.13207461, -0.0822463, 0.08572742, -0.105307296, 0.12334443, 0.124795675, 0.058666606, 0.07228792, -0.06261283, 0.09549761, 0.010593972, -0.062333826, -0.042181294, -0.10969531, 0.015095327, 0.048799716, -0.05635145, 0.063998945, 0.065865345, -0.099684075, -0.11371396, -0.0012567926, 0.001853267, 0.10317348, 0.03580917, -0.025572395, 0.011840811, 0.03634954, 0.045620576, 0.12797233, -0.0023521036, -0.07315787, -0.1565555, 0.1027967, -0.033329036, -0.073489405, -0.04688378, 0.09142045, 0.12844807, 0.013338819, 0.01837164, -0.07168257, -0.106347226, 0.052680254, 0.11671627, -0.043985628, -0.103445485, 0.0049092104, 0.035619553, -0.0632562, 0.00082514447, -0.13212152, -0.056298666, 0.033867184, 0.01802615, 0.02529523, -0.025468234, 0.010506919, 0.09441874, 0.008324392, -0.12239468, -0.046613052, 0.060228433, 0.040076748, 0.042852107, 0.04163086, 0.0025419132, 0.008253259, 0.0929074, -0.090936705, 0.017447744, 0.078496434, -0.0005846876, 0.05329706, 0.027505174, -0.06424868, 0.11599887, 0.06206265, -0.06415357, 0.075192, 0.076066256, 0.10555497, -0.0018333495, -0.009706953, -0.068406336, -0.0565572, 0.13383368, -0.04191839, -0.03266107, -0.0086279595, -0.05034287, -0.090212025, -0.12973142, 0.06311791, 0.090344585, -0.10887859, 0.029775023, -0.04963629, 0.06224604, 0.049375847, 0.0021423674, 0.0011248663, 0.03171835, 0.04470372, 0.04980907, 0.05924575, 0.015826896, 0.08860061, -0.038703527, -0.0694136},
{-0.028917816, 0.033747245, 0.111961246, 0.03873274, -0.061066147, -0.037876397, 0.07263944, -0.04884751, -0.016551085, -0.005742483, 0.029273149, 0.14266132, 0.0077171256, 0.07794353, -0.09052897, -0.048045073, 0.034083948, 0.005830013, 0.0070068217, -0.0069671655, 0.04478265, -0.1364879, -0.034251235, 0.1181175, -0.05976218, -0.04710677, -0.03247214, -0.046869844, 0.015153724, 0.08861565, 0.0607865, 0.010310892, 0.019990202, 0.011833771, 0.09928759, 0.023928784, 0.02265801, -0.114004575, 0.022633446, -0.066309564, 0.14206421, -0.010811299, -0.043526303, -0.10581744, 0.15172511, -0.07747673, -0.054797407, -0.04734649, 0.09145683, 0.045575082, -0.005543711, 0.018067323, -0.011328554, 0.048425216, 0.059736043, 0.10246759, -0.044574182, 0.07795881, -0.07232457, 0.04839426, 0.096998625, -0.02538728, 0.018361652, -0.06629914, 0.06758034, -0.056703147, -0.063490026, -0.051608752, 0.09688464, -0.13253118, 0.00096467475, 0.09488444, -0.021756284, 0.12109187, -0.043880574, -0.06534028, 0.0045248144, -0.06252487, -0.017769927, 0.0026098997, 0.023220943, -0.037915185, 0.023689188, -0.016718164, -0.037397005, -0.017345924, 0.086715765, -0.09011692, 0.043373976, -0.0046839546, 0.060703717, -0.03776066, -0.017061226, -0.034900825, 0.08373417, -0.016508333, 0.02074404, 0.13328312, 0.004062449, 0.10315363, 0.052810878, 0.0062831785, -0.03033579, -0.089684844, 0.11988209, -0.08962261, 0.1258467, -0.01328465, 0.021158598, -0.077590965, -0.12713414, 0.00844194, 0.07980978, 0.0064447853, 0.05542995, -0.05100086, -0.041196212, 0.034107834, -0.081300095, -0.046611503, -0.07585097, 0.10252251, 0.029895034, -0.008443466, -0.033767752, 0.09933388, 0.004343292, 0.07032017},
{0.0031656243, 0.033650517, 0.01937897, -0.060766004, 0.02233958, -0.08009059, 0.081034325, 0.10109109, -0.052186776, -0.016385123, 0.03277909, 0.049683675, -0.015021623, -0.071772076, 0.021094866, 0.061488423, 0.07860853, -0.0120354295, 0.025851771, 0.05260976, -0.10596415, -0.08753525, -0.009568669, -0.066694334, 0.036784712, 0.06917257, 0.011912614, 0.1125939, -0.0048584123, 0.010521205, 0.012156578, 0.054257885, 0.019209031, 0.051326703, 0.1152604, 0.09938644, -0.09414791, -0.068557285, -0.004823888, 0.036596898, 0.1141703, -0.08462517, -0.023390716, 0.053456236, -0.01618338, -0.087647445, 0.076392785, -0.046953347, 0.077751145, -0.0882267, -0.00428531, -0.058959704, 0.044383597, -0.047265932, 0.008623101, 0.07498787, 0.079486325, 0.060827896, -0.0294903, 0.098666556, -0.033592224, -0.0076824543, -0.045265082, -0.07460287, -0.10259693, 0.09305014, -0.01800926, 0.070029885, -0.031224582, 0.030472208, -0.049964175, -0.09170046, 0.022639543, 0.02502163, -0.023468584, 0.0131231705, 0.04240057, -0.022791281, 0.046509065, 0.10691135, -0.0013581957, 0.0009518117, 0.05431696, -0.059330013, 0.11024198, 0.086877145, 0.114583746, 0.0575074, 0.0036836965, 0.083138965, -0.07248517, 0.028199969, -0.05938831, 0.06684613, 0.098972425, 0.014868379, 0.09891456, -0.00577956, 0.092669696, -0.09357626, 0.08738637, -0.001154472, -0.104932666, -0.08817036, -0.06333066, 0.08675911, 0.00095954136, 0.081583306, -0.04037264, -0.025825033, -0.010713662, 0.0091561675, 0.025462452, 0.0846406, 0.02695924, 0.072014384, 0.081548065, 0.07796985, 0.051924292, 0.07389848, -0.03440499, 0.06477737, 0.08713141, 0.017223775, -0.0011005178, -0.026217764, 0.034533314, -0.06508477},
{0.10013539, 0.02655646, 0.078310475, 0.051426034, -0.11104584, 0.022350803, 0.013539357, -0.00041501224, 0.10332197, -0.0745327, 0.035297733, 0.084936775, 0.09709399, 0.0769289, -0.06377011, 0.012962331, 0.06201773, -0.04537285, -0.0899615, 0.031573128, -0.058842305, -0.065431185, 0.105633885, 0.056282327, 0.05825721, 0.05448911, -0.043771148, 0.029500222, -0.09459904, -0.0051912977, -0.02704498, 0.078876115, -0.003161804, -0.0570721, -0.045862872, 0.019929666, 0.0044177906, -0.0863263, 0.06483814, 0.018252358, 0.06431067, 0.03452176, 0.010978949, -0.007675045, -0.08361952, 0.08226368, 0.0924207, -0.03666, -0.08378176, 0.0034267781, -0.06122276, -0.042325564, -0.021059785, -0.07873566, 0.10112508, 0.036321837, -0.00032467576, 0.053135797, -0.03957849, -0.085570484, 0.024463845, 0.00680493, -0.011022754, -0.017542593, 0.10507268, -0.09150883, 0.022966348, 0.08672762, -0.07756684, -0.1139851, -0.01885735, 0.033266246, 0.03352551, -0.004155776, -0.08783133, 0.022967426, -0.11174154, -0.049307812, 0.05838303, 0.01240732, 0.087355636, 0.044563726, 0.036698725, 0.035230443, -0.06682802, 0.01355453, 0.058405805, 0.0016461352, -0.07120597, 0.015098695, -0.07449499, 0.11505642, -0.104339674, 0.08546322, -0.026520584, 0.09143782, -0.09851526, 0.09878707, 0.063528135, 0.021022812, -0.0057004467, -0.06451728, -0.08199359, 0.068149805, 0.11528846, 0.023040868, 0.046064287, -0.015509003, 0.008387213, 0.0123979235, 0.036433566, 0.014185458, 0.023032328, 0.0019021727, -0.057208043, -0.079576224, -0.017834963, -0.0037580132, -0.09523639, -0.093351714, 0.09901173, -0.039920736, -0.1010531, -0.02195812, 0.037411198, 0.06715048, -0.03133738, -0.08803848},
{-0.024051344, 0.05862514, -0.014766278, -0.0003249094, 0.0031715955, -0.0018032044, 0.06650349, -0.054980297, -0.044530027, 0.0038593411, 0.04160102, 0.089061156, -0.03883133, 0.06366218, 0.004194737, -0.040592726, -0.051588394, 0.028430989, 0.091717534, -0.09555677, -0.030021153, -0.09702839, -0.047911234, -0.09830528, -0.029885197, -0.08859822, -0.083198756, -0.07776533, 0.097911105, 0.04043866, 0.05527674, -0.05641234, -0.033148754, 0.095057935, -0.00135566, 0.09131083, 0.05850952, -0.08206871, -0.006105105, 0.068986185, 0.008142381, 0.08877802, -0.034526944, -0.10198909, -0.04066384, -0.09514499, 0.019886613, 0.0073365523, -0.054630835, 0.03555558, 0.046955843, -0.06073076, 0.033422604, 0.10059024, -0.07509868, -0.021537466, 0.046314184, -0.07090837, 0.010224486, -0.08272579, -0.10351631, -0.007361776, -0.011292074, 0.083258584, 0.035135284, -0.016766261, 0.02835487, 0.087909535, -0.046412133, -0.08142489, 0.09626995, -0.057420854, -0.029945284, 0.03296779, -0.06075561, 0.06761528, -0.018719656, 0.079160735, -0.024679678, -0.039344672, 0.07358831, -0.0575112, 0.0050546713, -0.0690573, 0.09130005, -0.051381774, 0.054355778, 0.057304785, 0.08925821, -0.07076303, -0.0873547, 0.09107015, -0.0227132, -0.08630175, -0.012809862, 0.057458535, 0.09178673, 0.045100648, 0.09078448, 0.035601094, 0.099444315, -0.07236781, 0.020585127, -0.018324733, 0.09262045, 0.009889677, 0.12167002, -0.07534572, 0.042222667, 0.060335435, -0.009177498, 0.029025093, 0.00078267773, 0.05294322, 0.08114576, 0.067161344, 0.053786904, 0.029096529, 0.05150464, 0.077271625, 0.03145686, -0.017554453, 0.054712713, -0.010473786, 0.054434493, 0.07778019, 0.072595574, 0.07182757},
{-0.003495941, -0.031029386, -0.055814587, 0.043510754, -0.0681153, 0.024011582, 0.043694045, -0.10483825, 0.029986918, 0.019117057, -0.011646908, -0.019665642, 0.045644913, 0.08048731, -0.04354844, 0.10589856, -0.08876523, 0.09108793, 0.039259844, -0.03375199, 0.032833293, -0.096857734, 0.12257784, -0.0404982, 0.025600467, 0.0054064863, -0.038957197, 0.066250235, -0.0005045046, 0.056413475, 0.03696798, 0.051147506, 0.034944814, 0.09684009, 0.014919565, -0.05855498, 0.07976099, -0.02506134, 0.067975394, -0.043310266, -0.012967672, 0.097312644, -0.050224237, -0.07943549, 0.074620664, -0.07347122, 0.04370725, 0.003603223, -0.093168035, -0.05953815, -0.023297299, 0.005563684, 0.029708767, -0.04501245, 0.016433135, 0.07695235, 0.0905909, 0.026868507, 0.045951486, 0.011190177, -0.073355205, -0.04452186, 0.120276146, -0.009342387, -0.10203004, -0.086647436, 0.050776634, 0.052139074, -0.030945603, 0.04760905, 0.0074438336, -0.012169433, -0.09285878, -0.006866352, 0.007654646, 0.03470684, -0.07236235, 0.068396434, 0.023812076, -0.05315366, 0.048868038, 0.06803177, -0.066060916, -0.114150405, 0.10806178, -0.024943503, 0.09187068, -0.050907604, -0.07316781, 0.06589358, -0.09449491, 0.0143798385, 0.010711618, -0.07142614, -0.080643296, 0.07481784, 0.0037036762, -0.033525333, -0.059769753, -0.06722927, 0.078371614, -0.043903016, -0.111597605, -0.03974589, 0.03413258, 0.09646929, 0.055157933, -0.09805478, -0.044813685, -0.010978036, 0.00110561, 0.036197707, -0.0554538, 0.059358224, -0.09629643, -0.06723712, 0.020656714, 0.036427006, 0.06972876, 0.0008626506, -0.027077463, 0.10575744, -0.10890594, 0.0008231502, -0.04763707, 0.03444554, 0.034186807, 0.013732603},
{0.061786033, 0.06712514, -0.048712466, 0.00343473, 0.0857981, 0.09144682, -0.005981875, 0.053465128, -0.008548833, 0.03950472, -0.033465847, -0.027220672, 0.12133448, 0.075072445, 0.09040136, 0.03609401, 0.043917354, -0.10314824, 0.08913371, 0.11340966, 0.024803272, -0.07623105, 0.09661582, 0.051812526, -0.042481016, 0.013079975, -0.055509057, -0.0242905, 0.011317571, 0.0023580834, 0.059377335, -0.01095233, -0.071136855, 0.017464291, 0.07669506, 0.07107788, 0.046765015, 0.10046328, -0.041598707, 0.01940771, -0.05332169, -0.020362496, 0.066289425, -0.08317671, 0.058256064, 0.047298603, -0.0029287562, 0.0040114466, 0.060766563, 0.12433186, 0.10875288, 0.08166164, -0.051707383, 0.0713243, 0.10277523, 0.10102679, 0.042215038, -0.059590034, -0.10819796, 0.026569106, 0.048201863, -0.076854214, 0.10675765, 0.025108084, -0.0040212125, 0.08001866, -0.10920445, -0.067348555, -0.11950406, -0.05882039, 0.087770596, 0.024302324, -0.09714487, 0.051123243, 0.011610369, -0.0053394684, -0.017793398, -0.0025157258, -0.010722776, 0.02967827, 0.10738407, -0.048932448, 0.045766693, -0.065268196, 0.0995259, -0.0462258, 0.09765116, 0.04702099, 0.024981909, -0.06101918, -0.034808706, 0.08032175, -0.056639522, -0.020258462, 0.04154802, 0.03681065, -0.04289017, 0.109697916, 0.087569416, 0.010990068, -0.059707377, 0.02459032, -0.10198632, -0.0591399, 0.058910836, 0.0703868, 0.026070442, 0.023310581, -0.057601653, 0.099177875, 0.027385607, -0.04116618, 0.037034914, -0.03517729, 0.037461087, -0.03713602, -0.052136935, 0.008143462, -0.032500573, 0.070234284, 0.08144535, -0.07105418, -0.108662635, 0.035311006, 0.10617904, -0.04597636, -0.060663354, -0.074901335},
{-0.036485106, 0.035530914, -0.075579755, -0.002504595, -0.08500474, -0.018634468, -0.05830606, -0.038403362, 0.035558254, -0.095833436, 0.01787859, 0.023059683, -0.045979176, -0.077995025, -0.054958154, -0.07230582, 0.01097631, -0.038484056, -0.05980335, 0.009879233, 0.05334155, 0.09440375, -0.08641557, -0.07379616, 0.027056178, -0.09460583, 0.031193633, -0.09244798, 0.01524576, 0.060436934, 0.014082301, 0.026804175, -0.013268199, 0.1045539, -0.030862454, 0.061718795, 0.08501761, 0.0405489, 0.09761824, 0.020685079, 0.037494346, -0.08894634, -0.069173984, -0.08784979, 0.07080986, -0.010943638, 0.07334125, -0.037645854, 0.019862399, 0.09782376, 0.0710336, 0.076821774, -0.062344268, -0.032331605, -0.027450249, 0.045292407, -0.0709132, 0.0487047, -0.05276362, 0.028167475, 0.06773306, -0.05502701, 0.12856206, -0.1020705, -0.0305501, 0.0575219, 0.013246385, -0.095602915, 0.04949077, -0.08011234, -0.04012024, -0.104207754, -0.07216326, 0.0138946315, -0.05447515, -0.034776196, -0.0077886134, -0.08491437, -0.05357211, -0.005394603, 0.13921568, -0.04671784, 0.02399114, -0.09776571, 0.04567307, -0.045168288, 0.08023475, 0.03131143, -0.04585421, 0.08252758, 0.017137488, -0.02602342, -0.076977745, 0.0945794, -0.0034376462, 0.013333663, -0.03475751, -0.08822173, 0.048504308, -0.04545741, 0.06665878, -0.05799863, 0.08329306, 0.07193719, -0.035895985, 0.09201952, 0.10193612, 0.03374136, 0.03832633, -0.070516795, 0.046818033, -0.0058070347, -0.07922385, 0.0052981474, -0.05799722, 0.008533947, -0.040310886, 0.08331856, -0.08475, -0.0016979575, 0.08472174, 0.051007472, -0.038208432, 0.097311296, -0.02670496, -0.13297808, 0.029790971, 0.007329518},
{-0.039963882, -0.03357014, 0.011658707, -0.12501311, -0.07817555, -0.04899614, -0.10261388, -0.085294284, 0.018961743, -0.040060654, 0.10273423, 0.037565015, 0.035944596, 0.06686755, 0.100268155, -0.09449204, 0.073212765, 0.054713, 0.015301291, -0.06797565, -0.09715927, 0.018286932, -0.08631732, 0.033846334, -0.11410213, -0.013990734, 0.08178669, 0.045956757, -0.115196906, -0.07973031, 0.09803468, 0.09670235, 0.04339344, 0.13599868, 0.1344281, -0.040504083, 0.008527279, -0.009346985, 0.073275596, 0.045965686, -0.041825756, -0.03362342, -0.08567518, -0.0072133313, -0.10741892, -0.05321148, 0.01882489, -0.07645565, -0.10502673, 0.05691333, 0.08747962, 0.07423662, 0.02346805, -0.008121369, -0.0057365075, -0.029039914, -0.04515456, -0.05112085, -0.07736418, -0.07353783, 0.075681075, 0.04973973, 0.1292271, 0.034558, 0.09339866, -0.05921044, -0.054819636, 0.021193385, -0.1478502, -0.065786, -0.079666905, 0.0915109, 0.09174657, 0.07948425, -0.022972742, 0.022951795, -0.1528312, -0.09815364, 0.09765588, -0.0013290093, 0.065503314, -0.017046995, 0.10945254, -0.07659337, -0.011131754, -0.092158735, 0.11564855, -0.031081485, 0.029236438, -0.019675387, 0.04993072, 0.095240854, 0.058770686, 0.04555141, -0.08714718, 0.055832893, 0.07712099, 0.100750186, 0.005725941, 0.07904458, -0.08357455, 0.003443027, 0.06427244, 0.0019076392, 0.0900686, 0.14590815, -0.08481053, -0.0057044085, 0.0399893, -0.023534859, -0.042349577, 0.08681457, -0.018714339, -0.005349209, -0.08572887, 0.13170077, 0.029273631, -0.02005469, -0.109461926, -0.029355928, 0.018045058, 0.04776612, 0.04659963, -0.036750726, 0.09525427, -0.0016830221, 0.046869118, -0.1075796},
{0.05873559, 0.17119108, -0.10535375, -0.1929302, -0.04494605, -0.022987127, 0.00034094253, 0.07422809, -0.05328681, -0.09917108, 0.023196124, 0.044599928, 0.09031159, -0.027650233, -0.0035685494, 0.01983246, 0.010422129, 0.09583146, 0.020374658, 0.10430295, -0.04226835, 0.05045102, -0.063986555, -0.06314682, 0.11737916, -0.09779151, -0.111285225, -0.17820902, 0.01471797, 0.020242546, -0.15199788, 0.04982789, -0.037355706, 0.07341216, 0.1556735, 0.014670808, -0.002686489, 0.018574161, 0.016001, -0.053693894, -0.04301464, -0.00141491, 0.020605158, -0.06557875, 0.04854431, 0.05538478, -0.10511086, -0.12755911, 0.06715913, 0.013779714, 0.110121615, 0.028537288, -0.08301407, 0.04512981, 0.08653787, 0.023713352, -0.05418896, 0.053257838, 0.07915974, -0.07792197, -0.06537218, 0.06047776, -0.15237921, 0.022016257, -0.018833652, 0.009811969, -0.045616828, -0.08957347, -0.01996128, 0.14521709, 0.04810616, 0.059048735, 0.0077387914, 0.03157292, 0.18388253, 0.10158444, -0.04412389, 0.0748983, 0.04333239, 0.028096644, 0.0960954, 0.0024764836, -0.05790586, 0.086805545, -0.021955702, 0.07733654, 0.15722448, -0.061633017, 0.042850424, -0.05148738, 0.0150514385, -0.04217668, 0.10636598, 0.056256674, -0.040097415, 0.031590387, 0.012539707, -0.07739925, -0.11164787, 0.014636584, 0.00070581585, -0.00052314386, 0.06593494, 0.052793294, 0.056924816, -0.06091122, 0.009439974, -0.0013429237, -0.042332526, 0.05813849, 0.026820384, -0.038635634, 0.15452118, -0.017375406, -0.0018970147, 0.12549205, -0.07323741, -0.046955172, 0.033607945, -0.029346958, 0.070456624, 0.16403985, 0.105702765, 0.09105357, -0.01785747, -0.03391888, 0.05800655, 0.16701472},
{0.037556693, 0.19627587, -0.15504362, -0.019105699, -0.08669312, -0.10367628, -0.09753566, 0.080732435, 0.06818789, -0.013250984, -0.040976893, 0.0523275, -0.053317085, -0.0022729589, -0.014693053, 0.06426936, 0.09374311, -0.010548097, 0.014106575, 0.08622116, 0.011726741, -0.08260218, -0.19032115, -0.1449619, 0.08144323, 0.080622196, -0.046948057, -0.17410341, -0.12846494, -0.06994122, -0.07602925, -0.010804571, 0.021250468, -0.010387153, 0.1324888, 0.02952365, -0.04750691, -0.09459464, -0.10007153, -0.01876282, 0.0044779847, -0.022718668, 0.13017179, 0.010899522, -0.028769344, -0.043499522, -0.0696088, -0.08403125, -0.076442495, -0.09268228, -0.03247476, -0.04360053, -0.022650955, 0.08186458, -0.0107773915, -0.055171877, -0.117108494, -0.047320265, -0.02800519, -0.06693224, 0.04835537, -0.04516316, -0.14418012, 0.01001104, 0.058260545, -0.053837053, 0.055135258, 0.06263098, 0.10935693, -0.09828456, 0.005696845, 0.047353182, -0.034973614, -0.12687294, 0.02446615, 0.16893855, -0.07472415, 0.05770524, -0.020328864, -0.04435693, -0.04168751, 0.029992253, -0.025403848, 0.03612529, -0.1611623, 0.0370319, 0.07558613, 0.032426957, 0.042491864, 0.041375954, 0.0668605, -0.017061409, 0.0075309724, 0.11090968, -0.05580651, 0.0226499, 0.064956725, -0.017003462, -0.13653877, 0.002313882, -0.019888572, 0.06334337, -0.08772896, -0.0944947, -0.1308344, 0.00045420826, -0.12128157, 0.00459051, 0.0021543545, 0.0461111, 0.045668628, -0.036452472, 0.0043602944, 0.09285671, -0.023186639, 0.06584459, -0.012793663, 0.01713074, -0.03645735, 0.099312544, 0.031183256, 0.09995549, 0.030574327, -0.025191449, -0.021359138, 0.10456251, 0.08825596, 0.10703335},
{-0.0070713735, 0.02118183, -0.10087497, 0.02312735, 0.059356075, 0.08585523, -0.056818545, 0.03526759, -0.015360244, 0.045006484, -0.07317756, -0.0058629108, -0.013362848, 0.14750697, -0.032191128, 0.1023097, 0.00857297, -0.047682222, 0.124424905, 0.10788395, -0.07368454, -0.08401561, -0.18402222, -0.13723607, 0.027336907, 0.03462, -0.07468183, -0.069943905, -0.07815615, -0.098247625, -0.18866304, 0.07316144, 0.031538993, 0.07185269, 0.06335767, 0.022814183, 0.024392594, -0.07722084, -0.17348775, 0.0023576145, -0.08258859, 0.046529517, 0.13083914, -0.018175, 0.03732166, 0.016087905, -0.067534104, 0.03724171, 0.022473127, -0.10437724, -0.037556566, 0.050289482, 0.01864298, 0.00017033011, 0.064138696, -0.07173447, -0.0802077, 0.025867805, -0.07695988, -0.031051943, -0.04300994, 0.08302545, -0.016160436, -0.03979814, -0.017503276, 0.09647041, -0.0056823716, 0.035462275, 0.0051908395, 0.011111088, -0.0717731, 0.03250667, 0.099560395, -0.09272763, 0.01790965, 0.041977018, -0.017677916, -0.058517653, 0.08207653, 0.0575365, -0.07335041, -0.08769577, 0.023332216, 0.063750274, -0.15819226, -0.055462744, 0.13174538, -0.097734965, -0.08648781, -0.043744426, -0.027463587, -0.08612699, 0.10271649, 0.15094395, 0.00018973195, -0.07795268, -0.011031881, -0.052450296, 0.015846223, -0.067318305, -0.06429459, 0.17273591, 0.08574782, 0.004293442, 0.025106678, -0.028428784, -0.079864055, 0.04389961, -0.009907013, 0.05207113, -0.04395734, -0.07465515, -0.026662981, 0.09306041, -0.072765484, -0.036579344, 0.09067378, -0.048585527, 0.026483446, -0.047538992, -0.015927585, 0.043342568, -0.008780744, 0.16348961, -0.04892846, 0.1910993, -0.12522379, 0.034159787},
{0.08347517, 0.0639566, -0.051096275, -0.043476544, 0.0068217963, 0.058427602, 0.07921886, -0.0049943477, -0.029869422, 0.020315275, -0.059533942, 0.08322179, 0.0050901133, -0.055784684, 0.06891855, 0.08624578, -0.07785787, 0.052213494, -0.017327191, 0.064548984, -0.007929963, -0.15950102, -0.09291036, 0.02950399, -0.050886873, 0.0743739, 0.0015172459, -0.10936295, 0.01752377, 0.015217913, -0.10460231, 0.07193578, 0.018651769, 0.059283096, 0.067070216, 0.0074890414, 0.104105175, -0.033789877, -0.14979659, -0.06498644, -0.08917283, 0.061789215, 0.12726755, 0.017483013, -0.0050227037, -0.055023693, 0.08926658, 0.010697621, 0.031415015, 0.016459074, 0.055098616, -0.011250198, -0.0856054, -0.09248698, -0.016875997, 0.07183683, -0.06510998, -0.0036041439, -0.059423044, -0.03186592, -0.009463102, -0.031499404, -0.09695651, -0.0052276626, -0.056575272, -0.09135551, -0.03104905, -0.0020378157, 0.09916984, -0.12273118, -0.02975472, 0.013955192, -0.04771019, -0.123091504, 0.046593007, 0.15282808, 0.049076702, -0.088631116, -0.025574112, 0.14329639, 0.09978971, -0.0012160018, -0.13025224, -0.025352528, -0.15295675, -0.068061605, 0.120681874, -0.07353724, 0.06386245, -0.02960351, 0.08631276, -0.14577474, 0.100854695, -0.02410473, 0.13845807, -0.04492854, 0.054992422, 0.026141033, -0.09534613, 0.0019993335, -0.091355376, 0.15809847, 0.026906947, -0.09152777, -0.10886736, 0.034384344, -0.032480463, 0.07417953, 0.054550126, 0.06030338, 0.114809506, 0.058582053, -0.024893919, 0.053647257, -0.09324355, 0.0414877, -0.0005366563, 0.072535604, 0.061510883, -0.10313511, -0.029604701, 0.06679372, -0.05816752, 0.030954001, 0.09731899, 0.15828334, -0.06584823, 0.16103451},
{-0.023063289, 0.035366677, 0.1669582, -0.018970344, 0.015307077, -0.03163778, -0.049923718, -0.0061777756, 0.02795817, -0.06101859, 0.023446625, 0.018907964, -0.048359364, -0.09423308, -0.124598354, 0.04273819, -0.1069263, 0.06887819, 0.025524631, -0.07703359, -0.038522378, -0.074730396, -0.03667234, 0.021049678, 0.124347255, 0.029131398, -0.1033227, -0.075057454, 0.0076988405, 0.07722119, -0.08206241, -0.09060025, 0.031923264, -0.031016381, 0.11050969, 0.019703044, -0.02874622, -0.15866707, 0.018684987, 0.14612055, 0.12883861, -0.07493998, 0.058111947, -0.076840445, -0.11392982, -0.021219628, -0.06311181, -0.10158798, -0.0192279, -0.16427307, 0.08397552, 0.051884204, -0.017272968, 0.055325042, -0.06111659, 0.009338915, 0.01610411, -0.062144775, 0.037686337, -0.10435377, 0.0770678, 0.013312732, 0.01945351, 0.09073889, -0.10201039, -0.027894462, -0.08897416, -0.004405625, 0.13538821, -0.0046938206, 0.032862492, 0.07849984, -0.02688986, -0.11715966, 0.008547387, -0.059605498, 0.10637629, 0.016219944, 0.03105051, 0.002752495, 0.03886302, -0.015710495, 0.035551403, -0.06410596, 0.0727163, 0.04697228, 0.055528894, -0.14129756, -0.07680555, -0.0068065277, 0.009878264, -0.023536589, -0.045528855, 0.058503658, 0.11550883, 0.00920745, 0.053315938, 0.0037852498, 0.03601766, 0.075936526, -0.058276407, -0.042235415, 0.024819132, 0.003301397, 0.020329483, 0.021198064, -0.13074468, 0.0037619914, 0.047559362, 0.061662424, 0.0445295, -0.073111616, 0.05369677, 0.08141665, -0.025329828, -0.057177052, 0.0074044103, -0.05997752, 0.030087814, -0.05363302, -0.033280578, -0.07684163, 0.027627537, -0.042786773, -0.05600871, 0.056904912, 0.00079554523, 0.033616073},
{0.10142154, 0.05413968, 0.07331922, -0.007669119, -0.0839772, 0.040641963, 0.0008960935, 0.07619609, 0.05820334, -0.010107033, 0.04933243, -0.035079677, -0.098080225, -0.06371625, -0.029659068, 0.051025882, 0.02397512, 0.095345855, 0.009886125, -0.12223446, -0.06808139, -0.08393264, -0.055838306, 0.12823176, 0.030840844, 0.09321814, 0.013450356, 0.004130084, 0.03786693, 0.09623518, -0.13860771, -0.049504366, 0.052481744, 0.027953003, 0.009455831, -0.06272961, -0.09689448, 0.0032491675, -0.087596804, 0.13522273, 0.07819965, -0.008979194, 0.0018063154, 0.07410901, 0.05060126, -0.06409924, 0.0019220486, 0.030741364, 0.10517222, 7.352294e-05, 0.018474683, -0.05013389, -0.008081664, 0.09625614, 0.033821687, 0.09957329, 0.064429834, -0.09079166, 0.0880804, -0.07686717, 0.06652172, -0.09057304, -0.14629687, 0.058320373, 0.0013049319, 0.03481787, 0.06768947, 0.08182265, -0.0089576235, -0.003217135, 0.09039319, 0.065738656, 0.08858889, -0.10414934, 0.14943095, 0.06126793, 0.18541954, 0.095870316, 0.012946361, 0.030474, -0.022892406, 0.09243564, 0.035480775, 0.101345666, 0.008246533, -0.024893688, -0.03819321, 0.029072342, 0.047779433, 0.06878537, -0.065562055, 0.058721144, -0.088942915, 0.027331991, -0.07096594, -0.034685306, -0.023491248, -0.075373285, -0.07068023, -0.09792635, -0.07547307, -0.16485696, 0.011971031, 0.0044391453, -0.004339354, -0.048318487, 0.014306979, 0.07499165, 0.10954464, 0.0440945, 0.15345232, -0.08529419, -0.0086265765, -0.103186116, 0.038409486, -0.06018514, -0.08864488, -0.10440476, 0.09486312, -0.095210835, 0.022904975, -0.06336257, 0.119964235, -0.0641281, -0.07612605, 0.11003842, 0.14588031, -0.008569831},
{0.040432498, -0.009125087, -0.012955801, 0.0852627, -0.022949664, -0.00085906684, -0.06903732, 0.086342424, -0.08770332, -0.025027081, 0.0022740199, -0.11263218, -0.036997914, 0.04395198, -0.059105244, 0.051048722, -0.10691123, 0.019198596, -0.07912295, -0.09399251, -0.020578913, 0.010652811, 0.042903583, 0.035572577, -0.053298924, 0.0045369687, -0.055260558, 0.039729524, 0.17835031, 0.043452863, -0.112818845, 0.056781184, 0.084208705, -0.13911301, 0.0817357, 0.012274804, 0.09804203, -0.006967369, -0.02845153, 0.13909572, 0.08550727, -0.041810006, 0.15958188, -0.03881585, -0.10517235, 0.002529898, 0.018812329, -0.012962689, 0.059034586, -0.15778974, -0.016517477, -0.021326452, -0.12661594, -0.07046685, -0.07373839, 0.10914022, 0.046727765, 0.039219856, 0.005674546, -0.011829758, -0.0071686907, -0.03470262, -0.05053476, -0.07209423, -0.021481566, 0.08979217, -0.01858979, 0.10051787, -0.009452867, 0.025294753, 0.100733526, -0.08569463, 0.009886555, -0.08398276, -0.050646886, -0.0569589, 0.13755737, 0.0514185, 0.071917884, 0.010141701, 0.015660709, -0.004069783, -0.09050238, 0.034827527, -0.03930921, 0.022136455, -0.028615365, -0.10373011, 0.016097734, -0.06931324, -0.07684193, -0.020990353, -0.08873064, 0.03525272, 0.11468353, 0.094622865, -0.081748135, 0.027074628, 0.08868567, -0.07363774, 0.018592134, 0.032019235, -0.038166538, -0.06564759, 0.015618854, -0.024410944, -0.022827521, 0.047244057, 0.15079315, 0.06625046, -0.028770598, -0.08722195, 0.02180224, -0.054701995, -0.048280008, 0.06333834, -0.10045167, -0.032623067, -0.09770009, -0.00375171, -0.03381832, -0.05426925, -0.07229466, -0.08193613, 0.09716706, 0.15171756, 0.12777668, 0.0011934164},
{-0.003142378, 0.02796562, 0.09106806, 0.08517075, -0.040263772, -0.002792962, -0.09128068, -0.08694708, -0.07350871, 0.10045573, -0.16809718, -0.026510812, -0.09159044, 0.099910475, 0.07299108, 0.02289821, -0.098535284, -0.035763875, 0.021107612, -0.16925539, -0.11171196, -0.01156881, 0.116096735, 0.006620421, -0.046348523, -0.018213049, 0.021156412, 0.14228247, -0.05567992, -0.06548673, 0.011889687, -0.02108011, -0.06547465, -0.037270226, 0.025475724, -0.092186436, -0.069878206, 0.0029806255, -0.07248578, 0.09239176, 0.0975314, 0.063289106, -0.04736484, -0.014317518, -0.0589602, 0.04460203, 0.08325419, 0.089649, -0.0026112422, 0.06543474, -0.11432692, -0.10076676, -0.019775288, 0.0935518, -0.009462014, -0.013373972, 0.15676607, 0.07873066, -0.010189409, -0.07275411, -0.025715217, -0.030638061, 0.09201855, 0.0032291412, -0.021985509, 0.082583204, 0.08534616, 0.08399825, 0.04910943, -0.02846333, -0.041910417, -0.06500109, 0.002674371, 0.017283276, -0.014651066, 0.054928053, 0.11648822, -0.015949324, -0.080059536, 0.03869117, -0.1048465, 0.094654456, 0.028152985, 0.034981377, 0.09728859, -0.0012060951, 0.0049602813, 0.014147247, -0.047682468, -0.07337988, 0.055242762, 0.07552152, -0.020337135, -0.1429108, 0.054425128, 0.048604846, 0.08613534, 0.12567769, -0.009672276, -0.03167537, -0.042862512, 0.060834855, -0.10454621, 0.090288386, 0.07397957, -0.0808823, 0.08502792, 0.011073031, 0.07156067, 0.06697191, -0.042442366, 0.008329935, -0.09873062, -0.029470768, -0.056414492, -0.047133796, -0.08707069, 0.046507835, 0.06978367, 0.034142956, -0.116931066, 0.10272066, 0.017420558, -0.008656561, 0.04864639, 0.14260149, -0.08074427, 0.020635191},
{-0.10550851, 0.051601056, 0.08619594, -0.01901474, 0.057810813, -0.018216714, -0.087569006, -0.0053892583, 0.02253291, 0.027303621, -0.16198267, -0.025403801, -0.04077496, 0.0064078053, 0.052063543, 0.007724098, -0.050586365, -0.08221627, -0.053267278, -0.045319457, 0.09500414, -0.040028784, 0.095382996, 0.1247282, -0.02966326, 0.10436619, -0.009877287, 0.011072074, -0.023541141, -0.08079928, 0.08614145, 0.031142402, 0.023870595, 0.027305052, 0.024518942, -0.103133164, -0.022250347, -0.0032377045, -0.0016767439, 0.09844114, 0.14849669, -0.038982376, 0.10266257, -0.10273267, 0.119440265, -0.028153624, -0.09255163, -0.050329834, -0.05863957, -0.090902664, 0.002158858, -0.07718679, 0.021417629, 0.069415465, -0.0051678866, 0.045517698, 0.06471365, 0.07960078, 0.09135368, 0.01834515, 0.019111378, 0.09798877, 0.051064763, 0.022077918, 0.043334454, 0.09150794, 0.002531812, -0.0091585, -0.018361945, -0.13644919, 0.060728658, 0.094486564, 0.0733401, -0.05023356, -0.15301676, -0.13821802, 0.07319303, 0.028995812, -0.057971932, 0.053296443, -0.035007793, 0.09848577, 0.028177932, 0.037935458, 0.11075704, -0.08991044, -0.028005153, 0.03523155, -0.056491453, 0.044712607, -0.021530135, -0.07626153, 0.087007314, -0.15641604, -0.04355095, -0.09659959, 0.10258494, 0.10396538, 0.16023533, -0.025748096, -0.097056605, 0.041256372, -0.068576135, 0.045173094, 0.047864832, -0.015612111, 0.07164942, 0.0029106964, -0.057177015, 0.006824814, -0.023369117, 0.07160497, 0.093571626, 0.007058994, 0.043489873, -0.10738497, -0.035956673, 0.054001033, -0.04077624, -0.02378124, 0.012413712, 0.08149754, 0.0011233573, -0.07630005, -0.0026161224, 0.14909628, -0.09797719, 0.07615192},
{-0.025749115, -0.022693526, 0.08978078, 0.036776945, 0.046401273, -0.054791868, 0.023852423, -0.08643158, 0.010836743, -0.0063225403, -0.019531174, 0.07320268, -0.13643046, 0.013794292, -0.15411815, -0.06547405, -0.063299105, 0.0809659, -0.11557266, -0.05114429, -0.08848575, -0.03903979, -0.03452675, 0.12555055, 0.11546835, -0.010802483, -0.05455295, 0.1209431, 0.12435546, -0.02312393, 0.14490172, 0.06934628, -0.07823497, -0.1477118, -0.14682864, 0.0034989987, 0.00078812195, -0.0976235, -0.046702877, 0.16068102, 0.17470649, -0.02668143, -0.04178862, 0.069409996, 0.037086375, -0.030664252, -0.038258724, 0.009092718, -0.10418754, 0.00868243, 0.011272488, 0.03306669, 0.0435602, -0.06739562, -0.06862487, 0.05458995, -0.018573223, 0.005641833, 0.02060219, 0.029122895, -0.0244388, 0.059006277, 0.13981318, 0.049421042, -0.08329195, -0.01446802, -0.08906914, -0.07733181, 0.07082772, -0.11791838, 0.060856618, 0.0453746, 0.029108763, -0.030149046, 0.0061317324, -0.048185144, 0.072142735, 0.008608051, 0.018910684, -0.0508399, 0.05517741, 0.0596568, 0.04252116, -0.052048672, 0.16341957, -0.021314396, 0.10478227, -0.024323715, 0.081951804, -0.08745843, 0.00604163, 0.03897109, -0.04609943, -0.12172998, -0.032677747, 0.047056586, 0.063129425, 0.03852353, 0.122831084, -0.04225646, 1.1384487e-05, -0.042961627, 0.07361234, -0.06690855, 0.028361814, -0.041930802, 0.05331025, 0.013559816, 0.054916047, 0.058817994, -0.07388482, -0.011361696, 0.055971745, -0.0059948624, 0.023263216, 0.0061171306, -0.09496162, 0.09921108, 0.0050801532, -0.0023485422, 0.05056705, 0.0027167613, 0.003660003, 0.07144804, 0.04218267, 0.055674154, -0.10802601, 0.04066888},
{-0.060960427, 0.03179816, 0.037184246, -0.023384016, -0.07478413, -0.07338758, -0.10119845, -0.0922361, -0.06848018, -0.004695162, 0.030082246, 0.038102265, -0.13096328, 0.08046981, 0.017680349, -0.07886144, 0.057134863, -0.11029669, -0.08720936, -0.19833419, 0.063642435, -0.08194233, 0.12578423, 0.03866319, 0.12072219, 0.08738539, -0.056988887, -0.012978357, 0.007084208, -0.039219495, -0.018486029, -0.10329321, -0.013163732, -0.04468932, 0.005969659, -0.021496514, 0.0901827, -0.10060826, 0.02508615, 0.17737411, 0.08785738, -0.033029027, 0.030519659, 0.086049706, 0.119670205, -0.021643443, -0.04707417, -0.03164096, -0.09879902, -0.07935567, -0.07276346, -0.051796854, 0.11701205, 0.036587138, -0.10521316, 0.061669774, -0.018144902, -0.0020916983, 0.04318133, 0.010424476, -0.014665323, -0.0969629, -0.02815853, -0.027042761, 0.06822823, 0.050634924, 0.019022515, -0.032733366, 0.10266398, 0.035512876, -0.025552472, 0.043156043, 0.017944545, 0.09050855, 0.011185402, -0.05323092, 0.1360129, 0.07646169, -0.04837127, -0.024081305, -0.09960664, 0.037149057, -0.13765982, -0.0988334, 0.01904417, 0.0192613, 0.01774881, 0.022014968, 0.063949786, 0.06652253, -0.10133471, -0.062928475, -0.02311965, -0.08483031, -0.03148278, 0.07704057, -0.08816047, 0.01574088, 0.039541926, 0.016498782, 0.0027436838, -0.12108239, 0.02068698, 0.01892212, -0.030946376, -0.029650979, 0.1287332, -0.098692276, 0.15347834, -0.062054634, -0.15350516, 0.049904764, -0.07246633, -0.03344018, -0.07430798, -0.11274735, -0.0983158, -0.015361972, -0.09051951, -0.09555338, -0.12702467, -0.09443108, -0.015021065, -0.008437784, -0.014421217, -0.0071324883, 0.0042946106, 0.014480251},
{-0.050761573, 0.06472954, 0.023784775, 0.13033432, -0.0336837, -0.004163012, 0.009348089, -0.09998015, 0.014942847, -0.09461301, -0.09139262, 0.011517594, -0.15779617, 0.049287204, -0.09447871, -0.08067412, 0.018327035, 0.043338623, -0.12341029, -0.15465185, -0.106027365, -0.083017126, 0.014084102, -0.059892546, 0.016096046, 0.15808669, -0.034160335, -0.010747056, 0.14674123, -0.09617949, 0.0014643034, -0.028969254, -0.040740244, 0.029494753, 0.07979153, 0.00021468637, -0.08350465, -0.058710687, 0.030225696, -0.0065282197, 0.123149455, 0.09436302, -0.03115384, -0.10098957, -0.007075907, -0.02348404, 0.0013401061, 0.0039479053, -0.09131257, -0.12754051, -0.024504604, -0.004236482, 0.04749983, -0.06931681, -0.08248651, -0.009943555, 0.09620001, -0.029946402, -0.05301428, 0.06440155, 0.08458046, -0.056884103, -0.046232384, 0.055533588, 0.06497578, -0.10932238, -0.015436018, -0.05796517, 0.039131995, -0.13959537, 0.016027803, 0.010519543, -0.082621545, 0.11404208, -0.16204725, 0.0034593707, 0.008354296, -0.03430158, -0.022921996, 0.087845534, 0.056565575, -0.062057346, -0.12673387, 0.034363255, 0.09355004, 0.021909455, -0.03538226, 0.040181953, 0.04312035, 0.03309987, -0.121693715, 0.053501863, 0.016027652, -0.052071866, 0.04137314, -0.05032331, -0.010371253, -0.009157653, -0.020512763, 0.103200555, 0.05841963, 0.0022988725, -0.10748872, -0.012065403, 0.015448269, -0.02472114, 0.082216024, 0.096314654, 0.102501184, 0.0982659, 0.030453391, 0.04566236, 0.07187086, 0.100426316, -0.02917888, -0.11496822, -0.101777986, -0.03333772, -0.019407358, -0.047691256, 0.05772805, -0.06751923, -0.10888727, -0.030484315, 0.08307363, 0.1616572, -0.025527975, 0.019709645},
{-0.023232825, -0.097788095, 0.015076163, -0.05164089, -0.013513291, 0.09377907, 0.06923602, 0.008065611, 0.10291146, 0.009501055, 0.026145883, 0.019658782, -0.049243454, 0.12109261, -0.1359324, -0.007837051, 0.051428124, 0.0034653777, -0.020953003, -0.11844538, 0.07497747, -0.09851073, -0.012094265, 0.08163147, 0.12137385, 0.05547178, 0.048887275, 0.13340913, 0.11475682, -0.11430083, 0.023281133, -0.008630796, -0.05760682, -0.12870204, 0.10383152, -0.08011212, 0.042794228, -0.05974747, 0.05765694, 0.06950532, 0.054690618, -0.03198745, 0.0045790575, -0.07006049, 0.071082346, -0.02479873, -0.10482925, 0.1324182, 0.09370306, 0.0016627758, -0.115187034, 0.017459154, -0.05344859, 0.09537502, -0.003007263, 0.07793056, -0.02204909, 0.07111253, -0.109645374, 0.063495964, 0.01995977, 0.022756007, 0.08463123, -0.06654036, 0.03311287, -0.0916927, 0.08502886, -0.056970406, -0.08773417, -0.09935159, -0.06759305, -0.059120413, -0.072774306, -0.021639237, -0.048996832, -0.022183696, 0.03686507, 0.07958028, 0.056338366, 0.05597665, -0.0441399, -0.018747061, 0.027674792, 0.011391496, 0.07368898, -0.003908141, -0.008154414, -0.047910552, -0.057935495, -0.06366243, -0.05826997, -0.05407754, -0.010177992, -0.009629102, 0.021336457, -0.08795419, 0.08649331, -0.007220079, 0.0061676544, 0.06388907, -0.07075461, -0.01726191, 0.0763606, -0.05483647, -0.041819718, -0.14265041, -0.031631164, -0.03218457, 0.1244375, -0.01921533, 0.020277996, 0.050371885, -0.009466791, 0.06904791, -0.042446107, -0.0871757, -0.04057814, 0.087771356, -0.092480496, -0.040461257, -0.0021920837, 0.09081303, -0.12674241, 0.018733785, 0.094447434, -0.0123381, -0.1292092, -0.11126257},
{-0.09284477, 0.07292406, 0.09384739, 0.06403386, -0.10544365, -0.06598559, 0.009992042, 0.015157759, -0.0037976876, 0.003862165, 0.0017183367, 0.11535974, -0.08207214, 0.07614127, 0.09806187, -0.010644816, 0.046610832, 0.027603077, -0.0094049815, -0.065164074, 0.08709166, -0.07481389, 0.028791187, 0.018110098, 0.04272186, -0.023656275, -0.11005389, 0.08794963, 0.06475842, 0.013915016, 0.109099984, -0.040536627, 0.033354085, 0.10136942, -0.005700186, 0.08012369, -0.0035927342, 0.11028537, -0.039177243, -0.080227345, -0.08771117, 0.055921257, 0.03202107, -0.004432581, -0.012509779, 0.062122114, -0.08547679, 0.0026684538, -0.10470927, -0.0060158395, -0.04814407, -0.06304248, -0.00020224066, -0.008171187, -0.0921035, 0.079580866, -0.10123577, 0.06400517, -0.015133265, -0.037290975, -0.048032008, -0.035608005, -0.07685355, 0.07066421, -0.045185007, -0.024596693, 0.059264027, -0.027141042, -0.051333744, -0.095725596, -0.10054793, 0.06853683, 0.0039879456, 0.01158472, -0.029437406, -0.010958691, 0.041435815, 0.0008732006, 0.031903334, 0.04684961, 0.11744264, -0.018879347, -0.054976404, 0.094333135, 0.12611763, 0.02837849, 0.03471665, -0.075846605, 0.09934118, -0.11007595, -0.006087731, 0.082814634, -0.10370492, 0.02126664, 0.05890817, -0.035211302, 0.0909421, 0.015479158, -0.059866156, 0.10208508, 0.07802291, -0.081956334, -0.049495082, 0.062469274, 0.09567963, -0.029581595, -0.0066393763, 0.06744694, 0.0894445, -0.09152497, -0.038421202, 0.08874945, 0.08647516, -0.004264715, 0.014683783, 0.030616805, -0.014429452, -0.042546906, -0.044748545, 0.033271775, -0.009411018, -0.06329078, 0.0590514, 0.062295865, -0.015097417, 0.019753167, -0.0010332287, 0.033613235},
{-0.011718506, -0.09489931, -0.06568157, -0.020515151, 0.08441031, -0.09852605, 0.074023746, 0.041426137, -0.023035675, -0.044246364, 0.002067865, 0.014661532, -0.052882425, -0.05695067, -0.075987376, -0.054882728, -0.054032404, 0.010604873, -0.017129239, 0.05514336, 0.0027425857, -0.041359004, 0.055711016, 0.04186459, 0.032576445, -0.05934963, 0.04546335, 0.01101913, -0.07433476, 0.096794754, 0.09631231, 0.09239353, 0.01160757, 0.026274819, -0.06275548, -0.09527408, -0.034728408, 0.08340919, 0.008084137, -0.04300397, 0.04751623, 0.04761608, -0.08667823, -0.025261812, -0.08827537, -0.08376689, -0.08807695, -0.07351371, 0.051009983, 0.026373092, -0.020850012, 0.06711602, 0.0057671377, 0.029859047, 0.011121467, 0.0924896, -0.08323349, 0.0896305, -0.07055657, -0.070562616, -0.028752746, 0.08545316, -0.04872892, -0.05702383, -0.10568573, -0.039511483, -0.06572402, 0.017418317, 0.07484492, -0.07873813, 0.03515189, 0.04090673, 0.02871342, 0.027970348, 0.027080618, -0.065884486, -0.09196975, -0.012972154, -0.055330936, -0.033770103, -0.011762347, -0.039096773, -0.089133956, -0.0028578555, -0.043336816, -0.03901169, -0.02838466, 0.058651164, 0.004916369, 0.058133077, -0.074136324, 0.02726114, 0.07740763, 0.03873938, -0.07657442, -0.031092823, 0.098410085, 0.02478648, 0.04358523, -0.0424961, 0.014652751, -0.033172913, -0.06910521, 0.039802313, 0.034251835, 0.0706464, -0.0019007522, -0.03398405, 0.1233125, -0.05092607, 0.084788926, -0.031730495, -0.03454303, -0.039062098, 0.089403436, 0.0721309, -0.04320954, 0.10324754, 0.0727775, -0.029583164, -0.05770021, 0.02328568, -0.11588459, 0.032599643, 0.048935607, -0.06991748, -0.0545159, 0.06821054},
{0.04791541, 0.002836338, 0.07936864, 0.06889809, -0.064727, 0.066366896, -0.0074996906, 0.034608096, 0.028427526, -0.105346866, 0.032802805, 0.029702723, -0.06739344, -0.08280819, 0.060138933, 0.04577147, 0.088493474, -0.041397806, -0.044989366, 0.021898493, -0.023267886, -0.09396955, -0.033461366, -0.076868586, 0.041536592, 0.08145747, -0.042597182, -0.03125859, 0.03217705, 0.066668876, -0.06784747, -0.03656086, 0.08419996, -0.063262545, 0.08734936, -0.0046993066, 0.042770058, 0.08351976, -0.040938977, -0.053361993, 0.07827745, -0.053996768, 0.021757552, 0.044520874, 0.020365264, 0.022090957, 0.07966462, 0.042960715, 0.0134045705, 0.004534923, 0.09642416, 0.09194821, -0.08993615, -0.09069261, -0.10302999, -0.021570805, -0.09942759, 0.012561262, -0.10329435, 0.036440402, -0.04072847, -0.062282365, 0.08814198, -0.09249915, 0.08503428, 0.027592713, -0.06673213, -0.057498645, 0.07958175, 0.078287065, -0.111775674, -0.07150978, 0.0043847337, -0.0031393303, -0.010270825, 0.028630478, 0.06562088, -0.00034290552, -0.08548405, -0.105270445, 0.06392736, 0.017926522, -0.020890918, -0.075662404, 0.077044725, 0.05043636, 0.047073577, 0.105644666, 0.053075396, -0.0009014448, -0.08300914, -0.020788684, -0.035671882, 0.0488433, 0.02235457, -0.021077462, 0.03984341, 0.0023403964, 0.019469578, -0.08543798, 0.08203599, -0.046921063, 0.09430281, -0.07209924, 0.075375825, -0.08801566, 0.11665958, -0.022043316, 0.033498924, 0.0019103644, 0.066361405, 0.08827311, 0.032735698, -0.017211204, -0.01934687, 0.08372934, -0.047472596, 0.10061635, 0.01575299, -0.06516325, 0.05245451, 0.090824276, -0.07090804, -0.1108364, -0.09862508, -0.08311254, 0.03294852, -0.03447473},
{0.018120745, 0.034272835, 0.02148932, 0.036833532, -0.095917135, -0.08887787, -0.09406029, 0.018072382, -0.011024028, -0.038319133, 0.08321014, 0.087423034, 0.07139337, 0.080519296, 0.06349741, -0.014925143, 0.088763684, 0.06923646, -0.023841415, -0.100371875, -0.011101948, 0.08700114, 0.043238696, -0.08567741, -0.09009824, 0.09150629, -0.0355333, 0.005050944, 0.051151004, -0.049999066, -0.041535914, -0.08541902, 0.046626825, 0.108294286, 0.050370295, -0.10076973, 0.035565432, 0.09233008, 0.07842326, 0.106917046, -0.018042188, -0.070994094, 0.0060660024, -0.0436717, 0.017058212, 0.09345733, -0.0905052, 0.048684802, 0.06752153, -0.0056476025, -0.00960662, -0.014002264, -0.06751116, 0.012111619, -0.048444368, -0.056165926, -0.0029477787, -0.10408964, -0.051159527, 0.04986718, 0.028201027, 0.081143565, 0.032208804, 0.035116836, 0.07432851, -0.04652516, -0.02694397, -0.06274829, 0.009205722, -0.11624334, 0.0135224, -0.09883127, -0.07249885, 0.021203864, 0.04000195, 0.07828973, -0.101997785, 0.040855125, 0.08059688, -0.030061046, 0.10655693, -0.07422866, -0.008319551, 0.008789418, -0.008488366, -0.10040738, 0.12628077, 0.024091184, 0.028319115, -0.11044897, -0.061029036, 0.098137625, -0.07040072, 0.07950707, 0.103867486, 0.041524544, -0.05689988, -0.051338267, 0.060165316, -0.10444373, -0.054953966, 0.08765958, 0.07297488, 0.015344612, 0.09132422, -0.08598192, -0.07465069, -0.0054903743, 0.06734962, -0.04863291, 0.003058088, -0.019959308, 0.059706938, -0.008565513, -0.022228375, 0.037544917, 0.09788764, -0.023468196, -0.11205987, -0.045695428, -0.014595169, -0.068585366, 0.019816637, 0.098688155, -0.076458946, -0.10583858, 0.0220312, -0.049342174},
{-0.005886313, 0.078858785, -0.07060552, -0.062432356, 0.035227142, -0.029918954, 0.06010666, -0.04320415, 0.077241555, 0.006477982, 0.093473904, 0.12694956, 0.006354666, -0.002644313, 0.02135909, -0.0562044, 0.08133815, -0.030670311, -0.064672485, -0.016110655, -0.040776595, -0.035981815, 0.077791385, -0.07262569, -0.08678635, -0.029518604, 0.07826932, 0.052754786, -0.005273657, -0.019581093, 0.07403923, 0.037013657, -0.07231244, 0.060558893, -0.069055974, 0.009860478, 0.06272193, 0.11721536, 0.0959561, 0.07162983, 0.04924625, 0.024620995, -0.02240282, -0.02179546, 0.10185337, 0.03102357, 0.060235664, -0.09043849, -0.0094930455, 4.4068518e-05, -0.084873244, 0.056057736, 0.06289898, 0.09450163, -0.03014604, -0.102512226, 0.033972997, -0.00834734, 0.08712614, -0.03881317, -0.08718789, 0.034762353, -0.0118634235, 0.07021077, 0.066189736, 0.08414951, 0.001434878, -0.02586785, -0.0045084455, -0.10063071, 0.007279552, -0.08400403, -0.09864297, 0.0580009, 0.076918304, -0.031841952, 0.05780283, -0.083147615, 0.025154952, -0.03370107, 0.12505123, -0.017596096, -0.065432794, -0.045446157, -0.10182911, -0.017110951, 0.009696154, -0.009870693, -0.05669025, 0.02324033, 0.04963897, 0.08691857, 0.0033454672, 0.08477605, -0.0245936, 0.08169718, -0.054198008, -0.06853168, 0.01696062, -0.10461371, 0.0033203587, -0.07954494, 0.033876292, 0.105412334, 0.06293944, 0.07605443, -0.006971421, -0.0028537079, 0.06375713, -0.08888909, 0.0034239567, -0.09464485, -0.042899344, -0.027470456, 0.066919416, 0.055721067, -0.043599594, 0.011046544, 0.07661645, -0.0064453706, -0.00088327477, 0.044717997, -0.07234617, 0.061381113, 0.05044286, -0.05696522, -0.043338783, 0.091205366},
{-0.017556021, -0.079328224, 0.012606737, 0.074678846, 0.010580786, -0.102080464, 0.085275665, -0.0045988336, -0.0974659, -0.04657981, 0.00021061438, 0.07581653, 0.07374794, -0.03669833, 0.085139215, 0.08519241, -0.10723185, -0.03668562, -0.08667541, 0.09628678, 0.010505164, -0.037769996, 0.018034704, -0.053182065, -0.0025585776, -0.08331006, 0.05057742, -0.048220366, -0.12612723, -0.040905137, -0.043001857, -0.08504773, 0.059214402, -0.062706046, -0.006089247, -0.07112849, 0.094027326, 0.03149624, 0.07690605, 0.008009027, -0.132573, 0.012450881, -0.04069469, 0.09408736, -0.04377219, -0.07513658, 0.06316872, -0.10432583, -0.013656743, -0.05843577, 0.11089679, 0.06911798, 0.086203344, 0.097269095, -0.033774234, -0.057259463, 0.019109074, -0.10111084, -0.075186744, 0.07811445, 0.027818993, 0.08119137, -0.044170078, 0.099790424, -0.105395995, 0.03735288, 0.03480345, -0.016718395, -0.10237176, -0.06591918, -0.016562443, 0.0590983, -0.045262754, 0.07858827, 0.0637862, 0.0071637486, 0.03523861, -0.054912515, 0.0033190467, -0.1163036, 0.027312525, -0.054625116, 0.08966631, -0.010460293, 0.006128924, -0.03617531, 0.0038950846, -0.028344426, 0.055852003, -0.08449452, 0.06779253, -0.007176332, 0.07317869, 0.073571086, -0.056751102, 0.002406165, 0.0014871359, 0.09821362, 0.09644187, 0.09526239, -0.069716714, 0.056513205, -0.047499303, 0.10228811, 0.07999141, 0.1334991, 0.047864083, 0.06206119, 0.01968554, -0.0051626037, -0.057799377, -0.074080124, 0.04319, 0.007802538, 0.031404004, 0.06428341, 0.065424845, -0.027220264, 0.0174759, 0.07111943, 0.11303672, 0.09368875, -0.028377092, -0.0032633105, -0.014603928, -0.13371119, -0.044277523, 0.0043926607},
{-0.066484615, -0.079101875, 0.011953588, -0.08847308, 0.025823155, -0.033434913, 0.069553085, -0.019285895, -0.052948657, -0.06488734, 0.06005408, 0.061126392, -0.0043443865, 0.01784525, -0.043447405, 0.022910576, 0.084299915, 0.07095362, 0.1111407, -0.06698666, -0.008397223, 0.093341954, -0.0046715382, -0.059484698, 0.04584164, -0.10899389, -0.010827676, 0.04431556, 0.01618162, 0.04986271, 0.10247815, 0.064980015, -0.008562369, 0.109527975, 0.02551165, 0.03555101, -0.11148636, 0.06328868, 0.008249521, -0.12149754, -0.039750773, -0.03364604, -0.10698989, -0.058871623, 0.055940207, -0.10454891, 0.002060838, 0.05947883, -0.014878213, 0.10896726, 0.012223465, 0.069354475, 0.08073969, -0.07370228, 0.09554723, 0.036708556, 0.054454047, -0.10566761, 0.07986825, -0.03963877, -0.11056696, -0.0017918905, 0.0072624553, 0.07486498, -0.020979889, -0.090114675, -0.10057888, 0.015315868, 0.051343516, 0.02036909, 0.01682772, 0.06957781, -0.026025072, 0.0760374, -0.01889468, 0.12723617, -0.0842725, 0.09046449, 0.032087866, -0.11380964, 0.059967037, -0.0470379, 0.0905455, 0.047494728, -0.06951235, 0.06527317, -0.061372686, -0.021770546, 0.0658771, -0.0964394, 0.060922198, -0.0037602603, -0.028588451, -0.012974841, -0.041751023, -0.0007886663, -0.06138546, 0.11871352, -0.050241668, -0.010872476, 0.020555377, 0.07558497, 0.09718578, 0.0564328, 0.092346564, 0.0048973286, 0.06686787, 0.076160215, -0.083038785, 0.07604267, -0.09069147, 0.07845752, -0.0348068, 0.07948633, -0.0670442, 0.111539006, 0.039887875, 0.05452557, 0.07826268, -0.06878394, 0.021335911, 0.05321351, -0.036002643, -0.049756013, -0.079045504, 0.0008893826, 0.106871285, 0.028162612},
{0.09623438, 0.033874914, -0.060679402, -0.123170994, 0.069477744, 0.031654477, 0.07233761, 0.09599368, -0.040294684, 0.04055293, -0.04183198, 0.058226455, -0.05292086, -0.049404185, 0.018472271, 0.042275887, -0.0108792735, 0.009375886, 0.02180394, -0.026988568, 0.09712191, 0.02880374, -0.018264078, -0.09739094, -0.0031537414, -0.08723192, 0.03716986, -0.12439513, -0.14785263, 0.029117879, -0.031588264, -0.0059540104, -0.08475848, 0.15985969, 0.010771319, -0.065153986, -0.048566744, 0.020162124, 0.02603944, -0.028149161, -0.009082689, 0.040384293, 0.06056585, -0.03602247, -0.097719476, 0.08188992, -0.09964551, -0.18920088, 0.08356586, 0.021081131, 0.15147711, -0.020614184, -0.0054151076, -0.013971868, 0.021311179, -0.0337787, 0.06961886, 0.041794434, 0.004938221, 0.0014646209, 0.033763986, 0.047463343, -0.08760047, 0.10419254, 0.00674057, -0.07998276, 0.06981861, -0.040523477, 0.012525496, 0.010273382, -0.020486893, -0.0833815, -0.06987831, -0.017304156, 0.11851377, 0.082883194, 0.044869192, -0.037326485, 0.018069983, -0.025156062, 0.06603251, -0.08508323, 0.00045483594, -0.09158013, -0.1075512, 0.06072234, -0.06714675, 0.057661887, 0.032497287, -0.09066604, 0.08177535, -0.04138251, -0.021708451, 0.16914319, -0.05057153, -0.07383901, -0.09663143, -0.016971666, -0.010718936, 0.0593414, 0.0063294023, 0.17210823, -0.08263948, 0.09070772, -0.14507604, 0.01130942, -0.1883797, 0.056476682, -0.10644507, 0.07220435, -0.03354653, 0.068516955, -0.118488446, 0.055389073, 0.073820606, 0.14110206, 0.050756034, 0.008062206, -0.05881928, 0.08429919, -0.016014043, 0.089363076, -0.0029494076, 0.023730153, -0.07591927, -0.07400107, 0.08257924, 0.21094243},
{0.07526182, 0.19029735, -0.07531855, -0.18604791, -0.094837084, -0.08955309, 0.03412718, -0.054054588, -0.101422, -0.09413723, 0.020899214, -0.05819571, 0.07230889, -0.056467604, 0.020743376, -0.0971101, 0.07995947, -0.05414684, 0.13455878, 0.14206068, 0.061334398, -0.020061502, -0.16114944, -0.07362299, -0.013079257, 0.0515116, -0.08313998, -0.057005573, -0.055352364, 0.022935495, -0.119224176, -0.11186475, 0.033740595, 0.00094173034, 0.023769185, -0.097695746, 0.085207574, 0.010301167, -0.04612433, -0.027732616, -0.13832878, -0.07253572, 0.0500509, -0.048475668, -0.083602965, 0.030932408, -0.081858516, -0.17144457, -0.026052468, 0.042072486, 0.09486625, -0.052713487, -0.08908269, 0.010180905, -0.05914163, -0.05716025, 0.007899069, -0.052832484, 0.13368046, -0.08488447, 0.04882199, 0.066942364, -0.03512819, -0.04861933, 0.013375066, -0.036742814, -0.09348913, -0.10569328, 0.07591177, 0.039552685, 0.028533645, -0.099001326, -0.03249616, 0.0013407784, 0.059882626, 0.05169799, -0.022691382, 0.10510807, 0.07420398, 0.11711226, -0.11751436, 0.046923757, -0.03588557, 0.028366419, -0.10314643, 0.014409716, 0.028194502, -0.05369608, 0.026748732, 0.0930692, 0.17275329, -0.11698027, -0.091687076, 0.015803559, -0.01613994, 0.104840085, 0.04850541, -0.1795173, -0.09128185, -0.095406964, 0.036884278, 0.18585248, 0.099482134, -0.053852484, -0.18219022, 0.018760068, -0.047414556, -0.015384409, -0.019307995, -0.011748786, 0.08182998, -0.060493633, -0.03997937, 0.061060235, 0.03505896, 0.018876534, -0.10550502, 0.058298036, 0.036002822, -0.03811899, 0.07590507, 0.0018411526, 0.028983865, 0.15355283, 0.06370844, 0.015954893, -0.048989274, 0.15369917},
{0.037459515, 0.14525072, -0.02045834, -0.054034743, 0.02002646, 0.0038797036, 0.068928555, -0.02048909, -0.0805209, -0.08989261, -0.02821507, -0.12985097, 0.043163884, -0.00022000309, 0.10998852, 0.1004469, -0.064631395, 0.082165875, 0.14790642, 0.07813502, -0.04556284, 0.018330824, -0.015461348, -0.13375333, 0.008471077, -0.035692286, -0.012451109, 0.009716559, 0.031343516, 0.05951045, -0.0972852, -0.10787655, 0.037762936, 0.09629459, 0.19020689, -0.023437554, -0.06997255, 0.05719509, -0.06364395, -0.030081417, -0.04992958, -0.018668883, -0.0019913123, -0.0011288223, -0.12262435, -0.035067964, 0.026336238, -0.12766112, -0.024186946, -0.15124719, 0.09948728, -0.07033886, -0.057270356, 0.05653694, 0.060877487, -0.11768917, -0.033033933, 0.021187767, 0.08655353, 0.046977784, -0.022826495, 0.040389407, -0.1536597, 0.009572595, 0.00042616576, -0.086673245, 0.03576466, 0.09099491, 0.03131339, -0.06611676, 0.07840046, -0.07432239, 0.07069935, -0.009430941, 0.027514005, 0.18376765, -0.005283222, 0.020812154, -0.0129506, 0.01606078, -0.08139592, 0.085639715, 0.010291979, -0.042710528, -0.008133987, -0.0548904, 0.05006308, -0.012799834, -0.038894683, 0.08661555, 0.028707538, 0.031516667, 0.080218196, 0.03879516, 0.07394244, -0.10151047, 0.032814473, -0.131663, -0.15238133, -0.08571763, 0.06512213, 0.112505436, -0.056104023, 0.065057114, -0.13880831, 0.018548086, -0.012028357, -0.009757985, -0.014437321, 0.09017753, 0.035576593, -0.053867124, 0.05760087, 0.08933614, 0.009304263, 0.111874014, 0.031577777, -0.0562756, -0.02362778, -0.102082655, 0.08638396, 0.021027057, -0.0075542703, -0.03137695, 0.0043796226, -0.044425238, 0.009724436, 0.17228073},
{0.097419426, 0.09717784, -0.004370253, 0.0043067937, -0.08483893, -0.04549124, 0.023813993, 0.013842329, -0.087185405, 0.020794362, 0.032245483, 0.088494495, -0.07513426, -0.087711796, 0.10684437, 0.089155, 0.05280275, -0.044126414, 0.0870229, 0.11227114, 0.08467413, -0.14105044, -0.050815087, 0.057522923, -0.014563994, 0.027330067, 0.099257015, -0.16124472, -0.13718976, 0.04164406, -0.03954249, -0.044424444, -0.05641372, -0.0069303922, 0.14502059, 0.027807422, 0.09234461, -0.0016184273, -0.0030813264, -0.05916406, -0.07228103, 0.0111802295, 0.12122898, 0.05303159, 0.019186763, -0.050172493, 0.024624988, 0.01524199, 0.103390515, -0.14898261, 0.03385609, 0.06835808, 0.0054351594, 0.046311233, 0.037998423, -0.06309514, -0.068253696, 0.032286182, -0.08973107, -0.000649253, 0.015603152, -0.034284223, -0.13434337, 0.06260361, -0.031501427, -0.040615294, 0.022623163, 0.014811315, -0.07971269, -0.027130563, -0.068506405, -0.09758775, 0.038597003, -0.118692316, -0.013035732, 0.08805819, 0.0028209342, 0.033500835, -0.085006304, 0.035660014, 0.0015425613, 0.09038204, 0.04116084, -0.012497481, -0.12195495, 0.051823005, 0.12955059, -0.024300858, -0.05787558, 0.095608555, 0.011090575, -0.071242295, -0.10540957, 0.1529773, 0.01289265, -0.05374101, 0.048029006, -0.12309241, 0.028625956, 0.030607566, -0.09916251, 0.044595692, 0.099037476, 0.07550967, 0.05493267, 0.04116706, -0.031294335, 0.008939566, -0.07335329, -0.019139078, 0.11842482, -0.07985796, 0.1487013, -0.10473615, -0.048826236, -0.00080733735, -0.083832055, -0.01929672, -0.079464994, -0.045527965, -0.037855152, 0.07120266, 0.09831799, -0.032587238, -0.07225227, 0.04795235, -0.020659532, 0.06695122},
{-0.01592408, -0.033210464, 0.029845817, -0.068074435, 0.039837576, 0.08869219, -0.091890976, -0.0020918772, -0.039029554, -0.03953916, -0.06951689, -0.030392678, 0.026773876, -0.09671634, 0.09531619, -0.007916382, 0.097719744, -0.023269113, -0.07086318, 0.02584907, 0.07778405, 0.064839765, -0.029583728, -0.11801364, 0.06799995, -0.07898866, 0.07786094, 0.043133322, -0.10100697, -0.024146596, -0.09646503, 0.067134306, 0.069603354, 0.09569625, 0.08499292, 0.096211545, -0.08484487, -0.036583953, 0.027906561, -0.06674641, 0.033673044, -0.014207803, 0.036575075, 0.09828345, 0.0056521073, -0.091542184, -0.089321576, 0.059982862, -0.043380886, -0.07165624, 0.13432364, 0.007679343, -0.11094737, -0.10132913, -0.0047614425, 0.07995989, -0.13323693, 0.096956596, -0.0019373554, -0.035615116, 0.0932032, 0.010942717, -0.09118304, 0.04813531, -0.08954241, 0.058085814, 0.026005393, 0.066258624, -0.012277748, -0.13032731, -0.013793182, -0.017358724, -0.020925425, 0.054482967, 0.13791488, 0.16317901, -0.0052030105, -0.08134085, -0.00263489, 0.05732481, 0.0038360413, 0.015390515, -0.017614195, -0.020131744, 0.0021734114, -0.013051078, 0.06718555, 0.006078037, -0.026585033, -0.0521938, -0.046011932, 0.09057901, 0.038982883, 0.04659981, 0.14106815, -0.085776925, 0.007167682, -0.056727175, -0.033398785, 0.06381279, 0.032384872, -0.049730998, -0.10121892, -0.03325454, -0.01462521, 0.011052198, 0.054989748, -0.11027738, 0.036528032, -0.037204433, -0.05773908, 0.03195618, -0.030734163, 0.031967297, -0.10153495, 0.16143215, 0.05651621, 0.06029761, 0.03306049, 0.0089612305, -0.08093861, 0.14658783, -0.015074504, 0.049537573, -0.019057006, -0.09367195, 0.022363136, 0.0748808},
{0.121143036, -0.07344791, 0.15249185, 0.04568606, -0.016767273, -0.05943154, 0.08831148, -0.06987861, -0.060708266, 0.0936047, 0.11844007, -0.12842435, -0.08271798, -0.10801592, -0.08070574, 0.11401714, -0.008854279, 0.069519855, 0.12539105, 0.026341897, 0.062201675, 0.04430549, -0.11314154, 0.1789229, 0.0697918, -0.1566684, -0.021761121, -0.07623587, -0.008208324, 0.069014005, 0.0745094, -0.0015740145, 0.0075983973, -0.0083933575, 0.033111315, 0.07177709, 0.030389171, -0.00907651, 0.0777338, 0.049184408, 0.08992302, 0.06319901, 0.13759865, 0.013282731, 0.010853518, -0.090141974, 0.09831506, -0.001303321, 0.09386201, -0.11116658, 0.09414213, -0.009067543, 0.056356356, -0.027186953, -0.01980915, 0.18326174, -0.07786746, 0.040340587, -0.015693255, -0.09308563, 0.08744534, -0.085417315, 0.022169888, -0.020122908, -0.0139473975, 0.022767562, -0.074584045, -0.018505052, 0.043837015, -0.04654161, -0.103875816, -0.07438407, -0.07054414, -0.026643142, 0.13168028, 0.06186765, 0.04638145, 0.043859467, -0.08108324, 0.0941898, 0.035700165, -0.07828802, -0.097177535, -0.083849534, -0.06367136, 0.0006361329, -0.0818498, 0.031749707, 0.07974656, 0.09328793, 0.06956486, -0.0016533971, 0.0707355, -0.0056403643, -0.049984492, 0.07560359, -0.065891504, -0.058384564, 0.009001252, -0.061984938, -0.045228776, -0.011913608, -0.00096643594, -0.041043475, 0.07683517, -0.05856601, 0.017774763, 0.05797171, 0.09570467, 0.0838291, -0.0019411771, -0.08494574, 0.16082019, 0.08075667, -0.007626988, -0.026160276, 0.067275204, 0.01869315, -0.039724335, 0.05904728, 0.0020058183, -0.14552112, -0.10682454, -0.07555718, -0.058883432, 0.06373615, 0.08981833, 0.002528096},
{0.038034204, -0.090790965, 0.05434102, 0.0686408, 0.023871504, -0.051189676, -0.07786058, -0.08317303, 0.07019371, 0.103341386, 0.020707473, -0.10506386, -0.0021998736, 0.040539607, -0.08529713, -0.047267064, 0.013153172, 0.020431336, -0.05762807, 0.04400759, 0.08849219, 0.027864229, 0.008943434, 0.06196591, 0.05126548, -0.028424835, 0.09283709, 0.070440084, 0.08078271, 0.031012928, 0.04967332, -0.013595264, -0.01914218, 0.081376016, 0.1248414, -0.06487034, -0.058241144, -0.1417484, -0.058507707, -0.045916617, -0.026038358, 0.075333446, 0.017536271, 0.05827062, 0.087227575, 0.011973987, 0.022754148, 0.012765315, 0.018446982, 0.06543143, 0.010128058, 0.036578804, 0.07971595, 0.035465017, -0.030187927, 0.09125576, -0.05577518, -0.06395789, 0.08055137, -0.0926875, -0.055267867, 0.03663669, -0.15004049, 0.0022325218, -0.0022341758, 0.08307073, 0.02201999, -0.036235824, -0.13091531, -0.034672, 0.07100741, -0.0071165445, -0.05472553, -0.07223637, 0.084502496, -0.10964426, 0.09125286, 0.0567832, 0.041007336, 0.12700677, 0.111369476, 0.049880475, -0.02787059, 0.00948488, 0.14954631, 0.032657336, 0.07720014, -0.11834986, -0.021063207, 0.08523088, -0.04239155, -0.046426106, 0.034157902, -0.001319527, 0.071492605, -0.015347101, -0.092760675, 0.024416922, -0.12537937, -0.017606258, -0.0038667694, -0.0053097256, 0.038710028, 0.0031007454, 0.03133589, -0.014294644, 0.10337526, -0.0033130816, 0.16356322, 0.09062461, -0.025694177, 0.014072232, 0.14748475, -0.04402443, -0.056392178, 0.008957151, -0.095223345, 0.06640488, -0.07633899, -0.013006918, 0.08926038, -0.029628605, -0.0029771102, -0.017112343, -0.022416957, 0.07194379, 0.16963631, 0.036815204},
{-0.12840763, 0.0956879, 0.054373942, -0.04567937, -0.1109428, 0.08963063, 0.025754306, -0.067367464, 0.063335955, -0.102157906, -0.04258525, 0.12521677, -0.12789087, 0.09539928, 0.06637251, -0.015375677, 0.081330866, 0.08816828, 0.016698854, 0.08056297, 0.042383853, -0.11092653, -0.06415629, 0.03671424, -0.033581574, 0.13747522, 0.0729306, -0.12096226, -0.10463312, 0.0074961777, 0.024480848, 0.06588191, -0.035026234, -0.057435162, 0.11563008, -0.069677904, 0.09680504, -0.020266522, 0.01904764, 0.040180948, 0.0654646, -0.044019736, 0.1498745, -0.043728083, 0.11303873, 0.039156936, -0.10472088, 0.100641094, 0.05919291, 0.0014834531, -0.14619376, 0.0721726, 0.08677658, -0.044844687, -0.043793842, -0.0032096682, 0.023411257, 0.0226378, 0.0007195069, -0.043647416, -0.09176123, -0.04464301, -0.013287434, -0.0703534, -0.053217936, -0.081257924, -0.06110633, -0.0058507025, 0.01562608, 0.009992014, -0.028099723, 0.087659635, -0.018451758, -0.011112587, 0.01382215, -0.036376555, -0.05643517, 0.07385413, -0.017845353, 0.053465288, -0.014376568, 0.09078172, 0.06679444, 0.073444724, 0.09847907, -0.102804825, 0.08355391, 0.035930064, 0.038506113, 0.098339185, -0.113286175, 0.08640985, -0.0033454672, 0.10941685, 0.049844857, 0.05928278, 0.01928547, 0.011666899, -0.03824197, 0.03679733, -0.032024376, 0.16532685, -0.067507006, -0.028934203, -0.011700513, -0.13452576, -0.02017236, 0.08924691, 0.094132565, 0.05205039, -0.12040503, 0.055030316, -0.069047146, -0.031293802, 0.06250201, 0.07060755, -0.094247416, -0.069334544, 0.043869115, 0.016762339, -0.018323442, 0.1267551, 0.086497046, -0.08685402, -0.09039027, 0.10988852, -0.09987861, -0.005242697},
{0.049285725, 0.13384627, -0.052241985, 0.0072613833, 0.038082127, -0.089382805, -0.05160517, -0.06394244, 0.06970765, 0.101321205, -0.13953716, 0.014532614, -0.10237527, 0.118215054, -0.050157126, -0.028345084, 0.072402984, 0.009863561, -0.08444877, 0.056753963, 0.030678455, 0.037899174, 0.11249541, -0.09642807, 0.050406482, 0.033389974, -0.01056888, -0.11312578, -0.055601962, -0.10806956, 0.028394522, -0.031263378, -0.10683049, -0.061305083, -0.05399108, 0.016938193, 0.058738485, 0.042296007, 0.015918566, -0.054743003, 0.106476165, 0.022381842, -0.040686212, -0.07505276, 0.12207578, -0.09806338, -0.020342492, 0.013198174, -0.08847262, 0.048108697, -0.06346017, 0.10394347, -0.041665245, 0.0091623105, -0.09792778, -0.108626194, -0.06001438, -0.038077332, -0.02860237, 0.055591352, 0.048239328, -0.06752886, 0.09067832, -0.020945705, -0.10289704, 0.051333476, -0.040539917, -0.041985936, 0.15552223, -0.11827789, 0.068274185, -0.0051959907, -0.051036928, -0.03152507, -0.07881433, 0.053206947, 0.031517256, -0.06265332, 0.011128816, 0.006670972, 0.08641787, 0.036329478, -0.10094029, -0.105689295, -0.009178597, -0.1077682, 0.028562134, 0.020247864, -0.05988655, -0.068630815, -0.057588678, 0.028377995, 0.025115222, 0.06615551, 0.0787284, 0.055153638, 0.093420744, 0.06949121, 0.06510218, -0.085936844, -0.10499128, 0.038174327, 0.0606117, -0.08074636, -0.008014807, -0.057392165, -0.08969918, -0.093304195, 0.0715475, 0.07794192, -0.07470841, -0.098708846, -0.04824544, 0.07106955, -0.07921172, -0.07483658, -0.03420308, -0.07951795, -0.08766687, -0.09663656, -0.032566193, 0.064049006, -0.010461714, 0.10581145, 0.092624426, 0.102474324, 0.02628812, -0.044869315},
{-0.00526087, 0.106246784, -0.0020073822, -0.04089391, -0.10168797, -0.06626753, 0.024083596, 0.05698456, -0.02172868, 0.017488107, -0.049511224, 0.108669855, -0.08056572, 0.12205833, 0.047709294, 0.069619946, 0.005267585, 0.078291014, 0.032088462, -0.09024071, 0.020727737, -0.115030736, -0.005169797, 0.0139465695, 0.03445286, 0.09791639, -0.061925683, -0.027001195, 0.057412613, 0.0153813455, 0.0839045, 0.08846043, -0.07946315, 0.027414326, -0.10948795, 0.04022042, 0.032619298, -0.051845144, -0.15093894, 0.059246957, 0.08443014, 0.058207706, 0.12848006, 0.09151331, 0.08966362, 0.024127498, -0.06592378, 0.090181045, -0.0966862, -0.09074787, -0.10176624, -0.014061332, 0.065067455, 0.0884343, -0.055672437, -0.0359823, 0.14019115, 0.042220265, -0.04656902, 0.029734127, 0.019431151, 0.050461486, 0.10437883, 0.032250553, 0.06325492, 0.008467012, -0.09368211, -0.10408468, 0.022896843, -0.15418991, -0.020349964, -0.109314844, -0.034067072, 0.014122575, -0.1414633, -0.069822595, 0.13508631, 0.0896077, -0.120838895, 0.075373195, -0.09506256, 0.005513005, -0.0061392603, -0.084056035, 0.09389721, 0.09298683, -0.017245771, -0.12094806, 0.15692402, 0.022942746, 0.042445913, -0.083090395, 0.023459807, -0.002052914, -0.041175753, -0.074516766, -0.10248597, 0.10115005, 0.113084994, 0.04179217, 0.026596978, 0.0015753598, -0.01132372, -0.0870503, 0.04286484, -0.09905357, 0.09731517, 0.022440322, -0.07832288, -0.06692461, -0.10269049, -0.059052218, 0.09155584, 0.04915737, -0.103219844, -0.08536974, -0.061582692, 0.041092172, -0.078825295, -0.05135902, 0.055365976, -0.088896096, -0.051787768, -0.032745168, 0.08007282, 0.026595756, 0.0085042985, -0.024177033},
{-0.031011337, -0.0040848297, 0.014255323, -0.02662536, 0.00538201, -0.07775513, -0.10900668, -0.08491069, 0.026344523, 0.0137672275, -0.009281901, 0.04068106, -0.055962965, 0.06885751, -0.13236056, -0.017925892, -0.028163418, -0.058143202, -0.12733278, -0.029080426, -0.049451984, -0.13386433, -0.02359969, 0.036113586, -0.04584999, 0.11928547, 0.062109213, 0.091379255, 0.08409585, -0.09227371, 0.021358306, 0.052579187, -0.044105656, -0.12310791, -0.073527075, -0.05475242, -0.072338425, 0.04530073, 0.04410831, 0.026825573, 0.01959533, -0.06618805, 0.09772923, -0.086889856, 0.15209225, -0.10950498, -0.024523012, 0.029107792, -0.041801974, -0.09516702, -0.07703223, 0.10035199, 0.10022953, -0.07212678, -0.024055243, 0.088343404, -0.039288413, 0.07262857, 0.05454555, 0.026647512, 0.05945353, -0.085857324, -0.003426632, -0.10047883, 0.06656347, -0.05946337, -0.019406741, 0.015334979, -0.0049273027, 0.017893502, 0.0012358846, 0.07696505, 0.0012351424, -0.079237156, 0.018577438, -0.034252748, -0.012477294, 0.049678728, -0.12753174, -0.00837178, -0.004916609, 0.098423555, -0.090850614, -0.011000546, 0.13665614, 0.07933778, 0.039657395, -0.07951403, 0.1356558, 0.060070254, -0.07146759, -0.037569594, -0.102205485, -0.064428374, -0.04036381, 0.092350364, -0.09199097, -0.03280078, -0.0045185955, -0.021424003, -0.10364934, 0.06338457, -0.04746892, 0.050408766, 0.10602398, -0.12265694, 0.10350418, 0.012831103, 0.040469773, 0.0040350105, -0.012039625, 0.012732759, -0.01134841, 0.05153911, 0.087497935, -0.043516967, -0.00069285464, 0.063378006, 0.09377716, 0.068569794, -0.1272716, 0.09731597, 0.06041665, 0.06859901, -0.08337384, 0.12857287, -0.09312771, -0.0737922},
{-0.11138526, -0.025463143, -0.011905377, -0.039237387, 0.006735459, -0.022855349, -0.02977322, 0.00051014125, 0.05978574, 0.038163364, 0.055689573, 0.014494843, -0.0561314, 0.016290817, 0.047839053, 0.013316185, -0.10501399, -0.09836219, -0.0076829637, -0.10815658, -0.06858771, 0.014137981, 0.13942249, 0.14439029, -0.032038186, 0.03272803, -0.055334058, -0.006353998, 0.05199676, 0.00035790136, 0.15964365, 0.03249816, 0.089198135, 0.010370125, 0.09187786, -0.03814378, 0.038224988, 0.08594279, 0.06869289, 0.11746559, 0.011006763, 0.011105917, 0.061589964, 0.02962651, 0.07337331, -0.024691384, 0.007845134, 0.12498851, 0.0011108071, -0.009449191, -0.060030412, -0.09073912, 0.09221699, -0.053818654, -0.017858565, 0.026359493, 0.10610534, 0.10479477, 0.09951061, 0.008410307, 0.08436828, -0.06981552, 0.12716514, 0.02053687, -0.03945732, -0.01883046, -0.06443387, -0.056611158, 0.046201896, 0.010584779, -0.09927522, -0.06766339, 0.053377926, -0.011789044, -0.13296145, -0.018075176, -0.08161899, -0.04523162, -0.023154337, 0.060759205, -0.050933026, -0.018074825, -0.043187667, 0.07408087, 0.16828972, 0.061308905, 0.11303808, 0.02308192, 0.047684997, 0.07761539, -0.038067993, 0.026235728, 0.03364487, -0.16702642, 0.010934383, -0.012152649, -0.09328686, -0.038205113, 0.15496211, -0.10260888, 0.03750591, -0.11670094, 0.039097622, -0.05010624, 0.14193244, 0.045273717, 0.16606955, -0.04994494, -0.015696548, -0.039055884, 0.05048704, 0.0048725307, -0.012767444, 0.036608797, -0.03875844, -0.09167254, -0.083102785, 0.008888669, -0.08713039, -0.06813112, 0.06359629, 0.080210015, -0.07507036, 0.042932328, 0.10270868, 0.074483305, -0.10105565, 0.024479572},
{-0.07646714, 0.07955155, 0.05165818, 0.06226959, -0.043549966, -0.075072095, -0.024244014, -0.049558457, 0.10451242, 0.021643668, -0.015926743, 0.025092365, -0.04119502, -0.07143096, 0.045707688, -0.027371127, -0.022230005, 0.0014173436, 0.06462058, 0.032956768, -0.08827035, -0.021520663, 0.09443262, -0.042152386, 0.10812388, 0.06934497, 0.09459347, 0.075556956, 0.039767582, 0.042351197, 0.050771262, -0.016788272, 0.015557212, -0.054090057, -0.037638504, -0.065349825, 0.05350579, -0.039178245, -0.04903263, 0.09495646, -0.04000591, 0.0425774, -0.06713057, 0.07135992, 0.051136017, 0.08953496, 0.048845097, -0.04357595, -0.041736253, 0.080643035, 0.029172065, -0.0051341876, -0.07606717, 0.07280641, 0.06836118, 0.044301603, -0.052670583, -0.093640715, 0.032521807, -0.10872393, 0.044496775, 0.042753488, 0.013892122, 0.019037053, -0.10637017, -0.08237701, 0.014491145, -0.06703922, 0.10475307, -0.015801715, 0.04027652, -0.04361227, -0.09403028, 0.0025261268, -0.08079227, -0.056552082, 0.018266236, 0.053028762, -0.017564934, -0.02036364, -0.037229814, -0.046603296, -0.081372984, -0.08083362, 0.15423241, 0.07199097, 0.10114194, -0.056746848, -0.044216197, 0.09171827, -0.11257918, 0.053040907, 0.03414215, -0.13222815, 0.046243638, -0.07932182, 0.018060058, -0.05420731, -0.0015900161, -0.09181001, 0.034975752, 0.09699609, 0.007991533, -0.10112665, 0.06267217, 0.0731759, 0.05443427, 0.02842207, -0.0052682827, 0.032950755, -0.09489495, 0.018375866, 0.021520093, -0.026506286, -0.0015660524, -0.042761307, 0.06961503, 0.007882617, 0.07167582, -0.09719375, 0.062148135, -0.09801238, -0.1107686, -0.08198211, -0.08445169, -0.059385046, -0.05025525, 0.022806473},
{0.013282166, -0.044648446, 0.061597515, 0.117018625, 0.041667853, 0.043718755, -0.0798783, -0.050593887, -0.040075652, 0.021478951, -0.079597406, 0.029875765, 0.07894511, 0.055754896, 0.02472929, -0.024603385, -0.074479766, -0.10898897, -0.06899306, -0.0019115958, 0.09620412, -0.088933565, -0.004092909, -0.023531253, -0.018792847, -0.052351627, 0.07239838, 0.052837513, -0.083534986, -0.08064321, 0.05888546, -0.10568342, 0.06698484, 0.059106566, 0.07352663, 0.03643549, -0.08302283, -0.07773743, -0.022589779, 0.073916934, -0.030056028, -0.07735123, -0.03259966, -0.016029837, 0.013652649, 0.06492689, -0.04273244, -0.04797867, -0.06131862, -0.016505487, 0.011183018, -0.10477227, -0.017606258, -0.020569807, -0.013803162, 0.035352476, 0.1072018, 0.10004093, -0.08416475, -0.019121502, -0.08716286, -0.053634383, 0.033904523, 0.01912944, 0.018048465, -0.00898056, -0.102376096, -0.0066845343, -0.059235178, -0.096452974, -0.017561922, -0.024302611, 0.079955906, 0.07962237, 0.07629685, -0.024472559, 0.073825836, -0.068304375, -0.016290527, -0.073287636, 0.09676214, -0.061047614, 0.0087706065, -0.020234533, 0.02402625, 0.07494262, -0.019614387, -0.02042997, 0.04579739, 0.04124611, 0.008870926, 0.026739122, -0.10435993, -0.030295497, 0.056443673, 0.10565895, 0.03712067, 0.10928214, -0.04464552, 0.007107854, 0.08340815, -0.03839021, -0.09492965, -0.08043975, 0.004485376, 0.069902144, 0.100315295, -0.014247792, 0.0075802077, -0.09192201, 0.0029353192, -0.10413002, -0.0644216, -0.08846327, -0.020288765, -0.069164954, -0.08516376, 0.026269317, -0.06230915, 0.00019643456, 0.10121966, 0.024559299, -0.07398078, 0.035033673, -0.033678822, 0.056630053, 0.07938538, -0.092418686},
{-0.09725257, -0.07393405, -0.100386806, 0.10086001, -0.09760222, -0.023698792, 0.086374335, -0.100830026, -0.08476251, -0.02431222, 0.09731493, 0.0022004312, -0.062170092, 0.09229813, 0.01758231, -0.058299232, -0.043509893, -0.024654843, -0.060669832, 0.079787545, -0.10803677, -0.002925738, 0.04358123, 0.07706502, -0.042523243, 0.041593365, 0.07341626, 0.053565033, 0.0060151503, 0.074118674, 0.05924373, -0.09259796, -0.08243686, 0.010992656, -0.04039353, 0.018361237, 0.013040216, 0.08847146, 0.06955635, 0.0008157739, -0.035598334, 0.06691064, -0.0038948972, 0.08185462, -0.037214905, 0.069256164, -0.020044573, 0.10259871, -0.09914515, 0.03936206, 0.021317592, 0.027981102, -0.045240194, -0.049964525, 0.07233627, 0.083333276, -0.078452766, -0.057977013, -0.10416069, -0.025325146, 0.015810566, 0.064777456, -0.06984473, 0.06511125, -0.102490164, -0.03428922, -0.044367064, -0.033915594, 0.023174517, -0.10749544, -0.043124717, 0.009409163, 0.026233703, 0.081476934, 0.02587796, -0.08799631, 0.08755925, 0.085403115, -0.040853832, -0.028716827, 0.1373933, -0.053183243, -0.09159519, 0.016201328, 0.07912692, 0.06707063, -0.070906006, -0.06409959, 0.09770829, -0.031261154, -0.1004231, -0.05298703, -0.05390113, -0.009341053, 0.1240948, 0.026130095, -0.016382553, 0.030020654, -0.023767816, -0.042655222, 0.103989676, -0.008962659, 0.037558813, 0.091933966, 0.13240868, 0.04217441, 0.07192689, 0.0041153803, 0.06700404, 0.08226989, -0.038700584, 0.021273434, -0.022231594, -0.040678933, -0.03625098, 0.0810576, -0.041662376, -0.08614004, 0.0828813, -0.046330538, 0.103470296, -0.066536434, -0.025670454, 0.05260445, 0.06579563, 0.07840421, 0.082622506, -0.06650775},
{-0.1105446, -0.07665424, -0.093903705, 0.057095908, -0.09028765, -0.015822679, -0.049201254, 0.019343406, -0.0043145865, 0.049785823, -0.089191265, 0.11985937, -0.10202229, -0.043664183, 0.059343297, 0.01846765, -0.087011, 0.083702065, 0.08182389, 0.0690654, 0.0699204, -0.06072268, 0.05443581, 0.051363032, -0.015041481, 0.076899104, 0.088607654, 0.043113604, 0.00881455, 0.09586109, 0.091215715, -0.10429244, 0.09649434, -0.03966362, -0.08183349, 0.038558364, -0.04772715, 0.0119616715, -0.009278736, -0.036181133, 0.069093704, -0.04766785, -0.040858444, -0.09237085, 0.06745711, 0.0021052128, 0.094316736, 0.023666717, 0.036439195, 0.012313102, -0.10352665, -0.041101985, 0.043852128, -0.022364937, -0.06867188, -0.031837936, 0.05311217, 0.052521065, -0.0846293, 0.045759883, -0.08285764, -0.019532552, 0.06448677, -0.06115949, 0.07774921, 0.026198676, 0.07946855, -0.07500642, -0.102548316, 0.0019480741, 0.040179804, -0.05067156, 0.048268035, -0.034932796, -0.07624558, 0.027853653, -0.024829693, -0.095416166, 0.0831233, -0.07666566, 0.076866314, 0.066288725, 0.07494531, -0.048004188, 0.071813986, -0.052837685, 0.014205257, 0.09754239, -0.026085053, 0.04602744, -0.079997025, 0.014375369, -0.06443583, 0.049294095, 0.10189764, 0.04948622, 0.01018966, 0.018498324, 0.021664223, 0.06855571, -0.059043195, 0.08150508, -0.082196206, 0.058254704, 0.031301327, -0.05666921, 0.058999654, 0.08969288, -0.0056199473, 0.0036413716, 0.027301595, -0.03732966, -0.086213425, 0.08498351, -0.051183473, 0.07140495, 0.0953279, 0.03009203, -0.010082082, -0.029227324, 0.062134866, -0.07207486, 0.06809702, -0.09419489, 0.07299456, -0.07848728, -0.102292895, 0.055096734},
{-0.10852108, -0.013620514, 0.061331574, 0.10145892, -0.0014649539, 0.10299753, -0.022366863, -0.072929665, -0.03887017, 0.023853824, 0.010817739, 0.0905089, -0.0072634434, -0.011113041, -0.08524348, -0.033949465, -0.04980912, 0.084469035, -0.049192704, -0.11405365, 0.066783495, 0.052552823, 0.1180853, 0.020707913, 0.023953767, -0.011394984, 0.053118676, 0.018194528, -0.08342412, -0.055406388, 0.044952404, -0.0048503233, 0.08358631, 0.080323294, 0.0042806915, 0.018035125, 0.005784493, -0.051639, 0.073153846, -0.05218875, -0.07025651, 0.09143998, 0.07446114, -0.08407991, -0.04861876, -0.07704564, 0.0848345, 0.074900776, 0.02691634, -0.00077565876, 0.036847703, -0.06568475, 0.096126564, -0.03734298, 0.037540615, 0.028445391, -0.021750815, 0.03200282, -0.054220363, -0.07672615, -0.08634752, -0.008161855, 0.08974735, 0.037447974, 0.02070637, -0.04377724, 0.095524006, -0.008737244, -0.116384596, -0.018746413, 0.08817453, -0.025277164, -0.01996769, 0.096974455, 0.0027487897, 0.044755425, 0.015663411, 0.10159066, 0.020357361, -0.09577915, 0.08352675, -0.08371067, 0.10367065, -0.08464568, -0.08175257, 0.08463765, 0.006086925, 0.010094281, -0.005927148, -0.04598557, 0.101117216, -0.03561604, 0.0022162572, -0.09699125, -0.07442398, 0.048290655, -0.07416156, 0.06026131, -0.08161698, -0.09624085, -0.059139162, 0.07570301, 0.014788464, 0.0011590719, -0.05394919, -0.010865503, 0.05949611, 0.033375252, 0.11834495, 0.08004259, -0.09667161, -0.06442569, 0.02797102, 0.038267706, 0.03113085, -0.008714035, 0.035927605, 0.06770851, 0.07258769, -0.014510274, -0.02577072, 0.106568485, -0.046167042, 0.09083265, 0.07194796, -0.013562785, -0.08443523, -0.10012724},
{-0.010389855, -0.0005751611, -0.07164019, 0.10730132, 0.04211656, 0.036425248, 0.0036401604, 0.05589637, 0.071958184, -0.088235825, 0.12431177, 0.03321541, 0.091822, 0.02663678, 0.05752416, 0.09585695, 0.07298409, 0.06381285, 0.05184855, 0.056988195, 0.09003379, -0.07027638, -0.043933112, 0.04359035, 0.04414168, -0.04364658, -0.012515285, -0.04159832, 0.07415873, 0.094753735, -0.007333987, 0.08772527, 0.030639717, 0.099530615, 0.016074575, 0.083922334, -0.059390932, 0.07233936, -0.0096145235, -0.1009912, 0.053588953, -0.012625359, -0.0512781, -0.008419813, -0.024037194, -0.05438701, -0.08515168, 0.039950438, 0.083019525, -0.035473138, 0.077322654, 0.034629315, -0.038029067, 0.07680611, 0.010564618, -0.0076935296, 0.033695683, -0.09974773, -0.016920581, 0.050631497, 0.07940654, -0.013637888, 0.054243118, 0.06208706, -0.038141787, 0.04266861, -0.109370835, 0.04261647, 0.021662027, -0.037654687, 0.040476, -0.10891927, -0.06874013, -0.02134256, 0.095084585, 0.09613192, -0.09581793, -0.025241435, -0.08742297, -0.094045706, 0.09718706, 0.080152825, 0.040179566, -0.006913886, 0.04023109, -0.0110837845, 0.10674224, 0.060809262, 0.10204488, 0.00017910413, 0.09080351, -0.072554395, 0.016614698, 0.09787096, -0.09549491, -0.012959592, -0.104363315, 0.0531232, 0.0808649, -0.057190787, -0.018723756, 0.010962804, 0.02146205, 0.019755244, -0.080497056, 0.03731396, -0.0057002916, -0.043909065, -0.029857526, -0.016546559, -0.09923865, 0.053107783, 0.0018367462, 0.06376196, 0.041337386, -0.056645606, -0.019787623, -0.060903408, -0.03378256, -0.10134512, 0.0016836711, 0.020913213, -0.071362376, 0.06565365, 0.05079569, -0.12265357, -0.033315778, -0.057892498},
{0.026539572, 0.060121115, -0.020267067, -0.09830049, 0.038951363, -0.06826086, -0.09574029, 0.07735062, -0.0038366467, -0.088023484, 0.12958936, -0.054080885, 0.050910424, -0.09259165, 0.021476453, 0.10405066, -0.08117645, -0.08180896, -0.079542495, 0.020809215, -0.0061066686, -0.08227078, -0.027577534, -0.012879514, -0.02477616, -0.053489324, 0.07128288, -0.09937845, -0.03599169, 0.079128556, 0.052223247, 0.029565917, -0.08673252, 0.01363789, 0.09231228, -0.00702355, -0.015864009, -0.046073835, 0.07540584, -0.023259128, 0.044732764, -0.06881668, -0.013768046, 0.098107085, 0.07201248, 0.03038821, -0.10108197, 0.101136215, -0.033301502, 0.04600691, 0.033165853, 0.010397255, 0.010184197, -0.106352404, -0.025567442, -0.03199655, -0.03926337, -0.07472047, 0.012730802, -0.048610248, 0.054155506, 0.045561798, -0.07282035, -0.045704678, -0.07230155, -0.0051704547, -0.00040011812, 0.007389456, -0.019336976, 0.04344872, -0.09516074, -0.053482685, -0.03199985, -0.018579135, 0.076997295, -0.069331035, -0.13726425, 0.04232818, -0.029939812, 0.05603322, 0.14382553, 0.09245223, 0.032655396, -0.037706386, -0.0660339, -0.053443607, 0.05659941, 0.035839856, 0.008039663, -0.040433727, 0.06327487, -0.032187782, 0.0426275, 0.1035881, 0.013052888, -0.05764595, -0.00372459, -0.050214045, -0.0027384327, -0.020402856, -0.037773848, -0.009276672, -0.014982823, -0.038535878, 0.109910674, -0.004358209, 0.065321214, -0.03378946, 0.10653749, 0.06635782, 0.023318423, -0.103600696, -0.0050238147, -0.054124855, 0.058645472, -0.012670548, 0.028842475, 0.02228877, -0.086288184, 0.004044801, 0.0392065, 0.00043682603, -0.09599652, -0.090969875, -0.0067396313, -0.08767474, 0.09891564, -0.058856405},
{0.00043161798, 0.04736074, -0.10017169, -0.037389554, 0.06702125, 0.006577559, 0.016451456, 0.034753874, -0.037957877, 0.08862786, 0.14079955, 0.076610364, -0.06404387, 0.03427865, 0.03360927, -0.016833723, -0.10302298, -0.07855376, -0.025322262, 0.030820495, 0.08058018, -0.08065671, -0.04888159, -0.12379348, -0.03400624, 0.033606198, 0.016233362, 0.067412496, -0.088388525, -0.07274571, 0.10460963, 0.085515246, -0.0642652, 0.08558846, -0.0333046, 0.0083451625, 0.041470014, -0.005684213, 0.041361153, -0.08958875, -0.110534966, -0.006804824, 0.017976712, 0.036433585, -0.022406304, -0.047605705, -0.09208401, -0.0468812, 0.08131038, 0.05240583, 0.05461162, -0.06588729, -0.036653806, 0.04195163, 0.0386412, -0.056974202, -0.050898544, 0.10240774, 0.03232163, 0.04581607, -0.08321804, -0.10260253, -0.056664716, -0.07389642, 0.058940798, -0.10660832, -0.0857402, 0.027880818, 0.018690202, -0.09366797, 0.05038339, 0.027470602, -0.08142023, 0.10407553, -0.036503475, 0.12346532, -0.14501405, 0.054281577, 0.0020281638, -0.06511172, 0.036409274, -0.025499761, -0.05794824, 0.032111038, -0.026417945, -0.10252396, 0.055833824, 0.13589028, -0.08682286, -0.006509604, 0.08323303, -0.0678535, 0.08021411, -0.060847506, -0.0750119, -0.0323727, -0.103630275, 0.04139018, 0.06997116, 0.078920946, 0.055460975, -0.022498498, -0.015457726, -0.04354792, -0.04530346, 0.07944966, 0.010295506, -0.0515045, 0.027094442, 0.07346593, 0.06973174, 0.074584976, -0.04323609, 0.03362992, 0.03172852, -0.04572735, 0.07450715, -0.022624351, -0.023845408, 0.03678435, -0.058279466, -0.092390046, -0.053091537, -0.10595093, -0.03251172, -0.1281317, 0.10634244, -0.106969275},
{0.03122004, 0.11969162, 0.06853378, -0.048916824, -0.016895171, -0.070376396, 0.10800321, 0.076197594, 0.052521393, 0.039403737, 0.055622604, -0.07027907, -0.017721906, 0.039044946, 0.020815998, 0.034480758, 0.026121568, -0.1114675, 0.09841476, -0.002228299, -0.062088855, 0.06155781, -0.05136911, -0.14082956, -0.11478315, 0.05216449, -0.0010113948, -0.10214537, -0.09430582, 0.03660297, -0.06329934, 0.009402981, 0.08255066, 0.07946006, 0.101055115, -0.07828391, -0.093137324, -0.016220048, 0.06729726, -0.031153092, -0.18116766, -0.102851495, 0.058665037, 0.017660009, -0.14338641, -0.08404439, -0.022672944, -0.120603606, -0.10486791, 0.042439606, 0.046980068, -0.018601485, 0.057288602, -0.037284117, 0.049925566, -0.008796505, 0.112552255, 0.016855896, -0.04351202, -0.02216978, -0.047943763, -0.09593789, 0.034389447, 0.009557828, 0.00063696504, 0.004540186, -0.015720949, -0.07653987, 0.021780815, 0.021118104, 0.09493856, -0.0902917, 0.04156226, -0.06935388, 0.1418775, -0.014853299, -0.048657224, -0.075134695, 0.015747182, -0.044193327, -0.13379028, -0.10357764, -0.027394846, 0.042745106, -0.16537668, 0.000958688, 0.0061971564, 0.13958985, -0.1346151, -0.07886234, 0.17516187, -0.104017824, 0.0051419884, 0.0967641, -0.10049249, -0.049441345, 0.048304886, -0.068599835, 0.019322408, 0.069392815, -0.08516119, 0.07862355, -0.110662416, -0.086898565, -0.08006342, 0.1051756, -0.17963615, 0.06847342, 0.039171528, 0.060512416, 0.13272779, 0.02939476, 0.048092134, 0.022905769, 0.035535276, 0.10895829, 0.023325693, 0.0028750524, 0.04270029, -0.070161104, 0.058200803, -0.070540406, 0.030178964, 0.1510416, 0.08594222, -0.056789838, -0.023133924, 0.102092214},
{0.07418037, 0.06810665, 0.03444655, 0.0426742, 0.062609226, 0.007078089, 0.046048317, -0.085013345, -0.06741867, -0.037822798, 0.11139714, -0.10721551, 0.004260424, -0.06474708, 0.029932868, -0.082728155, 0.08490501, -0.018674903, 0.093573466, -0.014984064, -0.07752495, -0.058265164, -0.037517406, 0.103127256, 0.07753076, -0.028419985, 0.010491931, -0.066274084, -0.078253984, -0.018835051, -0.09960979, -0.010590745, 0.030544175, -0.06222102, -0.04108477, -0.0026252973, -0.05620193, 0.023674736, 0.104131535, 0.0065076067, -0.09892635, 0.09891431, -0.03408002, -0.026435595, 0.012820789, -0.085777186, 0.0022049993, -0.052976042, -0.072511256, -0.0036744156, 0.104791686, 0.031000823, 0.051301133, -0.036188133, 0.04909371, 0.08832199, 0.038214352, 0.058496565, -0.012682847, -0.06726127, 0.016099297, -0.003621025, 0.06574388, 0.098694414, 0.09782377, 0.08737353, 0.068364315, -0.048872087, -0.033415616, -0.009900272, -0.0678278, 0.07709229, -0.021325417, -0.002350248, 0.16447818, 0.08312213, 0.017095448, -0.07575059, 0.11773196, -0.056963116, 0.06373866, 0.0008297637, 0.06452802, 0.04152169, -0.13340904, -0.09598844, 0.0809714, -0.037981328, 0.01090624, 0.076281644, 0.11496384, 0.015446288, 0.0018985868, 0.09445954, -0.05917077, -0.08566804, 0.024453864, -0.18356055, -0.13451095, -0.05951023, 0.061415404, 0.06997917, 0.06802859, -0.09693906, -0.05854196, 0.022634912, -0.11923495, -0.07030423, -0.026634565, -0.0776575, 0.009946964, 0.025298014, -0.041566543, -0.008049598, 0.018465206, 0.16387348, 0.08552927, -0.07144523, 0.016206333, -0.056967992, 0.08264305, 0.008014147, 0.057764787, -0.05234525, -0.00883542, -0.029037863, 0.07890952, 0.085012935},
{0.07725187, 0.12678277, 0.06819366, -0.056290682, 0.0153211495, 0.052643806, 0.02477531, 0.10311206, -0.05677616, -0.08571403, 0.07393823, -0.011059386, -0.06991796, -0.13505529, 0.10789483, -0.05476574, -0.106733836, -0.053399168, 0.11594249, 0.10553899, -0.084432214, 0.06576394, -0.03138482, -0.083815515, 0.122569, 0.040905196, -0.03519556, -0.064186186, -0.056825303, -0.05677346, -0.09816705, -0.04202937, -0.08613502, 0.0413234, 0.099605285, 0.10495258, -0.066592686, -0.018728668, -0.068716094, -0.034745827, -0.08088321, -0.10006837, 0.11617603, -0.053612757, -0.03452429, 0.09410396, 0.021570474, -0.16794784, -0.061187882, 0.079214424, 0.17301494, -0.015961573, -0.05358866, -0.030735295, 0.008490048, 0.029908083, 0.03916024, 0.051646143, -0.05329169, 0.0068612783, -0.012657888, -0.02820096, -0.08129184, 0.008634381, -0.06734817, -0.012191721, -0.055926803, 0.035416663, 0.07317339, 0.085529484, -0.07376322, 0.026429106, 0.067220435, -0.015210386, 0.09184817, 0.022709804, 0.11423205, -0.06730141, -0.018378211, 0.07889419, -0.002331911, 0.07305576, -0.1145864, -0.09865748, 0.029875, -0.09997429, 0.056633584, 0.05116718, 0.045018908, -0.051882688, 0.08773484, 0.00782234, -0.045206867, 0.11044927, -0.10450043, 0.04121895, 0.043314934, -0.04972684, -0.0880084, -0.08399832, -0.102262974, 0.023992335, 0.063555785, -0.08598254, -0.0349424, 0.03339672, -0.17900597, 0.09132215, -0.17373726, -0.037521537, -0.0022105523, 0.015851043, 0.0131286755, -0.02617622, 0.04245487, 0.05248793, 0.08519164, 0.102546886, -0.09283239, 0.0053646043, -0.0127096325, 0.033781413, -0.047408443, -0.06731009, 0.053061754, -0.110473774, 0.048797026, 0.10127504},
{0.102623105, 0.037300583, -0.087059245, -0.05669788, 0.011895231, -0.10151403, 0.083440766, 0.09418324, -0.0769674, -0.0001508668, 0.14110523, 0.010924146, 0.10816397, 0.042609252, 0.034188874, 0.101662576, -0.04194074, 0.06707302, -0.027989693, 0.09160634, -0.08129458, -0.052838106, -0.022449406, -0.07096102, -0.030390901, -0.06779694, 0.048223592, -0.17939444, 0.022372639, 0.024560213, -0.053087298, -0.050952964, 0.031257834, 0.13346508, 0.069635876, -0.049882796, -0.051921695, 0.039221436, -0.03669944, -0.082663134, -0.023071026, 0.02131845, 0.06176302, 0.008671354, -0.025301818, -0.012271608, -0.0764806, 0.045244925, -0.042047106, -0.04106521, 0.020052915, 0.05781436, 0.09369288, -0.022308877, 0.094738886, -0.14697394, -0.14799003, 0.015297845, 0.057146955, 0.023596466, -0.0067854333, 0.050599538, -0.13458602, 0.10066469, -0.035389163, -0.071689375, 0.054598637, -0.0637338, 0.051997736, 0.052686907, 0.025974428, 0.017348547, 0.010257624, -0.0126908505, 0.026074981, 0.004036861, -0.06654983, -0.061838366, 0.073509134, 0.009383893, -0.0014588732, 0.06668447, -0.08894087, 0.021586733, -0.13823237, 0.09022728, 0.02838612, -0.0017973876, 0.06129306, -0.012784396, 0.06201108, 0.09308973, -0.071021825, 0.058916833, -0.024323376, -0.017043285, -0.042691648, 0.010921407, -0.07346469, -0.06446834, -0.07558335, 0.05210205, 0.09770171, 0.01972416, -0.07697633, 0.043584283, -0.031231016, 0.014927201, -0.17733869, -0.07923115, 0.030842034, 0.10437615, -0.06926902, -0.04373517, 0.020014763, 0.14372817, -0.061757836, -0.06406435, 0.07416969, 0.060972795, 0.090886414, 0.06937685, 0.007619088, 0.12036139, 0.05293539, -0.0575559, -0.049260218, 0.14886428},
{0.022943877, -0.0046764705, -0.048264224, -0.013065711, 0.07460895, 0.0317367, -0.07820261, -0.05283012, -0.044602893, 0.04355645, 0.040411565, -0.0042917607, 0.058036484, 0.12999077, -0.06251688, -0.045614816, 0.041525006, 0.076804675, 0.042127088, -0.0067779426, 0.052581042, -0.00051497575, -0.1228858, -0.06497677, 0.038768295, -0.11157694, -0.094635054, -0.077228464, -0.001630243, 0.077945694, -0.07967473, 0.06830561, 0.04781732, -0.024219776, 0.14242002, -0.036525875, -0.08938875, -0.026181798, 0.04014357, -0.16173436, 0.009774031, -0.020373859, 0.031145757, 0.032066986, -0.09953697, -0.09607805, -0.081486, 0.05747824, -0.0074711666, 0.08123346, 0.12516078, 0.0005237907, 0.119788155, -0.07486304, -0.06777395, -0.12722, -0.16174862, 0.06675662, 0.04371775, -0.064968, 0.0012517738, -0.053269047, -0.13104011, 0.0825928, -0.09905429, 0.02257999, 0.088836476, -0.08837485, -0.14615378, 0.030021569, -0.07568745, 0.08378097, -0.08266861, 0.015528764, 0.15077183, -0.03442026, -0.1255411, 0.0151409805, 0.066638105, -0.109437324, -0.00885201, -0.025897838, -0.088578746, -0.09931002, -0.0864532, 0.047011476, 0.09906042, -0.02740058, 0.071557894, -0.024638953, -0.029759796, -0.011538179, -0.0720768, 0.013929525, 0.010494293, 0.06984207, -0.07786157, 0.015873903, -0.1471804, -0.10347883, -0.040415354, -0.0100066615, -0.088005364, 0.053084835, 0.079611205, 0.08366562, 0.061144073, -0.022942608, 0.025863137, 0.091692016, 0.0121018505, 0.04053369, -0.004014244, 0.02239956, -0.027352296, 0.1898081, -0.09253431, 0.026674867, 0.059541408, -0.08041136, -0.060919628, 0.10982148, -0.04845654, -0.0859259, -0.058949716, -0.1535196, 0.08000186, -0.01421507},
{-0.09086669, -0.05163556, -0.072214335, -0.070752084, -0.028623383, 0.084015206, -0.0250215, -0.0583644, 0.012105301, 0.06064272, 0.061967865, 0.035622492, 0.11516001, 0.064832754, 0.03770665, 0.16737626, -0.057206795, -0.075481184, 0.06725154, 0.034147374, 0.09021635, 0.08239406, -0.026169095, -0.052279305, -0.0188714, -0.12974791, 0.052174877, -0.078508, -0.06662423, 0.0017015873, 0.03647418, -0.0054981187, -0.09815536, -0.05642992, 0.008265696, -0.098095864, 0.1074251, 0.03973429, -0.067979015, 0.013163141, -0.08039721, -0.099864386, 0.05270712, -0.096174784, 0.11040593, -0.10149724, -0.083012, -0.017487168, 0.00025379658, -0.0103506, 0.011668026, 0.0032019988, -5.04398e-06, -0.05615905, 0.022875205, 0.108856946, -0.14819206, -0.10565043, -0.06487342, -0.026439799, 0.07460709, -0.08646615, -0.17031375, -0.09551257, -0.0009227842, -0.0886754, -0.070882596, -0.04510256, -0.08323696, -0.044347074, 0.052473754, 0.037146904, -0.08063039, -0.08484097, 0.10603312, -0.009498587, -0.08956074, 0.050592303, -0.046395272, -0.0940191, 0.0578457, -0.07662117, -0.03470143, -0.0042665093, 0.12021249, 0.037631836, 0.06603247, -0.109090194, -0.03286515, 0.09877244, -0.11182274, 0.023282323, -0.008855648, 0.0687437, -0.049903784, -0.101645455, -0.105554946, 0.058228813, -0.13582712, 0.088888094, -0.08071594, 0.07209644, -0.0012570625, 0.030250177, 0.10944665, -0.009405659, 0.029794224, 0.06973983, 0.014951651, -0.051138222, 0.078068085, -0.098824635, 0.06707229, 0.0288185, -0.030870259, 0.13239841, -0.011850033, 0.026420847, -0.1048138, 0.019844547, -0.00984977, 0.032933686, -0.053068083, 0.014103934, -0.025715105, -0.10474955, 0.040554274, 0.06498995},
{0.016744293, -0.0031517977, 0.045846205, -0.09373315, 0.015801055, -0.07104617, -0.09312067, 0.076452315, -0.08383472, -0.04083159, 0.13648698, 0.08054569, -0.038208727, 0.10994717, -0.094148226, 0.07271625, -0.06393486, 0.024179788, -0.093483075, 0.030098144, -0.038969822, -0.087951526, 0.101708286, -0.05259505, 0.13844123, -0.18839128, -0.0216623, -0.04917407, 0.01677642, 0.03436068, 0.10376863, -0.0062630377, -0.09182205, 0.06247334, 0.093480214, -0.010391341, 0.104092956, -0.0295347, -0.11199482, -0.14949352, 0.077617094, -0.07238072, -0.036888257, -0.05318573, 0.08592113, 0.089755796, 0.049422517, -0.026045607, -0.104347885, -0.08578456, -0.002012397, 0.0667966, 0.1108846, 0.042899035, 0.036338612, 0.018336775, -0.12516534, -0.024950631, -0.05141126, 0.099444084, -0.078039125, 0.060113985, -0.13171157, -0.043826014, 0.049028113, 0.09141419, 0.08766151, 0.069685176, -0.06700129, -0.108144574, 0.00045146974, 0.019774236, 0.080861434, -0.02276292, -0.044651292, -0.01742782, -0.012505262, -0.008273333, -0.005067122, -0.026707804, 0.0277937, -0.06375754, -0.048097786, -0.06344119, 0.019870367, -0.012408519, -0.05296018, 0.0057616252, 0.070982225, -0.065454334, -0.11051538, 0.15328185, 0.060528636, 0.12735716, 0.04382667, 0.043346837, 0.0011313483, 0.025115892, -0.16110998, -0.049943857, -0.05721488, -0.025849167, -0.034565855, 0.026213348, -0.041370098, -0.026869882, 0.12751873, -0.09105638, 0.075703174, 0.09209934, 0.021230716, 0.05701755, -0.027457634, 0.030641248, -0.0009254813, -0.034154683, -0.07071995, -0.053450488, 0.07165491, 0.077149436, -0.1071517, 0.027904103, -0.0669317, -0.10105758, -0.06531208, -0.059673928, 0.17729807, -0.06932108},
{0.01247498, -0.051976986, -0.1532885, -0.07727161, 0.00064412557, -0.028772004, 0.08525155, -0.0029007494, -0.08561836, 0.052959517, 0.084391765, 0.020567577, 0.04200169, 0.04001781, -0.031592824, 0.11804733, 0.051016703, -0.05814773, -0.108629465, 0.08100346, 0.01506092, -0.07627413, 0.09518928, 0.01836797, 0.024654364, 0.072068535, -0.027760794, -0.07490296, -0.09112752, -0.016555293, -0.13536565, -0.0869269, 0.046710838, 0.04770853, 0.13456921, 0.016006598, 0.11668223, 0.08972413, -0.10403037, -0.11593093, 0.037387554, -0.00063826144, 0.13437568, -0.08684781, -0.051116005, 0.06334945, 0.07302573, -0.019167393, 0.07423465, 0.055425435, -0.005915242, -0.07123804, 0.01971706, 0.05998603, 0.0645103, 0.02751993, 0.008809942, 0.040848583, -0.052408583, -0.07401944, 0.030735869, 0.055142634, 0.0557188, 0.10579896, 0.043121874, 0.04079234, 0.101539895, 0.0323911, -0.1342072, -0.12923914, 0.052432418, -0.026756212, 0.07871428, -0.009359526, 0.12528159, 0.15964733, -0.13618742, 0.005490102, -0.08560866, -0.14804304, 0.1663283, 0.022822693, -0.12637897, 0.033068333, 0.058055058, 0.025690341, -0.02702115, 0.026664538, 0.11929813, 0.005014516, -0.034675132, 0.09123161, -0.09545073, -0.0076062367, 0.07992734, -0.061245576, 0.07020581, -0.030439328, -0.029793162, 0.014836527, -0.0590437, -0.004236013, -0.03308389, -0.059315953, -0.042923786, -0.0036751924, 0.03984455, -0.08187461, -0.0911884, -0.027044348, -0.116890766, -0.095692, -0.08410387, -0.058396433, -0.07637143, 0.15092374, -0.020036252, 0.043440774, -0.08786219, -0.012036227, -0.017220085, 0.16447502, 0.04925762, -0.042814553, -0.05433426, 0.037821382, -0.08584483, 0.10242641},
{-0.0033509063, 0.1372019, 0.018167786, 0.011870002, -0.027671676, 0.0136665255, 0.014881837, -0.047322072, -0.060965165, 0.00953646, -0.04365525, -0.014928328, -0.123842426, 0.054997064, -0.038635176, 0.11166073, 0.08474406, 0.08417427, -0.11626273, 0.12823828, -0.11039542, 0.028266264, -0.008089259, 0.039604567, -0.04536539, -0.036399323, 0.08679158, 0.0051096147, -0.1183786, 0.05895376, -0.014382862, -0.084429, 0.046934407, 0.08674487, 0.0013735445, -0.07216713, -0.073190995, -0.069991015, -0.063601345, -0.13722202, 0.08641169, -0.031319834, 0.15955277, -0.008922067, 0.0312486, -0.077313505, 0.034531385, 0.0628269, -0.06870663, -0.07602467, -0.020855168, 0.06577718, 0.11272575, 0.056105364, -0.10655319, -0.0106007485, -0.13452637, -0.051177554, 0.03902288, 0.08541928, -0.10058082, 0.05632019, 0.009388356, 0.012816429, 0.10049312, 0.02681053, -0.08744174, 0.036676258, 0.1489903, -0.12124949, 0.06280629, 0.025026955, 0.030078903, 0.011847672, 0.121219, 0.13807511, 0.003911342, 0.008976348, -0.14331907, -0.10908233, 0.12480117, 0.019651622, -0.097884536, 0.049410675, -0.045022078, 0.0032332032, 0.13714974, -0.0031433578, 0.0016153749, -0.036123555, -0.0923517, 0.03746864, -0.054919578, 0.082914114, 0.026837867, 0.0104917735, 0.03600155, -0.04759019, -0.14467512, 0.07126136, -0.041731015, 0.02742288, 0.042520884, 0.08702178, 0.11939394, -0.1125165, -0.027839728, -0.09209797, -0.021882402, 0.0576528, -0.08333765, 0.0043648332, 0.09202368, 0.0018217749, 0.021415949, 0.06543959, -0.106339894, 0.0019342974, 0.032308444, 0.038381502, -0.08322571, 0.09875126, 0.019265048, 0.033963263, 0.092693254, 0.15023486, -0.003960021, 0.16345835},
{-0.10542518, 0.024149831, 0.0049333815, 0.06482243, 0.06859878, -0.04904654, 0.051820904, 0.016006969, -0.10650912, 0.020389736, -0.0018201033, 0.047703326, 0.004244857, 0.116638534, 0.050627418, 0.08732389, -0.10321554, -0.03179206, -0.05771494, 0.090602264, -0.11179522, -0.12179038, 0.06679343, -0.026784899, -0.008991194, 0.01959642, 0.09319381, -0.07239221, -0.08059763, -0.005171319, -0.054599315, -0.042924937, 0.08197421, -0.080080144, 0.08259024, -0.048487928, -0.07955361, -0.10262617, 0.014409454, -0.0056429254, -0.0057408004, -0.027971976, -0.04109227, 0.059962522, -0.036583938, 0.023065606, 0.061259866, 0.082379, 0.0009834245, -0.13647604, -0.033921134, -0.09858563, 0.023599945, -0.09722571, 0.07458353, -0.06366896, 0.017620927, 0.06408906, -0.0036181372, -0.078892566, 0.030666994, 0.09243774, 0.017733451, 0.015531234, 0.010083348, 0.0707576, -0.016440598, -0.05403929, 0.0012422353, 0.020191904, -0.046753775, 0.093131304, 0.06735107, 0.015865419, 0.05721903, 0.05020379, 0.047928598, -0.020372234, 0.016284507, -0.0684112, 0.025293635, 0.09835696, 0.047674127, -0.09545134, 0.07709396, -0.08426132, 0.088884056, 0.06117776, 0.058250338, -0.04738051, -0.07724099, -0.08199525, -0.09250944, 0.063673966, 0.12565112, -0.05070833, 0.027912557, 0.005833771, 0.008442185, 0.09443708, 0.052424088, 0.10192588, -0.05020841, 0.07473788, 0.008474784, -0.04183327, -0.044156846, -0.07345046, -0.09510208, 0.09910617, 0.013890022, 0.026714489, -0.038844433, -0.0013074116, 0.06069322, -0.018622765, 0.07377978, -0.09627815, 0.044193514, 0.034148023, -0.14207537, 0.16588263, 0.036076132, 0.032937728, -0.080935955, 0.042430654, -0.007976287, 0.1722879},
{0.05609206, 0.122670956, 0.039613277, 0.10278691, -0.00078540517, -0.036276013, -0.017462611, -0.06261534, 0.040984288, 0.071308166, 0.008408407, -0.04738041, -0.01408974, 0.090937555, -0.09640756, -0.0055739484, -0.0008937441, -0.025706938, -0.10856584, 0.058056735, 0.029319782, 0.015389475, 0.09737218, 0.0043679667, -0.015662739, -0.05967507, -0.043022364, 0.0569339, -0.07154985, 0.027186189, 0.10718648, 0.014147224, 0.07226447, -0.0033296589, -0.056482393, 0.07988698, 0.031084346, -0.0013894788, -0.13888419, 0.07957151, -0.048205823, -0.058813237, 0.102015965, 0.0828402, 0.07234516, -0.041693926, -0.09382251, -0.00036589778, -0.07826059, -0.043826934, 0.033328913, 0.04647912, 0.04195454, -0.09765834, -0.06406723, -0.09226242, 0.0400875, 0.02615957, 0.0100053325, -0.10569849, 0.04981741, 0.026609963, 0.089686215, -0.084508516, 0.039296567, -0.037751857, 0.07060418, -0.042266212, 0.070019476, -0.063099615, -0.06386614, 0.04938126, -0.10408702, 0.10160468, -0.10838014, 0.0022830411, 0.016011138, -0.103542745, -0.020557828, -0.06485098, -0.011928078, 0.035350606, 0.011521921, 0.07006407, 0.038569663, -0.10206071, 0.07344268, -0.013608239, 0.050045315, 0.07065219, -0.12354276, -0.019382419, 0.044735357, 0.0023426178, 0.050762817, -0.031619936, 0.024493128, 0.017948348, -0.010059272, -0.091103025, 0.101261064, 0.09862453, 0.026839308, -0.019693635, -0.03690577, -0.094966665, -0.030679045, -0.054970596, -0.045016434, -0.047156703, 0.021756215, -0.010555215, -0.03783639, -0.09271202, 0.00036799163, -0.09342149, -0.082821935, 0.01663486, -0.08769844, -0.032566592, -0.11249088, 0.14790553, -0.121828295, 0.008129981, 0.10651542, -0.0056610103, 0.031893503, -0.06366306},
{-0.08325244, -0.07395416, 0.04136525, 0.09785487, -0.038865566, -0.016588598, -0.0878745, -0.07465447, 0.03263794, -0.06912169, -0.024083491, 0.0238469, -0.10599871, 0.06317246, -0.08423883, 0.009526618, -0.099798426, -0.09829526, -0.008208409, -0.14183658, 0.07181211, -0.08951165, 0.1654516, -0.010267926, -0.04050053, 0.038565263, -0.06953321, 0.12683073, 0.034770004, -0.025538962, 0.05696182, 0.032880545, 0.06467624, -0.052935366, -0.041865036, -0.09683769, 0.02896811, 0.03470936, 0.028315527, 0.07436965, 0.10552533, -0.071937576, -0.017660165, 0.054082375, 0.14877196, -0.09505458, 0.05408545, 0.14853063, -0.077104926, -0.06614211, -0.12984912, 0.062398836, 0.06406294, 0.020415582, -0.09488531, 0.0604435, -0.024628991, -0.04379882, 0.018444074, -0.041647654, 0.06671101, 0.07274571, 0.0021914092, -0.035685457, -0.008583754, 0.09451593, -0.06760563, 0.060906246, -0.08992516, -0.006855179, -0.054170776, 0.055000804, -0.014969811, -0.0505448, -0.13700916, -0.084577106, 0.06739951, -0.0017476752, -0.15395012, -0.025373, -0.03848177, -0.09692702, -0.021246525, -0.06270226, 0.14867324, 0.0037187953, 0.0961278, -0.024951266, 0.0907788, -0.09059423, -0.11910582, -0.05234734, 0.102090076, -0.16840428, 0.013735083, -0.06544582, 0.015310757, 0.15868591, 0.10089794, -0.0076752305, 0.10498983, 0.031892985, -0.08957986, 0.020445347, 0.04766467, -0.08212008, 0.069090895, -0.047083408, 0.026043743, -0.09339001, -0.020103581, -0.10048808, -0.0930864, -0.012295426, 0.09213737, -0.066548094, 0.061377496, 0.098464906, -0.036415756, 0.013048552, -0.13714848, 0.00095162116, 0.0033337118, -0.03564775, -0.06877579, -0.034474168, 0.042011846, -0.017713157},
{-0.037040602, 0.08032762, -0.07802484, 0.07949116, -0.07963509, -0.0023706853, 0.062213432, -0.009524763, 0.05842364, 0.033595487, -0.02629157, 0.083864376, 0.006148472, -0.006184516, 3.4414505e-05, 0.000836858, 0.021972777, -0.06037449, -0.14881851, -0.13980202, 0.0041153044, 0.04120765, 0.17094263, 0.06605014, 0.10852444, 0.089550495, -0.081789576, 0.07748156, 0.074171074, -0.106156036, 0.12621146, 0.01033418, 0.07589303, -0.019913137, 0.004684342, -0.09623072, 0.08799794, 0.016827459, -0.09129335, -0.06276095, 0.11051748, 0.06425126, 0.016318059, -0.01996852, 0.06913584, 0.09579312, -0.011385992, -0.023118647, 0.075387806, 0.08346901, -0.090014406, 0.07106747, -0.05284216, -0.037059214, -0.076981254, -0.03850183, 0.04847448, 0.07215172, 0.014459198, 0.06894885, 0.06714205, -0.115178354, 0.07882863, -0.072023, -0.06554837, 0.084702805, 0.058417782, 0.044624925, 0.026549904, -0.15477373, 0.09207449, -0.010228136, 0.010390393, -0.063500255, 0.014766103, -0.092221536, -0.051597957, 0.007591486, 0.04007913, 0.03430361, 0.12086171, -0.006829679, -0.11088096, -0.0091019785, 0.082438506, -0.01515664, 0.04425941, 0.05602416, -0.0034858903, -0.04655449, 0.043406643, 0.03589324, 0.06050776, 0.04885805, 0.0635879, -0.03746134, -0.03989256, -0.021172153, 0.056502648, 0.058728784, 0.046014592, 0.034885097, -0.090592876, -0.09409979, 0.093037695, -0.097017124, 0.112145685, 0.03557394, -0.0473608, -0.08283126, 0.0228314, 0.10059546, -0.054795317, 0.044164833, -0.080769435, 0.07048791, -0.083512895, -0.028147213, 0.096541755, -0.07574665, 0.040567096, -0.04587762, -0.065640256, -0.06454543, 0.09539007, 0.10344042, -0.11945652, -0.09245649},
{0.041301806, -0.011628605, 0.10793643, 0.11935125, -0.05985692, 0.057586297, -0.08630042, 0.08072227, -0.027813308, -0.0897391, 0.02126377, -0.0049631065, 0.03268131, 0.10986492, 0.03181069, -0.05099417, 0.07461248, -0.024875589, -0.04768699, -0.0049449317, -0.03374229, -0.071755655, 0.12667759, 0.10401307, 0.042574998, 0.071000546, -0.030297333, 0.03300073, 0.026486097, 0.07812638, -0.049922362, -0.035408616, -0.0073795365, -0.03641969, 0.027084596, 0.092907235, -0.015431188, -0.075611845, -0.031989798, 0.09563578, 0.07345072, 0.09425698, -0.045063525, 0.06684229, 0.05115562, -0.036165807, 0.08003816, -0.008549054, -0.03461884, -0.027934443, 0.0011449304, 0.036980063, -0.05268257, 0.09773143, -0.017227672, 0.0021919056, 0.05762692, 0.022233695, 0.04359707, 0.049791764, 0.04350125, -0.021534942, 0.027547574, 0.08390716, -0.020745657, 0.07288959, -0.06308717, 0.058757722, -0.101142734, 0.046993807, -0.018272243, -0.010778547, 0.05655077, 0.06382219, -0.01837475, -0.032952912, 0.026734635, 0.028939411, -0.040900517, 0.07551136, 0.082227334, 0.01171121, -0.104897715, -0.05986425, 0.111431815, 0.039835736, 0.051338464, 0.0398235, -0.07414912, -0.067327745, -0.09362561, 0.05959182, -0.01790604, -0.13660805, 0.07133295, -0.026119336, 0.045927882, -0.012927588, -0.016534574, -0.06984572, -0.07578571, 0.013855628, -0.021023193, 0.10201672, 0.03983102, 0.053130288, 0.09623602, -0.04864443, -0.06616017, -0.01124295, 0.074772425, -0.0440695, 0.055002615, -0.01152114, 0.0038677081, 0.06766779, -0.09968525, -0.09802677, 0.028157234, -0.05103276, -0.088259816, -0.0325674, -0.106835544, 0.0125102755, 0.018272735, -0.06341044, 0.026228072, 0.08003784},
{-0.017700287, -0.042338207, 0.012519238, 0.010392335, 0.058788452, -0.03950779, -0.002490384, -0.030989282, 0.047410697, -0.07979943, 0.09997171, 0.05025783, 0.09848061, 0.016605321, -0.066557184, -0.059869613, 0.06306413, -0.085937835, 0.0042694765, -0.08743407, -0.104502566, -0.009394204, 0.10278347, -0.06320125, 0.096660666, -0.07879339, -0.011220134, 0.0378139, -0.034506075, 0.023089088, 0.0688873, 0.07247595, 0.006854838, -0.06819339, -0.04123998, 0.05254994, 0.056541324, -0.0027676844, -0.063257575, -0.08407209, 0.08562542, 0.045102388, -0.08695458, 0.055141635, 0.11907887, -0.07448761, 0.10636565, 0.12625393, -0.025344193, -0.009640429, -0.069306746, -0.00080307573, 8.537269e-05, -0.10472513, -0.0146779865, -0.05428942, -0.09328235, -0.09298512, 0.04751011, 0.025040193, 0.044389807, -0.07966504, 0.022657998, 0.065117225, 0.017478958, 0.03165574, -0.05173834, 0.047966614, -0.08832528, -0.1142722, 0.073406115, -0.0024449904, 0.09786901, 0.077309586, -0.027219815, 0.0457684, -0.0048040883, -0.08723438, 0.044498984, -0.019440824, -0.030506507, 0.05790329, -0.024033606, 0.06129967, -0.037867684, 0.07046519, -0.0027188472, 0.030044729, 0.087105535, 0.07798059, 0.040953133, 0.111845925, 0.08327353, -0.06383041, -0.026508149, 0.067137375, -0.052692037, -0.05802547, 0.12369681, -0.029959522, -0.100810856, 0.03015833, -0.10844996, -0.06275454, 0.07120445, -0.028877636, 0.077308774, -0.091885835, 0.07029325, -0.08256414, 0.089969926, -0.084387794, 0.09727849, 0.03897112, 0.09987882, 0.07769416, -0.005284184, 0.027358219, -0.054099295, -0.042608306, -0.06309241, -0.049271554, -0.014600225, -0.03833206, -0.013680637, 0.066133246, -0.065592766, 0.034743864},
{-0.044388473, 0.049388126, 0.032940965, 0.074510306, -0.014498974, 0.089038014, 0.043290198, -0.03384474, -0.09002467, 0.029491827, -0.049680546, 0.011196677, -0.09389028, -0.0017047946, -0.09077988, 0.0028361802, 0.058941882, 0.07211428, 0.049541622, 0.029561238, -0.00846519, 0.0895586, -0.046442438, -0.07458527, 0.0043569957, -0.014585515, -0.017708793, -0.050885912, 0.10084812, -0.0133355055, 0.104982555, 0.07176196, -0.082369104, 0.014304316, -0.07835102, 0.07406922, -0.014759836, -0.079624556, -0.09196577, 0.067849346, 0.023329448, -0.06877586, 0.011303388, -0.05531737, 0.078083456, 0.06746844, 0.036028966, 0.006953502, -0.032809153, -0.049688853, -0.1339865, 0.06504178, -0.038409054, -0.0106212795, -0.07800883, 0.0713512, 0.0050963014, -0.055783883, -0.08888857, 0.09459292, -0.0041589574, 0.07223367, -0.017464455, -0.06272016, 0.08556898, -0.009455272, 0.088357046, 0.058058426, 0.06512217, 0.015519351, 0.053281028, -0.003142652, -0.019447438, 0.07443948, 0.008178722, 0.010277208, 0.009627599, 0.0017971024, -0.0148470625, 0.059030097, 0.015172326, -0.05305322, -0.040270407, -0.059721522, -0.04932564, -0.103031844, -0.012615861, -0.10170508, -0.050951716, 0.051854167, 0.03566313, -0.03929624, -0.09007397, 0.020975998, -0.002996266, 0.015025161, 0.072319716, 0.09989989, 0.14022735, -0.09394501, -0.068740584, -0.032810885, -0.102979206, 0.09165177, 0.13291451, -0.1047413, 0.013185269, 0.013615084, 0.097363785, -0.083001986, -0.07245734, 0.021129385, 0.014341457, -0.054887407, 0.014807403, 0.00868364, -0.016927414, -0.023982786, 0.028391141, 0.012335211, 0.037415143, -0.060196873, 0.07409593, 0.027067019, -0.007567771, -0.045153134, -0.096504554, -0.10462175},
{-0.09568837, -0.013464438, -0.050692335, 0.069767155, 0.050588492, -0.0149406865, 0.06533593, 0.015040159, 0.061537042, -0.03694149, 0.053950604, 0.040737752, 0.09622062, 0.027120648, -0.0897474, -0.08904996, -0.057622276, -0.03731799, -0.06397624, -0.11333997, 0.050626885, -0.06594172, 0.132288, -0.027504707, -0.010048721, 0.06728283, -0.033452492, 0.07691003, -0.092900455, -0.0031755387, 0.045144606, -0.047439262, 0.07756568, -0.0014693143, 0.03067944, 0.024745686, -0.015274326, 0.06427586, -0.098789036, 0.116655126, -0.058863133, -0.03695023, -0.059494108, -0.041191474, -0.015860518, -0.05763865, -0.04811849, -0.06667214, -0.057553515, -0.05143795, 0.008498874, -0.09585204, 0.048701517, -0.09868548, -0.08678689, 0.041591104, -0.01194538, -0.026416443, -0.07117049, -0.06730192, 0.09168782, -0.08259996, 0.07956018, 0.007367678, -0.006986797, 0.09377002, -0.08589833, 0.03329043, 0.0043718624, -0.07702019, 0.09883678, -0.020541094, 0.028223589, -0.034009084, -0.089440644, -0.017972933, -0.07460798, -0.05163295, -0.026235882, -0.02981437, 0.08611501, 0.09787822, 0.066049196, 0.03510862, 0.073162414, -0.09480993, -0.008316595, -0.03546675, 0.057226438, -0.052450906, -0.014745339, 0.057246007, -0.096004814, -0.053624112, 0.11427957, 0.07511461, 0.02413489, -0.047082447, 0.106001996, 0.023876846, -0.016358234, 0.08181809, -0.025622107, -0.04434223, -0.049108777, 0.081821136, 0.0811295, -0.050506458, 0.005666703, 0.048625536, 0.07825259, -0.10313412, -0.04412317, -0.009891731, -0.011921726, -0.029403945, 0.06430598, 0.074397415, -0.059766527, -0.071969464, -0.044311754, 0.020258814, -0.12784815, 0.06766115, 0.089368895, -0.070475586, 0.039014116, -0.012530604},
{-0.07468643, 0.016426418, 0.043460377, 0.08585513, 0.06850241, -0.051381156, 0.09581594, -0.09854692, 0.036703393, 0.03920749, 0.0028401492, -0.050115798, 0.07967002, 0.007594719, -0.039361186, 0.017798647, 0.07317855, -0.007052031, -0.056117956, 0.057783656, 0.03846413, -0.058456324, -0.04870385, 0.048571486, 0.0400189, 0.022195628, -0.021670815, 0.0055898493, 0.059451457, -0.029445497, 0.10457741, -0.09072988, -0.07542737, 0.09734082, 0.098519534, 0.10085287, -0.043060806, -0.009894685, -0.053125817, -0.06960938, 0.016703745, 0.041117534, 0.048032068, 0.087719955, -0.068827406, 0.04475076, 0.06721786, 0.10436762, 0.063378826, 0.074608944, 0.036071587, -0.038770594, 0.06981289, 0.052622836, 0.04768683, -0.094341494, -0.03686399, -0.09362018, -0.022897284, -0.009210104, 0.012326128, -0.057358675, -0.01722657, -0.051114015, 0.07170583, 0.017658351, 0.074111894, 0.040160492, 0.013374606, -0.08779039, -0.10388969, -0.0034828526, -0.10217145, -0.010541772, -0.0876242, -0.046743963, -0.10584267, -0.08649697, -0.0771392, -0.09118849, 0.10128748, 0.098940864, 0.037949335, -0.074835, 0.09417834, 0.04558156, 0.030923618, -0.065504834, 0.09932538, 0.0626767, 0.10991954, 0.11387718, -0.0275454, 0.06338746, 0.07353046, -0.0875965, 0.071248665, 0.0027900857, 0.051666986, 0.060531706, 0.09737691, -0.020941213, -0.11032406, -0.008698456, 0.11733821, -0.09113157, -0.058579046, 0.04021577, 0.14246657, -0.0169189, -0.007459143, 0.030546948, -0.011416949, 0.0643682, -0.069092005, -0.0096546905, 0.09343787, -0.053172898, -0.0028638642, -0.047176033, -0.05745019, 0.08516902, -0.055725154, -0.07037765, 0.015798606, 0.029782493, 0.046488892, -0.044639844},
{-0.0019326722, -0.046869285, -0.027718881, 0.033684053, 0.080140024, 0.06090328, -0.01612536, 0.039631218, -0.056076087, 0.07601328, 0.10372611, 0.12054573, 0.03993802, -0.011877839, 0.06374342, 0.05168421, 0.08583127, 0.012658305, 0.042487867, -0.022505704, 0.06697896, 0.018039487, 0.052123073, -0.02267525, -0.068802066, -0.012168464, -0.054567516, 0.017117772, -0.11320766, 0.016827287, 0.11421408, -0.08714767, 0.008487237, 0.00048638927, -0.012467441, -0.07032006, -0.027834402, -0.055044673, -0.088827044, -0.10132786, -0.091012545, 0.08237971, -0.07952094, -0.0338984, 0.06906573, -0.00028471302, -0.02248314, -0.038160294, 0.0383839, 0.069969274, 0.024544062, 0.06725423, 0.014601393, -0.039890908, -0.074601196, 0.04514901, -0.0071689137, -0.04817283, -0.10368181, -0.11265526, -0.05391813, 0.08633806, 0.125957, 0.00025290996, 0.09345482, -0.029811766, 0.07864224, -0.07346169, -0.08105582, 0.0603467, -0.037422355, -0.008172883, 0.10188751, -0.0044533233, 0.01203548, -0.068522565, -0.05405494, -0.09945515, 0.09168131, -0.00731125, 0.03981273, 0.005685754, 0.05292484, -0.0012269656, 0.08287677, 0.08548663, 0.05966838, -0.001015932, 0.022847796, -0.021884551, -0.06130876, 0.08780666, -0.08583027, 0.0034900038, 0.035339493, 0.04798086, 0.021519363, 0.05777261, 0.09867199, -0.057891667, -0.020102598, 0.028850464, 0.010386166, -0.09791745, -0.08091254, -0.019004358, 0.06661341, 0.056403067, -0.05537538, 0.07914122, -0.018282704, 0.1007368, -0.06550552, -0.02449947, 0.002689749, -0.032903016, 0.019258967, 0.00060852617, -0.0074725323, -0.08237061, -0.050709996, 0.081323974, -0.05032439, -0.038384102, 0.036623433, -0.09688586, 0.09810491, -0.098363586},
{-0.064952955, -0.119577974, 0.0675213, -0.0473454, 0.07753769, 0.012087107, -0.10476743, -0.064165205, -0.09513736, 0.020537436, -0.047563538, 0.105209164, 0.040340412, -0.09354087, -0.05750278, -0.09171359, -0.08756298, 0.056914337, -0.054351635, 0.09356192, -0.072136715, 0.0062231226, 0.039504237, -0.034343205, 0.016413312, -0.04190785, 0.051310956, 0.03935342, 0.06826328, -0.056116354, -0.032317754, -0.061665572, -0.03028517, 0.12265403, 0.07269243, -0.043299906, -0.099218965, 0.019226737, 0.10898012, 0.07815003, -0.0051731197, 0.033191636, -0.08124041, 0.0052311136, 0.10384137, 0.037292298, 0.08853558, 0.064765744, -0.008931361, 0.06711115, 0.004711829, 0.072281644, 0.027097775, -0.00096940866, -0.027089827, -0.014292157, -0.095566645, -0.10206029, -0.051992293, 0.017878894, 0.096194915, 0.012864697, 0.04191596, -0.058361296, 0.10232766, 0.026809229, 0.00926451, -0.015113436, -0.09485895, 0.018368624, 0.00070819125, -0.085446335, -0.03160207, 0.043532312, -0.08991876, 0.09138225, 0.022008326, 0.027144805, 0.028849581, 0.038930222, 0.01701103, 0.10290481, 0.09401922, 0.03388711, 0.059205838, -0.10759383, -0.08424452, 0.120100744, 0.07757545, -0.011905804, -0.07709868, -0.046546713, -0.065944776, 0.11016501, -0.068443336, -0.092937134, -0.040361397, -0.043172862, -0.015568711, -0.1064516, -0.01745402, -0.0180107, -0.03438226, 0.09407771, -0.035522014, 0.12537348, 0.04300416, 0.05744015, 0.10018971, 0.09715694, -0.0069264304, -0.09714287, -0.03834152, -0.060879424, -0.06653492, 0.15743044, 0.04920323, -0.10381579, -0.03294861, 0.004305184, -0.036538932, 0.040477477, -0.04162543, -0.0095160585, -0.062769875, -0.14734322, 0.06846268, -0.08764706},
{-0.11917388, -0.0085183885, -0.10331236, -0.013327459, -0.11429334, 0.0038945973, 0.029995741, 0.031769767, -0.10568718, -0.01233267, 0.013471465, -0.0816817, 0.13082455, 0.0820254, 0.1508379, -0.008514669, 0.094505094, 0.08491533, 0.012453608, -0.020785157, 0.014260103, 0.023163617, -0.09672068, -0.025566699, -0.15656272, -0.026380291, -0.020597432, -0.18583915, -0.06717407, 0.07951524, -0.15044503, 0.097508505, -0.007245122, 0.13102111, -0.0025631844, -0.105699494, 0.06831106, 0.032504573, 0.1157608, 0.018449426, -0.014405627, 0.103190824, 0.047722414, -0.031974986, -0.028162347, 0.04723125, 0.014433183, 0.013099558, -0.085709475, -0.03044404, 0.096400626, -0.09019902, -0.06065851, -0.009571459, 0.046242118, -0.13985611, 0.11942264, 0.032015502, -0.10678496, 0.0077801654, -0.055056013, 0.09646302, -0.058065042, 0.07939766, 0.055123255, -0.09352692, 0.07868634, -0.01542937, -0.017389016, 0.016486585, -0.07038156, -0.079904966, -0.031103164, 0.08253213, 0.023254476, 0.07456923, -0.05442997, -0.074079156, -0.036782682, -0.123496935, -0.04222765, 0.017713718, 0.16773486, -0.034976374, -0.16527918, 0.02787454, -0.049784355, 0.17995249, -0.16884921, 0.06640315, 0.054354765, -0.016312344, -0.015812717, 0.1001269, -0.14335117, -0.08051945, -0.064976364, -0.025041463, 0.08852436, 0.008305408, -0.07805961, 0.10006618, 0.0041705566, 0.033959135, -0.080040164, 0.13093548, -0.025547296, -0.04356203, 0.053598147, -0.08352653, -0.045198746, 0.054028913, -0.017707705, -0.027652407, 0.034774184, 0.1494072, 0.034936022, 0.10529904, -0.084436744, -0.00058463216, 0.039850533, 0.061811134, 0.017702533, 0.13611892, -0.037788413, -0.07111253, -0.091114916, 0.16164067},
{0.15162133, -0.0049455767, 0.07343455, 0.0029412168, -0.018338107, 0.044117704, 0.06387403, 0.062446058, 0.064691946, 0.09404601, -0.0025569533, -0.08526944, -0.07383229, -0.06362193, 0.060365442, -0.09036649, -0.023175417, -0.015809529, 0.12158756, -0.041420795, 0.06714064, 0.085516326, 0.028929511, -0.07283148, -0.030284893, 0.13178948, -0.01880854, 0.016456904, 0.14834708, -0.0866154, -0.008718334, 0.012760293, -0.026030662, 0.059866827, -0.045297354, 0.02029992, -0.04220827, 0.02679034, -0.058298618, 0.08684587, -0.006827773, 0.038733006, 0.09467061, 0.005234288, -0.04984019, 0.0596832, 0.008505911, -0.14832403, 0.009734824, 0.10347802, -0.0609062, -0.088210255, -0.1256593, 0.057343666, 0.09421274, 0.046558425, 0.10414353, -0.09041655, 0.014058213, -0.045280293, 0.07782398, 0.07942484, 0.13743103, -0.017152801, -0.07885507, 0.08293593, -0.044556815, -0.011292614, -0.02745922, 0.047547102, -0.10604921, 0.03909193, -0.104096144, -0.078093745, 0.08465302, 0.0630996, 0.12473909, -0.0036421716, 0.12742925, 0.1107776, -0.07719217, 0.100450516, 0.0021463376, -0.056961503, 0.050860647, -0.1006929, -0.10467067, 0.08879159, -0.088001356, 0.0150747, 0.17574263, -0.0050204284, 0.035438895, -0.07169192, 0.013282833, -0.016496189, 0.017843083, 0.028252656, -0.06562201, -0.056271125, 0.08203779, -0.039020006, 0.021557372, 0.05105591, -0.091441706, 0.09275373, -0.09093288, 0.052576166, -0.0929965, -0.043400936, 0.06487866, 0.0066092014, -0.031740993, -0.10367501, -0.096923254, 0.030825896, 0.016025875, -0.057410426, -0.08852977, -0.10459449, -0.009026671, -0.06772739, 0.102109246, -0.061709076, -0.020069458, -0.114745945, -0.07748235, 0.0066305744},
{-0.024091031, -0.012345922, 0.06956944, 0.0066318093, 0.09746957, 0.09157245, -0.09602792, -0.028864339, 0.02516456, 0.02112174, 0.0056796977, 0.0870007, 0.13498914, 0.07108465, 0.10077305, 0.04630603, 0.05337725, 0.0055831713, 0.09821199, -0.08464038, 0.093036436, 0.056899935, -0.1490147, 0.0027624595, 0.05675437, 0.054493062, 0.06378842, -0.09096615, 0.07412851, 0.058744065, -0.10607095, -0.10023718, 0.09864818, -0.039603643, -0.09077884, -0.056535847, -0.09743857, -0.04021062, -0.014073747, -0.08238317, -0.027532287, -0.086130075, 0.0751706, -0.025674818, -0.0008042367, 0.07391239, -0.0019287318, -0.0171946, -0.05077403, 0.014350647, -0.032805458, -0.07384369, -0.062141985, 0.018785372, -0.013636336, 0.027861778, 0.00031587484, -0.06957924, 0.11637684, 0.038709518, -0.04333919, 0.034375876, -0.010847613, 0.04217437, -0.071981035, 0.016071009, -0.09094705, -0.07785013, -0.08613417, -0.012495243, 0.045452673, -0.010479217, -0.011965059, 0.1304285, -0.0546294, 0.06847396, 0.08322882, -0.04146985, 0.07406858, -0.04836053, -0.066737935, 0.102282345, 0.07555896, -0.051290013, 0.042985477, -0.08778881, -0.045171216, 0.14042966, -0.0532708, 0.018837543, 0.06479121, 0.05507673, -0.0036257282, -0.056843728, -0.0937298, -0.0917164, -0.052711453, 0.039606407, 0.07535862, 0.10194805, 0.055349305, -0.077157125, 0.004170828, -0.020577915, -0.14134239, -0.046535905, -0.09327706, 0.00081758783, -0.018933833, 0.03613726, 0.072665356, 0.021045893, 0.070854545, 0.07440373, 0.06691158, 0.15518332, 0.010893335, 0.019293219, 0.0135775115, -0.09445625, 0.06283794, -0.10783452, 0.062342796, -0.06776985, 0.024776936, -0.047242973, -0.038275022, 0.030208994},
{-7.682659e-05, -0.080121584, -0.10073757, 2.2385873e-05, -0.068364546, 0.048133686, -0.09807282, -0.03296861, -0.072090246, 0.046453923, 0.07677014, 0.018094819, -0.0054182373, -0.010415352, 0.122845374, 0.023173373, -0.018768659, -0.04692021, 0.011606871, -0.019113172, 0.008902462, 0.10597073, 0.0058089336, 0.040974148, 0.03301804, -0.02307471, -0.049652036, 0.027470583, 0.036835533, 0.019461108, -0.0377082, 0.043447055, 0.016291466, 0.0062345034, 0.13534707, -0.059261102, -0.010646196, -0.015166023, 0.04628664, -0.016521081, -0.054369092, 0.023737073, -0.066250294, -0.028218457, 0.058501292, -0.07772628, 0.0541559, 0.07659422, -0.032395594, -0.0020158156, 0.062329773, 0.08261648, -0.024762662, -0.049115367, -0.05342535, 0.03729512, 0.0050519505, 0.032654047, -0.031344682, 0.059166037, 0.07253467, -0.02217515, -0.116838396, 0.06985925, 0.003915079, 0.045300446, -0.10176106, 0.09947184, -0.084134944, -0.03699385, 0.023326013, 0.00518641, -0.035677828, -0.0013849924, 0.01419457, -0.027253704, 0.08303554, -0.06552115, 0.06381783, 0.046720363, 0.04370754, 0.0005000755, -0.073261924, 0.05259458, -0.0153747555, 0.027177507, 0.014022926, -0.06004101, -0.010707471, 0.021255564, -0.04781709, -0.0076877223, 0.010523923, 0.1628825, 0.047126304, -0.07477102, -0.046127897, 0.03877663, 0.0110019995, 0.084727615, -0.05558638, 0.07550178, -0.039968625, 0.0071630776, -0.06599864, 0.0029530274, -0.09303911, 0.06783626, -0.07440046, -0.110654786, 0.090960056, 0.02080457, -0.020012336, 0.042852506, -0.072947815, -0.011316539, -0.0626122, -0.005129434, -0.005937793, 0.06150128, -0.022223948, 0.013881291, 0.102181986, 0.069634974, -0.0059481934, 0.0012365788, 0.057249013, 0.07241438},
{-0.083885126, 0.04922629, -0.045317404, -0.08275565, 0.08565493, -0.09815733, 0.0019816698, 0.0930316, -0.021376856, -0.083481066, 0.09006694, 0.11762089, 0.14403819, 0.014743597, 0.022302704, 0.10652979, -0.043661404, -0.061598275, 0.011535874, 0.14923269, -0.008021017, 0.09712742, 0.10384363, 0.07527253, 0.03492611, -0.12026704, -0.035443876, -0.008734865, -0.056946266, -0.08970221, -0.070303105, -0.10821388, -0.05167531, -0.027598625, -0.007504577, 0.07237854, 0.06318188, -0.021995734, 0.0070252777, -0.04936972, 0.06224375, 0.08208154, -0.04034518, 0.08174594, 0.03151404, 0.018818963, 0.05680488, 0.1375557, -0.011681959, 0.08485405, -0.08190592, 0.06435925, 0.020927059, 0.07861169, 0.019839674, 0.021447832, 0.015450292, 0.10034144, 0.026797635, 0.03985461, 0.069293514, -0.06608604, -0.056002896, 0.0041935593, -0.010379337, -0.0058617974, -0.0036074757, 0.06983131, -0.020946005, -0.051930077, 0.083524145, -0.110578984, -0.034632236, 0.019389896, -0.06263715, 0.12071266, 0.07628253, -0.001652874, -0.10062153, -0.061867516, 0.13112622, -0.0799918, 0.0420627, -0.03506992, -0.046939254, -0.06121064, 0.091334894, 0.06906001, 0.073663756, 0.05478188, -0.09919323, 0.015765434, -0.052607812, 0.028377948, 0.08789035, 0.026033252, -0.042956904, -0.0047495156, -0.14215174, -0.033975907, 0.02094537, 0.047310438, -0.07954303, 0.04459633, 0.03862996, 0.035963174, -0.07871222, 0.0320097, -0.00583082, -0.082381204, 0.046537522, -0.016379148, 0.08926304, -0.004973334, 0.051623717, 0.11395069, 0.01645385, -0.10070457, 0.03173567, -0.06820213, -0.017695779, 0.110174365, 0.0058043716, -0.09835517, -0.09137192, -0.004007173, 0.14645617, 0.076342985},
{0.08365122, 0.013642654, 0.023027143, -0.083001934, 0.09589882, -0.072196074, 0.07878913, -0.015165329, -0.06588446, -0.09821807, 0.07243364, 0.05709622, 0.13278767, 0.033227015, -0.09665644, 0.16202807, -0.0071688173, -0.0063229087, -0.009089506, 0.108167276, -0.048647862, -0.033108395, 0.13157013, 0.0055771507, 0.12072754, -0.044456515, -0.060972884, -0.07588732, -0.0839603, 0.001343001, -0.042383924, 0.08954633, 0.07037537, -0.066463694, 0.10886198, -0.0728222, -0.08731137, 0.019871708, 0.027376981, -0.11685934, -0.043288622, 0.090826556, -0.02062107, -0.07155704, 0.08739817, 0.019617008, -0.08733004, 0.111701876, -0.07605603, -0.09788265, -0.021833051, 0.05578421, 0.10456083, -0.08938737, 0.048990905, 0.16220284, 0.015737725, -0.08091728, -0.039376915, 0.0038440041, 0.05549075, 0.045593355, -0.06491981, -0.06256954, 0.06357445, 0.06420267, -0.040720224, -0.074913144, -0.14226653, -0.0012583656, 0.064738356, 0.029191017, -0.021719813, -0.023620782, -0.054254908, -0.1165641, -0.06985574, -0.061267663, 0.01878017, -0.064555176, 0.14499113, -0.043666944, -0.1281687, -0.003679518, 0.17497738, 0.0024166775, 0.10661571, 0.023883516, 0.03592812, -0.01408175, -0.008295612, 0.008484268, -0.01643791, 0.14735265, 0.0149029745, -0.08494188, 0.06172277, -0.052587233, -0.17021066, -0.060312852, -0.036250517, -0.10015189, 0.08370895, 0.059518903, -0.025349196, -0.09337986, 0.07390418, -0.1082347, 0.022319753, -0.10964294, 0.058515254, -0.07625869, 0.015228263, -0.108668186, 0.091221616, 0.022431208, -0.028159007, -0.036036313, -0.09988674, 0.07545251, -0.13125521, 0.03575232, -0.17031968, -0.06463684, -0.10437447, -0.0447981, 0.02830254, 0.004881284},
{-0.03885128, -0.14817563, 0.1045261, -0.0012217178, -0.024392473, -0.059924528, -0.099143684, -0.07574861, 0.020402983, 0.0921762, 0.19063286, -0.044235077, 0.13135035, 0.14352562, 0.064768724, 0.08434243, -0.10082338, -0.059248026, -0.15404521, 0.13072564, 0.018936364, -0.10785355, 0.08151674, 0.07431333, 0.15683727, -0.025613014, 0.034449257, -0.0384882, -0.07367863, -0.015618375, 0.08288639, -0.032891724, -0.0025597108, 0.0013303404, 0.12113888, 0.017392648, 0.024253115, -0.00018905378, -0.062116276, 0.0064737755, -0.037725195, 0.009156011, -0.053574927, 0.061981972, -0.01325081, -0.07238556, -0.03246353, 0.09963074, 0.026967406, 0.08985146, 0.015372588, 0.04858443, 0.06271893, -0.027809583, -0.058365975, 0.09952258, -0.1715287, 0.054453, -0.09553615, 0.06720855, -0.009691457, 0.0641545, 0.030553138, 0.016460478, 2.3588538e-05, 0.09732335, -0.023813207, -0.0048284605, -0.12645344, -0.07299665, -0.09543674, 0.04794666, 0.031907737, 0.065467186, 0.08227042, -0.008875321, -0.0009125093, -0.06776653, -0.093848236, -0.027752379, 0.10940794, 0.012224957, -0.042040605, 0.08073517, 0.032577004, 0.10059456, 0.17050943, -0.040795423, -0.012943446, -0.09334209, -0.15284383, -0.020694312, -0.007852174, 0.0031740656, 0.027231636, 0.106191576, 0.011172481, 0.1742539, -0.033877045, 0.01964888, -0.08122486, 0.04153948, 0.028910771, -0.104133196, 0.09291574, -0.037909195, 0.03277013, 0.09716615, -0.102757, 0.09044499, -0.12912935, 0.020331055, 0.110530645, -0.04463286, -0.02271963, 0.11233383, -0.0029492364, -0.051995806, -0.08791404, -0.0041750297, 0.02324835, -0.038893044, -0.11868825, -0.03421506, 0.047075287, -0.07824218, 0.17070436, 0.054954447},
{-0.03957299, 0.025676474, -0.08877676, -0.13121992, -0.0957998, -0.038345896, 0.013726656, -0.0039309636, 0.030633897, -0.074826196, 0.09558051, 0.027036963, 0.09519338, 0.0906787, 0.04315251, 0.16356288, -0.08763737, -0.03145539, -0.10252925, 0.11239481, -0.07723192, -0.093354814, 0.027302809, 0.0039848704, 0.13990979, -0.09665865, -0.10759081, -0.040112056, -0.028728595, -0.11158231, -0.092204295, 0.07432717, -0.08961164, 0.05310948, 0.08385539, -0.10147836, -0.05961685, -0.074318446, -0.09693715, -0.06472484, -0.036853913, -0.03750523, 0.07029503, 0.077590264, 0.07453934, 0.082504146, -0.05044988, 0.013869766, 0.0016238987, -0.0020652565, 0.0369835, -0.0866313, -0.003945655, -0.056386452, -0.029315569, -0.106372826, -0.08809572, -0.009618066, -0.08234463, 0.093254864, -0.015407018, -0.02142817, -0.13397723, -0.077459805, 0.045157388, -0.03324662, 0.057263665, -0.07619754, 0.054049913, -0.10201087, -0.05340971, 0.09418964, -0.04627325, 0.057247724, -0.0014989839, 0.05036156, 0.036786832, -0.06207402, -0.10108288, 0.05123981, 0.0032187637, 0.09188546, -0.06974995, 0.08387529, 0.076808505, 0.04887121, 0.012093261, 0.018566802, 0.057691284, 0.006547752, -0.079227105, 0.08695462, -0.039331667, 0.10454385, 0.1640582, 0.06293878, -0.102058224, 0.025973545, 0.0063332226, 0.081321895, 0.088993564, 0.12561487, 0.04057156, -0.0733446, 0.109968066, -0.0850065, -0.060870226, 0.051071316, -0.1308652, 0.091619425, -0.074979484, 0.06589216, 0.0003711071, 0.013745492, -0.027915835, -0.03609434, -0.071887, -0.06500089, -0.046783257, 0.054105297, -0.13301195, 0.18022446, -0.04230782, 0.034003157, 0.10351086, 0.068753876, 0.08214751, 0.08541093},
{-0.016773375, 0.11405483, -0.094537735, 0.0012330986, -0.01176309, -0.089484185, 0.019034466, 0.027977034, -0.016403958, -0.086343974, -0.039678074, 0.08112076, 0.10477146, 0.13147195, 0.0737637, 0.090527155, -0.004198685, 0.049375754, -0.057171926, 0.040243115, 0.050928317, -0.16988155, 0.052103113, -0.06315159, 0.019263823, -0.026554579, -0.017625127, -0.18332148, 0.0139682675, -0.008389781, -0.13517901, -0.0334345, 0.046817653, 0.09248659, 0.099156514, 0.0134001365, 0.058203448, -0.029887069, -0.13634044, 0.03610954, -0.11735144, -0.049656205, 0.16771093, -0.06974575, 0.0940604, -0.052032802, -0.07416074, 0.08252095, -0.07516219, -0.008895033, -0.05724126, -0.036348924, 0.10920447, 0.0014397328, -0.0560386, 0.006644076, -0.026739331, 0.01945585, -0.015090679, 0.08950934, 0.096287645, -0.10934523, -0.12560223, 0.064025596, -0.06337944, 0.09549999, 0.07844147, -0.086128905, -0.036247343, 0.06752856, 0.022055492, 0.033000443, 0.0120918825, 0.054847937, 0.025243184, 0.04350475, -0.012512763, 0.008609906, -0.10253795, -0.038157705, -0.046661936, -0.0042051747, 0.035094105, 0.066284426, -0.03786177, 0.0032697811, 0.0003923319, 0.02559596, -0.0154047385, -0.081036806, -0.12418138, 0.031590063, 0.0835226, 0.12613615, 0.034226928, -0.080080375, 0.0686526, -0.12864083, -0.101501055, -0.09218631, -0.103547856, 0.20567305, -0.04922875, -0.04222385, 0.023129636, -0.12585801, -0.10145509, 0.059986625, -0.03175193, -0.09653059, -0.08860699, -0.10093453, -0.024423525, -0.019160727, 0.042457595, 0.05101266, 0.08918976, -0.09395419, -0.016723825, 0.00791429, -0.115770616, 0.10219982, -0.07580447, 0.076778606, 0.06622371, 0.07474263, 0.019613992, 0.118754126},
{0.02951922, 0.009776682, 0.02676823, 0.041398782, -0.058386005, -0.018136658, 0.0027634774, 0.031475306, 0.035692036, 0.08366315, -0.00016492307, 0.085545726, 0.094991095, 0.14456403, -0.102844924, 0.12479698, 0.060945243, 0.04491157, 0.037630774, 0.16493002, 0.032652956, -0.070963696, 0.011175754, -0.0937751, -0.053676624, 0.035388038, -0.038003813, -0.04270005, -0.101438366, -0.088157, -0.079064414, -0.07969745, 0.053510245, -0.02086723, -0.005662361, 0.03586194, -0.049058482, -0.01711869, -0.11327442, -0.07447775, -0.12882034, 0.08986029, -0.018019171, 0.012116192, 0.09335941, 0.053788044, 0.052638844, -0.0012639901, -0.016265877, -0.1271572, -0.13767938, 0.05382499, 0.16189997, 0.02488787, -0.08452056, -0.01993471, -0.11174817, 0.105340034, -0.007818427, -0.031354815, 0.03503903, 0.0014164675, -0.0075333635, 0.08558446, 0.04456258, -0.04522489, 0.05727991, -0.06673825, 0.1025124, -0.016582198, 0.067617394, -0.037406903, 0.039420485, -0.05139359, 0.053461917, 0.16591245, -0.081233636, -0.03022252, -0.017396504, -0.068452746, -0.037241686, -0.03424699, -0.019884177, 0.08919296, -0.13706733, -0.049656413, 0.15709586, -0.03616776, 0.06764679, -0.05460531, 0.06544781, -0.10381535, -0.027360782, 0.0752277, 0.06491584, -0.034631804, 0.0039598346, -0.111418, -0.059653483, -0.00047443062, 0.0641723, 0.2167271, 0.07433248, -0.06609549, 0.010111407, -0.035210643, 0.04671751, -0.1001162, -0.09729835, -0.09529057, -0.118913844, -0.062942415, -0.05754885, -0.07223696, 0.096313715, 0.14291823, 0.04108294, 0.08132133, -0.0357261, 0.069702834, -0.102840886, 0.11488302, 0.030907443, 0.03117729, 0.06866753, 0.04774315, -0.0024665485, 0.12921329},
{-0.10262829, -0.043899186, -0.10358006, -0.022049015, 0.061116423, 0.019971907, -0.02864013, 0.0538155, -0.09795894, 0.08757624, 0.019669384, 0.1782537, -0.06725142, 0.05287017, -0.0014717027, 0.082491845, 0.053361285, 0.033700787, 0.0467527, 0.013416607, -0.00956833, -0.099833734, 0.14521809, 0.026413836, 0.05861274, -0.050740864, -0.10697383, -0.02198583, -0.107501775, -0.06754571, -0.022474077, -0.0013643213, -0.059605006, 0.03587433, 0.122126274, -0.002826736, 0.005540675, 0.041280854, -0.16591853, -0.00035287355, 0.051684834, -0.104133405, 0.122007035, 0.019816332, 0.1465972, 0.044145186, 0.00880909, 0.10510283, -0.07528843, -0.0001391974, -0.018970368, 0.097324744, 0.15588306, -0.08465263, -0.08235529, -0.03878394, 0.034888726, 0.035197586, -0.12940149, 0.03476507, 0.039302204, -0.032715492, 0.08047527, -0.09770003, 0.092202455, -0.06102462, -0.10619623, -0.033608958, 0.02255096, 0.0061876206, -0.024435034, -0.018020509, 0.0984312, -0.0794264, 0.00071255583, 0.13126953, 0.022565696, 0.050400242, 0.02162051, 0.07502497, 0.087886564, -0.045871913, 0.059616767, -0.02277164, -0.0815716, 0.08957811, 0.09164267, 0.01368499, 0.08638669, 0.07234814, -0.06944992, 0.050636485, 0.09992568, 0.046742007, 0.18001436, 0.10200313, 0.028116688, -0.07842728, -0.04783028, -0.101874754, 0.034728616, 0.106882505, 0.021583673, -0.100126676, 0.05356146, 0.06317921, 0.04737709, 0.048849493, 0.06478414, -0.027535908, -0.14441329, 0.07329853, -0.016213782, -0.096952416, 0.10066357, -0.04627845, 0.084530465, 0.07483342, 0.075108446, 0.06936425, -0.060222287, 0.005207482, -0.11907188, 0.07721457, 0.069668725, -0.051323745, -0.08673436, 0.052757062},
{0.016453551, -0.070161134, 0.05587545, 0.022039354, -0.0033960696, -0.0442209, 0.060446136, -0.065806285, 0.06454489, -0.062234085, -0.035739973, 0.12552285, 0.0057864985, 0.016989317, 0.048092395, -0.032205705, 0.016239157, 0.09001703, -0.06401917, -0.0010442813, 0.043346148, 0.021271804, -0.0085827755, -0.041646536, 0.037237525, -0.011474848, -0.08875168, 0.022125207, 0.00812055, 0.022940733, 0.06650463, 0.067069575, -0.09081191, 0.03248667, 0.055014603, 0.059168078, 0.05270826, 0.072535455, -0.15518443, 0.027050463, 0.059340775, -0.033099197, -0.014412425, -0.031759914, 0.1443345, -0.008953717, 0.07279949, 0.07805163, -0.102638334, -0.045138054, -0.019607997, 0.08595303, 0.059065763, -0.010138197, 0.0093068555, 0.100369506, -0.049576443, -0.010349117, 0.04076569, 0.06449149, -0.05571375, 0.05306406, 0.050715394, 0.06813815, 0.050339177, -0.10562048, -0.008754659, -0.0558201, 0.028858498, -0.008785363, 0.0228122, 0.01294227, 0.104903296, -0.00835547, 0.038423862, 0.023020755, 0.06774005, 0.06282456, -0.1265895, -0.0025295445, 0.028057897, -0.06240409, -0.009302588, -0.002594729, 0.11462169, -0.048861124, 0.024883939, 0.079481974, -0.031481862, 0.06554317, -0.09949198, 0.06627162, 0.027267456, -0.08781034, 0.03247351, 0.09407458, -0.066155724, 0.06418272, 0.07445952, 0.024999663, 0.09635666, 0.05875378, -0.045629766, 0.0811203, 0.03490445, -0.10817838, -0.03694215, 0.04978579, -0.059012912, -0.021903204, -0.024285471, -0.041015796, -0.07918915, -0.094873905, 0.054063693, -0.11702826, 0.038472295, -0.061543573, -0.043348055, 0.03863029, 0.05780566, 0.05976863, -0.019063588, -0.0036242295, 0.0901501, 0.14424942, -0.16608208, -0.028029153},
{-0.10119825, -0.02392344, -0.041827697, 0.010101274, 0.07810989, 0.015213825, -0.011562046, 0.06712651, 0.102105245, -0.025571354, 0.008739852, 0.04023563, -0.07756946, 0.08222075, 0.04262776, -0.051699188, -0.07900082, 0.09056058, -0.12537394, 0.008513722, 0.06097729, -0.043305468, 0.047707736, 0.07711085, -0.041629348, 0.13651526, -0.06812981, 0.132027, 0.08204122, -0.0143854115, 0.17616032, 0.07608194, -0.08130174, -0.0017875871, -0.08603941, 0.0029374089, -0.09178843, -0.011579576, 0.05832324, 0.019073509, -0.0013996749, 0.007551655, -0.032470506, -0.07118059, 0.13597791, 0.027712708, -0.101784885, 0.04341118, 0.038567573, 0.018847128, -0.03399443, -0.1051104, 0.10459097, 0.016793868, 0.031442925, -0.008580529, -0.042778403, 0.068121284, -0.08733746, -0.052559655, 0.046205867, -0.029711956, 0.07471343, -0.013273098, 0.022377178, -0.11275588, -0.05117976, 0.027008727, -0.008548613, 0.047209542, -0.07871543, -0.058074336, 0.10022536, -0.050155185, 0.034604445, -0.017834885, -0.035262387, -0.04378131, -0.05344153, 0.09160563, -0.06322639, -0.06502056, -0.11540277, -0.017575815, 0.06266632, -0.035536002, 0.10630038, -0.008222208, 0.14594702, 0.0949627, -0.068457395, -0.08037551, -0.012385435, -0.012588015, 0.10376078, -0.104994126, -0.064690575, 0.00989536, -0.04056428, 0.06725812, 0.007961817, 0.09765141, 0.040883064, 0.09851752, 0.049764622, -0.0013714145, 0.12165241, -0.063750505, 0.11809284, 0.09008042, -0.0678425, 0.047653034, -0.04790835, 0.06985752, 0.06637287, 0.020895083, -0.0869804, 0.027182415, -0.018498642, -0.07597455, 0.025714822, 0.06072854, -0.023986522, -0.1264176, 0.044221282, 0.04204688, -0.0876218, -0.03882566},
{0.056601997, -0.07481806, 0.021216134, -0.01508661, -0.08493376, 0.094399944, -0.05979181, 0.08001003, -0.0632242, 0.07713251, -0.044845775, -0.03404586, 0.01659197, -0.019941518, -0.11505319, -0.030539671, 0.08243463, 0.023305638, -0.09068553, -0.04096811, -0.0729826, -0.019178761, -0.003876404, 0.06892632, -0.07596071, 0.0842717, 0.05880085, -0.06469972, -0.086987026, 0.036568347, 0.06698073, 0.033431124, 0.039960753, -0.09616879, 0.05697918, -0.03962485, 0.03551746, 0.08355328, -0.0530837, -0.005169595, -0.05891458, 0.030434892, 0.101126626, 0.048121884, -0.0056487834, -0.017469307, 0.08232415, 0.08296024, 0.09931147, -0.11119071, -0.13281322, -0.08739056, 0.049269732, 0.034397155, 0.04127659, 0.10166821, -0.030968403, 0.03815785, -0.093680404, -0.056844026, -0.026233021, -0.09033216, 0.049436774, 0.011884749, -0.07563146, -0.01242695, 0.08426447, -0.055905957, -0.00047862183, -0.0017462466, 0.058527045, -0.05899164, -0.035054184, 0.10818531, 0.051472444, -0.07486817, -0.06715321, 0.069967166, -0.124942884, -0.086834654, 0.056684326, -0.085486986, 0.02559149, -0.064208485, 6.44712e-05, 0.032672074, 0.06566397, -0.06796258, 0.10275066, -0.0048027704, 0.07552476, -0.06767881, -0.065664366, -0.08617888, -0.05662436, -0.015774213, -0.030920453, -0.008553462, 0.05751706, -0.017591953, -0.08446533, 0.027113983, -0.054894578, -0.013442822, 0.06523515, 0.062571935, 0.060618732, 0.06777142, 0.04053071, 0.08606047, 0.0035006392, 0.029413164, 0.026509589, 0.034916308, 0.018212013, 0.008872506, -0.010335923, 0.02270037, 0.09292439, -0.059026368, -0.07720348, -0.04338668, -0.038181014, -0.086663045, 0.056787267, 0.058614936, 0.027522482, 0.08662503},
{-0.024912218, 0.09195419, 0.04640478, -0.015183656, -0.039614398, 0.01894337, -0.049568336, -0.078970805, 0.10309914, 0.08097647, -0.014990131, -0.050493382, 0.039971143, 0.07783948, 0.051703073, -0.04717283, 0.08592185, 0.081644066, -0.12048332, -0.051452857, 0.026491262, 0.06355384, -0.01796042, -0.06812205, 0.07676264, 0.0017934892, -0.037276637, 0.07401908, 0.054011714, 0.06639909, 0.10496956, -0.10647823, -0.06405211, -0.099382415, 0.007950469, -0.08282214, 0.079787165, 0.048859607, 0.06026278, 0.10588738, 0.033113662, 0.0050074905, -0.021647183, 0.04994002, 0.02699116, -0.012242683, -0.104410484, 0.06543703, 0.061170414, 0.09535113, 0.05367931, -0.06636083, -0.056254085, 0.03885201, -0.042788737, -0.05626932, -0.037756924, -0.027339026, 0.05266947, 0.022531675, -0.093976624, 0.0003203635, 0.06528011, 0.021211982, 0.009141497, 0.087426186, 0.08431209, -0.055059493, 0.009318035, -0.051207874, -0.101018645, -0.09933082, -0.046386372, -0.06710511, 0.018660499, 0.042501092, -0.059283722, -0.032140344, 0.07019831, 0.0037493606, -0.019869806, -0.041946054, -0.062030032, 0.06104712, 0.032818783, -0.018984396, 0.069965705, 0.04071464, 0.031833496, -0.040705074, -0.09572879, 0.05101699, 0.07025561, 0.009826835, -0.014470872, -0.022134006, -0.050515022, 0.08095344, 0.069842935, 0.03728442, -0.004399091, 0.05290832, -0.0447675, 0.07955597, 0.014559346, -0.111875504, 0.13174325, -0.07401503, -0.04903862, 0.09176623, 0.0361507, -0.08348104, 0.089344114, -0.07942931, -0.08844708, 0.011493619, -0.04937054, 0.015556835, -0.10356679, 0.010849781, 0.09589544, 0.035180673, -0.12609848, 0.02411878, 0.030495077, 0.036279537, -0.06394013, 0.009572583},
{-0.04579607, 0.050705608, -0.08415355, 0.08516932, -0.091718405, 0.07983209, -0.106354386, -0.0058424175, -0.0047683045, -0.06467858, 0.01930939, 0.115090646, -0.013813847, -0.041461818, -0.093922585, 0.07038249, 0.013193986, -0.06843457, 0.07997989, -0.053288184, 0.08730672, -0.029963193, -0.018026808, 0.0094719045, 0.019183367, 0.024061989, 0.07909943, 0.1365741, -0.038189206, 0.027823621, 0.09184328, 0.094766006, 0.010901174, -0.09254767, -0.023612123, -0.10387399, 0.08686426, -0.029671399, 0.0016903381, -0.08603731, -0.006610032, -0.027091071, 0.07990688, -0.06576012, -0.04342453, -0.030021405, 0.0047762096, 0.1262563, -0.10459637, -0.006498061, -0.04732788, 0.08258711, 0.12745753, -0.03590298, 0.07661779, -0.06277551, -0.012045154, -0.099268086, 0.025905717, 0.09795801, -0.05355696, -0.09328247, -0.014092204, -0.05969744, 0.035208583, 0.04719207, -0.10581854, 0.07081078, 0.018000312, -0.06346152, 0.02710608, 0.10058803, -0.005011305, 0.05026052, -0.08320525, 0.009112417, -0.048873264, -0.047373105, -0.122632705, 0.09859944, 0.096053556, -0.08148908, -0.047926366, 0.06974956, 0.03966731, -0.0064768796, -0.040715683, 0.06973275, 0.115996145, 0.0648563, -0.100778885, -0.007673492, 0.019952193, -0.0011406975, 0.13218296, -0.02850242, -0.006220624, 0.07146964, -0.05408387, -0.062875114, 0.10082205, -0.05108709, 0.009698358, -0.035525665, 0.003585264, 0.08100481, 0.059019584, 0.070404045, -0.01633241, -0.07372134, -0.07059992, -0.037871443, 0.0088971965, -0.0174394, 0.0588461, -0.04913173, 0.06424669, -0.0072156414, 0.022377815, 0.012845807, -0.04239575, -0.08086232, -0.0266508, -0.018384602, 0.010740392, 0.006010032, 0.025445055, -0.11299613},
{-0.058909915, -0.08106829, -0.10376555, 0.123636484, 0.011326297, -0.07831165, 0.09605097, 0.019484669, -0.04825314, -0.02078493, 0.06139684, 0.082258396, -0.07934409, 0.0630548, 0.02965092, 0.0317073, 0.045705903, 0.09023079, -0.093597755, -0.09051002, -0.06619383, -0.033256523, 0.11054621, -0.06354792, -0.09859623, -0.08634836, -0.08166187, 0.027947633, -0.003187021, 0.07058542, 0.054073002, 0.06420751, 0.035752486, 0.030583568, -0.04229966, -0.09827681, -0.016142426, -0.013283378, -0.014589979, -0.06629667, 0.00010562141, 0.081633866, 0.057187036, -0.043253, 0.011682801, 0.0054984223, 0.026468068, -0.015127885, 0.060134992, -0.080800794, 0.06270249, 0.0021033585, 0.064278305, 0.001852498, 0.102397874, 0.05918487, 0.024829729, 0.061883986, -0.045100633, -0.084730215, 0.06448199, 0.028440788, 0.056723308, 0.10157028, -0.019076653, -0.082163885, -0.030841906, -0.057515875, 0.016746936, -0.11786353, -0.026655626, -0.02642251, 0.045760617, -0.008150295, -0.055870682, 0.10542264, -0.071743146, 0.0006076321, 0.014916899, -0.040886935, 0.035582833, -0.026593335, -0.07663076, -0.010498946, 0.026411697, 0.091654316, 0.083922535, -0.019043788, 0.021641945, 0.0103239175, -0.06365344, 0.11549555, -0.0627856, -0.095237456, -0.03702834, 0.077741176, 0.0924076, 0.09045623, 0.10111838, -0.05419262, -0.024197802, -0.08606729, -0.064804286, 0.024085686, -0.042288702, -0.028637014, -0.05611462, -0.07427188, 0.066010036, -0.02420104, -0.06151862, 0.06405234, 0.01573774, 0.095904626, -0.10211356, -0.029770887, 0.09781108, 0.020261884, -0.10737239, 0.08093007, -0.030637955, 0.005313024, 0.08091541, -0.11274656, 0.026878476, -0.059846967, -0.0665055, 0.05833641},
{-0.035312943, -0.011044683, -0.08678652, -0.08039711, 0.03350645, -0.053113095, 0.07026908, -0.0767393, -0.08877741, -0.039463803, 0.029046258, 0.079474345, -0.071036905, 0.03510727, -0.064990215, 0.07396517, -0.06964411, -0.09074902, -0.0074176546, 0.030190859, 0.0023658106, 0.080529764, 0.074045695, -0.06556617, 0.014807532, 0.012637881, -0.06489744, 0.10807569, -0.08336483, 0.0947226, 0.09611265, 0.07732182, -0.031489037, 0.072059914, -0.0106334975, -0.008107031, -0.07278752, 0.12077623, -0.10254537, -0.016849019, -0.08478622, -0.041000806, 0.07657067, -0.013294409, -0.06984814, 0.0053189313, -0.03629034, 0.04054253, 0.07056786, 0.08312404, -0.0010781568, -0.099671, -0.06669027, 0.012298711, -0.071121, 0.01825862, 0.066257335, 0.045304, -0.08554448, -0.047839556, 0.045695886, 0.015313681, 0.14181162, -0.07080803, -0.019179307, -0.09754883, -0.015168057, -0.029568374, 0.035303414, 0.068144694, 0.07428076, 0.059255928, -0.10368238, 0.112078145, -0.0716833, 0.09662761, -0.08319716, 0.037167236, -0.09627977, -0.07925813, -0.04213542, -0.061870515, 0.051956598, -0.0915935, 0.055916466, -0.09822776, 0.0666945, -0.07213789, 0.100836724, -0.038488094, -0.036372844, -0.062738776, -0.1018671, 0.06804424, -0.00078570325, -0.017530672, 0.049039707, -0.04473618, 0.081610195, 0.003923185, -0.0768035, 0.08797174, 0.06411755, -0.06347469, 0.05864563, 0.080387615, 0.121562585, -0.10385342, 0.075086005, -0.04738757, 0.0044822446, -0.10656135, 0.051956102, 0.046988264, -0.026314326, -0.0043322057, 0.09942425, 0.06852803, -0.106620595, -0.07689416, 0.03160617, -0.011246353, -0.046278764, -0.07986009, -0.07836454, -0.08084896, -0.038463674, -0.016524576},
{-0.018040413, 0.049235523, -0.07391905, 0.004159316, -0.0325427, -0.017291412, 0.07413689, 0.043358296, 0.019745305, -0.04538912, -0.022563457, 0.11663999, 0.11392925, 0.11205337, 0.06810107, -0.053344093, 0.062430907, 0.08703861, -0.042630065, -0.031999536, -0.113055214, 0.0090958215, 0.019851912, 0.07245733, -0.075534895, -0.056681413, -0.098646425, 0.02102277, -0.11224852, -0.059210274, 0.110248744, 0.075146735, -0.100747444, 0.07537274, 0.11521052, 0.02461988, -0.11163454, 0.11774993, 0.01113887, 0.095823325, -0.060098663, -0.04341218, -0.09303432, -0.08007568, 0.026967203, -0.10394228, -0.03466606, -0.04178025, -0.1064992, 0.038910404, -0.07241393, -0.07294439, 0.07386507, 0.07047489, 0.04611692, 0.08616866, 0.05845151, 0.052682683, -0.07544318, -0.060669072, 0.054905206, -0.036467567, -0.029481154, 0.025462449, -0.036003098, 0.035758045, -0.002436618, 0.056106582, -0.06940799, -0.11375289, 0.06670478, -0.09189585, 0.015923932, -0.0045235613, 0.0034199427, 0.08809192, -0.056817744, -0.09347607, -0.09859021, 0.06321557, 0.09730041, 0.0044415593, -0.022649672, -0.062724195, 0.015551959, -0.031068861, 0.082871825, 0.0947876, 0.0141074695, -0.059271444, 0.041318305, 0.094165266, -0.096687905, -0.055783194, -0.090062, 0.09350753, 0.02367197, 0.108822554, 0.021449894, 0.0309311, -0.090121426, 0.08708897, -0.1065776, -0.10290014, -0.08436294, 0.024044612, -0.042912744, -0.051122922, 0.10287114, -0.04322546, -0.09102284, -0.09094639, 0.08278106, 0.0024684197, -0.092472464, 0.027033757, -0.044183813, -0.048250854, 0.08098291, 0.009581238, 0.0138434, -0.030459262, 0.064118065, 0.091061406, -0.08645702, -0.08423319, 0.033779517, -0.03563439},
{0.08964491, 0.005413854, 0.059034206, 0.070567414, 0.000754531, -0.08919048, 0.061241496, -0.017216645, 0.02592048, 0.085717425, 0.04331789, -0.039957132, 0.018074492, 0.07478394, 0.07333989, 0.04096127, 0.056730572, -0.05322648, -0.028019624, -0.0351519, 0.027422663, 0.021388434, -0.0018505511, 0.08957519, 0.03511003, -0.06960132, -0.01498039, 0.04642485, 0.046090417, 0.017408902, 0.089095525, -0.10088322, -0.011196575, 0.10220312, 0.102693506, 0.04291845, 0.0017090938, 0.11697216, 0.05239935, -0.009025678, -0.020229148, 0.10564816, -0.12962385, 0.07449798, 0.09862304, 0.0337668, -0.05581888, 0.099177174, -0.07012159, 0.04155382, 0.029780565, -0.025398836, 0.008288062, -0.061723255, 0.08820024, 0.067719266, -0.052455064, -0.04931592, -0.041346088, -0.0775903, -0.07020625, -0.046815027, -0.0628894, 0.087840006, -0.03193824, 0.018000498, 0.019471949, 0.09080009, -0.014680896, 0.054773085, 0.004808471, 0.059861694, 0.09079799, -0.0039822133, 0.03288989, -0.004914452, -0.13662611, -0.07730228, -0.048092302, -0.09324403, -0.029631004, 0.031225726, 0.10974887, -0.012474283, 0.043189663, -0.08911078, -0.061628196, 0.012961961, -0.052559033, -0.09712473, 0.0148521075, 0.068045735, -0.106307544, -0.09189039, -0.11321966, -0.089779764, -0.060189053, 0.11637393, 0.050426584, -0.049947977, 0.08900368, 0.05410031, 0.055891857, -0.01572384, 0.02695049, 0.09946744, -0.06965119, -0.01865769, 0.11292733, 0.095339954, 0.03424017, -0.06188086, -0.06669108, 0.06363085, 0.028983265, -0.052740254, 0.084069155, 0.08435285, -0.04333834, 0.0102903545, -0.068198875, 0.022068646, 0.057067387, -0.07264468, 0.08735803, -0.047892462, 0.11958646, -0.054621387},
{-0.031167286, 0.1704558, -0.15992363, 0.011289213, -0.06164182, 0.056044415, -0.10226191, 0.028981939, 0.06045577, -0.014201216, 0.065303996, 0.14621334, -0.028405635, -0.030550778, -0.017154949, -0.04705787, -0.10142824, 0.025243638, -0.0050151497, -0.06945149, 0.070314825, -0.016450932, -0.015871333, -0.040416893, -0.106341116, 0.031507406, 0.0054825135, -0.12844965, -0.06135626, -0.046759896, -0.04695993, -0.081574306, -0.05995929, 0.11336766, -0.014086673, 0.102478534, 0.02916905, -0.008275198, 0.021452792, -0.008429476, -0.03220423, 0.090209246, 0.06033085, -0.08580366, -0.040043335, 0.012652581, -0.012586929, -0.003938922, -0.06374473, 0.13251768, 0.0983655, -0.083133996, 0.10817147, -0.035802748, -0.022930883, -0.19178033, 0.083704166, -0.008281514, -0.07077317, -0.1017011, 0.09611902, 0.052338667, 0.0010005189, -0.048628226, -0.029090792, 0.047233965, 0.018035332, -0.0086739585, 0.049958017, -0.07966051, 0.016639864, -0.028867727, -0.039866284, 0.09543062, 0.009730568, 0.13715264, 0.010862521, 0.003172569, 0.05660712, 0.06131784, 0.09695204, 0.07151756, 0.013177339, -0.073652565, -0.093657784, -0.087459855, 0.04395553, 0.15827309, -0.107864946, -0.07506856, 0.11637157, -0.078080386, 0.10176958, 0.0040058764, -0.1311883, -0.092923135, -0.007064976, -0.058705535, 0.08039979, -0.03395593, -0.0104136765, 0.0878614, 0.076813005, -0.012103245, -0.059075475, 0.14871882, -0.11611444, -0.01819982, 0.076639675, 0.025813702, -0.017710865, 0.09806445, -0.15068774, 0.055711783, 0.0067827404, 0.0030593118, -0.028016934, -0.084265545, -0.059916046, -0.052828822, 0.05104575, 0.07820383, 0.12672153, 0.08931315, 0.0030467883, 0.027229844, -0.10540973, 0.17197433},
{0.033769116, -0.100344636, 0.058693286, -0.0620782, 0.081463836, -0.004058577, 0.084856525, 0.061002657, -0.06421772, -0.08639173, 0.032314368, 0.012812816, -0.008870437, 0.045534063, -0.057900555, -0.012364498, -0.016529987, 0.033344068, 0.06405821, -0.080012895, 0.002548956, -0.004731384, 0.07643978, 0.0970325, -0.104663685, -0.009120944, -0.091653496, -0.05244267, 0.08396729, -0.04484099, -0.06182319, -0.048448827, 0.0502673, -0.013387651, 0.043340627, -0.008854978, 0.06819583, -0.04595846, 0.107037365, -0.028776485, 0.06407574, 0.062314495, 0.017926866, 0.06066018, -0.13362283, -0.05356764, 0.08380766, 0.018490357, -0.03422188, 0.09553114, -0.020123394, 0.04488866, 0.07562449, -0.07482682, -0.0037198365, 0.079039134, -0.031183042, 0.09286752, 0.04911752, 0.024144521, 0.05784554, 0.07122688, 0.16251549, 0.08823654, -0.07890338, -0.07872564, -0.071090594, 0.058621198, -0.0320135, -0.08355635, -0.06054004, 0.038463995, 0.030342072, 0.04940872, -0.052458804, -0.047637027, -0.026560742, 0.048812494, 0.025950829, -0.057009295, -0.01176572, -0.10093768, 0.069486335, 0.04189296, -0.105639994, -0.016188506, 0.05481505, 0.036906667, -0.12212548, 0.0073328703, 0.16346465, 0.07764601, -0.10130824, 0.04713493, -0.045435503, -0.06725246, -0.060328785, -0.085523784, 0.11451953, 0.0031517, -0.10055149, -0.010026911, -0.081951104, -0.027072087, -0.023215335, 0.12882265, -0.0532365, 0.03838984, -0.07735745, 0.03982901, 0.014305934, -0.04122354, -0.032624118, 0.09563989, 0.10229574, 0.030438978, -0.103063196, -0.079333484, -0.07530105, 0.0020231754, 0.089694865, 0.06858063, -0.054692734, 0.05172334, -0.0019547045, -0.09407596, 0.05817939, -0.029933838},
{0.025743064, 0.07557783, -0.008974833, -0.09964377, -0.080626346, -0.0697114, 0.014039142, -0.097892374, -0.058321852, 0.06295499, 0.08941104, -0.088656, -0.0057462715, -0.019558718, -0.05464392, -0.09069245, -0.053637657, 0.09157048, 0.047719065, -0.07307204, 0.03241228, 0.15769246, 0.041330855, -0.100117646, -0.048871882, -0.062955126, -0.06164348, 0.02892129, -0.05926659, -0.0876461, -0.082794905, -0.060309503, -0.104283266, 0.017535897, -0.08551486, 0.062316336, 5.3987562e-05, -0.014179511, 0.118301556, 0.07004131, -0.015409273, -0.03592731, 0.030524159, 0.080474004, -0.095448494, -0.10907197, 0.07456271, -0.14021741, 0.0729927, 0.12850629, 0.0012762939, -0.03487625, -0.08977188, 0.0077102715, 0.09127082, -0.03846062, -0.028911488, -0.034080237, 0.08703111, 0.023779562, 0.009725297, -0.069986954, -0.022349896, -0.076143354, -0.0428662, -0.01959878, -0.031247064, -0.07188036, 0.061571427, 0.12615526, -0.07092257, -0.013497862, 0.08427355, 0.04222161, 0.1094314, 0.13406852, -0.025610404, -0.035591416, 0.008259063, 0.047649123, 0.068201624, 0.07720831, -0.049666755, -0.009917201, 0.05129024, 0.044575557, 0.04458964, -0.062035516, -0.012328953, -0.09928295, 0.11721742, -0.063652046, 0.031881645, -0.0903463, 0.05582463, 0.012896486, -0.09294936, 0.074658215, 0.1007027, 0.08793147, -0.09495762, -0.10123856, 0.003436363, -0.103459686, 0.044996947, -0.013213321, -0.07620588, 0.05024626, 0.02608061, 0.019899663, 0.112977, -0.07029797, 0.06171843, 0.04876043, 0.016196162, 0.10172679, 0.057718564, 0.05069928, 0.04432283, -0.033426344, 0.056577146, -0.12573181, -0.055640746, 0.044472177, 0.057739884, -0.09076115, 0.096362494, -0.017868463},
{0.013832923, -0.032432735, -0.026518416, -0.040176217, -0.04745536, 0.06925309, 0.0847902, -0.0024177805, -0.041962802, 0.0061021596, 0.1304213, -0.06914662, 0.050263286, -0.030568, 0.05446454, -0.06447742, 0.0059892205, 0.055786755, 0.12973332, 0.011617997, -0.09606699, -0.044045262, -0.020094978, 0.11643236, -0.050420363, -0.0003012572, 0.04875371, 0.006020503, 0.095820926, -0.0405083, 0.07508322, -0.036280748, 0.058708552, -0.05616114, 0.060913906, 0.016821297, 0.04525959, 0.029096898, 0.088638246, 0.06353938, -0.0686473, -0.06034101, 0.11986063, 0.03947635, -0.07536372, -0.0016590836, -0.06970378, 0.016187975, -0.0024549589, 0.021871595, 0.121008605, 0.07032077, 0.054472692, 0.07814154, -0.039024927, 0.037349913, 0.013880381, -0.09294044, -0.061675187, 0.090379186, -0.09142454, -0.025111746, -0.021243824, -0.012166351, 0.08161549, -0.11032653, 0.074724816, -0.105950534, 0.026196463, -0.027352216, -0.090567596, -0.08959119, 0.0029028803, -0.050934747, 0.09841393, -0.06534152, 0.12122818, 0.034198016, 0.1260781, 0.05842522, -0.018013792, 0.08148028, 0.057322696, -0.07823264, 0.07154357, 0.05442975, -0.079166494, -0.041573904, -0.020085974, 0.03835795, 0.09598587, -0.10038514, -0.04569243, 0.06771842, -0.06713092, -0.014605761, -0.06599581, -0.03361674, 0.043356825, -0.0019466281, -0.053637013, -0.015188585, -0.028886309, 0.104373574, 0.060253914, 0.101764314, -0.02780865, -0.07538718, -0.07589551, -0.00020116448, 0.14099228, 0.045404673, -0.07613112, 0.010479668, 0.1011326, 0.04884302, 0.037382446, 0.012666754, -0.035309456, 0.009206109, 0.053791832, -0.060566373, 0.011662433, -0.07727945, 0.0036971718, 0.05191177, 0.04941362, -0.038025036},
{0.021341892, -0.11343991, -0.04814163, -0.0019940387, 0.066894814, 0.07828967, 0.03421329, 0.07879938, 0.040180877, 0.09711352, 0.17085628, -0.09389836, 0.035936944, -0.006328186, -0.041100338, 0.087689504, 0.060570396, -0.009487411, -0.028965715, 0.09781842, 0.017280344, 0.031266585, 0.07784285, 0.1115302, -0.015320179, -0.15051247, -0.028121304, 0.058765545, 0.046012357, 0.040807918, 0.042701848, -0.10349108, -0.09007417, 0.098945715, 0.10395828, 0.0756797, -0.059435796, -0.018309483, 0.0160284, 0.0708299, 0.113017984, -0.07392763, 0.14172271, -0.018243302, -0.058517147, -0.0005064008, 0.02568531, -0.001900554, 0.018490568, 0.051158164, 0.058307715, -0.012133233, -0.0772856, -0.10465823, -0.062859334, -0.05001028, -0.037049055, 0.020407021, -0.07099402, -0.04129661, 0.0110941315, 0.0189565, -0.018803755, 0.013720229, 0.03789416, 0.04179959, 0.0034122118, -0.07607738, -0.10414044, 0.10165258, -0.0054473937, 0.047571946, -0.04806039, -0.04000085, -0.034503866, 0.019564237, 0.004046194, -0.093370825, 0.020108843, 0.080195606, 0.15726383, 0.06346321, -0.16580395, 0.07393122, -0.039171938, -0.11053414, -0.021628154, -0.10342228, 0.067478366, 0.041270055, -0.034161434, 0.0153786745, 0.0771662, 0.043673266, -0.021447903, -0.01606059, -0.045475964, 0.060020708, -0.17443444, -0.017869666, 0.09369409, 0.04873155, 0.091644056, -0.008964941, -0.05648105, -0.111661255, 0.011136806, 0.093391016, -0.012685441, -0.058259506, 0.07853155, 0.033324525, 0.16220067, -0.032654367, 0.06527266, 0.022323184, -0.053003475, -0.09963834, -0.08486463, -0.064106904, 0.013424425, 0.0025517, -0.09245032, -0.08079865, 0.072564214, 0.053639684, 0.11109383, -0.055217918},
{-0.025801053, -0.053083222, 0.11664162, -0.07530424, -0.040876616, -0.077405035, -0.035177503, -0.00062905997, -0.018764496, 0.0591134, 0.0046375655, -0.036961563, 0.09246893, -0.054859594, -0.037407577, -0.024774652, 0.07389925, -0.052308757, -0.068461515, 0.019971874, -0.0065461756, 0.016461357, 0.1506032, -0.035432566, -0.043039784, -0.18456063, -0.09074331, 0.03858037, 0.0496002, 0.07399449, 0.122632295, -0.022481447, 0.016107427, 0.1062054, 0.10446343, 0.014251131, -0.048601206, -0.12046099, 0.038477495, 0.04029056, 0.051228065, 0.01934193, -0.027355243, -0.013132735, 0.13462587, 0.08494182, 0.103434026, 0.1839312, 0.1028305, 0.051000945, 0.07439006, 0.039470226, 0.011629407, 0.080246985, 0.027849019, 0.12646054, -0.18982759, -0.09624016, -0.07083533, 0.07562489, -0.0015509547, -0.04809924, -0.10394677, -0.1055308, -0.056560177, -0.07539632, -0.11512316, -0.020279773, -0.10708924, 0.075822, -0.09804446, -0.06587299, -0.09956888, -0.08057553, 0.028373018, -0.016988367, -0.0069640228, -0.06247106, -0.14013861, -0.0007240654, 0.10253284, -0.04053781, -0.030409921, 0.08458126, 0.0147047145, 0.086468905, 0.13837968, -0.164521, -0.0348433, -0.08143642, -0.056816902, 0.12765668, 0.018722326, 0.11806026, 0.009457798, 0.09008829, 0.040140465, -0.005909867, -0.03811282, 0.10278298, -0.028665818, -0.03258164, 0.02983943, 0.03927806, -0.018247528, -0.10109116, 0.042459372, 0.09892145, -0.16332585, 0.04333338, -0.051539924, -0.027317755, 0.1851767, 0.0944317, -0.0052842125, 0.049850076, 0.01614444, -0.06752951, -0.0035377499, 0.104076415, 0.06008867, -0.02418652, -0.0004818232, -0.18471391, 0.074181095, -0.11194244, 0.1722296, 0.0463514},
{0.077498846, -0.067876376, 0.12710074, 0.041048657, -0.047393527, 0.06041555, 0.09034439, 0.056012392, 0.0404225, 0.0041745454, 0.040355943, 0.0033078159, 0.11878176, -0.008938905, 0.050369475, 0.15920618, -0.04331251, -0.04003232, -0.15634924, 0.08036321, 0.023461314, 0.13645902, 0.033878673, 0.089461185, 0.07667421, -0.12857138, -0.039551567, -0.00040513783, -0.11775305, 0.06297941, 0.00840494, 0.09119653, -0.0879237, 0.023688622, 0.15061681, -0.08882426, 0.008078206, -0.084725045, 0.084359534, -0.13617052, -0.001494178, 0.016485974, 0.04505283, -0.030008731, 0.11001223, 0.07361992, 0.07365394, 0.12336212, 0.06636007, -0.05053382, 0.106275484, 0.1002458, -0.009710239, 0.057076816, 0.018765748, 0.15060894, -0.0838335, 0.079595566, -0.06178276, -0.048392687, -0.03829746, -0.016952839, -0.11952502, -0.09201722, 0.056492493, 0.09108325, 0.07424028, -0.089455366, -0.015713515, -0.04703273, 0.034322184, -0.11105342, -0.0017265752, -0.0849084, 0.11000202, -0.05260585, -0.1384127, -0.0215723, 0.0035685482, -0.11335, 0.07849919, 0.0068534166, -0.076793246, -0.111504346, 0.16076197, 0.04697543, 0.15405275, -0.033842888, 0.05687454, -0.10835972, -0.022368524, 0.14065968, -0.0033801347, 0.16993636, -0.10377881, 0.061928898, -0.07784076, 0.019201942, -0.13428847, 0.06708069, 0.025121227, -0.055302642, 0.07516732, 0.02071552, 0.18443581, -0.014516688, 0.14178598, -0.10345113, -0.10971283, -0.08440936, 0.03884542, 0.046225518, 0.027379354, 0.071608044, -0.07737995, 0.004413839, 0.0010129499, -0.042364597, -0.06855571, 0.07471612, -0.021221817, -0.07734531, -0.16768856, -0.16973463, -0.059445497, -0.0022609835, 0.05653061, -0.07590348},
{-0.10226356, -0.05175222, -0.07850675, 0.060215525, 0.0050668735, 0.048170596, 0.001281613, 0.0463984, 0.031895876, 0.0819491, 0.064437024, 0.07552541, 0.11073993, -0.013232403, -0.10639279, 0.102279685, -0.02269118, 0.00904201, -0.0033372124, -0.011696544, 0.04321494, -0.05644599, 0.07307478, -0.016875317, 0.06401202, -0.15333015, 0.032374524, -0.11805062, -0.07416614, -0.013695049, 0.018454924, 0.068300076, 0.035117846, -0.053458113, 0.089686655, 0.019626321, -0.0053421264, 0.07256826, 0.015634852, -0.037145652, 0.09776404, -0.012612365, 0.021865997, -0.10077144, 0.09290161, -0.014273548, -0.040524468, 0.11636636, -0.09883203, 0.034363247, -0.077813745, 0.060223266, 0.09614668, -0.105131716, 0.027656779, 0.06525274, -0.1434966, 0.04976827, -0.16908087, 0.045221448, -0.035512883, -0.08498755, -0.036265854, -0.08581035, 0.083713874, 0.018044282, -0.049157195, -0.011538155, 0.014022292, -0.11487024, 0.0026887148, -0.11022114, -0.0314632, -0.09319603, 0.10762955, -0.0693536, 0.050528154, -0.06826592, 0.011597573, -0.12940022, 0.11979753, -0.073608056, 0.049938433, 0.012700552, 0.07767746, -0.057396818, 0.0046707517, -0.058959868, 0.0973006, -0.027115708, -0.13912609, 0.11798503, -0.023100182, 0.029553061, 0.06682217, 0.031171381, -0.000117242336, -0.0097480295, -0.00078383746, 0.010329343, -0.07227006, -0.02059354, -0.04717178, 0.03900826, 0.061986055, 0.02065336, -0.09090121, -0.088698596, -0.1238707, 0.094750874, -0.04569737, 0.039117947, 0.023945982, -0.0181988, -0.040613346, 0.04974366, 0.08704711, 0.05131042, 0.02722407, -0.018963374, 0.01917854, -0.0453102, -0.0441706, -0.06901229, 0.01182919, -0.016442982, 0.074660145, -0.05604909},
{-0.11642316, 0.087115504, -0.16241209, -0.109727144, -0.07206506, 0.09072718, -0.0396531, 0.02014108, -0.053315505, 0.04806599, 0.0141092045, 0.022962471, 0.047651734, 0.10755851, 0.118553564, -0.008855259, 0.09510197, -0.082124054, -0.05687474, 0.060954973, -0.09710403, -0.14278188, 0.07161958, -0.14329904, 0.03174423, -0.024803983, 0.07869927, -0.030419342, -0.11197934, 0.0079842415, -0.13285193, 0.06173895, 0.08775974, 0.08210063, 0.11709498, 0.040431153, -0.081789955, -0.004025042, -0.04553262, -0.11030682, -0.057175264, 0.1053364, 0.10137434, -0.10982433, 0.00090858724, -0.072025, 0.026911944, -0.0034258203, -0.06033524, -0.055774182, -0.112579286, 0.053697065, 0.14625248, -0.02615112, -0.052948453, -0.11963919, -0.092596374, 0.016075052, -0.066540055, -0.06565571, -0.023700062, -0.046204753, 0.0067374925, -0.047418244, -0.083199516, -0.0019227633, 0.0887036, 0.06410906, -0.054150064, 0.07824222, 0.052998483, 0.06858733, 0.080298305, -0.13312164, -0.04827999, 0.06411302, 0.042656425, -0.075187, -0.15969357, -0.1414867, -0.02504996, -0.09329931, -0.014150551, -0.11188409, -0.07148333, -0.07387595, -0.012830195, -0.12233504, -0.038189463, -0.079591155, -0.038959656, -0.08833277, 0.04711452, 0.1642953, 0.1844902, 0.042480424, -0.056029525, -0.10034562, -0.117415234, 0.07023296, 0.004609965, 0.18376173, 0.02417813, 0.102351755, 0.07471665, -0.10747306, -0.07279236, 0.07372201, 0.002276889, 0.06743664, 0.02078476, -0.06541334, -0.079628825, 0.030865151, -0.0064917803, 0.15407172, 0.082330175, 0.07542257, -0.023108974, -0.011801258, -0.055642802, 0.12933213, -0.032582097, -0.040410433, 0.07654032, 0.062318414, -0.0959643, 0.070245855},
{-0.064910635, 0.004140947, -0.1690001, -0.15389006, 0.032583367, 0.068949014, 0.028867414, 0.07534574, 0.06150092, -0.022510208, -0.012948127, 0.17635691, -0.030951923, 0.16944483, -0.016531467, 0.01917185, 0.06754442, 0.087927856, 0.017158298, 0.10663194, -0.017030427, -0.15810741, -0.10603964, -0.028045272, 0.12421586, -0.024730448, -0.03554793, -0.14005545, -0.07741745, -0.102884956, -0.11776985, -0.014668038, -0.11075069, -0.020710798, 0.17921896, 0.06875427, 0.040229984, -0.073244974, -0.058205806, -0.075380124, -0.13404195, -0.03286939, 0.1328007, -0.06526222, -0.0057949647, 0.039036695, 0.09976262, -0.08979534, 0.027326912, 0.059385527, 0.008278802, 0.024479344, 0.12527494, 0.035363313, -0.05636529, -0.17712414, 0.0117015345, -0.100331396, -0.0016552749, -0.046524968, -0.065081306, 0.0794577, -0.12500358, 0.026891813, -0.079038054, 0.03925272, -0.018811677, 0.02998811, 0.04507972, 0.039481763, 0.09487359, -0.06571455, -0.0011890903, -0.022390472, 0.12128536, 0.14442436, -0.071161896, 0.053825364, -0.079562314, -0.14088771, -0.02432135, -0.08171932, 0.017690308, -0.058630124, -0.14700377, 0.0057583563, 0.02743714, 0.028486634, -0.0037071689, -0.11049022, -0.088318706, 0.011538858, -0.08111501, 0.1728703, 0.013135848, 0.10547587, -0.06786413, -0.11894314, -0.09756562, 0.028183937, -0.080674514, 0.056201648, 0.007691671, -0.040127933, 0.12429451, -0.016842017, 0.0056696697, -0.03171439, -0.048075415, 0.08854305, 0.04224493, 0.103371754, 0.032423023, -0.016701201, -0.025858298, -0.029526986, 0.03210499, 0.04549086, -0.08566668, 0.03006111, 0.0064948997, 0.15316884, 0.085943714, 0.07237905, 0.08270426, 0.08022377, -0.114323065, -0.020733738},
{-0.008825778, 0.12779771, -0.14620547, -0.030425085, -0.09512093, 0.05322124, -0.097989924, 0.011062048, -0.09752809, -0.0052716583, -0.0010851213, 0.094668925, -0.032910246, 0.05591691, -0.090931766, 0.13845752, 0.039775588, -0.09143471, -0.07785936, 0.07231538, -0.060372043, 0.03884675, 0.016439727, -0.05619374, -0.078570046, -0.006070565, 0.002240836, -0.1647372, -0.018129006, -0.008804685, -0.07830606, 0.07775503, 0.040099557, -0.023154464, 0.14362954, 0.035528336, -0.030351687, -0.003193405, -0.05074391, -0.11713433, -0.09320885, 0.01693926, 0.04190686, -0.014213995, -0.02614634, -0.02672793, 0.015360951, -0.070113406, -0.07837324, 0.016232323, -0.09248185, -0.096808374, 0.070997804, -0.09105052, -0.00097349286, 0.043941192, 0.06525089, -0.0026992038, -0.15951389, 0.037373863, -0.01104533, -0.10168419, -0.0662017, -0.06392808, -0.0016331002, -0.02837648, 0.060042724, -0.026014268, -0.01793551, 0.02069865, 0.050975088, -0.009003638, -0.0796431, 0.04470682, -0.0037442138, 0.09390297, -0.037032913, -0.015492074, -0.028856488, -0.10105563, 0.12518165, -0.013643041, 0.053255845, -0.06708307, -0.12148421, -0.003146799, 0.028168278, -0.042059965, -0.0047933655, 0.081777655, -0.000176512, -0.06894763, -0.050216593, 0.07093471, 0.045911632, 0.03371039, -0.047686223, 0.09022096, -0.060880344, 0.10378216, 0.0643374, 0.13706113, -0.10048534, -0.079464324, 0.03146707, -0.10708792, 0.015150046, 0.0093540605, 0.03228002, -0.008994727, -0.025537483, 0.021228224, 0.10546329, 0.07013542, 0.09380828, 0.02246441, 0.08391603, -0.091014095, -0.057550848, -0.0016452745, -0.005507503, 0.019518143, 0.07743698, -0.035803784, 0.06912424, 0.056358673, -0.08491102, 0.11462197},
{-0.009043443, -0.053872276, 0.023536671, -0.04428629, 0.049748857, -0.095561795, -0.08423361, -0.028690927, -0.020333879, -0.084787175, -0.06279927, 0.0121738035, -0.0058256327, 0.05060823, -0.082916394, 0.15280588, -0.070786715, -0.009545172, 0.026171805, 0.108763814, 0.031815607, 0.002976633, 0.0842098, 0.04087741, 0.10286043, 0.11230725, -0.08230577, -0.14383756, -0.021017252, 0.013659053, -0.07226329, 0.076167315, -0.032712024, 0.006860353, 0.026882319, -0.08282489, -0.041008495, -0.02745389, -0.12167006, -0.009281767, 0.037556604, -0.016332999, -0.007492927, 0.03779849, -0.034295604, 0.07332296, -0.041664682, 0.06991131, 0.059440315, -0.11755586, -0.0350446, -0.082642384, 0.07631657, -0.058301732, 0.07518934, 0.040055696, -0.005872952, 0.047259644, 0.03800512, -0.024478795, -0.09748701, 0.09303251, -0.014473852, -0.08841915, -0.01828137, 0.061252587, -0.05683506, -0.073302746, -0.09387349, -0.13736372, 0.09447734, -0.08513504, 0.0032493696, -0.01891648, 0.021320075, 0.04993801, -0.1113281, -0.08877103, -0.109218, 0.08347672, 0.07718718, 0.08301999, -0.11738621, 0.049438503, 0.07329806, 0.025274372, 0.03752198, 0.040279802, -0.059957948, -0.011924867, 0.02296471, -0.038660005, 0.0803981, 0.022428535, 0.055601057, -0.08447741, 0.05732155, 0.13140284, 0.046653505, -0.055231556, 0.07772784, 0.1351604, 0.03297929, 0.034614146, -0.03226642, -0.060681116, 0.009713837, -0.03815096, 0.1301761, -0.1065013, -0.11326136, 0.09050371, -0.027836647, 0.060064346, 0.07899277, 0.08534778, -0.10954415, 0.06633213, 0.032703113, 0.016308367, -0.11641204, 0.16173603, -0.035964936, -0.10290457, 0.047413945, 0.14058866, -0.10046696, 0.04853057},
{-0.0693542, -0.074100316, -0.10681951, 0.029050482, -0.03665442, 0.033915013, 0.02423243, -0.1012355, -0.075602874, -0.083977, 0.0563251, -0.041656792, 0.0050497055, -0.050728764, 0.042474464, 0.032341227, -0.027372286, -0.05067941, -0.13229728, -0.08416212, 0.054231443, 0.04519722, 0.10758861, -0.01490813, 0.06772634, 0.076504834, -0.10274362, -0.06015555, -0.07292654, 0.058727354, 0.061369635, -0.01611212, -0.03474654, 0.09175278, 0.13340384, 0.023470556, 0.049467724, -0.0693355, -0.12573884, -0.10822423, -0.049278464, -0.0434473, 0.08256459, -0.027423693, 0.046664562, 0.058542497, -0.0048362687, 0.03051203, 0.07671884, 0.052166596, -0.116789624, -0.07935265, -0.058480863, -0.100405306, -0.06026296, -0.008557099, 0.06360715, 0.06605843, -0.12337866, 0.024802933, 0.04489435, 0.023052985, -0.018404972, 0.041670173, 0.094157994, -0.009122065, -0.11137579, 0.10609566, 0.014886695, -0.054576755, -0.061370987, -0.05844979, -0.015784375, -0.053759243, -0.07030548, 0.07543488, 0.043801688, -0.011668183, 0.035534646, 0.036511157, -0.046649214, -0.053495217, -0.113765374, 0.024032952, 0.036228776, -0.030542169, -0.024407398, 0.10401449, -0.029725859, -0.066526964, -0.116755456, 0.110047564, -0.015744627, -0.022327157, 0.10225432, 0.04399635, -0.0153975785, -0.03184641, 0.0243857, -0.029578157, -0.08341227, -0.035602346, 0.026670458, 0.069886774, 0.08037126, 0.077248946, -0.05570354, 0.02745947, -0.0011483838, 0.006402846, -0.044967957, 0.0016606227, -0.011076507, 0.09888622, -0.06706926, 0.054255795, 0.015453257, 0.04096636, 0.05306479, 0.021414623, -0.1371638, 0.030784022, -0.067957215, -0.0010978963, -0.03023246, 0.012700368, -0.08643826, 0.11866703},
{0.036917765, 0.013782825, -0.034904618, -0.0019207676, -0.030513372, 0.032896817, 0.055113982, -0.045580294, 0.036828235, 0.0131415725, 0.031092947, 0.07817056, -0.014897566, 0.120153815, -0.029888656, -0.005037757, -0.027610216, 0.06817558, 0.03208691, -0.08409124, -0.052093077, -0.004585728, 0.07778076, 0.003697976, -0.0736955, 0.14077918, 0.012684518, 0.06998189, 0.09116897, -0.03026588, 0.06297764, -0.09259097, -0.004909993, 0.048692975, -0.026532646, 0.071976684, -0.07270966, 0.014984174, -0.06490382, 0.0799334, 0.03446312, 0.104805544, -0.010225012, -0.0019976234, -0.031537313, -0.07194781, -0.04894752, -0.006436365, 0.08411269, -0.051001374, -0.12692381, 0.02544862, 0.115498416, -0.031755097, -0.062702745, 0.0921811, 0.060438238, 0.072423846, -0.11279475, 0.024433834, -0.09653546, -0.053624876, 0.108499855, 0.057005942, 0.07917972, -0.03576926, 0.09165963, -0.06502232, -0.030750986, 0.06351993, 0.057474956, 0.004153502, 0.013454281, 0.10157874, -0.06759775, 0.05819966, -0.0626478, 0.053315863, -0.066521354, 0.01457301, 0.0763826, -0.0025453344, -0.03377126, 0.09071985, 0.02923352, -0.08016174, -0.025421755, 0.058211815, -0.0036276456, -0.055723175, 0.05911105, 0.07135037, 0.105580285, 0.0393071, 0.009566693, 0.04370296, 0.067817435, 0.13447075, 0.09528896, -0.05380882, 0.002912715, 0.09677947, -0.052087877, 0.065621495, 0.037376463, 0.0645348, -0.031727884, 0.06301043, 0.07526166, -0.0663558, -0.09652479, 0.008800171, -0.010847949, -0.012166302, -0.010212868, -0.015261985, -0.11259087, -0.04809793, 0.09100625, 0.04071088, -0.079613715, 0.058752164, 0.07863986, -0.10481204, -0.07802771, 0.11620612, -0.049518622, -0.0067625497},
{-0.07129168, -0.09823365, -0.10251352, -0.034147214, -0.10697569, 0.07268977, -0.05128614, -0.07037844, 0.034023404, -0.033582702, -0.06860213, 0.106052555, 0.06287858, 0.08001146, 0.03387923, 0.10467343, 0.03762772, -0.067715235, -0.027641974, 0.06397739, -0.03247033, -0.014315278, 0.07756622, 0.10551045, -0.022962261, 0.07742444, -0.030293575, 0.03523636, 0.11669105, 0.063855164, 0.12651716, 0.019952098, -0.10507569, 0.10009405, 0.029314833, -0.06843403, 0.0007695182, 0.009843518, -0.06804153, 0.116122276, 0.02883974, 0.010018207, 0.0057519665, -0.030150851, 0.108960986, -0.0487856, 0.0261918, 0.05748253, 0.025890872, -0.0034691724, 0.060019325, 0.08778851, 0.007818825, 0.048346777, -0.0064496696, 0.020005796, 0.076442994, -0.019252397, -0.08677758, 0.094329365, 0.020297648, -0.08750569, 0.03523685, -0.05113506, -0.0323866, -0.09271619, -0.09605724, 0.08563951, -0.0973615, -0.06853052, -0.035852212, 0.04228369, -0.038605064, 0.042070612, -0.08019384, 0.023999404, -0.08179514, -0.020898841, 0.0017687524, 0.09830827, 0.13068391, -0.028015055, 0.053429734, 0.01666679, 0.043897673, 0.05091817, 0.11495675, 0.10439126, 0.06271359, 0.004181465, 0.0642543, 0.08858198, -0.080044, -0.016755333, -0.016162978, -0.063690014, -0.053695086, 0.055991415, -0.05426219, 0.09186587, -0.09441858, 0.06602537, 0.0065337433, 0.08393191, 0.10564893, 0.079159416, -0.029098887, 0.07777611, 0.10428662, 0.07635831, 0.052895136, 0.05202712, 0.0122633455, 0.006774148, -0.05832719, -0.08034614, 0.05431225, 0.03486359, -0.100845456, 0.06229058, -0.049447455, 0.03878985, 0.050275087, 0.040183734, -0.06908499, 0.09102186, -0.08094048, 0.002286228},
{0.023404945, -0.032252092, 0.0744466, 0.016833622, -0.057357997, -0.011562534, -0.033881355, 0.10033187, -0.050079476, 0.06384766, 0.04055744, -0.031090818, -0.087908715, 0.060226746, 0.08499278, -0.061364256, 0.07095945, -0.0497336, 0.016321396, -0.10789652, 0.07630339, 0.022649221, 0.049617406, -0.02105335, -0.029654093, 0.10637326, -0.02237799, 0.012022883, 0.0011305496, -0.038957268, -0.040118482, -0.0718333, 0.08277092, 0.060530055, 0.056001313, -0.052892048, -0.0037687826, 0.06344951, 0.03127019, 0.035613637, 0.08865701, -0.08625162, 0.05946981, 0.08867759, -0.00478323, -0.11000173, 0.062810734, 0.06105984, 0.008602388, -0.0052923094, 0.07573649, -0.019712143, -0.06651767, 0.035231024, -0.04316064, 0.017705286, 0.10652282, -0.089596644, 0.059850942, 0.044783503, -0.034514647, -0.05173242, 0.03570009, -0.056239255, -0.023961663, -0.022162087, -0.03533324, -0.09253575, -0.10756701, -0.038465634, -0.09642215, 0.05462345, 0.028449684, -0.0710886, 0.027493745, 0.10410386, -0.04894221, 0.026773438, 0.06608078, 0.04384618, -0.01756527, 0.027504578, -0.017859882, -0.0973185, 0.043530837, 0.033433437, 0.050327614, 0.08678903, 0.06993989, -0.093651794, 0.066049494, -0.066184245, 0.059353232, -0.054129433, -0.017873658, -0.04971161, 0.04016544, 0.05987099, 0.0897359, 0.07740526, 0.026261792, -0.07287619, -0.09395796, 0.0054888874, -0.012485667, -0.071656786, 0.04666977, -0.10325428, 0.06316414, -0.037336435, 0.01235486, -0.06145416, 0.0048641055, -0.017731588, 0.014391176, -0.028855534, -0.003960015, -0.073045254, 0.07501261, 0.027686507, -0.07061883, -0.0064307586, 0.034392465, -0.033011414, -0.09913814, 0.07588747, -0.038725916, -0.047161266},
{0.084548004, -0.08204872, 0.035678353, -0.07701585, 0.034143426, 0.0043518245, -0.09360782, 0.05313234, -0.074620485, 0.07522459, 0.039385524, 0.034042288, -0.095705606, 0.103654236, -0.015237083, -0.093445286, -0.0014165848, 0.09261412, 0.007371632, 0.029514773, -0.007560653, -0.098388195, 0.0895795, -0.08438261, 0.016400432, -0.057805434, -0.04018977, 0.1006072, 0.08239532, -0.09189014, 0.10014245, 0.082952544, -0.005073143, 0.029678766, -0.062286988, -0.0552251, -0.009971484, 0.11032886, -0.07319507, 0.01853284, 0.10734446, -0.07565658, 0.0008669847, -0.03113201, 0.11658341, -0.043927938, -0.08484042, 0.03718782, -0.03188975, 0.054540195, -0.056005273, -0.082351655, -0.011501538, -0.012118273, 0.03099683, 0.0029001385, 0.011650685, 0.092292875, 0.071622625, -0.022720013, -0.04664461, -0.06203798, -0.03155679, -0.04672153, -0.018104993, 0.014710368, -0.0052349847, -0.046187777, 0.01673113, 0.053089567, -0.09167343, 0.05375751, -0.03517033, 0.01481821, -0.06552305, 0.08462109, 0.025968626, 0.04453157, 0.03193769, -0.08424064, 0.13419817, -0.100221574, -0.0055351816, 0.091896385, 0.035804305, 0.035477206, 0.11715916, 0.04983806, -0.08350067, -0.04149483, 0.05949384, 0.112713926, -0.041307315, -0.12809253, 0.0785072, -0.04615662, -0.04381425, 0.09251508, 0.023685576, -0.092182726, 0.0053956583, 0.10022171, 0.01812344, 0.047373205, 0.04441845, 0.02284052, -0.0589371, 0.03732835, -0.030238401, -0.017521637, 0.088095196, -0.07564572, 0.008347875, -0.01694942, -0.0894357, -0.031021252, 0.0032035138, -0.08391526, -0.0079812305, 0.0882913, -0.030529711, 0.07095118, -0.035374474, 0.0085181, -0.04102403, 0.023535358, -0.10229575, 0.077740416},
{0.02767607, -0.014358176, -0.09108675, -0.0411135, -0.103950724, -0.0065391287, -0.035949435, -0.04895433, 0.036720127, 0.07691763, 0.0614367, -0.05110745, 0.041113257, -0.040501956, 0.088907495, 0.0035466142, -0.059381604, -0.08422337, 0.008898306, 0.019688603, -0.034425, 0.019168802, 0.094982475, -0.06897514, -0.03242363, -0.017029079, -0.10619952, 0.02131595, -0.029469073, -0.09518139, 0.00996741, -0.07225011, 0.03603776, 0.110820375, 0.061021533, -0.10752799, 0.049417578, -0.0685408, -0.10902363, 0.0021632013, 0.09043279, -0.014220126, 0.028817743, -0.07372561, 0.091116615, 0.015185627, 0.09253961, -0.009592378, -0.011314727, 0.07021322, 0.092379734, -0.062239803, -0.08511921, -0.04461185, 0.10040283, -0.03307928, 0.053087782, 0.020288378, 0.010107218, 0.013077259, 0.021618064, 0.09570085, -0.023256388, 0.026112571, -0.000810042, -0.049520098, -0.013612985, 0.0041222945, 0.078635156, -0.05191598, -0.051568378, 0.030863773, -0.07485146, 0.053593725, 0.03781544, 0.027800603, -0.08317862, 0.08843288, 0.05333808, 0.080040604, 0.015835728, -0.08414843, -0.05065416, -0.09365735, 0.09206533, -0.07236224, -0.04630499, -0.059497528, 0.027945299, 0.08678124, -0.033825684, 0.058458965, -0.101706706, -0.017936548, -0.066706516, 0.054663286, 0.019040376, 0.026812157, 0.009736769, 0.031812206, -0.07595338, -0.03305136, -0.07592272, -0.06024591, -0.05043915, 0.017056243, 0.11941319, -0.101320766, -0.019628897, 0.017088221, 0.015879674, 0.021319494, -0.0017300679, 0.09196899, 0.023005784, -0.056694392, -0.042452566, 0.015682079, 0.03945008, -0.010561086, 0.10615066, -0.0030405095, -0.014593087, 0.044623856, -0.023108639, -0.007995576, -0.017462043, 0.007585382},
{0.068059295, 0.065514825, -0.10502766, 0.008186803, -0.03362512, 0.037286907, -0.05735819, -0.09591898, 0.09008211, -0.06947275, -0.053984985, 0.08878338, 0.04412074, -0.04956015, -0.017679134, -0.0124264965, 0.02574338, -0.010515755, -0.06938744, -0.09021367, -0.07746878, -0.09691277, 0.021226885, -0.008054324, -0.012238049, -0.005985096, -0.072946206, 0.050503895, 0.031226048, 0.086161986, 0.09458291, -0.011033137, 0.04158724, 0.08409632, 0.0671356, -0.10444499, 0.053850014, 0.02750625, -0.10949854, 0.015644113, 0.09062245, -0.024710327, 0.07586817, -0.0799654, 0.062964305, -0.08803427, -0.045897607, -0.011125392, 0.034585267, 0.0034911328, 0.010996878, -0.092067644, -0.008938999, -0.06377056, 0.028137326, -0.065878086, -0.09189414, -0.103138514, 0.019653605, -0.015466925, -0.08648844, 0.025732005, 0.004555747, -0.10121382, -0.05011882, -0.10722872, -0.08088467, 0.054773793, -0.01418212, 0.03712849, -0.005764116, 0.074168555, -0.052399684, -0.063716866, -0.10890463, 0.11194563, -0.034706466, 0.104233265, -0.022363588, -0.048116717, 0.00094206474, -0.027036227, 0.053749092, 0.08065403, -0.022644686, -0.09795079, 0.11612047, -0.08287274, 0.00357163, 0.038818225, 0.06771603, 0.0384186, -0.013871707, 0.006952404, -0.0118415225, 0.05713299, -0.01957693, 0.09944248, 0.09563114, 0.102608144, 0.04653801, -0.07717255, 0.07813228, 0.05917771, 0.11745248, 0.018806439, 0.06005259, -0.0554991, 0.061069675, -0.032365184, -0.0004686733, 0.06647512, 0.0066336757, 0.04115426, 0.027718335, -0.07201665, 0.02646851, -0.0111158565, 0.0915619, -0.021936275, 0.04102247, -0.08828849, 0.03442393, 0.006085323, 0.08845031, 0.06669546, 0.032138634, 0.00011442102},
{-0.07190151, 0.052189145, -0.047001462, -0.09926611, 0.017448356, 0.057755217, 0.06292759, -0.047887895, 0.006520599, -0.060539305, -0.057141773, -0.0049367123, 0.014785578, 0.099995, -0.0780981, -0.040551916, -0.10601123, -0.11075924, 0.07177338, -0.02250932, -0.013229664, -0.072471604, 0.05099425, 0.025949804, -0.08656304, 0.06360719, -0.010059085, -0.055433504, -0.03454024, -0.02013621, 0.11379136, 0.087691255, -0.06427981, 0.07852817, 0.09092165, -0.004708762, 0.024711166, 0.065013915, 0.0482123, 0.06734777, -0.029654864, 0.051574513, -0.061469574, -0.036826126, 0.05975136, 0.07696909, -0.061584923, -0.041496515, -0.08842527, 0.03171762, -0.080473825, -0.05763525, 0.014887368, -0.02972787, -0.057080813, -0.07768143, 0.017720466, -0.034169696, -0.02515064, 0.024262084, 0.09015484, 0.080838, 0.11115307, 0.101022184, -0.025463462, -0.055934172, -0.037715532, 0.013479978, -0.089560755, -0.04261417, -0.07428144, 0.04254973, 0.091009825, 0.027776085, -0.02799174, 0.0012449579, -0.057021502, 0.07469012, -0.044673923, 0.010617208, -0.043928646, -0.048369624, 0.09067051, -0.03281268, -0.061522517, -0.07756806, -0.06443115, 0.090892226, -0.04115318, 0.005628094, 0.06899717, -0.024392653, 0.09184839, 0.08114254, -0.07636869, -0.099448614, -0.069977224, 0.031372637, 0.10040374, -0.058498185, 0.095342815, -0.07053355, 0.05815512, 0.10300206, -0.06990383, -0.03141622, -0.07942666, -0.010117946, 0.1102613, -0.09805799, -0.06220988, 0.0053619593, 0.055972897, -0.108630925, 0.018439636, 0.07125691, -0.07611414, -0.06922406, -0.041851655, 0.0965039, 0.026523015, -0.029439343, 0.016222691, 0.06877517, 0.03252524, 0.03769245, 0.12403323, -0.06638223},
{-0.10999818, 0.043512665, -0.050501317, 0.0064530796, -0.06273768, 0.029361725, -0.04556619, 0.032829538, -0.0001816228, 0.0006714016, -0.11700172, 0.07037804, -0.042140074, 0.09138017, -0.011165116, -0.07480024, 0.03639954, 0.0687793, -0.041275047, 0.03389265, 0.09232024, -0.008630518, 0.047702733, -0.08724609, -0.0565452, 0.051073138, 0.06378123, -0.1703875, 0.018063348, 0.07302801, 0.07072601, -0.021944832, 0.00022071047, 0.15236193, 0.002902655, 0.010640315, -0.09507828, 0.11189644, 0.05107842, -0.08901445, -0.086581245, 0.029589549, -0.05391276, -0.0070661176, 0.07475384, -0.012151625, -0.064524636, -0.17994493, 0.057960868, 0.124607205, -0.07428738, 0.1041379, -0.013002864, 0.013566048, -0.020494327, -0.053425055, 0.12977116, 0.0018751845, -0.02494866, 0.081931494, -0.031454086, 0.012984046, 0.1228439, 0.017848596, -0.09388376, 0.05677972, -0.029087288, 0.029190853, -0.09171674, -0.114429176, 0.004181942, -0.10642116, 0.052448988, 0.16560777, -0.081457, 0.10450481, 0.036812816, -0.07156013, 0.07416625, 0.017985553, -0.10788642, -0.048568778, 0.12143177, 0.071789615, -0.17325057, 0.069900945, 0.13251944, -0.0031335885, -0.17354287, 0.017445672, 0.12168078, -0.026066648, -0.09235909, -0.028397905, -0.036381133, 0.09129372, 0.050650567, -0.09449346, -0.019462153, -0.054527417, 0.0031534806, 0.16247986, 0.06451693, 0.060002506, -0.070848785, 0.15595904, 0.036069505, 0.10055847, 0.024510138, -0.08925269, -0.08656791, 0.04191345, -0.12335566, -0.06581738, 0.08739214, 0.15479022, -0.06235577, 0.0478175, 0.02373164, -0.08461902, -0.040628057, 0.1630968, 0.037856743, 0.15130961, 0.05642751, -0.059016794, -0.06382908, 0.16371736},
{0.054038066, 0.08034028, 0.08172673, -0.097581655, -0.05065615, 0.091501996, 0.056482777, 0.008926131, -0.049190033, 0.028073236, 0.022334442, -0.0002654146, 0.044948436, 0.027128052, 0.089578174, 0.052025285, -0.02179103, -0.006785619, -0.037481476, -0.045571204, 0.03429283, 0.04402269, -0.03790187, -0.02930704, -0.02946806, 0.03753006, -0.09281036, 0.0023853502, -0.04751097, 0.07413052, -0.089504585, -0.098594435, 0.08295722, -0.0075830123, -0.11179067, -0.010824764, 0.03966549, -0.023538522, 0.1380242, -0.0875341, -0.07783637, -0.092322186, -0.070463, -0.09294395, 0.0011260863, 0.008128789, 0.015185028, -0.026177576, -0.015901946, 0.11635739, 0.03070611, 0.016814902, 0.009418256, -0.03591989, -0.047298383, -0.047951277, 0.09118946, -0.08137491, 0.05793485, -0.10797581, 0.039445538, 0.021545371, 0.030812215, 0.091820955, 0.045440212, -0.054574497, -0.037221555, -0.10057986, 0.03866336, 0.0412395, -0.048073847, -0.022737209, -0.062041614, 0.15589602, -0.0038479064, 0.026149482, 0.011049993, -0.03974802, 0.05963704, -0.09874649, -0.01212741, 0.04928887, 0.039216284, -0.016457597, -0.050259177, -0.08651858, -0.016080255, 0.14539808, 0.03313244, 0.071235396, 0.17232357, 0.052838158, -0.06955154, -0.049034897, -0.09504839, -0.054736994, -0.06781213, 0.08163442, 0.09553308, 0.05711645, -0.0685305, 0.07741524, -0.08584197, 0.039811105, -0.10601278, 0.07759652, 0.061330527, 0.03984585, 0.036245234, -0.09340022, -0.068861194, -0.019078858, -0.029885802, -0.06484164, 0.09023073, -0.034751784, -0.030935641, -0.09629485, -0.011048859, 0.07378963, -0.043380827, -0.030070934, 0.091235235, 0.09152183, -0.0011174977, -0.0082389815, 0.12991288, -0.043813225},
{0.11690207, 0.07330902, -0.051198266, -0.049605526, -0.051798407, 0.03329967, -0.03875751, -0.07827397, -0.0762363, 0.015386373, 0.062395614, -0.05045313, -0.051053904, -0.02965261, 0.13948472, -0.015086906, -0.08727145, -0.025015764, 0.013824865, -0.006267006, 0.010779477, 0.045609746, -0.086441375, -0.042912427, -0.07720113, 0.006611064, 0.0003391468, -0.07652324, -0.013076982, 0.009796361, -0.122528166, -0.0108577935, -0.109383404, -0.04139454, -0.04068469, 0.06270539, -0.042829473, -0.023382789, 0.051362995, 0.025461974, -0.05195879, 0.0072889403, -0.054580517, 0.09762476, -0.11215038, 0.017262544, 0.06753108, -0.07560015, -0.10321428, 0.096535146, -0.04773352, 0.07613762, -0.124483705, -0.07030739, 0.09145452, -0.06285265, -0.0021925115, 0.06574051, 0.06294579, 0.0040079346, 0.005414027, 0.05390288, -0.09817853, 0.0206704, -0.025682978, 0.022387091, 0.08344943, 0.0097409785, -0.07894689, 0.06913768, 0.028950289, 0.07827672, -0.07072513, 0.034745175, -0.010072082, 0.020681845, 0.065999895, -0.03393717, 0.067371555, -0.0067447023, -0.016494798, -0.017538272, 0.11267613, 0.09709366, -0.019679124, -0.024167472, -0.09024494, 0.038963158, 0.003486929, 0.05054883, -0.039615784, -0.04336878, -0.0993358, 0.0011755236, 0.007314495, 0.036578447, 0.001730822, -0.08964998, -0.056471862, 0.044775456, -0.008548148, -0.090739004, -0.0499591, -0.0859005, -0.12098695, -0.011031451, -0.11326306, -0.05363339, 0.02433712, -0.057218034, 0.038868286, -0.002986528, 0.031097239, -0.010816662, -0.08711724, 0.050463688, -0.08275509, -0.055328593, 0.08060176, -0.08918093, -0.02804623, -0.067337066, -0.036710996, -0.024347374, -0.031813882, 0.021841504, 0.02971885, 0.060793243},
{0.084965445, 0.06823863, 0.08276731, 0.075702496, 0.013388264, -0.0028007627, 0.07247539, -0.076430246, -2.6531518e-05, 0.0670844, 0.06782192, 0.023826363, -0.10668181, 0.060925342, -0.06155863, 0.008765523, 0.058205225, -0.06518588, -0.05678693, 0.010142246, -0.107148774, -0.079180144, 0.040543135, -0.00012594752, 0.0061217775, -0.027592737, 0.043684006, -0.04729432, 0.14053112, -0.09080759, 0.024087485, -0.105208635, 0.08032444, -0.10141152, 0.10172185, -0.09545822, 0.01301938, -0.04772549, 0.0075552687, 0.045933843, -0.017673627, -0.026735306, 0.15371573, -0.04494079, -0.027273208, 0.010360101, 0.025854692, 0.09043791, -0.015623167, -0.12413829, 0.09931387, 0.05315496, -0.04505046, -0.06581515, -0.07715258, 0.09730965, -0.10625955, 0.07818137, 0.089587845, 0.05544665, -0.029809237, -0.08764886, -0.105174795, -0.0085234195, -0.10402663, -0.09592585, 0.051435005, 0.08804448, 0.058063455, 0.15813409, -0.072289966, -0.10568592, 0.027269393, -0.08555973, 0.12881349, -0.031416867, -0.0029641867, 0.09682728, -0.015114252, 0.108806156, -0.003863187, -0.035864204, -0.13717414, 0.074874096, 0.032112923, 0.024874033, 0.015963752, -0.0021947527, 0.042609297, 0.090144575, -0.035403464, 0.08260503, -0.018197298, 0.08188658, 0.03924913, -0.027606428, -0.050157756, -0.070190504, -0.119163886, -0.099186406, 0.092283264, -0.016089015, -0.081007525, -0.07843797, -0.043982815, -0.019903466, 0.07257934, 0.043606125, -0.008547798, -0.070561774, -0.038274102, -0.07437736, 0.053960137, -0.013985504, -0.02181393, 0.06490206, 0.06577377, 0.046663865, -0.083522804, 0.08425175, -0.07910829, -0.023630742, -0.018861799, 0.044753622, -0.07113749, 0.0353301, -0.025960129, -0.051054332},
{-0.036182232, -0.0921144, 0.086368404, -0.06838196, -0.06889166, -0.002963394, -0.019517167, 0.0909148, 0.067404866, -0.0027920976, 0.050409917, -0.015322269, -0.025703233, -0.114929564, 0.06258077, -0.030253055, -0.06731453, -0.07764135, 0.039993238, 0.06851005, -0.08723727, 0.05696434, 0.016307743, 0.089610465, -0.01758403, -0.11743551, -0.09863336, 0.107977286, 0.11273403, -0.01835418, 0.05700565, -0.0010699854, 0.07998808, 0.056879938, 0.018300403, 0.06542981, -0.07379635, -0.016980298, 0.05859308, 0.030198036, 0.001959567, -0.04983831, 0.06335387, -0.095026135, 0.07893638, 0.061380956, -0.09665327, -0.04727667, 0.021250948, -0.046279334, 0.12968616, 0.03131318, 0.02482106, 0.06575756, 0.029633135, 0.1113568, -0.005440568, 0.06913526, 0.04480559, -0.102949135, -0.06579624, -0.075373165, -0.067096666, -0.07589485, -0.04070217, 0.061507057, -0.021374494, -0.08021124, -0.07413535, -0.0035110437, 0.055354364, 0.098266475, -0.08971302, 0.026922135, 0.13547125, -0.104857616, 0.034369465, -0.09946763, -0.048029125, 0.008680827, 0.07688524, -0.09070131, -0.06789223, -0.0061401282, 0.093188696, 0.07134906, -0.04480582, -0.024671743, -0.033653818, 0.023467816, -0.079786226, -0.05907724, -0.09995883, 0.15783544, 0.07114022, 0.0713581, -0.106245816, -0.06620387, 0.042550933, 0.06911178, 0.05051133, -0.06786089, 0.08084546, -0.0061133206, -0.035860643, -0.1213583, 0.032724112, -0.038919125, -0.033771917, 0.0925287, 0.060929727, 0.04132493, 0.06653773, 0.018772298, 0.013115823, -0.027448324, -0.08332131, 0.07779804, 0.09672836, -0.059733834, -0.009147724, 0.0665174, -0.028545588, 0.041369166, -0.043063678, -0.07958053, 0.09889865, 0.029625751},
{0.06383812, -0.077403344, 0.16923082, -0.069264695, -0.0011752899, 0.0476356, 0.099995896, 0.07170604, -0.09430792, -0.047343064, 0.022957405, 0.007913383, 0.057767, -0.13419013, 0.013339307, 0.13797385, -0.038216475, -0.06414195, -0.09575323, 0.19194283, -0.06272493, -0.002282106, 0.06898586, 0.13115664, -0.04059304, -0.08954232, 0.08883039, -0.034920752, 0.08206619, -0.017783036, 0.006909559, 0.058413755, -0.05951976, -0.06427526, -0.018590135, -0.009551116, 0.07453225, -0.045379806, 0.022104522, -0.046224315, 0.045169186, 0.044615656, 0.045256503, -0.046347603, -0.018069671, -0.029773476, 0.012659945, 0.10800328, -0.08612042, -0.024816032, 0.04341803, -0.09552583, 0.07241178, 0.10097114, -0.00046637654, 0.005544077, -0.19094773, -0.02876728, 0.07652403, 0.046408534, 0.069371924, -0.094554126, -0.085944965, 0.06608103, -0.05519338, 0.08244586, -0.00082863646, -0.070962355, -0.1110292, -0.04235817, -0.0979135, 0.07644315, 0.022938237, 0.058830928, 0.14344163, -0.13427527, -0.08616335, -0.005028531, -0.011780191, -0.016463527, 0.0112397345, -0.08773496, -0.12854151, 0.057754252, 0.06263489, -0.11170094, -0.074580275, -0.10595121, 0.025824195, -0.08563516, 0.009602773, 0.106885955, -0.013742648, 0.10410283, -0.016094364, -0.05879387, -0.004324548, 0.035197064, -0.07013724, -0.09011703, -0.06335902, -0.101613574, 0.030477302, -0.07569086, 0.12324058, -0.06741264, 0.0064662183, 0.09845309, -0.06257648, 0.077201255, -0.00010252615, -0.04239545, -0.037566077, 0.050773688, -0.090882465, -0.007332365, -0.09307177, 0.030816764, 0.056949712, -0.047520872, 0.016775914, 0.033018447, -0.032416787, -0.06946669, -0.018494941, -0.11315274, 0.17200929, -0.05644741},
{0.16526085, -0.10961447, 0.13459826, 0.019870754, -0.035716485, 0.037812814, 0.020655049, 0.048108205, 0.05808793, 0.06033738, 0.011868425, -0.07801371, 0.15660834, 0.053753395, 0.064065926, 0.05604659, 0.025336431, 0.061143953, -0.0024248431, 0.057502143, -0.0022298647, 0.0047595836, 0.045916114, 0.15420988, 0.034574818, -0.033471253, -0.040613838, -0.046608347, -0.09650919, -0.07120991, -0.0090257125, -0.067114115, -0.09901943, 0.018815825, -0.015682274, 0.055943433, 0.002536919, 0.026309153, -0.0043477304, -0.08943164, 0.056313545, -0.051000815, 0.054292604, 0.040295877, 0.062490977, 0.04880453, 0.035868272, 0.093234375, -0.051711354, -0.03710894, -0.054112438, -0.08423019, -0.0030957463, 0.08489391, 0.069949046, 0.10049775, -0.1265114, 0.036013365, -0.028332083, -0.028398246, -0.04986001, 0.09401847, -0.072097324, 0.027398169, 0.016942792, -0.030297104, 0.014684975, 0.06239453, -0.028111527, -0.051331617, -0.06491011, 0.07024108, 0.09956804, -0.07287728, -0.058257405, 0.062034003, -0.15471067, 0.029416725, -0.036459316, 0.06089798, 0.04623481, -0.10408628, 0.0037787058, -0.11443437, -0.010356478, 0.04097708, 0.00223385, -0.059868734, 0.019210748, 0.0013088594, 0.04130281, -0.035161324, 0.03673634, 0.027896779, 0.047367144, -0.03745587, -0.051211406, 0.055060625, -0.022957224, 0.09437887, -0.030069292, 0.0047268644, 0.0072206026, -0.05990506, -0.0012904763, -0.042922508, -0.020655705, 0.008891688, -0.063587785, 0.08337118, 0.06422929, 0.059889004, -0.026900345, -0.035886187, -0.09379798, -0.016203882, -0.07081455, -0.04117378, 0.072200604, -0.07460775, -0.0062415726, -0.0059168935, 0.037153564, -0.17707686, -0.05929524, -0.026071895, 0.07830711, -0.07191608},
{0.102093935, -0.021429982, -0.036477044, 0.048566554, 0.09431659, 0.036778912, -0.06507278, -0.047002114, -0.08863571, 0.013666324, 0.0034680045, -0.023835108, -0.022757532, -0.051653437, 0.005102332, -0.0137581965, -0.05648598, -0.053138427, -0.029657628, 0.16515903, 0.07717143, 0.0025090815, -0.05728714, -0.06198071, 0.14086363, -0.14328519, 0.005088357, -0.11773566, 0.08120536, 0.029931461, 0.06741905, 0.035705734, -0.042163644, -0.034863852, -0.011142452, -0.08415612, 0.0010287478, 0.055283237, -0.018078795, -0.12688498, -0.02151444, -0.10532234, 0.014333177, 0.06120986, -0.012392104, 0.016540548, 0.06264798, -0.02390053, -0.09045488, 0.043641414, -0.0576277, 0.04731533, -0.023703132, 0.024283817, 0.034926012, 0.102865994, -0.1475674, 0.075154915, -0.07296702, 0.041977726, -0.052441258, 0.07013482, -0.14086257, -0.056782942, 0.053286478, -0.0011480973, -0.09367597, -0.10457789, -0.015750635, -0.017273512, 0.013587847, -0.11000855, 0.10284087, 0.024529746, 0.027180167, 0.04877918, -0.05719611, 0.06129384, 0.009725154, -0.12833877, 0.061745524, -0.029529564, -0.12864695, -0.08806985, -0.046712004, 0.024734309, 0.13974924, -0.119729556, 0.09776209, -0.0089108525, -0.1128802, -0.05288623, 0.10551883, 0.17215653, -0.0058276104, 0.027490407, 0.06011346, -0.04332888, -0.16513346, 0.020812273, 0.062065333, -0.014719498, -0.004162937, 0.002481237, -0.036954857, 0.007466346, -0.06294554, -0.03866125, -0.12869036, 0.049195018, 0.034598924, 0.09412302, 0.036532264, -0.067602694, -0.015264168, 0.08755242, 0.0014849864, -0.06785193, 0.063124634, -0.06273284, 0.058408137, -0.030901963, -0.090332896, -0.17180991, -0.09644191, -0.10835093, 0.16012055, 0.0056943363},
{-0.08181805, -0.033321455, -0.04374225, -0.05119037, 0.021645825, -0.021886207, -0.081656314, -0.043781742, 0.005922474, -0.020989142, 0.106482446, -0.015555801, -0.027866464, -0.031300843, -0.025812982, 0.13964468, -0.10575996, -0.012395333, -0.028365726, 0.054352105, 0.008013811, 0.035293926, 0.07866476, -0.061610874, 0.027324267, -0.010030679, -0.10986639, -0.11707612, -0.14376673, 0.0008577314, -0.09833833, 0.08794536, 0.018408412, -0.012814757, 0.12280838, 0.088211045, 0.028650528, -0.018690666, 0.029045012, -0.10495857, -0.08702121, 0.06528306, -0.02324671, -0.063143134, 0.03938792, -0.094537206, -0.0042382404, 0.07852894, -0.02467119, -0.08939266, -0.088537805, 0.0002187267, -0.008124209, -0.0086646415, -0.038834944, 0.0012268961, 0.035920016, 0.10411924, 0.03918174, 0.06561187, 0.08954747, -0.0485258, -0.08027303, 0.02011922, -0.024564952, 0.08964776, 0.049077, -0.023311563, -0.018802896, 0.0447485, 0.07910426, -0.07843066, -0.03606788, 0.026205847, 0.08145716, 0.13454786, 0.054378778, 0.046659186, -0.03785165, -0.121979594, 0.08932581, -0.101140395, -0.09025967, -0.09240414, -0.013277098, 0.082773775, 0.16220741, -0.06989054, 0.077177726, -0.048688244, 0.004665678, -0.059363574, 0.06479514, 0.14470907, 0.14579783, -0.09725426, -0.018224418, 0.00010802271, 0.00025899353, -0.023775548, 0.05914648, -0.022832593, -0.06433663, 0.020874545, -0.01841458, -0.07948303, 0.039547276, 0.0027914997, 0.016726527, -0.09036773, -0.061344087, -0.053774357, 0.05003994, 0.07001748, -0.08386026, 0.04899105, -0.09315378, 0.035763055, -0.1036804, 0.08030881, 0.070942596, 0.049459256, 0.07162795, 0.038486492, -0.10004684, -0.031213628, 0.10947434, 0.10097351},
{-0.023695068, 0.04531764, -0.06319384, -0.0323645, 0.0016769542, -0.097657606, -0.055657513, -0.060962804, -0.04482365, -0.008140512, 0.043422256, 0.059970886, -0.0116024045, -0.004177479, -0.016825108, 0.104276754, -0.017933246, -0.09377745, -0.066996135, 0.00049557956, -0.010652252, -0.042315036, -0.0070234593, -0.06157605, 0.033796765, 0.0910403, -0.07451492, -0.15336779, -0.16621412, -0.062180884, 0.008558251, -0.050120115, -0.040099077, 0.06034891, -0.0001651849, -0.032245275, 0.0124444105, -0.08267457, -0.07417133, -0.056557965, -0.09490962, 0.095093966, 0.120690435, 0.090659715, 0.075823046, 0.047156617, -0.0036479384, -0.019448694, 0.013715379, 0.08434563, 0.026108522, 0.093449, 0.11579072, -0.0042150165, 0.022367597, -0.13432786, -0.0747496, 0.034072503, -0.029181989, -0.02419751, 0.04201918, 0.085496984, -0.09445296, 0.02383998, -0.0071407184, -0.039456636, -0.048312847, 0.027114525, 0.012721411, -0.022821924, 0.039730616, -0.07136051, -0.036855206, 0.013246177, -0.008798509, 0.15902354, -0.018807605, -0.09531359, -0.14339405, 0.05882506, 0.060047667, 0.06677204, -0.12278672, 0.09679098, 0.0081359055, -0.012242135, 0.113139056, -0.08768909, -0.05730228, -0.083233096, 0.046413153, 0.042115252, -0.071523026, 0.13760751, 0.023857994, -0.059535645, -0.087459, -0.052986138, -0.12289018, 0.013304129, 0.0024864748, 0.17553265, 0.07633559, -0.034447312, 0.043913275, -0.08265748, -0.015355987, 0.043852944, -0.16555864, -0.10493238, -0.13588484, -0.018494785, -0.086358935, -0.041326545, -0.026629627, 0.15648855, -0.012566321, 0.0070223287, 0.07298649, 0.10595371, -0.053538986, 0.10652143, -0.027892675, -0.03954492, -0.08334611, 0.12624764, -0.05273443, 0.17757739},
{-0.12546927, 0.13249697, -0.052839503, 0.03126304, -0.047115088, -0.0888599, 0.040959794, -0.09356838, 0.09740265, -0.09736388, -0.07924816, 0.13198692, 0.115631856, 0.023212956, 0.103799246, 0.0405209, -0.0460125, 0.08142684, -0.043039646, 0.10818453, 0.020908516, -0.1357876, -0.033309653, -0.08234733, -0.03459109, 0.08717436, 0.042331222, -0.037798107, -0.07481985, -0.10760046, -0.052405242, 0.07337873, 0.06705315, 0.11667851, 0.17365985, 0.040343493, 0.033413135, 0.10348924, -0.07838674, -0.010854827, -0.048557147, -0.022470765, 0.10608339, -0.09026515, 0.030935578, -0.016334543, -0.10392075, 0.11342608, 0.011020519, -0.08526217, 0.06478197, -0.1057968, 0.05903938, 0.08911368, 0.09104274, 0.013529693, 0.040495735, 0.054926798, -0.13414644, 0.066601746, -0.09820648, -0.035322852, 0.040492166, 0.0010069609, -0.028805934, 0.037543092, -0.02785141, 0.04831709, -0.08646177, -0.066702805, -0.085523985, -0.061164763, 0.022720978, -0.078779355, -0.046234872, 0.10308061, 0.06168033, 0.06928533, -0.15820096, 0.071303576, 0.09163869, 0.07627483, -0.0041520162, -0.030980483, -0.015500999, -0.081157655, 0.15590082, -0.07734275, 0.085401304, -0.06730498, 0.04023665, -0.064865716, 0.045258224, 0.042783134, -0.0075294804, 0.005042538, 0.007988371, -0.055313334, 0.05941737, 0.0135532245, -0.024519406, 0.13347834, -0.017438682, 0.01462777, -0.067655884, -0.05679363, 0.024103908, 0.059101723, -0.07839721, 0.077945836, -0.0077219824, -0.026252516, -0.037973206, 0.034231238, 0.083850235, 0.12752704, -0.004719929, 0.05043611, 0.009195701, 0.07968834, -0.1281076, 0.045854267, 0.0035919524, 0.021480191, -0.09193223, -0.06775558, -0.11446535, 0.055793382},
{0.047990862, 0.07223427, 0.039313022, 0.067583956, -0.107227996, 0.064374626, 0.038196363, -0.100351445, 0.053377926, 0.05915858, -0.095281646, -0.020189524, -0.07003599, 0.07597933, 0.094395205, 0.014579834, 0.05010381, -0.04493113, -0.009168944, 0.12327111, -0.11552207, -0.14595364, -0.035341818, -0.057388004, 0.044277437, 0.1355627, 0.022812549, 0.021324616, -0.09882693, 0.053851962, -0.054902624, -0.081440166, 0.053425424, 0.10613761, 0.033596974, -0.06804435, -0.028986037, 0.003809175, -0.1431862, -0.021861684, -0.07978969, 0.06830114, 0.0030107144, 0.07262252, 0.13567445, 0.008365657, -0.015704952, 0.027958294, -0.09071292, -0.04600416, -0.11365976, 0.054942206, -0.0056907726, -0.09808544, 0.04354535, 0.015391486, -0.11142944, 0.010669477, -0.13231036, -0.02575108, 0.0066179857, -0.050598502, -0.11361631, 0.06934829, -0.01280085, -0.06521327, -0.00091088325, -0.033532634, 0.008059052, 0.05450708, -0.09432827, -0.055345036, 0.08038549, 0.06683648, 0.091828346, 0.118387885, -0.042895336, 0.039807975, 0.02465855, -0.08427116, 0.04581091, -0.09347312, -0.030415056, 0.056919508, -0.07263867, -0.0594619, 0.14442094, -0.034189545, 0.10029302, 0.080705285, -0.017540066, -0.06019496, -0.0978222, -0.040731926, 0.13212444, -0.10642181, -0.07452091, 0.09571864, -0.06463704, 0.076249644, 0.021277398, 0.094845384, 0.026843114, 0.088057235, 0.0070812902, 0.06030637, -0.049319156, 0.07747308, -0.04625182, 0.025373532, 0.01711686, -0.032931358, 0.037951943, -0.06174378, -0.026486158, -0.031245816, 0.10031261, -0.087879956, -0.10978924, 0.08458699, -0.14529833, 0.13912384, 0.07315737, 0.011628916, 0.03932157, -0.043870807, 0.019123536, 0.054994468},
{-0.053713407, 0.073933244, 0.030129418, -0.021913957, -0.08759429, -0.06444676, 0.06964564, 0.024148896, -0.008145392, 0.028575748, 0.036514793, -0.0399831, -0.048706163, -0.057074275, 0.04720922, 0.13143961, 0.008563496, 0.0023991994, -0.07531122, -0.06531988, 0.012398327, -0.02527167, -0.034737825, -0.0971566, 0.06722044, 0.089338884, 0.031199705, -0.13799219, -0.14151631, -0.09582876, 0.010352309, 0.07425321, 0.04552471, -0.029065464, 0.16289343, -0.008515632, -0.094532065, 0.08103496, 0.04885207, 0.014793154, 0.07292223, 0.10453242, 0.021254348, 0.08996593, -0.026667114, -0.024236966, -0.009921983, 0.016201865, 0.022999793, 0.040348433, -0.053672098, -0.06764759, 0.10928249, -0.025111051, -0.014102019, -0.14376324, 0.06033262, -0.06029201, -0.054288622, -0.07909425, -0.018359806, 0.01705769, 0.05551971, -0.06682331, -0.009161398, 0.011792539, 0.029951112, -0.03186675, -0.046744075, -0.07792614, -0.04233311, 0.043278106, 0.025701627, 0.046825632, 0.10205995, -0.057868138, 0.042278297, 0.08241072, -0.029155448, 0.019246738, 0.06968565, -0.07747915, 0.0089897625, -0.083801456, -0.045344878, 0.027090631, 0.06321952, 0.08994406, 0.051354244, -0.0775768, -0.014374304, -0.08577829, 0.033645153, 0.1033687, 0.027662149, -0.04018476, 0.09420189, 0.058301844, -0.06504931, 0.00082910806, -0.020444818, 0.13796858, -0.06728063, -0.07364326, 0.09118891, -0.014487981, -0.0894649, -0.009463725, -0.07124713, -0.029857567, -0.119963534, -0.09475701, 0.042644445, 0.022476682, -0.10527027, 0.10684599, -0.09177055, 0.052403525, 0.009524682, -0.0725294, -0.12480993, 0.042480003, 0.08086717, 0.028091725, -0.09938241, 0.0471605, 0.045541663, 0.14248617},
{0.06820055, -0.0027294573, -0.04764793, 0.06206224, -0.005178486, 0.061903805, -0.05053882, 0.07947357, -0.01774612, 0.028511718, 0.057843473, 0.0010366355, 0.008533893, 0.013480563, -0.072194844, 0.07320201, 0.0028178154, -0.08343267, -0.10411056, 0.010079733, -0.04599265, -0.07870463, -0.001513434, 0.023766758, 0.066608295, 0.08421878, -0.050749727, -0.062237903, 0.032938287, 0.0076951273, -0.05343524, -0.036409322, -0.058732677, 0.0347102, 0.093400165, -0.0764094, 0.022711318, 0.090981506, -0.07337338, 0.02225252, -0.10035264, 0.014540009, -0.06948067, 0.00148103, 0.09031264, 0.10008806, -0.052646466, 0.009902209, -0.09408033, -0.08701252, -0.1061929, 0.08985649, 0.121467166, 0.056512564, 0.07585549, -0.0044412306, 0.07600172, 0.06977126, -0.07225217, 0.045520898, -0.053390577, -0.108318225, 0.09289118, -0.099315, 0.010617048, -0.051376242, -0.03526113, 0.0377156, 0.039319184, -0.09411875, -0.00030584304, 0.096030325, -0.0588783, 0.070361935, 0.04821836, 0.10974918, 0.043509018, 0.09113614, -0.07377798, -0.076744236, 0.037169892, 0.008801542, -0.09235965, 0.02566268, -0.104292184, 0.09534565, 0.020800555, -0.05796148, -0.0053530512, -0.05151984, 0.034780245, -0.09700442, -0.018529758, -0.09764118, 0.063675724, 0.007969946, -0.048230905, -0.012463888, 0.03383082, 0.047151133, -0.086138844, 0.04773226, -0.04110665, -0.043445192, 0.13563149, -0.09004338, 0.08695583, -0.054436598, -0.05507045, -0.06155043, -0.08671557, -0.0035806373, 0.026554508, 0.09555335, -0.008996427, -0.06585357, -0.10758293, -0.05851173, 0.038527776, -0.08579691, -0.020540085, -0.0644988, 0.07062672, 0.011199395, -0.09225132, 0.052429356, 0.046218812, 0.12219002},
{-0.015840815, 0.030615343, -0.038595058, -0.03641889, 0.0970178, 0.08572765, 0.0005347464, 0.09319915, 0.07999253, 0.09598257, 0.061470967, 0.11716053, -0.101396665, 0.017368678, -0.10325667, -0.08815177, -0.043016512, -0.00988866, 0.07021678, -0.027915427, -0.08491716, 0.062299732, -0.033280052, -0.079637624, 0.061931144, -0.019689126, 0.057738993, 0.11002912, 0.020247772, 0.08681908, 0.10511121, 0.028699402, -0.0057633757, -0.083935566, -0.008660697, -0.06512106, -0.06656926, -0.052961975, 0.04749972, 0.020443127, 0.024066161, -0.10530943, -0.07294616, 0.031476784, 0.01090292, -0.08379141, 0.06650171, -0.056442775, 0.0036637709, 0.08066379, 0.00202221, 0.061258465, -0.062251266, 0.022034029, 0.042740777, -0.05287479, 0.1007089, -0.036715038, -0.07080599, 0.017128838, -0.070419, 0.05103734, 0.04781165, -0.08497377, 0.051594958, -0.076881826, -0.092548974, -0.10309508, -0.024355315, -0.034550052, -0.06258686, -0.042421605, -0.089266196, 0.067838594, -0.09966471, 0.10613692, 0.0067703784, 0.03126903, -0.03452493, -0.052231178, -0.042792648, 0.0037088096, -0.04167953, 0.021130048, 0.018224167, 0.022626875, 0.092118144, -0.045714647, 0.03786614, -0.04189832, 0.05490426, -0.03653745, 0.05972834, -0.020951187, 0.10325606, -0.050669294, -0.046870284, 0.12349275, -0.057464525, 0.025164887, 0.020590797, -0.02969374, -0.030712055, 0.001639761, 0.11379622, 0.10761522, 0.064214036, 0.026784806, -0.024081856, 0.06491037, -0.010026143, 0.08634412, 0.04855418, -0.07574679, -0.10435487, 0.082692884, 0.029921941, 0.08571792, 0.04431427, -0.0676756, 0.045114804, -0.043378588, 0.026256159, 0.08477376, -0.057702474, -0.07997556, -0.10520952, -0.013235128},
{-0.103173345, 0.07039868, 0.028113198, -0.047498453, -0.0075372052, -0.06819862, 0.06424684, 0.05962698, 0.003932312, -0.051954605, 0.083828, -0.064621724, -0.1018348, 0.053627387, 0.05184769, 0.0153642325, -0.080811806, 0.048651766, -0.07469412, 0.024595177, 0.07810309, 0.0992041, -0.037271086, 0.065099224, -0.06821632, -0.053323757, -0.06117039, 0.054096147, -0.05517371, 0.012314322, -0.05013006, 0.02350476, -0.06690374, 0.020741463, 4.1021296e-05, 0.09262468, 0.037383147, 0.058274027, -0.099931896, -0.019633563, 0.058106344, -0.020080231, 0.07503355, 0.016509183, -0.024117464, -0.07537045, 0.099111095, -0.043673005, -0.07597195, -0.07496915, 0.057350457, 0.103978515, 0.05997168, -0.079224594, 0.015953086, 0.08539384, 0.00957946, 0.07342753, 0.031950314, -0.032464344, -0.10353636, -0.10899546, 0.0896104, 0.008012265, 0.051742494, 0.05743679, 0.051529553, -0.09685036, -0.09832099, 0.016901711, -0.016552752, -0.049004607, 0.0019532293, 0.019545373, -0.013299665, -0.053660765, -0.09469709, -0.056745812, 0.054650895, 0.024563652, -0.04000196, 0.05898443, 0.050423432, 0.073173486, 0.11655457, -0.046274282, -0.041719377, 0.09796551, 0.01276651, 0.08833186, -0.038941164, 0.08047078, 0.00012522191, -0.0028302989, 0.022750374, 0.10051866, -0.104037024, -0.00728373, 0.116046004, 0.10034418, -0.06581615, -0.04227768, 0.01714754, 0.08940092, -0.07498088, 0.025949124, -0.005695446, -0.110170364, -0.063854426, 0.011972198, -0.07413482, -0.010600835, 0.06737652, 0.039530046, -0.065604895, 0.015378331, -0.009197428, 0.053583264, 0.022681985, -0.049411863, 0.04643953, 0.03365694, 0.014835001, -0.052498795, -0.10070899, -0.074169606, -0.02316498, 0.027934752},
{-0.022394616, 0.02502624, -0.024598362, 0.11539633, 0.085694365, 0.026244074, 0.053982068, -0.07931079, 0.012234315, 0.0528948, 0.070068695, 0.0705231, 0.10446499, 0.100440465, 0.07961064, 0.0060264044, -0.06324087, -0.086743556, 0.07353381, -0.05777667, 0.07070222, 0.03956711, -0.016356524, 0.10991149, -0.049762618, 0.015933366, 0.022320257, -0.07204477, 0.08227755, 0.08972997, 0.09370196, -0.02773436, -0.11171006, 0.10132156, -0.033624697, 0.037628636, 0.00883322, 0.07213777, -0.04616658, 0.086400606, -0.093589984, 0.020682424, 0.033120003, 0.09937772, 0.114684574, -0.09436305, -0.0647462, -0.07047961, 0.011772364, 0.0037008813, 0.02673559, -0.01980099, 0.06558519, -0.050564557, -0.03590578, -0.013035497, 0.086164564, 0.08803123, 0.029252931, -0.055919036, -0.080888815, -0.033401266, -0.033641133, -0.0144189, -0.015350126, 0.049643263, 0.09133519, 0.07768029, 0.0822726, -0.018608224, 0.051373743, -0.029079258, 0.02678129, 0.054529067, -0.036959916, 0.10490665, 0.012555195, -0.052296445, 0.10079803, -0.00078588544, -0.06730989, -0.09165556, -0.043176223, -0.10503486, 0.07447437, -0.0037391055, -0.027792789, -0.054022975, 0.08584912, 0.006339242, -0.04562599, -0.084305294, -0.075615935, 0.0071203415, 0.0029622403, 0.037489757, 0.006763652, -0.04410146, -0.014601663, -0.082604535, -0.026659414, 0.04778608, -0.09097481, -0.06223757, -0.07518567, -0.078888364, -0.060914494, -0.018077021, 0.04429964, 0.036001325, -0.062013052, -0.10520889, -0.095841974, 0.03842119, 0.04589565, -0.046723332, -0.080409214, 0.048622653, -0.009702463, 0.0080185905, -0.046809085, 0.0011729446, -0.07569253, -0.031603158, -0.028053537, 0.09499421, 0.10962676, -0.08618918},
{0.043100785, -0.042579573, 0.091805205, 0.11719326, 0.000503715, -0.10332102, -0.005054903, 0.04816942, 0.06418605, 0.08466978, 0.017344555, 0.032421645, -0.016421206, 0.10192944, -0.068827145, 0.06302414, 0.081028365, 0.014638836, 0.020983767, -0.0620573, -0.08327361, 0.030838491, 0.08514434, 0.012618717, -0.0981491, -0.00026680625, -0.01941518, 0.12689102, 0.030878622, 0.038945187, 0.048530653, -0.048027556, -0.0723195, 0.06174412, 0.091091625, 0.06552657, 0.01661592, 0.008618691, -0.10151533, -0.017226614, 0.024931887, 0.02986367, -0.0042061415, -0.04537653, 0.013362242, 0.017221874, 0.010569848, 0.09742002, -0.10134621, -0.072481625, 0.057400793, -0.10460753, 0.007885355, 0.10000969, -0.05531751, 0.10372988, -0.07063204, -0.051513165, 0.044219233, 0.02499877, -0.08116431, 0.04530335, 0.13521537, -0.06301983, 0.04068041, 0.033886075, 0.03083662, -0.0148482695, -0.015150314, -0.014780561, -0.053270463, 0.03891172, 0.059200108, -0.02899947, -0.056558985, 0.05166864, -0.043253664, 0.09006223, -0.08759054, 0.051525783, 0.02105472, -0.07734289, 0.05884659, 0.06607172, 0.049806114, -0.10649349, 0.00916539, 0.035945985, -0.026266193, -0.034147862, 0.09905426, -0.017291958, -0.09046759, 0.081558935, 0.073885925, -0.062127978, 0.023843378, 0.10655129, 0.021132903, 0.037519187, -0.04449119, 0.0440339, 0.09757899, 0.0079187825, 0.08409164, 0.07829025, 0.022860069, 0.07786897, 0.1297218, 0.020050203, -0.101935655, -0.035062827, 0.029189859, 0.089077875, -0.023973025, 0.10612806, 0.041079763, -0.04084955, 0.030980434, -0.007769622, -0.010415414, -0.08037316, 0.060173567, -0.04551668, -0.106347755, 0.09888843, -0.059121776, -0.048108753},
{0.0019187882, -0.062496074, -0.08128749, -0.053460144, 0.07268643, -0.06687994, 0.09921401, -0.0612488, 0.0587561, -0.034933083, -0.053139105, -0.024540843, 0.020270042, -0.055004854, 0.11318229, 0.023132453, -0.08832287, 0.021106843, 0.06077615, 0.035358712, -0.033714622, 0.02235982, 0.10889813, 0.0574539, -0.11598025, -0.022367228, 0.04995167, 0.04180683, -0.09268388, 0.00017963254, -0.036242552, 0.00043180282, 0.049318213, 0.032009393, -0.012311862, -0.056645587, -0.038509686, 0.12059735, 0.09890845, -0.040640265, -0.009796637, -0.07623198, 0.032058135, 0.05476544, 0.075727016, -0.0034949176, -0.00302732, -0.04137958, 0.09330267, 0.05464349, 0.049871545, -0.030025475, -0.02145742, -0.06860544, 0.08797404, -0.018644005, -0.0957592, -0.016551979, 0.045950495, -0.010249373, -0.10693631, 0.09040728, -0.008835856, -0.103770494, -0.029365458, -0.058208928, -0.11042705, 0.038681403, -0.045426056, 0.016998293, 0.062398583, -0.09694171, 0.072818875, 0.09852338, 0.04235636, 0.011743695, -0.11254469, -0.06914809, 0.04763527, -0.0025036198, 0.086878255, -0.09618585, 0.025557006, -0.019401293, 0.07737502, 0.08825042, -0.050182234, 0.06542169, -0.08367732, 0.0714768, 0.004356574, 0.03090489, -0.04250893, -0.0810967, 0.069214284, 0.09291461, -0.066706225, -0.015440917, 0.07067542, -0.08121024, 0.08112545, 0.08188774, 0.0018923786, 0.086040944, 0.11756813, -0.065022536, -0.011885893, -0.11094935, 0.103693, -0.047653228, -0.035131946, -0.057279255, 0.038865134, 0.024568962, -0.0013944507, -0.046712082, -0.03665728, 0.0153814405, -0.07614918, -0.077316076, 0.0032495605, 0.043714542, 0.040098842, 0.021061677, -0.013960227, -0.07233009, 0.045038078, -0.11011294},
{-0.030819613, -0.0157249, -0.053116, -0.096330486, 0.05374911, 0.03617011, 0.08514292, -0.06038173, 0.05407937, 0.028145924, 0.13004352, 0.031861223, 0.107368074, -0.022915188, 0.08353944, 0.10229595, -0.03919952, -0.08823637, 0.05670866, 0.014007821, -0.090280406, -0.036720257, 0.1031336, 0.04334861, 0.011923058, -0.115878955, -0.11250277, 0.101794265, -0.0082415305, -0.097857244, -0.004510494, 0.08211729, -0.055056326, 0.020805502, -0.009878202, -0.054504182, -0.08440437, 0.025102206, -0.063073665, -0.0016024843, 0.03946935, -0.011342943, -0.026327418, -0.04538298, -0.020313619, -0.10210733, 0.069919586, -0.08938039, 0.08338632, -0.06138334, -0.056577183, 0.038287908, 0.033067495, -0.017627785, -0.078591965, -0.057982016, 0.066008285, -0.09751607, 0.07642095, 0.02990459, -0.101430066, 0.051246587, -0.022011777, -0.013115086, -0.06076314, -0.012377956, 0.09684798, -0.016099147, -0.06876502, -0.042087678, 0.016816875, 0.012652745, 0.020184383, -0.05386702, -0.015350342, 0.02095313, 0.01795078, -0.07424556, -0.048605893, -0.118826106, -0.037622467, -0.050735958, 0.11487545, 0.06098241, -0.09764818, -0.037015125, 0.021012181, 0.047357917, -0.07719585, 0.053711295, -0.054332994, 0.06050868, -0.05007655, 0.07921888, -0.07620376, -0.056187227, 0.051832333, 0.021388825, -0.040017348, -0.06391184, -0.06915897, 0.035131782, 0.09708944, -0.022462226, -0.06648541, -0.024188917, 0.014546656, 0.050068248, 0.12313396, 0.009875242, -0.06517674, -0.07760775, 0.0068671172, -0.047835786, 0.08616795, 0.14112753, -0.06478932, 0.015992172, -0.020609856, -0.055192363, 0.11795845, 0.057497807, -0.07339922, 0.039216187, -0.00420817, -0.025719114, 0.063403815, 0.039536253},
{0.03941517, 0.068068266, -0.20956141, 0.010206777, -0.05492035, -0.10495326, 0.023879463, -0.09682995, 0.024441794, -0.019307502, 0.08577874, -0.07059794, 0.13066259, 0.09573862, 0.084853984, -0.0070023187, 0.03754248, 0.07850632, 0.117061146, -0.1437413, 0.03359864, 0.06172556, 0.038172584, -0.14442721, 0.009033295, -0.026513929, -0.059852313, -0.050337873, -0.00802943, -0.107492305, -0.10029835, 0.09404455, -0.05598674, 0.03198871, -0.044622622, -0.02269577, -0.026421644, 0.122855134, 0.06337149, 0.025081882, -0.017677052, -0.027918376, -0.11618414, -0.023878794, -0.15335335, 0.022855451, 0.03771147, -0.10045909, 0.009608179, 0.08800386, -0.022825658, -0.10393511, -0.06475498, 0.022738973, -0.07747389, -0.062311213, 0.086019106, -0.0034799129, -0.042123925, -0.044708148, 0.09870731, 0.031144502, 0.096261516, -0.069756895, -0.050896253, 0.00837136, 0.062137835, -0.07935463, -0.069251396, 0.031209234, -0.046264373, -0.082006484, 0.04186234, 0.15060331, 0.054111145, 0.21036315, -0.10474117, -0.02205319, 0.06513387, -0.13356286, -0.046481732, 0.05493869, 0.135265, -0.07614847, -0.02856059, 0.09020591, -0.025122195, 0.21245216, -0.02146508, 0.09535844, 0.07451303, 0.06748008, -0.03303884, 0.012995516, -0.063296214, 0.06273861, -0.08679065, 0.06561354, -0.005058575, 0.074814424, 0.06607622, 0.015692035, -0.07172233, -0.08879825, -0.10175113, 0.083323956, -0.009647376, -0.08053811, 0.048923723, -0.03829952, 0.05284405, -0.10062449, -0.12531015, -0.10890593, 0.017473742, 0.05147794, -0.048018917, 0.03275019, 0.031041987, 0.08563666, 0.016147615, 0.07490287, 0.06573054, 0.040569916, 0.07477021, -0.0970601, 0.046702735, 0.09673615},
{-0.07663974, -0.02109909, 0.041492674, -0.090424545, 0.01696817, 0.08735035, -0.04904269, 0.05385691, -0.07692486, 0.05266118, 0.04243724, -0.049586747, 0.046849575, 0.046346515, 0.14612333, 0.029626988, -0.0819312, 0.08001661, 0.04735312, -0.021942599, 0.048249822, 0.0077762604, 0.038541228, -0.12405108, -0.10522036, -0.058777116, 0.0656999, 0.013051214, -0.13295409, -0.0049608722, 0.07846375, 0.04618481, -0.01431138, -0.042977765, 0.04064481, -0.057695474, 0.06270772, 0.016211301, -0.06107631, -0.09991122, 0.05158628, 0.01873298, -0.13422732, -0.0051376047, -0.051002923, -0.09310352, -0.07485551, 0.03527581, -0.03184548, 0.14908719, 0.07351789, 0.098448545, -0.06936444, -0.04463517, -0.026480034, 0.00880151, 0.03595055, 0.044881374, 0.025025848, -0.042634495, 0.037984528, 0.047344718, 0.12538539, -0.10349979, -0.06317845, 0.050199904, 0.01798947, -0.08019512, -0.023996215, -0.06684276, 0.0391374, 0.0724907, -0.10134034, -0.014247605, 0.096960425, -0.034601144, 0.0030195215, -0.020910762, 0.03219795, -0.014853138, 0.09802258, 0.048833728, 0.11213397, 0.048159212, 0.026632553, -0.009077237, 0.03678622, 0.10770862, -0.1217035, 0.0065017035, -0.0149028115, 0.12400068, -0.043852806, -0.007972917, -0.12312805, 0.054968283, 0.0016481206, -0.072496146, 0.01698274, 0.048872545, 0.035903364, 0.08270825, 0.031155959, 0.08547133, -0.08975037, 0.09939843, -0.040145967, 0.0858583, 0.047262613, 0.018323008, 0.0733182, 0.04917085, -0.022634836, -0.045461744, -0.10418551, 0.03605383, -0.1035051, 0.06678079, 0.08620422, -0.02525422, 0.13810176, 0.09869936, -0.07951227, 0.060746267, -0.055009168, -0.12838764, 0.1511794, -0.093317755},
{0.07345133, -0.031544056, 0.027344031, -0.12491765, -0.043594826, 0.020251662, -0.004496135, 0.03760074, 0.09771688, 0.0910157, -0.002867805, 0.05010843, -0.010125381, 0.014721699, -0.06307947, -0.090847455, -0.051726073, -0.091588125, 0.099850595, 0.107635126, 0.0059636785, 0.015629532, -0.14136098, 0.07938358, -0.053255085, -0.08856473, 0.015990106, -0.09386717, 0.046772137, 0.09405888, -0.07757304, -0.04829343, -0.017655015, 0.07523254, 0.050046828, 0.048823986, 0.039829154, -0.113351956, 0.04123151, 0.032118544, -0.04282386, 0.06313446, 0.09232686, -0.09208, -0.07440406, -0.012831235, -0.03202351, -0.1072636, 0.08608413, -0.003704125, -0.003310591, 0.072075784, -0.01239975, -0.10115207, 0.037909076, -0.027739743, 0.027777998, -0.071111724, -0.04927532, 0.00017558236, 0.04116675, 0.09552296, -0.07279396, -0.017742358, -0.05222068, -0.030095834, 0.09294156, 0.03471458, 0.027354307, 0.10612946, -0.031896055, 0.08475197, 0.10180865, -0.05363294, 0.09017685, 0.114886634, 0.07593893, 0.0999188, 0.004059229, -0.010015359, -0.04529528, 0.041548327, -0.08728703, -0.0670937, 0.06551894, 0.020733153, 0.07305294, 0.08141105, -0.10436838, 0.060690314, 0.043149203, 0.024300778, -0.027492464, 0.15673932, -0.044165913, 0.016504347, -0.039804116, -0.024299596, -0.11104184, -0.08207541, -0.043904223, 0.11388918, -0.08804173, 0.043166935, -0.09294701, -0.00081060024, 0.049690183, -0.03627254, -0.14996614, 0.041293014, 0.070207626, -0.012154251, 0.04712643, -0.028346062, -0.103173584, 0.15723665, -0.071970396, -0.09143543, -0.017531686, -0.05507009, 0.10265169, 0.047772583, 0.0750852, -0.04695678, -0.061481837, -0.07658202, 0.13224688, 0.0052568736},
{0.11130814, 0.08293725, -0.017097544, -0.029053466, 0.022648592, 0.086419106, 0.0558007, 0.06341027, -0.05250132, 0.03030087, -0.0392481, -0.06989236, -0.07501093, 0.07860814, 0.10118681, -0.07035531, -0.08168476, 0.010934547, 0.008660372, 0.10400943, -0.09578847, -0.03215379, -0.12144016, 0.029089868, 0.05465731, 0.050857026, -0.023009917, 0.077931985, -0.011774277, 0.035607856, -0.04853504, -0.09527012, 0.03478065, 0.081548, 0.04714088, 0.08166465, -0.082080275, -0.024133664, 0.07015969, 0.1198145, -0.01748469, -0.058980264, 0.15628351, -0.018340029, 0.03272751, 0.09041953, 0.030707091, 0.017370338, -0.037699938, 0.054793462, 0.10132652, 0.09885049, -0.07483482, 0.083037645, -0.062294498, -0.032577638, 0.0046129706, 0.02540785, 0.018426457, 0.05282953, -0.059772804, 0.06357373, -0.07080531, -0.025997877, -0.029625937, -0.07085099, -0.050796647, -0.04213827, 0.0554974, -0.048705757, -0.046556547, -0.1032334, 0.05327235, -0.04277287, 0.09339243, 0.050383084, 0.002269337, 0.10551949, 0.11918302, 0.014468967, 0.05564739, -0.05097563, 0.010613533, 0.034405306, -0.07315857, -0.0986243, -0.055680823, 0.065866075, -0.034615047, -0.11114317, 0.0076677944, -0.06149909, -0.01899667, 0.04190108, -0.0068824585, -0.0274797, -0.038947865, 0.01497016, -0.10475141, -0.040476635, -0.040198945, 0.02062262, -0.0798542, 0.088805795, -0.014039952, 0.076441966, -0.09781963, -0.015921477, -0.034806382, 0.057168216, 0.0669196, -0.008455589, 0.13146923, -0.06294078, -0.03741605, -0.015411667, 0.015787646, -0.08113831, 0.07529056, 0.032979622, -0.08272735, 0.10140155, 0.056051936, 0.04804751, -0.09128775, 0.0349083, -0.049256437, -0.032313153},
{0.020314775, -0.093737856, 0.0724826, -0.023571769, -0.08598974, 0.037480608, -0.036206674, 0.058877185, -0.07316466, -0.08140274, 0.11445231, -0.061877932, 0.035018846, -0.11559866, 0.030966068, 0.091671884, -0.044820398, 0.026827997, -0.06394692, 0.09148572, 0.05390035, 0.06367624, -0.090540916, 0.011703344, 0.07947811, 0.02368831, -0.10067484, 0.017454226, 0.11074906, 0.07711132, -0.00095357886, 0.058993906, -0.010209259, 0.061292328, 0.12848291, -0.052342262, -0.10318551, -0.073868096, 0.08550573, 0.034924194, -0.01319259, -0.09214148, 0.085852414, -0.039338406, 0.020973131, 0.031241098, -0.083091654, 0.1284356, -0.07506363, 0.0053184326, 0.12340972, 0.07959689, -0.062490996, -0.032910675, 0.015171863, 0.0014753757, -0.106779076, 0.085313395, -0.0075669694, 0.09803057, 0.011238507, 0.048258606, -0.040958438, -0.067131706, -0.078539126, -0.10557107, 0.08215743, 0.06494069, 0.05444693, 0.10301058, -0.036517467, -0.010967756, 0.076544344, -0.07100867, 0.01874794, 0.022330161, 0.10545158, -0.07727036, -0.08114747, -0.0047847372, 0.12375313, 0.08874352, 0.041064404, -0.025858881, 0.13121606, 0.07198969, -0.05740552, -0.13868049, -0.013244353, 0.0058144787, 0.069548525, 0.035727385, 0.07787004, -0.054792184, -0.05284847, 0.06741513, 0.07632531, -0.10706023, 0.009538036, -0.07172413, 0.08826147, -0.049668193, 0.044987656, -0.005982198, 0.045495942, 0.06683216, 0.031907648, 0.058738917, -0.04399826, 0.04494094, 0.10838935, -0.05641983, 0.1458549, -0.02966601, -0.07755613, 0.06377152, -0.0882927, 0.009243369, -0.015527022, 0.09185949, 0.0736657, -0.055594373, 0.07646684, -0.052998196, -0.010205828, -0.07144858, 0.14698927, -0.042860076},
{0.1594002, -0.1479838, 0.17104073, -0.09269677, -0.013992406, -0.003973156, 0.06037117, -0.0078114048, 0.043431416, 0.038245603, 0.13933803, -0.047606237, 0.1334343, -0.14217597, 0.0578505, -0.07378821, -0.025859248, 0.0392683, -0.012758084, 0.0792371, -0.093159296, 0.094932035, -0.010270185, 0.010957482, 0.0031595847, -0.14438099, 0.031273454, 0.10176398, 0.13114265, -0.03574211, -0.09074719, -0.0012905422, -0.0131210135, -0.05018965, 0.11163168, 0.09901076, 0.038703404, 0.053027544, -0.021655003, -0.009072225, 0.054868635, 0.105076596, 0.09239293, -0.06200528, 0.025043674, 0.031064266, 0.015274569, 0.08657008, 0.09944247, -0.027757557, -0.006208951, 0.05877915, -0.087024376, -0.056752898, 0.048265114, 0.12606318, -0.044063438, 0.014329873, 0.11790188, -0.035501793, 0.05477334, 0.05496964, -0.14141299, -0.05651519, -0.105673306, -0.057010848, -0.11845459, 0.08370364, -0.06061866, 0.047258977, 0.0039329873, 0.027246322, 0.06848253, -0.11522727, 0.110340804, -0.12714684, -0.090720795, 0.07595883, -0.0860198, -0.049951818, -0.029196475, -0.035938874, -0.08874163, 0.0017853935, 0.003982256, -0.021047128, 0.0005641558, 0.056019057, 0.023972983, 0.017154124, -0.083322726, 0.07357393, -0.002741009, 0.14707316, -0.026561446, -0.08770469, 0.03774269, -0.056316793, -0.09323512, -0.043056965, -0.011304259, -0.04429921, -0.084004715, 0.08684084, -0.038031973, 0.048094377, 0.09000493, 0.06670066, -0.08328681, 0.06858991, -0.028168634, 0.06844212, 0.09287591, 0.01738734, -0.040308304, 0.14794323, -0.07350494, 0.01941663, 0.07800936, 0.048372462, -0.045753982, -0.14404325, -0.13013418, 0.03609806, -0.048294544, -0.15559265, 0.03446159, -0.026450433},
{0.083196126, -0.009454359, 0.031066574, -0.00246781, -0.10519661, 0.0831622, 0.000958601, 0.023811832, 0.016957074, 0.09851691, 0.09465396, 0.045862086, 0.021456258, -0.10112469, 0.048696723, 0.0068373787, -0.114837766, -0.065785006, -0.04725409, 0.14244673, -0.028937312, 0.1428162, -0.03154312, 0.008322261, -0.057458628, -0.13217783, -0.11077256, 0.044516273, 0.06548792, -0.058240507, -0.083388425, 0.062726215, 0.033049695, 0.079614624, -0.018573293, -0.048044723, 0.081709966, -0.05637342, 0.04235304, -0.102741204, 0.031929865, 0.00042324513, -0.017396983, 0.0979225, -0.07943345, 0.03719281, 0.09611255, 0.13804962, 0.012877099, 0.016743517, 0.01117562, -0.016933717, -0.046235044, -0.015491269, -0.026661225, 0.15967366, -0.17923363, -0.06071485, 0.04710871, -0.06408875, -0.108870946, -0.09843865, -0.045831047, -0.017220914, -0.00019328296, -0.06373882, -0.08242699, 0.10083233, -0.10391319, -0.06515268, -0.0661071, 0.08380718, -0.05172884, -0.004684777, 0.09263575, -0.13294578, -0.10732325, -0.021078378, 0.0023963246, 0.09818116, 0.0015638792, -0.025225118, -0.105023876, 0.063245974, 0.076493025, -0.058593772, 0.07808667, -0.06709558, 0.082681306, 0.044773374, 0.03929137, 0.08930161, 0.07936086, 0.07407185, -0.04479881, 0.028906882, -0.028065711, 0.0034835401, -0.093512625, -0.040407963, 2.2351742e-06, -0.028449383, 0.040663384, -0.048614018, 0.08331926, -0.029587263, -0.028149184, 0.0727443, 0.004854449, -0.045519322, 0.09935887, 0.10457012, -0.01977515, 0.046303306, 0.0644643, 0.023250902, -0.10357074, 0.021061704, 0.06868646, 0.05421661, -0.017026355, -0.059819724, -0.12297891, -0.15469086, -0.088203855, -0.085274406, 0.024931861, -0.11645187},
{0.09332361, -0.09208318, 0.055485617, 0.020306915, 0.030087776, 0.071526095, -0.07894821, -0.057337254, -0.06722224, -0.058662217, 0.03282444, 0.003650367, -0.040506, -0.06774196, 0.007603766, 0.1410039, 0.048118006, 0.09225726, -0.00022327912, 0.16165596, 0.08581149, 0.13157777, -0.054061014, 0.031864405, 0.04689512, -0.047859527, -0.005436829, -0.07107031, 0.028127903, -0.045540124, 0.09491182, 0.09251133, 0.07868525, 0.100604706, 0.06924387, -0.000498252, 0.02965068, 0.03523189, 0.018694514, -0.027972233, -0.068440735, -0.101845674, 0.047340184, 0.051429473, -0.07418715, 0.0576821, -0.012170494, 0.081131645, -0.096269794, 0.09083654, 0.084429055, -0.04752415, 0.009552333, 0.025894433, -0.037081525, 0.057849348, -0.03141942, 0.050041527, -0.08224664, 0.058097232, -0.0033110937, -0.039542034, 0.05144754, 0.04815641, -0.03060393, -0.053412337, -0.026417436, 0.0048420355, -0.08496918, 0.0037720492, -0.07633561, -0.031957176, 0.012066543, -0.044873647, 0.056802526, 0.04788551, -0.04399645, -0.10130466, 0.049770772, -0.118428044, 0.05083069, 0.011791348, 0.03918557, -0.030566577, 0.03954056, -0.0916472, -0.032924835, -0.07029207, 0.094097376, -0.071435325, 0.040802673, 0.10919858, -0.0008706823, 0.070183575, 0.0340701, -0.04451709, 0.104454175, 0.116569474, -0.016834151, 0.04761611, 0.08826277, -0.01296222, 0.04058174, -0.0197341, 0.05569603, -0.008949305, -0.03237555, -0.09498347, -0.09076617, -0.09968631, 0.12553966, -0.04406929, 0.143644, -0.07460482, -0.05540372, 0.13824643, -0.09226813, -0.0895205, -0.054376755, -0.09143795, 0.08355751, -0.0830588, -0.0006573678, -0.015555171, 0.04182437, -0.15851948, 0.1837145, -0.042372342},
{0.05277004, 0.037041042, -0.10564931, 0.03033062, 0.04612659, 0.028247148, -0.010533483, 0.016783766, -0.06661854, -0.071532905, 0.10225119, 0.13165653, 0.032284472, -0.05718923, -0.01618811, 0.1168297, -0.09472613, 0.066713415, 0.026627742, 0.17386617, -0.061440688, 0.009716322, -0.10295866, -0.12609327, 0.096057445, 0.04214492, -0.0931576, 0.013618613, -0.09222054, -0.030669332, -0.1264589, -0.007893885, 0.006100255, 0.124435596, 0.08724989, 0.0021502338, 0.09808779, 0.09705188, -0.059901506, -0.06343849, 0.046576343, 0.08726305, 0.06430796, 0.0074907052, 0.03143651, -0.07711664, 0.046763495, 0.10644146, 0.096731514, 0.08305299, 0.012736574, 0.09946968, -0.023877049, 0.021358393, -0.09780962, -0.06515694, 0.0059244097, 0.051885426, 0.04922806, -0.01942617, -0.11212968, 0.0661274, -0.04710251, 0.025735006, 0.03571613, -0.012439832, -0.037182964, 0.005373575, 0.04405755, 0.03904868, 0.05805134, 0.014761277, -0.062785655, -0.052244674, 0.035678178, 0.012159763, -0.081889346, 0.02994287, -0.10348144, -0.02894762, 0.012304641, 0.0958496, -0.000719566, -0.003654366, 0.0042639137, -0.1033466, 0.07623315, 0.059450544, -0.08564362, 0.028089559, -0.051174525, 0.1015294, -0.025451161, 0.009474517, -0.056134485, 0.0022114515, -0.09935234, 0.06456738, -0.11368552, 0.025110826, 0.038113937, 0.15642191, -0.10872896, -0.020156175, 0.09749908, 0.0731359, -0.076966755, 0.001794634, -0.11349645, -0.032364145, -0.0067098923, -0.07938117, -0.040519245, -0.10244825, -0.07998224, 0.15185353, -0.08448515, 0.10030788, 0.0593388, -0.034707643, 0.039301466, 0.08345384, -0.06953865, 0.037261337, 0.09233354, -0.033241633, -0.0023521048, 0.14712773},
{-0.15553233, -0.037398513, -0.08451561, -0.036748365, 0.07381793, 0.025190398, 0.08985607, 0.08023569, 0.06349935, -0.02123651, 0.064144045, 0.082649365, 0.012634365, 0.10114566, 0.06340252, 0.10882009, -0.07411246, -0.02000673, -0.08317962, 0.07659343, 0.0468744, -0.062259667, -0.043825112, 0.026183208, -0.056176603, 0.029350407, 0.035819415, -0.06459838, 0.014751554, 0.06030489, 0.016914653, -0.07382727, 0.03288748, -0.009537327, 0.12322088, -0.056452375, -0.09509329, -0.023194607, -0.11802752, -0.02836439, -0.08470001, 0.064600274, 0.0041406024, -0.078913845, 0.06322147, -0.072217695, -0.09522361, -0.042631477, -0.057838067, -0.022763677, 0.042952165, -0.030167341, 0.13633782, -0.06666417, -0.015983023, -0.0041603795, 0.029752368, -0.10510359, -0.03451254, -0.04118779, -0.009906486, -0.065284334, -0.053520024, -0.021683723, -0.0630071, 3.1720894e-05, -0.0021590937, -0.09315825, 0.09034365, -0.048589513, 0.028809238, 0.10010331, 0.01348003, -0.10726633, 0.0781172, 0.008618917, -0.11707726, 0.02989687, 0.013830375, -0.045398872, 0.043504227, 0.0016927272, -0.09420306, 0.0034541844, -0.009753148, 0.07691794, 0.07778313, -0.05236934, 0.10042111, -0.09873244, 0.07713486, -0.025207523, -0.06911742, 0.017967321, -0.0040218565, -0.08333874, 0.09644598, 0.048813358, -0.14997804, 0.039435744, -0.07986576, 0.0051689018, 0.0054274458, -0.00058262795, -0.03726155, -0.033172056, 0.036604665, 0.09997686, -0.11310334, 0.0022021807, 0.046365198, 0.07950413, -0.050726056, 0.015967542, 0.101373404, 0.14869326, 0.07013755, 0.030904487, 0.09336699, 0.061615318, 0.059592985, 0.066784404, -0.06386005, 0.0528702, 0.10325913, 0.04030987, -0.10678424, 0.11517782},
{-0.13742669, 0.13863717, -0.005955975, 0.08666722, 0.012849743, -0.004161842, 0.049613904, 0.0223687, 0.015473418, -0.10420904, 0.08634795, -0.0062740967, 0.042803306, 0.048315257, 0.0943312, 0.0206712, -0.09376928, -0.07811965, -0.12289193, 0.13395892, -0.10205705, 0.010883892, 0.116313115, -0.069474265, 0.0039071394, 0.022964422, -0.03866074, -0.06682135, -0.1220942, -0.10682425, 0.0028174173, -0.07236543, 0.095588, 0.035721496, -0.012831183, -0.021404639, 0.038305104, 0.053930387, 0.016410425, 0.034420345, -0.091711245, 0.07341477, -0.026564345, 0.09710563, 0.041804142, 0.07780892, -0.01582893, 0.11618798, -0.0067742765, 0.068023615, 0.0542509, -0.08433818, 0.047927625, 0.001401842, 0.06444386, -0.0845404, -0.11166273, -0.048310556, -0.025612075, 0.02707018, 0.050633162, -0.0014528971, 0.027628088, -0.050301403, 0.035860524, -0.10122794, -0.06424867, -0.0010430515, 0.0901911, -0.081857316, -0.068925045, 0.07246369, -0.03079012, -0.052365027, 0.06722709, 0.0076053534, 0.08165778, -0.090614386, -0.10968405, 0.0012156175, 0.016286511, 0.022022635, -0.07441366, -0.007460129, 0.024307517, -0.06509051, 0.024310116, 0.07185181, 0.09894835, -0.043356728, -0.05227892, -0.014048039, -0.05609703, 0.074676804, 0.09013116, -0.028776482, 0.057851568, -0.08807739, 0.018748863, -0.09336257, 0.03467977, 0.011881552, -0.0015623065, -0.028163783, 0.08285761, 0.08794049, 0.020043034, 0.05969963, -0.08480157, 0.03356134, -0.009120145, 0.07926835, 0.07049536, 0.021626037, 0.027236372, -0.04307835, 0.07050719, 0.10585569, -0.07417955, 0.09140831, -0.11961874, 0.019086486, 0.0020713503, 0.051420428, -0.09499991, 0.021125704, 0.060535412, 0.13306037},
{-0.047350805, 0.067305885, -0.12680715, 0.042112082, 0.08857081, 0.070840925, -0.07642616, -0.057974294, -0.0030757561, -0.046831172, 0.015889188, -0.011252726, 0.037377153, 0.014594871, 0.008930615, 0.1414166, -0.0010929692, -0.012672916, -0.058028378, 0.1018232, 0.07137771, -0.004006578, -0.0027806128, -0.06494815, -0.08726337, 0.019996334, -0.03323344, -0.031248376, -0.032288577, 0.03586087, 0.024675474, 0.07658576, 0.07053309, -0.04216906, 0.13399078, -0.026110956, 0.045387056, -0.036948603, -0.14459944, -0.10821283, -0.10843573, -0.07663258, -0.00077796285, 0.06740382, 0.13277058, 0.037415497, -0.05486796, 0.106498, -0.052046433, -0.07984282, -0.057822578, -0.07801823, -0.050705675, -0.04681837, -0.09549147, -0.04635249, -0.020232806, 0.026538849, 0.028798422, -0.06543844, -0.011355257, 0.03847828, -0.10953859, 0.042545423, -0.04991773, -0.022641324, 0.03300647, 0.08728801, 0.076006174, -0.027108386, 0.0073679476, -0.033695593, 0.022059262, 0.10088442, 0.10558565, -0.027640045, -0.037490185, -0.07499953, -0.060715683, -0.08672252, 0.05654446, 0.098078206, 0.011844783, 0.009800445, -0.12376898, -0.018365623, 0.16705658, 0.08767416, 0.021842724, 0.013481143, -0.117941014, 0.025121987, -0.095430344, 0.14253955, 0.10386901, -0.029624082, -0.06727174, 0.081673644, -0.06405742, 0.03686069, 0.06120293, 0.043577224, -0.0057637338, -0.027989946, -0.071045235, 0.025283901, 0.0061988407, 0.003341283, 0.035555307, 0.08378756, 0.0044609425, -0.037610605, -0.02291597, -0.10333742, 0.027214855, 0.045687072, -0.081859745, -0.09954453, -0.0357909, -0.0727789, -0.10434543, 0.06437686, 0.060217854, -0.055298947, -0.08825453, -0.047315467, -0.04054576, 0.15891716},
{-0.105660215, 0.090718485, 0.062109813, 0.06573, 0.040682085, -0.029032007, -0.032471452, -0.06710718, -0.00027171522, -0.09057903, 0.017698409, 0.0073698745, 0.070499174, 0.070784114, 0.07958392, 0.10381458, -0.0029095842, -0.08797424, -0.050496656, 0.051292874, -0.00334587, 0.007823517, -0.00358927, -0.013724924, 0.010786073, 0.02877277, -0.09476012, -0.016876986, -0.03170163, -0.111999914, 0.036236994, 0.018181395, -0.009988051, -0.048573192, 0.023987588, 0.050612863, -0.09046642, -0.016385254, -0.0036812064, -0.039651025, -0.057864144, 0.08126977, 0.0574638, 0.053430095, 0.019277442, -0.089242496, -0.030682795, 0.05792946, -0.07999353, -0.035161175, -0.08941424, -0.06817834, -0.0010982612, 0.016965697, 0.025091454, -0.084094904, -0.0048214626, 0.0024064928, -0.043634266, -0.044774972, -0.08318424, -0.013541319, 0.029643835, -0.06157407, -0.08175858, -0.07027574, 0.07107866, -0.08972482, -0.01396086, -0.044376392, -0.009113823, 0.047410958, 0.011212304, 0.014876006, -0.05637242, -0.038864043, 0.032876037, -0.0058538243, 0.014045256, 0.025114063, -0.041825674, 0.060003817, -0.078601345, -0.02252488, 0.026941888, 0.046627592, -0.014592757, -0.06909532, 0.09786313, 0.0022189114, -0.008105489, 0.01771448, 0.039362997, -0.08132444, 0.11252312, 0.043534532, -0.08078519, -0.087335974, -0.025327103, 0.011192024, -0.009153195, 0.11110857, 0.07700099, 0.021079704, -0.060736272, 0.05095374, 0.07160084, -0.086088955, -0.0519677, 0.07093656, 0.027778147, -0.08215519, 0.00079681945, -0.011227691, -0.062218126, 0.06754258, 0.014178952, -0.09905444, 0.023613743, -0.05564908, -0.10969356, 0.12641248, 0.023387047, -0.020180382, 0.06444785, -0.008836055, -0.028717147, -0.0746927},
{0.02745048, 0.12735842, 0.08566475, -0.07178114, -0.09784541, -0.052692495, -0.04126551, 0.1063295, -0.06527815, 0.08773857, 0.033541672, 0.084864564, -0.059225336, 0.13275304, -0.0010578757, 0.121699125, -0.10842984, 0.0007157638, 0.0046984716, -0.05199989, 0.0035523206, -0.015547612, 0.07826936, -0.09028757, 0.026053924, -0.04997652, -0.1018605, 0.01191154, 0.049878277, -0.071745224, -0.08160189, 0.014971439, 0.07890761, 0.0966491, 0.10812428, 0.084575035, 0.09338276, -0.050415926, -0.12825146, -0.03672911, -0.043094177, -0.089705326, -0.08510038, 0.060635425, -0.045746177, -0.01296129, -0.0004992336, 0.003745732, 0.013018303, 0.097894356, 0.04704869, -0.09338005, 0.060859017, -0.03835913, -0.032590456, -0.04651554, -0.010343135, -0.053288717, -0.11775909, -0.023152007, 0.06434065, 0.02795783, -0.03558239, -0.0060506165, -0.07238006, 0.038549002, 0.08893193, 0.09194438, -0.08352171, 0.04019655, -0.06289296, -0.08711289, -0.06407462, -0.03862254, 0.068418026, -0.031608574, -0.068360366, -0.086738646, 0.06616198, -0.08781874, -0.03421858, -0.083237104, 0.06553813, 0.03710232, -0.06556934, 0.053780466, -0.02365001, 0.045963682, 0.09452717, -0.10906926, 0.024082372, -0.013537685, -0.083104484, 0.008385432, 0.10929322, 0.09793064, 0.030791238, -0.07054145, -0.07850337, 0.074650854, -0.041246116, 0.1212941, 0.06912361, 0.013896719, 0.0064052753, -0.071338564, -0.08516746, -0.057511415, 0.13756251, 0.062618524, -0.064172745, -0.056015294, -0.06475684, 0.058683783, -0.07325496, -0.028832091, 0.09707509, -0.10319918, 0.015972937, -0.02958177, 0.048053283, -0.0091881035, -0.024404801, -0.036090452, -0.032802805, -0.0007439408, -0.11191305, 0.042588484},
{0.024757138, 0.06994556, 0.05299392, -0.027966367, 0.043718092, -0.056204487, 0.072379604, 0.055618912, 0.08267738, -0.008540906, -0.080623545, -0.06640734, -0.07667443, 0.04169625, -0.07774532, 0.086290896, 0.08347509, 0.010239263, 0.01630001, -0.00026777913, -0.032839485, -0.042936444, 0.07631436, -0.11895955, -0.11181314, 0.04192898, -0.070240535, -0.10133744, -0.046153292, -0.11271709, -0.017713903, 0.08546511, 0.04420019, -0.026668038, 0.0059804576, -0.08565633, -0.018474285, 0.08975008, 0.009332778, 0.009270644, -0.076078646, -0.020212926, 0.08006213, -0.08675154, 0.0514056, 0.082427494, -0.06376362, 0.09570199, -0.0075887144, 0.10173085, -0.051445886, 0.038143724, 0.0061348635, -0.10853883, 0.03531386, 0.058759082, 0.036718372, -0.09938299, -0.074552305, -0.06343285, -0.09295944, 0.0285573, -0.0968209, -0.07787644, 0.097571194, 0.075257696, 0.06712661, -0.1041269, -0.062145792, -0.10742981, -0.08816574, -0.052778117, -0.014416009, -0.025956841, 0.11505269, 0.029880235, -0.0012058367, -0.09292059, 0.06319172, -0.09848207, 0.07878544, -0.03605759, 0.032653842, -0.027220411, -0.06518637, 0.07873348, 0.103657775, -0.05113211, 0.08044015, -0.03654904, 0.07597506, 0.09070501, 0.06957927, -0.09859956, 0.0024117099, 0.10001685, -0.028841361, -0.040236667, 0.11003099, -0.09256388, -0.041905113, 0.13489817, 0.0046250643, -0.006714113, 0.029015092, 0.0063606678, -0.081558295, -0.109092474, -0.014128558, -0.050332345, -0.06361905, -0.042084724, 0.05160001, 0.08542236, -0.043338366, 0.108548224, 0.087082386, 0.0018429011, -0.023965009, -0.07830421, 0.027362967, 0.03392616, -0.07018412, 0.053609144, -0.06274712, -0.0951696, 0.007786757, -0.067039},
{-0.005788511, -0.08590529, 0.04641682, 0.013781223, -0.114338234, -0.038209543, 0.061768178, 0.09857693, -0.04096497, -0.01895862, -0.0272692, -0.021793632, -0.052111894, 0.031031083, -0.08343209, -0.068046264, -0.02591853, 0.08156192, -0.04236263, -0.11458541, 0.0054562218, -0.00059832557, 0.036272235, -0.06593617, 0.0021498518, -0.007652154, -0.034995887, 0.107342355, -0.049604006, -0.07079843, 0.0049579595, -0.08179001, 0.021463944, -0.01685903, -0.06868453, -0.07742101, 0.06309217, 0.07317783, -0.064362206, 0.12276155, 0.024046224, 0.014669754, 0.10657391, 0.022144632, 0.086131, -0.0834341, 0.08516388, 0.0006439781, -6.468594e-05, 0.01754986, 0.03293618, 0.0862983, -0.05200834, 0.0359526, -0.0597042, -0.083405815, -0.023612792, -0.06766531, -0.0030894286, -0.09348923, 0.0027791553, -0.07768052, -0.0677391, -0.010099664, -0.09429054, 0.086151704, -0.113516234, 0.0713443, -0.06047229, -0.05892058, 0.06435337, -0.009277896, -0.08883002, 0.08483094, 0.07377725, 0.05822582, 0.024447344, 0.03188072, -0.071669765, 0.0013883773, 0.014797079, -0.048663832, 0.072539404, -0.022549022, 0.09321624, -0.07525818, -0.01484604, 0.0043032547, -0.051190212, 0.081544854, 0.012208488, 0.100786366, -0.05044866, -0.03268539, 0.09654306, 0.09836355, 0.07910134, 0.05762115, 0.121226504, -0.07039183, -0.08474544, 0.022277515, 0.0690995, 0.020430833, 0.02515615, -0.017200178, 0.024363358, -0.106936425, 0.11924875, 0.08455517, -0.020498281, -0.053744037, 0.037771016, -0.075133786, -0.049548216, 0.023436049, 0.07979934, -0.08977839, -0.004998293, 0.07293463, 0.105871715, 0.012241196, 0.06900555, -0.07677509, -0.008209847, 0.026451563, -0.011375267, 0.061676763},
{-0.09100144, -0.0625244, 0.0440222, 0.009707905, 0.09807401, -0.10051358, 0.011295756, -0.07454394, -0.06972663, 0.1027938, 0.0972296, 0.03359746, 0.10389228, 0.013033605, -0.035431396, 0.0555539, 0.09802912, -0.07541159, -0.019194275, -0.09229244, 0.02091475, 0.02923383, 0.014662186, 0.11113916, -0.02171936, -0.017711751, 0.055793177, -0.006204106, -0.047519945, -0.057971295, 0.026887717, 0.074065164, 0.06089438, 0.011031595, -0.027363569, 0.052600678, -0.011168121, 0.03707728, 0.09341892, -0.029172054, -0.016796585, -0.003697902, -0.0055663777, -0.029726362, 0.06271942, -0.10640394, 0.033562467, 0.08499041, 0.048180252, 0.033475887, 0.0347904, -0.02493912, -0.062210113, -0.053347114, 0.028690502, -0.0446638, 0.12467974, 0.020530969, 0.094238974, 0.025702586, -0.05498405, -0.096111886, 0.095715314, -0.103354186, -0.0054560974, 0.044924952, -0.06751187, -0.03686557, 0.02550176, -0.09360871, 0.01750486, -0.013842313, 0.089770064, -0.064841494, 0.0628829, 0.08678983, -0.08598181, -0.083459415, 0.00015623572, 0.044777993, 0.074192986, -0.055997476, 0.06839108, 0.06213467, 0.07657711, -0.046755657, 0.07800757, -0.014031166, -0.050110854, -0.04430893, 0.0776527, -0.045301624, -0.05244037, 0.06514892, 0.016142474, -0.044761714, -0.020877011, -0.047265727, -0.045940153, 0.09582558, -0.026680082, 0.0018665647, -0.023598354, -0.100362405, 0.037285853, 0.037204787, 0.089788124, -0.076234706, 0.08428613, -0.086481266, 0.035441946, -0.011658318, 0.074559, -0.057176866, 0.0990344, -0.08232101, 0.01990487, 0.09980324, -0.064677395, 0.017486349, -0.020507112, -0.08432944, 0.08261404, 0.08319825, -0.059621777, -0.083198324, 0.092543475, 0.036457043},
{-0.07524594, 0.09188742, 0.091637194, -0.03592231, 0.07635209, 0.07938932, -0.034143753, -0.09915385, 0.08463547, -0.031562448, 0.002367452, 0.0075865905, 0.08859538, -0.04463487, 0.089724295, 0.09723297, 0.0035340504, -0.09679131, -0.002255213, 0.034032647, -0.07901116, 0.098751575, -0.019829903, -0.039881147, 0.054858137, -0.02669026, -0.056217693, -0.07026736, 0.10639656, -0.048920065, 0.034006108, -0.09487413, -0.08921622, 0.044145525, -0.02074195, 0.012758642, 0.01643801, -0.07088719, 0.037109252, 0.02168168, 0.03518304, 0.03409089, 0.013767096, 0.08608916, -0.052896723, 0.01731032, 0.008394614, -0.08235364, 0.09351702, 0.07006809, -0.07519961, 0.05446726, 0.0011672019, 0.046441212, 0.1043683, -0.057399828, -0.01764058, -0.0011212304, -0.009992023, -0.086857274, 0.016415475, 0.029295003, -0.053774845, 0.013646677, -0.09418783, -0.011158472, 0.07300852, -0.00088118017, -0.07323378, -0.09700235, -0.07159739, -0.05089582, 0.083997354, -0.06328564, 0.08711107, 0.04532608, 0.031458877, 0.10383035, 0.09195548, 0.08021377, 0.07291688, 0.025596306, -0.05474379, 0.0782883, 0.011258619, 0.092814855, 0.02897887, -0.008882617, -0.0024883284, 0.043178793, -0.04626944, -0.018667188, 0.013773397, -0.0656104, 0.050740786, -0.04001572, -0.038114265, -0.079759866, -0.05809236, -0.07742506, 0.08602545, 0.033010926, 0.040198956, 0.06352197, 0.05258856, -0.010458755, 0.026379136, 0.068526074, -0.03163536, 0.041171826, -0.064196676, 0.038226396, -0.054459237, -0.031015268, -0.022394769, 0.101972744, 0.032155674, 0.04816346, -0.025081446, -0.033809103, -0.01839015, -0.07160791, 0.060846828, -0.092905395, 0.014993064, 0.0053945016, 0.018108502, 0.08005136},
{0.09995533, 0.002922225, 0.013092558, 0.06960163, -0.0057526464, -0.03966949, 0.052443393, -0.008347444, -0.009069167, -0.021379195, 0.085723795, 0.08028849, -0.024786308, -0.052813426, 0.09423217, 0.021348063, -0.0012391857, 0.092862114, -0.09449495, -0.040244717, 0.06432281, 0.09274493, -0.013113845, -0.09425758, 0.04974702, 0.09701187, -0.08361243, 0.045066703, 0.08688431, 0.055979125, 0.11032489, -0.051863275, -0.06847306, 0.03981886, 0.10446821, -0.038899858, -0.10522294, 0.1251303, 0.06597264, 0.025925547, -0.06856713, -0.058061063, 0.011592898, 0.0145554, -0.055137906, 0.0042819995, 0.08901726, 0.016983617, -0.0794934, 0.023367124, 0.08773564, 0.006130703, 0.03870406, -0.060087327, -0.02022449, -0.05179006, -0.0779734, 0.087060615, 0.026778555, 0.08784887, 0.096764825, -0.018347962, 0.058249336, -0.08636197, 0.076291144, -0.007882045, 0.047361456, 0.06402901, 0.009980222, 0.0670804, 0.019529667, -0.09904932, -0.058851536, 0.017885681, -0.07518195, 0.038545117, 0.07742844, 0.08621362, 0.09576879, -0.05799224, 0.11947168, 0.05801928, 0.09566791, 0.012437685, -0.060126796, 0.0815625, 0.11267621, -0.023733784, -0.0784928, 0.061723717, 0.10533075, -0.035853714, 0.046472475, 0.011076665, 0.017013295, -0.033114903, 0.08088131, 0.06483373, -0.06691322, 0.06918502, 0.07624209, -0.10014931, -0.075125724, -0.047437634, -0.025780529, -0.028503586, 0.052855764, 0.06935259, 0.016497403, -0.067330256, 0.09358203, -0.06881113, 0.045481566, 0.047513705, 0.049249813, 0.092433, -0.04081746, -0.044195786, 0.06595509, -0.055198643, 0.03106697, -0.00236608, 0.064655125, 0.097499035, -0.08983042, -0.11948479, 0.03727821, 0.00035234285},
{-0.09878118, 0.06816419, 0.061200134, 0.06364964, -0.05152209, 0.012978859, 0.00456088, -0.091666155, 0.052229732, -0.0899346, 0.00858221, -0.020269005, 0.08908745, 0.07920626, 0.04832265, -0.058993433, 0.03484742, -0.072074816, -0.0024232445, -0.005989586, -0.0095941145, 0.11492151, -0.056690376, -0.07410001, -0.061068952, 0.02424825, -0.060688235, 0.12226299, -0.04693534, -0.054931838, -0.04272639, -0.05129831, -0.053361468, -0.0133912945, 0.06443555, -0.032472458, -0.04290358, 0.020745335, 0.0063701984, 0.10217519, -0.07759426, -0.008178301, 0.07678952, -0.099046305, -0.0054085995, 0.049431123, -0.01692769, 0.005859707, 0.06971644, 0.13137174, 0.11078531, -0.08207775, 0.021310592, 0.08509918, 0.078867465, -0.044559427, -0.035446893, 0.03557977, -0.087448694, -0.09871497, 0.09353647, -0.010999329, -0.016901318, -0.09113749, -0.085957095, -0.0116960285, -0.0018359501, 0.10421465, 0.07664641, -0.068430305, -0.059543412, 0.051546942, 0.04046543, 0.044327125, 0.09629072, 0.003010964, -0.11962737, -0.060785122, 0.017523613, 0.012427671, -0.0055997465, -0.027363174, 0.11765147, -0.045865443, -0.012585192, -0.02778114, 0.06249658, -0.0527575, -0.030010065, -0.040838923, -0.004978848, -0.03773996, 0.041275233, -0.11737688, 0.030243231, 0.0060589015, -0.100699894, 0.012211955, 0.053773064, 0.00524731, -0.051932268, -0.046560314, 0.036506534, -0.013275102, -0.0063729063, 0.1136916, 0.032257028, 0.06327818, -0.06274344, -0.09344956, -0.06513392, -0.09869161, -0.030988844, 0.03517203, 0.09674786, 0.108306564, -0.0068120523, 0.03995666, 0.06397786, -0.06568591, 0.12871969, 0.039208256, -0.047280382, 0.07042564, -0.018679835, 0.07423872, -0.076298766, -0.033420388},
{-0.12502962, 0.074990354, -0.03868934, 0.041948076, -0.08738789, -0.09970236, -0.020398602, -0.04439029, 0.053881884, -0.05997157, 0.08066473, 0.03143061, 0.10091077, 0.13073938, 0.10738098, -0.090927005, 0.041072812, 0.093085036, 0.00216789, -0.1518644, -0.051269714, 0.021622892, 0.030226365, -0.17292514, -0.075865015, -0.028877828, 0.015458455, -0.09451936, -0.12689853, -0.10905967, 0.09167222, -0.025123395, 0.0085664755, 0.16712074, 0.015125942, 0.03706518, 0.019124636, 0.21359824, -0.018422415, -0.0011650207, -0.07363332, 0.06683406, 0.010687375, 0.05453008, -0.007689798, -0.09968019, 0.00028033555, -0.20159845, -0.008598395, 0.17141026, 0.1413746, 0.010919265, 0.043832846, -0.031636506, 0.093333215, -0.07478537, 0.074842535, 0.02031222, -0.10832684, -0.027008878, -0.021982867, 0.07949284, 0.17561606, 0.045501992, -0.10322401, 0.02261558, 0.07047398, -0.079834655, 0.011366427, -0.10584868, -0.034241077, 0.015140036, 0.07920748, 0.18686426, -0.061810084, 0.15492369, -0.08970237, -0.08812229, -0.0150080845, -0.1397, -0.010746011, 0.092174664, 0.14130023, -0.019205865, -0.035108328, -0.077210926, 0.06904271, 0.063783206, -0.033015903, -0.047286145, 0.069722, 0.034610756, -0.0102344155, 0.013895205, -0.012901896, -0.046584006, 0.024733528, 0.022266144, -0.012545838, -0.0040409416, 0.088058144, 0.1614199, -0.07643874, 0.09243332, 0.007847472, 0.13440858, -0.015377831, 0.0757246, 0.04407852, 0.0052272542, 0.03929477, 0.092834026, -0.085924566, -0.030803232, 0.066201985, 0.15766469, -0.0840604, -0.06769712, 0.029657137, -0.0679691, 0.030511653, 0.04879213, -0.013628753, 0.11068242, -0.091439806, -0.07119711, -0.071622014, -0.03861891},
{-0.048447706, 0.03216468, -0.10752703, -0.12176838, -0.020665249, -0.012714997, -0.04880775, 0.026200116, -0.101656176, -0.08997277, 0.11204502, 0.037446685, 0.13295054, 0.027806588, -0.008895458, 0.049995948, -0.04928179, -0.01645602, -0.048022408, 0.15002842, 0.094499156, 0.12524053, -0.068716966, 0.04890455, -0.0025860884, -0.10653418, -0.08716327, -0.093180746, 0.013342136, 0.09381264, -0.10113653, -0.10535643, -0.033156816, 0.1223418, -0.03295243, 0.06883731, 0.009838047, 0.036642477, 0.05108148, -0.011800495, -0.04833249, 0.07178879, -0.119393796, -0.031062597, -0.0055691074, -0.036204465, 0.03293751, 0.090959236, -0.09336081, -0.0060779997, 0.030393828, -0.026797652, -0.031505965, 0.04249754, -0.099780135, -0.07877266, 0.020473396, -0.03171227, 0.009912795, -0.015730526, 0.09074107, 0.011386483, -0.07838035, -0.08830008, -0.0661377, 0.042183083, -0.037314717, 0.08135897, -0.05458678, -0.044725318, -0.054479685, 0.023784325, -0.07733308, -0.019677877, -0.04353821, 0.010179193, -0.00504666, 0.037920624, -0.0109204985, -0.13561387, 0.07863023, -0.04624786, -0.0076068304, 0.03343677, 0.056170046, 0.046278987, -0.048385505, 0.0122776, -0.040118758, 0.068831176, 0.11882413, 0.04852727, -0.05892303, 0.010731849, -0.025412243, 0.08778392, 0.0344629, -0.052732766, -0.0213712, 0.028721511, -0.06748968, -0.006699955, 0.075202934, 0.10003434, -0.05469142, 0.021104636, 0.022439715, 0.071427554, -0.030879632, -0.047933448, -0.03538341, 0.07939252, -0.036292642, 0.023015192, 0.011995941, 0.17781822, -0.07739604, 0.08254583, 0.04201672, -0.037181027, -0.019647632, 0.10909938, 0.044346314, -0.11915672, 0.07329507, -0.1595985, 0.12851599, 0.054507338},
{0.13000455, 0.096156925, -0.020173965, -0.0015772176, -0.1044537, -0.03299558, 0.03602205, 0.00831344, 0.092664585, 0.014806412, 0.08619703, -0.08171822, 0.030569779, -0.05519565, -0.044957846, -0.053845525, -0.02118091, 0.041049674, -0.0054947576, 0.14553231, 0.0059158485, -0.085505106, 0.016154272, -0.022080008, 0.107640855, 0.07070313, 0.0066453274, -0.12452252, 0.01299831, 0.01646595, -0.04259197, -0.013340928, -0.009071103, 0.049902517, 0.17768891, -0.08991967, -0.0377836, -0.03642344, 0.08894091, -0.08143138, -0.06839424, -0.048090357, 0.09569177, 0.09101521, 0.07422069, -0.061338704, 0.054621533, -0.038075153, -0.090486296, 0.036144093, 0.053446908, -0.078257576, -0.09732695, -0.09306945, -0.060717847, 0.09234483, -0.051544037, 0.06505871, 0.0102962535, 0.09544103, 0.038784683, 0.086784065, -0.08156138, 0.10340245, -0.03558623, -0.07267298, -0.049634863, -0.064939216, 0.037815314, 0.096827105, 0.10900763, 0.02485753, -0.06867473, 0.024089612, 0.15510735, 0.11368803, 0.019719284, 0.0463302, 0.05088102, -0.010313904, 0.1189332, 0.014928304, -0.09825271, -0.06650457, 0.0066988613, 0.033526484, 0.070556454, -0.044743586, -0.045747403, 0.023402624, -0.02243789, 0.056924485, -0.035341762, 0.043339103, -0.085223064, 0.07437703, 0.037342414, -0.057923507, -0.10782118, 0.06657454, 0.04322225, -0.04010143, -0.008692857, 0.08737481, -0.017720466, 0.073329106, 0.0519558, -0.03950194, -0.03062576, -0.088383585, 0.09114244, -0.037228458, 0.02730243, -0.070560455, 0.091625854, 0.10929616, -0.029451782, 0.105284676, 0.015850808, 0.032184094, -0.08825313, -0.048706673, 0.0010971081, 0.058534455, -0.10056151, 0.053533934, 0.13230193, 0.085552946},
{-0.011012573, 0.07187756, -0.04128627, -0.04945238, -0.09375463, -0.017952956, -0.09902385, -0.030805193, -0.10231068, 0.10124968, 0.10146992, -0.13041723, 0.05184118, -0.11693814, -0.078668915, 0.04188833, 0.029399062, -0.10140881, -0.0046863044, 0.16711628, 0.06566019, -0.019810617, -0.12525919, 0.020807577, 0.07930654, -0.00844357, -0.042526856, -0.0210313, 0.12545776, -0.0497682, -0.018417485, -0.08649575, 0.042107556, -0.10637797, 0.035805807, 0.10044675, 0.032616932, 0.053876273, -0.08090668, 0.0136115905, 0.055469234, 0.046428993, 0.06542209, -0.013281689, 0.06395372, 0.003756237, 0.018948346, -0.07284146, -0.0055773854, 0.0782696, -0.04137624, -0.04411115, -0.0633583, -0.07385778, 0.015299141, -0.044341043, -0.010935595, 0.05163917, 0.13451682, -0.080502674, 0.021693936, 0.057435427, -0.081783, 0.061097458, 0.07517882, 0.012592164, -0.015658382, 0.01752849, 0.11074517, -0.049426507, -0.055759378, 0.02134943, -0.0005667433, -0.09484875, 0.066818014, 0.12956771, 0.13353962, 0.072476104, 0.14346492, -0.015848799, 0.032356713, -0.087572604, -0.023297118, 0.017227285, 0.076575495, -0.07141165, 0.022102747, 0.029162543, -0.025465988, 0.07098545, 0.059783842, 0.028807618, 0.017178088, -0.03594918, -0.0015221197, -0.093933344, -0.06501803, 0.036212705, -0.0074355872, -0.08094424, -0.020218313, 0.13115351, -0.05563082, -0.017800942, -0.056260854, -0.032787856, -0.08372885, 0.046066146, -0.12932204, -0.072788574, 0.0873288, 0.06819913, 0.06332548, -0.06712376, -0.08156263, 0.04043141, 0.09919388, 0.100371584, 0.024298122, 0.0008466169, -0.083827816, -0.023078369, 0.005178415, -0.063897334, -0.056149334, -0.0920622, 0.0662282, 0.06729217},
{0.030021343, -0.025712736, 0.0071462407, -0.0020174475, -0.10391707, 0.039810285, -0.009256215, 0.053379253, 0.051316977, -0.010127701, -0.008655942, -0.14820194, 0.011497737, -0.07552961, 0.034807436, -0.015455619, -0.099860206, -0.05684802, -0.044069868, 0.09436667, 0.046739306, -0.08801323, -0.01241618, -0.020070817, 0.08124096, -0.0644514, -0.0055157896, -0.04155173, 0.07498322, 0.09352458, -0.09355193, 0.030928968, 0.011020793, -0.1139624, -0.03128027, 0.08961925, 0.040971376, -0.10530291, -0.056224104, 0.053409193, -0.052137632, -0.022367962, 0.08437661, -0.01397386, -0.09514502, 0.06639195, -0.024955206, -0.037005533, -0.09176764, -0.07633084, 0.034474574, -0.10180041, 0.056478348, 0.06722028, -0.002145782, 0.020820571, 0.0043149497, 0.055571035, 0.12789233, -0.040949296, 0.06328724, 0.06907329, -0.14174466, -0.07806902, 0.0921877, 0.06755115, 0.055666972, 0.089668274, 0.050657537, -0.025332019, 0.027945511, -0.087132394, -0.048281558, -0.084168695, 0.008386444, -0.08470963, 0.10739742, -0.09023753, -0.025236268, -0.06807609, 0.059316155, 0.046027765, -0.10628925, 0.0956766, 0.095163696, 0.020051414, 0.1210089, 0.0745373, -0.08855902, -0.09478135, -0.030786233, 0.012016852, -0.01606486, 0.057326313, -0.027633844, 0.015348218, 0.086053476, -0.075270556, -0.062520795, -0.08927722, -0.10495168, 0.04483563, -0.078908324, -0.07637063, 0.02073109, -0.052593928, -0.0026095149, -0.06833267, -0.09425753, -0.023226203, 0.16638061, 0.102293596, -0.02752226, 0.03137555, 0.09460612, 0.03582671, -0.09492926, 0.05673307, -0.011887319, 0.10399896, 0.105690554, 0.08872144, 0.031901434, 0.062396355, 0.06974453, -0.09178082, -0.021407258, -0.0056558214},
{-0.048648726, -0.10404131, -0.041174185, -0.11770464, -0.020387124, -0.06550498, 0.019942839, -0.09991191, 0.020653784, -0.066748366, 0.043884408, -0.13692595, 0.016875245, -0.019796226, 0.08882628, 0.036289357, -0.09233721, -0.05113409, 0.06640553, 0.12824562, 0.08908418, 0.0061788107, -0.0020158738, -0.048015293, 0.041770626, -0.12910885, 0.0065119285, -0.0034661144, 0.11050404, 0.065542154, 0.027807817, -0.07045848, -0.050615117, 0.06769664, 0.111503646, 0.07839829, 0.0658462, 0.037337262, 0.08548033, -0.07549423, 0.039114743, 0.039489195, -0.06829434, 0.0684797, -0.12014444, -0.058331795, 0.07759255, 0.028223282, 0.045676216, 0.030974114, 0.061892502, 0.07650307, -0.075077355, 0.0038991033, -0.0072322637, 0.017379224, -0.07228354, -0.074088946, 0.076938495, -0.11294025, 0.07304448, 0.030433001, 0.031007176, -0.06262429, 0.001514487, -0.084289275, -0.021956129, -0.051058505, 0.07581813, 0.05128036, -0.061296526, -0.062000535, 0.008003518, -0.06413897, -0.04114232, -0.09965659, -0.09382508, 0.06462093, -0.007315554, 0.041612733, -0.043645684, 0.07608791, -0.001022261, -0.10983884, -0.078732535, 0.0795794, 0.07259152, -0.011592913, 0.05508491, 0.071651444, -0.010538205, 0.06089839, 0.023231864, 0.033409864, -0.022370253, -0.004586354, 0.08568151, -0.07925871, -0.08596968, 0.068903595, -0.051448178, 0.022768214, -0.10906731, -0.006687179, 0.02473501, -0.01173836, -0.07180207, -0.06687025, -0.115322806, 0.053153463, -0.032198578, -0.095198125, -0.019016137, 0.038386922, 0.08122288, 0.046777748, 0.09681236, 0.07891965, -0.030156905, 0.015602097, 0.084477216, 0.0036504532, 0.100838095, -0.1361984, -0.105573826, -0.12537043, 0.006972207, 0.057691555},
{0.039754834, 0.012672801, 0.07003696, -0.071238525, -0.045315865, -0.053419456, -0.04805065, 0.05272615, 0.03502986, -0.034674346, 0.056436, 0.009305264, 0.106999874, -0.011264871, 0.042982735, -0.008381136, 0.058866173, 0.070528984, -0.030007152, 0.062913775, 0.09407377, 0.1375522, 0.034627277, 0.11579447, 0.11672554, -0.08328874, 0.03735816, -0.02126036, 0.07359701, -0.059956778, 0.05688096, -0.069665335, 0.03449379, -0.029860632, -0.038393218, -0.076980636, 0.014135381, -0.01828992, 0.12667409, 0.08683758, 0.014700862, 0.007957846, -0.12813427, -0.028213413, -0.07599876, -0.096759975, 0.054218143, 0.09836422, -0.013652496, -0.023136774, 0.0018141004, 0.0420835, -0.0222016, 0.08314834, -0.072631165, 0.0008045248, 0.019670991, -0.027513355, 0.10081344, -0.112867154, 0.07117566, -0.035749394, 0.028122919, -0.091192536, -0.051274206, -0.07901097, 0.002300996, -0.012623146, 0.016044728, 0.10215123, -0.09259366, 0.018634954, -0.023493737, -0.015845338, 0.1056358, 0.065023236, 0.01113528, -0.042865306, -0.068240546, -0.009144844, 0.090925336, -0.09356584, 0.08215893, 0.05317299, 0.08547558, -0.08219034, 0.094193526, 0.07554742, -0.05029556, 0.08421075, -0.0039035953, 0.116423935, 0.0340077, 0.019916976, -0.120553054, -0.041254066, -0.047121696, -0.028257292, -0.06610383, 0.08128779, -0.05582381, -0.09464789, -0.053440012, 0.09045249, -0.08849458, 0.013787441, -0.0685289, -0.11086712, -0.14441557, 0.030447256, 0.033484917, -0.028995052, 0.046542197, 0.065069325, 0.053718597, 0.08113125, -0.04477443, -0.083660245, 0.059572253, -0.097139746, -0.059353698, -0.08973407, -0.006614702, -0.0805728, -0.06662726, -0.10788129, 0.05135919, -0.034182087},
{0.014046973, -0.107174, 0.018256322, 0.01122216, -0.06094118, 0.08858183, 0.054017015, 0.051364377, -0.08733113, -0.036876626, 0.023028692, 0.024050603, -0.04705765, -0.08285315, -0.04399917, 0.10693452, -0.08557202, -0.035088755, -0.055406235, -0.0035895384, -0.052392572, 0.11071932, 0.005900143, 0.10642282, -0.045396432, -0.078416824, -0.011572469, 0.026658008, -0.027307121, 0.0771201, -0.031849418, 0.036677893, -0.07982925, 0.0010153276, 0.095872045, 0.056850642, 0.076354064, -0.0678994, 0.1020875, 0.07510471, -0.024528429, 0.08827239, -0.009979159, -0.109406196, -0.028572861, -0.10250865, 0.034925804, -0.026265878, 0.042214394, 0.12520862, 0.096810564, -0.0014410838, 0.0057933982, -0.085294284, 0.10053754, -0.025024531, -0.1371807, 0.034687787, -0.0002770503, -0.015930602, 0.05305066, -0.040499248, -0.054050542, -0.04345998, 0.02771625, 0.029393377, 0.0021297606, -0.060597684, -0.0717894, -0.04596522, -0.09399542, -0.077874295, -0.103710055, -0.050790828, 0.13515998, 0.025341948, 0.0373797, -0.056098808, -0.043192457, 0.042741276, 0.17400838, -0.060896415, 0.048227947, 0.043534312, 0.114889085, -0.08860717, 0.04620379, -0.048800685, 0.094831064, 0.086654775, -0.008235356, 0.07747634, 0.10062075, -0.01552426, 0.06532675, 0.036001652, -0.006509036, 0.06292981, -0.10016689, -0.047963407, 0.00208956, -0.0054857177, -0.076623194, -0.012221299, -0.04758469, 0.03615167, -0.037129864, -0.11043843, -0.075987116, 0.016187241, 0.12581104, 0.01027099, -0.028965656, -0.04546876, -0.09599818, 0.16576234, 0.045799438, -0.011095956, -0.0646699, -0.034606285, 0.08441611, -0.037071966, 0.01468362, -0.101609044, -0.0306819, -0.04002982, 0.13343808, 0.062088702},
{0.0384849, 0.104357496, -0.0038034495, -0.10406293, -0.06204458, -0.032004096, -0.045675956, -0.07787763, 0.02267994, 0.016710699, 0.010591646, 0.01574169, 0.14231515, -0.03826365, -0.018204084, 0.0070515415, 0.0015029933, -0.09204844, 0.08774827, 0.04363481, -0.07203998, 0.0875804, -0.04704161, 0.059507016, -0.026190983, -0.09748626, 0.030821403, -0.05250269, -0.035501957, 0.060738113, 0.009642441, -0.027921539, 0.075072825, 0.05908737, 0.17316934, 0.045833256, -0.10453158, -0.05599501, -0.100817785, -0.10783967, -0.0360974, -0.08823552, 0.06567043, -0.0004931999, -0.08358305, -0.0016255729, 0.012930445, -0.05119796, 0.044300452, 0.045995407, 0.069900416, -0.10304478, 0.04572464, 0.08992221, 0.078305066, -0.12566097, 0.028721232, -0.009756684, -0.045060106, 0.033906862, 0.089436956, -0.026449058, -0.13343424, -0.08777606, 0.07136412, 0.07745565, 0.05268979, 0.01054322, -0.020798497, 0.033848073, 0.0054387255, -0.09988154, -0.10032563, -0.0058246134, 0.09769069, -0.027237197, -0.006080336, -0.02237983, 0.04760135, 0.07815281, 0.16474397, -0.0025959685, 0.014516512, -0.03562431, -0.0286223, 0.055303648, 0.11349419, 0.07611518, -0.0010588624, -0.040883105, -0.07614396, -0.040287636, -0.055976, 0.09337375, -0.06037036, -0.04078891, -0.009328023, -0.044559497, -0.13668577, 0.0018266663, 0.00011126697, -0.01443807, 0.0814498, -0.037727512, 0.08660231, -0.045450434, -0.08248615, -0.04009964, 0.04516539, -0.032232575, 0.06171673, -0.0744115, 0.05951439, -0.0464382, 0.09513436, 0.008902132, 0.065557666, 0.037803814, 0.004037105, -0.08278964, 0.042085912, 0.048508856, -0.07943556, 0.081997484, -0.0152883455, -8.0415244e-05, 0.022871368, 0.03928271},
{-0.07975361, -0.054412767, -0.076612346, 0.044464108, -0.03692766, -0.026077785, -0.03834022, 0.06785457, -0.015469685, -0.060146634, -0.0494869, 0.010868908, -0.0019352119, 0.12375588, -0.0033879043, 0.03516056, -0.072082914, -0.10330486, 0.09318643, 0.12134599, 0.02814062, -0.03673062, -0.020313878, -0.07689219, 0.050263163, 0.055413827, 0.037971705, 0.008771644, -0.008795358, -0.039130777, -0.030783031, -0.056092713, 0.01559955, 0.0331077, 0.15938307, 0.099745, -0.06645903, -0.0015806853, 0.007449857, -0.102810584, -0.008920787, -0.038443923, 0.095809296, 0.061448403, 0.02830468, -0.023018857, -0.053248484, 0.054343387, 0.05857204, -0.09685958, 0.035617445, -0.03682092, 0.10442495, -0.018143985, -0.09031364, -0.09554891, -0.06994241, -0.05649463, -0.07418737, -0.093155555, 0.061146133, 0.03549989, -0.04614789, -0.057392202, -0.09726949, 0.065972984, -0.06389444, 0.009459369, 0.0944622, -0.061904408, 0.0899727, 0.064836375, -0.06404573, 0.07463978, 0.13315181, 0.082254276, -0.049519327, -0.044845227, -0.058920264, -0.0801873, 0.06329553, 0.00972148, -0.023709463, -0.023190012, -0.037529264, -0.046748072, 0.044251464, 0.029836543, -0.080267295, -0.02800919, -0.07987403, -0.037764333, 0.015011899, 0.1020313, 0.13685651, -0.073163085, 0.076940596, -0.037383713, 0.034527045, 0.06002696, 0.0199548, 0.082818635, 0.010196876, -0.03814494, 0.034702655, 0.10543152, -0.07173687, -0.08211983, 0.009780229, 0.09025305, 0.023767306, 0.013552003, -0.06525424, 0.056747857, 0.009180561, 0.17384909, 0.036161184, -0.021650761, -0.054976605, -0.09811458, -0.053706877, 0.003265498, -0.04694071, 0.024881626, -0.063995734, 0.0010274139, -0.008367209, -0.019448059},
{-0.14295769, -0.049238008, -0.08910561, 0.034821544, 0.034592554, 0.06486586, 0.0678216, 0.08290315, 0.09158063, 0.025673881, 0.05391358, -0.033631492, 0.108967856, 0.09490138, 0.10361071, 0.010837321, -0.09437922, -0.10140925, 0.043352153, 0.042559035, -0.03119042, 0.004146965, -0.09003954, -0.13982803, 0.07366054, 0.043858856, -0.038455483, -0.03307752, -0.086336225, 0.010163644, -0.108836085, -0.0785013, -0.03638281, 0.041565504, -0.004521425, -0.06630671, -0.025509555, 0.018530138, 0.01355867, 0.010368347, -0.023519505, -0.08058144, -0.029293416, 0.052610435, -0.015985172, -0.029101599, 0.030000106, -0.04497645, -0.060473427, -0.09528452, -0.029381363, -0.086131245, -0.014595725, -0.046360053, 0.002093017, -0.08775754, -0.09779404, 0.07940574, -0.02302158, -0.09529482, 0.02287092, -0.10342381, -0.06281492, -0.026869297, 0.08325614, 0.036432564, -0.079269566, -0.096719265, -0.10557772, -0.117392264, 0.060831454, -0.0553648, 0.06586428, 0.06600502, -0.0026940159, 0.10878682, -0.058422517, -0.0055821612, 0.00089013984, 0.03627654, 0.0051689637, 0.05713497, -0.03279826, 0.09012193, -0.02902402, -0.082235195, 0.061502866, 0.11936015, 0.053537715, 0.00076005695, -0.09266975, 0.02635862, 0.0816644, 0.04656013, 0.11836482, -0.10188504, -0.06294216, 0.058419745, 0.0037938978, -0.0778019, -0.03557937, -0.011742791, -0.023022374, -0.08494942, 0.08343019, -0.067478776, 0.08677012, -0.028642785, -0.008797655, 0.018894156, -0.107993975, 0.08070102, -0.026166677, -0.06260931, -0.03181058, 0.10380528, -0.027262954, 0.04718627, -0.10719181, 0.085844636, -0.09072892, 0.037474893, 0.027642824, -0.014416575, -0.09184681, 0.053240463, -0.0049803997, 0.08286107},
{0.04721168, 0.13496691, -0.014796362, 0.05092465, 0.097267635, 0.035255164, -0.023068996, -0.08262771, 0.059687167, -0.031121314, -0.017095538, 0.064649664, -0.016436052, 0.1532783, -0.07963144, -0.017485043, 0.051108457, -0.092272736, 0.0639231, 0.11565139, -0.091918245, 0.013148559, 0.008921589, 0.00044822553, 0.096216485, 0.08150792, 0.0061206287, -0.1712876, -0.06558004, 0.097249135, 0.07986863, -0.098659195, -0.039834067, -0.035137143, 0.19074379, -0.051303454, 0.028496115, -0.022890504, 0.041903917, 0.050203275, -0.12597924, 0.015541635, -0.03454713, 0.009953733, 0.037871566, 0.07544033, 0.08433978, -0.018982856, -0.065584585, -0.071501285, -0.106006555, -0.055381227, 0.036195334, 0.05607599, -0.05423283, -0.15026006, 0.046616726, -0.08424206, -0.042321533, 0.02044185, 0.046893805, -0.012354539, -0.09470399, -0.05265074, -0.04678151, -0.00499273, 0.043842345, -0.012963735, 0.02462369, -0.103347525, 0.08527854, -0.05898862, 0.03990954, -0.081212886, -0.016921733, 0.16941912, 0.033257093, 0.1045216, 0.017327908, -0.0044741263, 0.105651006, 0.07476911, 0.015133221, -0.03469186, 0.064519934, -0.059421014, 0.10335763, -0.0013295135, 0.090198696, -0.03039184, 0.014469045, 0.10209278, 0.04094225, 0.0836265, 0.15024547, -0.0702983, -0.08789645, -0.09042016, 0.005505664, -0.024106987, 0.08062203, 0.09632185, 0.0076789213, 0.10552186, -0.023366053, -0.012274524, 0.08395048, 0.06560411, -0.0800179, -0.025549436, -0.07009103, 0.022075549, -0.041673012, -0.04078614, 0.054054305, 0.109658085, -0.018392025, 0.08414279, 0.039097786, -0.03169194, -0.09403847, 0.13997419, 0.075642385, -0.04791461, 0.007726744, 0.0073802713, -0.0040307576, -0.02197163},
{-0.010433704, 0.10862404, -0.03413756, -0.026641257, -0.025283933, -0.018347785, -0.005762447, 0.0014258102, -0.07189391, -0.056178283, 0.006967962, 0.025916122, -0.06247202, 0.08999784, -0.013866807, 0.09730729, 0.065385, 0.04423649, 0.03358385, 0.016779201, 0.043977343, 0.073135644, 0.08649259, -0.1277142, 0.07895894, 0.08473239, -0.028501773, -0.07258834, -0.077185676, 0.036682494, 0.10390481, -0.067592554, -0.098429225, 0.11494822, -0.058608018, -0.048233084, 0.07865559, -0.06039277, -0.12205474, 0.08380466, -0.00917861, 0.05787182, -0.021255625, -0.056173865, -0.010602959, -0.082085066, -0.09860825, 0.028664768, -0.10493661, -0.05313338, -0.07519841, -0.04318013, 0.10813282, -0.020683326, -0.0033239424, 0.035814643, 0.08499538, -0.08117916, -0.07151775, 0.058642626, 0.09776305, 0.024215434, -0.08737724, 0.032047957, -0.083102986, 0.030998735, 0.018148609, 0.0033849403, -0.057605393, -0.022859434, 0.10049919, -0.062864944, -0.08380664, 0.09818146, 0.025713334, -0.00063871924, 0.08970727, 0.0013646111, -0.033733997, 0.030694513, 0.04571656, -0.028902665, 0.07864287, -0.05663941, -0.012397858, -0.033784032, 0.07044575, 0.04783605, -0.054407492, 0.09032515, -0.06267154, -0.033131342, -0.096930824, 0.077816635, 0.043174908, 0.060952663, -0.013275176, 0.03591676, 0.10193038, 0.03180273, -0.073327065, -0.01144727, 0.07019474, -0.046203457, -0.016151955, 0.10593682, -0.078635946, -0.044555753, -0.033302777, -0.023303354, -0.044042498, 0.048626572, -0.08348539, -0.092434034, 0.0010369495, -0.049330264, 0.026718143, -0.04395096, -0.07752636, -0.0136052, 0.09904176, 0.06571668, 0.006407796, 0.08010155, -0.048594043, 0.039317913, -0.11345162, -0.024132196},
{0.029312886, -0.07239435, 0.053169973, 0.06158369, -0.085432306, -0.04516577, -0.02317963, 0.096437916, -0.031717002, -0.097595416, -0.0627756, 0.011181045, 0.058066078, 0.054874163, 0.0039706184, -0.08311393, 0.07885114, -0.012747044, -0.09524344, 0.09271386, 0.08985415, -0.09336841, 0.07214671, -0.04298453, 0.07004758, 0.11125293, -0.0821445, -0.07090628, -0.06501748, -0.030669516, -0.080894284, 0.009463882, 0.039064467, 0.048468813, 0.102085344, -0.07368827, 0.002394549, 0.11821482, 0.04892614, -0.08991383, 0.043286495, -0.06660779, -0.051924717, -0.041014217, 0.103596985, -0.08622136, 0.10580811, -0.03426048, 0.06465234, 0.07909456, -0.08305915, 0.021414667, -0.09524073, -0.022565579, -0.08511361, -0.081560954, -0.037714645, -0.10484351, 0.0067522945, -0.069107994, 0.05888653, 0.046787456, 0.07556984, 0.08209701, -0.105835654, -0.015233303, 0.10076357, 0.007423006, 0.051013533, -0.09558415, 0.023126839, -0.010996342, -0.09286252, 0.033342075, -0.0503831, 0.051260173, -0.08637155, -0.015341178, -0.0015379055, 0.06824979, -0.014283278, -0.014931276, 0.09458313, 0.0063191503, 0.08086186, 0.039183836, 0.11894392, 0.06614392, -0.07712874, -0.010580388, 0.0013545103, -0.013424669, -0.045685694, 0.023890788, -0.0693301, 0.068675846, -0.05809619, 0.086173914, 0.07942135, 0.103910565, -0.039544165, 0.0027322662, -0.07761613, 0.08138132, 0.031088624, -0.09010262, -0.072464205, -0.10833987, 0.08291895, -0.025278168, -0.04518987, -0.08295878, -0.09786745, 0.074986264, -0.046441425, -0.08142205, 0.061372064, 0.04129933, -0.040723834, -0.086306304, 0.03952191, 0.04279778, -0.091926925, -0.01741635, 0.10305071, 0.058027912, -0.09929957, -0.027002493},
{-0.11430646, 0.021201123, -0.04401941, 0.088279426, 0.087768644, -0.018112257, -0.053103756, -0.023391724, 0.021285966, -0.0694893, -0.078431055, -0.015859228, 0.038344856, 0.07873863, 0.02507272, -0.0955823, 0.023181291, 0.09128871, -0.035664357, -0.06314178, -0.073271975, -0.027409011, 0.0687868, -0.06461429, -0.007905227, 0.053734593, 0.025495874, -0.07715651, -0.067782715, 0.041974276, -0.03018591, 0.0034799592, 0.08232654, 0.092628144, 0.021133661, 0.0069008204, -0.04356433, -0.054781824, -0.08299944, -0.07938818, 0.05616358, 0.07866542, -0.08224888, -0.08613927, 0.046006043, -0.06802606, -0.017490774, -0.06507613, 0.084052175, -0.038841765, -0.086797655, -0.07531819, -0.028630944, 0.013631305, -0.065006405, 0.02731212, 0.11187835, -0.07339172, 0.050595257, -0.0829365, 0.018285865, -0.036755413, 0.02238651, -0.031390384, 0.01566416, -0.078895584, -0.027798252, -0.04649975, 0.09416168, 0.034227647, 0.035639748, 0.05579935, 0.0008603409, 0.056718074, -0.041632358, 0.11970202, -0.0187066, -0.039040864, 0.005861664, 0.03833681, 0.054400597, 0.07180154, 0.05286883, 0.02260332, 0.0035629557, -0.07914747, 0.059802238, 0.07523216, 0.084247164, -0.07387084, 0.12040259, 0.05611187, 0.0691012, -0.05988149, 0.04998932, -0.051198088, 0.0923385, 0.051951434, -0.07360788, 0.014076784, 0.06704995, -0.027544184, 0.049970925, 0.058534965, 0.05385458, 0.030747315, -0.059780613, 0.08926821, -0.07837585, 0.05283025, -0.015431834, 0.06740752, 0.06753561, -0.08055931, -0.06338912, 0.07014216, -0.086809896, 0.017574057, 0.0516316, -0.07725732, -0.047900334, -0.0044078124, -0.0010363833, -0.0014517583, -0.099725895, 0.07565282, -0.06926353, -0.056922246},
{-0.028580124, -0.083716445, 0.0024161297, 0.026347525, 0.041149233, 0.09931892, 0.00039126407, -0.092901476, 0.0485211, -0.061925083, -0.09021974, 0.101830885, 0.021534035, -0.0139409285, 0.022828402, 0.065916404, -0.098695986, -0.008543602, 0.073172376, 0.053147208, -0.09877938, -0.057195935, 0.053553063, -0.07557135, 0.055953752, 0.04382146, 0.029216845, -0.08772017, -0.021308642, 0.063210994, -0.025068477, -0.048578694, -0.028528253, 0.03519563, 0.062051512, 0.028987959, -0.100952245, -0.08222818, -0.030579062, 0.055839043, 0.023474986, 0.048550993, 0.09966674, -0.10530766, -0.0724374, -0.046917893, -0.08153805, -0.113018066, -0.08303993, 0.0368827, -0.019821133, -0.09031941, 0.10397269, 0.034990367, 0.10299227, -0.013543713, 0.018832963, 0.044006944, 0.05226907, 0.090528935, -0.07552628, -0.014743845, 0.08229465, 0.033992127, 0.057500213, 0.04878206, 0.033836372, 0.006944023, 0.05743995, 0.08255072, 0.008087146, -0.02655569, -0.026533887, 0.074816264, -0.042821202, 0.0736279, -0.032379765, -0.0012988374, 0.10177327, 0.076103084, 0.022258323, 0.095959395, -0.040684056, 0.039127696, -0.11508914, -0.0078261895, -0.02231077, -0.006869019, -0.013744273, -0.08281866, 0.02453178, 0.046067785, 0.0043924823, 0.03356633, 0.04751547, 0.046199754, -0.103512906, -0.06617184, 0.05329275, -0.049314596, -0.08914916, -0.022574883, -0.031843036, 0.03792624, -0.0042196075, 0.008848092, 0.007598483, -0.046583828, -0.074539036, -0.0761434, -0.08748793, 0.06591943, 0.056174073, 0.04706239, 0.056342468, 0.09590919, 0.0026494535, 0.04561402, -0.011090428, -0.043316662, -0.0022533885, 0.037236053, 0.111432165, -0.06172613, 0.08218673, -0.0826251, 0.061456073, 0.03207212},
{0.05903969, 0.0470645, -0.07272575, 0.0033463784, 0.0709712, 0.005079493, -0.09096867, -0.04683412, -0.057008862, -0.0778616, -0.02381333, 0.058789473, 0.0349752, -0.055280507, 0.083722934, -0.05840953, -0.053239368, -0.10625363, -0.024599679, -0.13393517, 0.08947831, -0.09925277, -0.02473472, 0.09568106, 0.02187306, 0.02857559, -0.07528111, 0.0857539, 0.026070107, -0.037597936, -0.012690627, 0.027446762, -0.0030585243, 0.07762985, -0.104873106, -0.1073319, 0.08104515, -0.047730807, -0.041568216, -0.010768883, 0.09834576, -0.032896765, -0.02059403, -0.08360479, -0.023213584, 0.09066981, 0.016603567, 0.07747592, 0.036244527, 0.017427886, 0.036419213, -0.072144635, -0.05387498, 0.054629274, 0.0760967, -0.013617476, -0.056730423, 0.04909402, 0.0887502, -0.106066406, -0.08009864, -0.06629557, 0.041837208, 0.00990808, -0.003945552, 0.06328722, 0.09204155, -0.032796852, -0.07622488, -0.08884117, -0.027430268, -0.014000217, -0.011360347, -0.003863316, -0.10905292, -0.024582181, -0.060404614, -0.031025544, 0.06269753, -0.06486063, -0.027632667, -0.0848087, 0.018409086, -0.055945124, 0.01047788, 0.07976376, -0.009860788, -0.07934734, -0.0018244507, -0.047404647, 0.13411364, 0.0036525885, -0.015745364, 0.01731136, 0.043188848, -0.004674621, 0.10365109, 0.093197405, 0.05112075, -0.05540133, 0.007629402, 0.004161339, 0.009570933, -0.101846285, 0.017473988, 0.056058142, 0.07929726, 5.5980337e-05, 0.024938298, -0.06281078, -0.057163376, -0.1021436, -0.07820602, -0.07175266, 0.015087888, 0.078875065, -0.06578388, 0.0439104, 0.04111571, 0.08807644, 0.05086439, 0.0005876738, 0.03649623, 0.077911824, -0.022250362, 0.097999685, 0.0850183, -0.06210523},
{-0.09562789, -0.05202818, 0.072118975, 0.09815068, -0.05082365, 0.048341006, -0.08316575, 0.051071033, -0.101532556, -0.023064263, 0.0609673, 0.061803967, 0.105532676, 0.10191985, 0.07752446, 0.017436989, -0.08148161, -0.032600403, -0.043107573, 0.013917229, -0.06701616, 0.028278226, -0.0773618, 0.005845238, -0.074332014, -0.032716446, -0.002068302, 0.106071524, -0.08409929, -0.018987954, 0.06730207, -0.069909185, -0.03909724, 0.06347225, 0.061373144, -0.088183634, 0.00096777023, 0.065086536, 0.100699216, 0.043455027, -0.084103644, 0.025199905, 0.0704299, 0.0056083, -0.04214231, -0.03367683, -0.08717831, 0.02684642, -0.05934724, 0.008101282, 0.02168657, -0.10008888, -0.029641217, 0.091147795, 0.026037604, 0.07955332, -0.07413131, 0.069473445, 0.0027769885, 0.018954283, 0.08750559, -0.048030056, -0.038188513, 0.0540262, -0.013164595, -0.052054778, -0.06677864, -0.028469764, 0.060697425, -0.016086714, 0.048475914, -0.09927539, -0.09293043, -0.008525414, -0.07628026, 0.08655612, 0.042805526, -0.02094172, -0.014877452, -0.01670853, -0.018580234, -0.09063944, 0.016905725, -0.09580819, -0.10173374, 0.057295755, -0.07187471, -0.009776259, -0.063448526, -0.05044695, -0.06781222, 0.005289746, 0.00053052604, -0.030481393, -0.09891499, -0.019210972, 0.010202803, 0.0825221, -0.055086955, 0.024386376, 0.045241997, -0.014431648, -0.04494905, 0.078035206, -0.040223587, 0.10458409, 0.08757653, 0.060129438, 0.12342658, -0.010323969, 0.05277543, -0.05020724, 0.045793798, -0.019299794, 0.0480192, -0.07461502, -0.026871573, -0.03827908, 0.032023944, -0.043578215, 0.11915401, -0.002081613, 0.05665395, -0.03276653, -0.09760939, 0.09188692, 0.10554855, -0.013878323},
{-0.008027616, -0.056047447, -0.09446155, -0.027645776, 0.037063938, 0.09458566, -0.021622656, -0.048539296, -0.09299076, 0.04846923, 0.05569436, 0.08818799, -0.06868614, 0.08999902, 0.109336264, 0.020239687, 0.077470906, 0.08692731, 0.103799306, -0.019771269, -0.05635411, -0.046171915, -0.04556668, -0.03964331, -0.03950087, -0.051316705, 0.054362494, -0.028297849, 0.07883389, 0.026673783, 0.09513123, -0.07303818, 0.07967133, -0.056758005, 0.00076690334, 0.104869895, -0.061035816, -0.04130887, -0.08923957, -0.035781756, -0.112599514, -0.01937648, -0.022223756, 0.01771763, 0.07108438, 0.028532203, -0.096566066, -0.111596525, 0.10657969, -0.052516624, 0.063114315, 0.023031965, 0.04905376, 0.094844125, -0.070908755, -0.09332451, 0.024543809, -0.010618754, 0.06041239, -0.08118822, 0.034970243, 0.037390586, 0.044231597, -0.066118926, -0.10266772, 0.0010113105, -0.012087982, -0.04564518, -0.056524478, -0.037942555, -0.09142063, -0.09244129, 0.012591757, 0.13845815, -0.0657069, -0.03810037, 0.024830285, -0.090730965, 0.12452882, 0.05518347, 0.03909882, -0.046232965, 0.047149412, 0.07532137, 0.030002298, -0.051847607, 0.04052085, 0.10398967, 0.044489753, 0.065012276, -0.0066707795, 0.042463213, 0.10345662, 0.014823596, -0.08665541, -0.041718893, -0.08492731, 0.10559047, 0.014777702, -0.04012298, 0.033010706, 0.03392603, 0.07870383, -0.0010061264, 0.023058478, 0.04143939, 0.034799185, -0.06995185, -0.0045941994, 0.01960384, 0.017007014, 0.046635345, 0.02411056, -0.0072536757, -0.04075519, 0.038371876, -0.03004032, -0.09487184, 0.08815438, -0.008545101, 0.020091789, 0.08425843, -0.053049665, 0.051003143, 0.06523098, -0.057831626, 0.10285386, -0.025432002},
{-0.011636675, 0.104920484, 0.014425451, -0.08326211, 0.06089892, -0.087464415, 0.089695595, 0.052587524, -0.0040094703, -0.031623244, 0.104465745, 0.057412565, -0.0015594804, 0.06869039, 0.069069065, -0.000916866, -0.028808614, -0.0054595303, -0.02773928, -0.11369454, -0.026231077, -0.08682686, 0.028299809, 0.047686126, -0.07025164, 0.06898972, 0.05641414, -0.044291727, 0.062945895, -0.019387966, 0.05535777, 0.007193632, -0.018494349, 0.016768392, 0.06639223, -0.008144935, -0.06773265, 0.043213382, -0.074254595, -0.008071324, -0.09060845, -0.032757357, -0.050200544, -0.083094254, 0.042786468, -0.07852039, 0.01434578, -0.037940092, -0.012326039, 0.024262002, -0.004568248, -0.024370246, 0.040495194, 0.014063765, -0.0035942644, -0.08404107, -0.0725302, -0.037112303, -0.020679524, 0.09271535, -0.08453312, -0.050904702, 0.059129395, 0.053583518, -0.009473197, -0.100808315, 0.07223422, -0.02534493, -0.028429765, 0.045941744, -0.047624014, -0.07215172, -0.05370632, -0.030348947, 0.0229621, 0.078858025, 0.07669311, 0.073599145, 0.12570667, 0.036852557, 0.0067010815, -0.019625828, 0.12582232, 0.046627123, -0.051163964, -0.021921555, -0.07001947, 0.037269346, 0.013419461, 0.014894342, -0.061187994, 0.1069704, 0.015355259, 0.018416815, -0.010541744, -0.0305731, 0.09552857, -0.019529572, 0.06818386, 0.037778452, -0.099725746, 0.09888776, 0.09810344, -0.031048521, -0.064513855, -0.032782294, 0.029725987, 0.020367071, 0.022214547, 0.079675436, -0.07015617, 0.073461816, -0.036924977, 0.015366972, 0.02847606, 0.041198324, -0.06474272, -0.036225766, 0.030539578, -0.056101806, 0.028462978, -0.11382462, 0.057904612, 0.104505084, -0.055534203, -0.09444437, 0.11566791, -0.054572877},
{-0.11559668, 0.04357342, -0.15120795, 0.040180314, 0.016606925, -0.044245906, -0.060566954, -0.08248844, -0.09169119, 0.04413466, -0.044412393, 0.05526302, 0.07336137, -0.07113357, 0.18131554, -0.06965081, -0.07344405, -0.094251856, -0.016211124, -0.1333625, 0.065588474, 0.013200668, 0.06985039, -0.11879036, -0.07941708, -0.009787171, 0.0018646449, -0.1382653, 0.0024906867, 0.07112221, -0.022644347, -0.02784055, -0.094317526, 0.16451026, 0.06484933, -0.031783774, -0.092220135, 0.040127162, 0.15966846, 0.026889335, -0.15641546, 0.037606314, -0.051340524, -0.050907258, -0.09290671, -0.09642731, -0.044228446, -0.02221916, -0.020732239, 0.0097564375, -0.013421612, -0.014515027, -0.040342335, -0.06983685, -0.036568157, -0.17392917, 0.027680116, -0.015409932, 0.08736713, 0.008627486, 0.014710941, -0.070080236, 0.105006926, -0.041421987, -0.052897066, 0.017787192, 0.012855034, 0.106463954, -0.08034377, -0.06795482, 0.09563349, 0.098151185, 0.035576165, 0.19896717, 0.040872958, 0.02184054, -0.09002755, -0.05326043, 0.010992149, 0.042865105, -0.036981873, 0.0848286, 0.18052724, 0.06139982, -0.049324784, 0.061761394, -0.13078487, 0.04439167, -0.07968734, 0.016839933, -0.0011219573, -0.015096024, -0.027500674, -0.09728954, 0.03778792, 0.09298736, 0.08124071, -0.040371783, 0.086172275, -0.06642653, -0.06942863, 0.0014539888, 0.04613942, 0.04940203, -0.1225125, 0.087325566, -0.1164765, -0.07843147, 0.12884396, -0.11296749, -0.07021245, 0.013517082, -0.1663703, -0.069760814, -0.06447901, 0.11368237, -0.0257862, -0.019205332, -0.0059165224, 0.092747554, -0.01231466, 0.025605254, -0.027630515, 0.048883602, 0.018736154, 0.03780207, -0.03430135, -0.060860768},
{-0.07554035, -0.03919764, 0.0147045115, -0.074664906, 0.04507784, 0.07714386, -0.07427155, 0.032814264, 0.100210726, 0.027948827, -0.0078068646, 0.047631342, 0.12241206, 0.0756863, 0.128146, -0.007855471, -0.079071835, -0.00014763346, 0.001983299, 0.013416206, -0.047986653, 0.063964844, 0.10562127, -0.11683914, 0.029174851, -0.10008301, -0.0525622, -0.06858701, -0.12581734, -0.080846526, -0.026462683, -0.0026633064, -0.042697083, 0.109450735, 0.008638871, -0.06864301, 0.02308558, 0.09873032, -0.059036076, -0.124543354, 0.04239835, -0.09613908, 0.03929249, 0.044943463, -0.025883442, 0.07915339, 0.046805635, -0.039331634, 0.06743616, 0.11901304, 0.098088995, -0.01827205, -0.07308077, -0.036474347, -0.09795512, 0.0150375245, -0.012066432, 0.060477465, 0.07394077, 0.003943108, -0.010220574, -0.006280246, 0.11359803, -0.09745225, 0.0020398498, 0.05701531, 0.0056991335, -0.031057976, -0.0512266, 0.03943335, -0.01739063, 0.0047296826, 0.03674586, 0.015900774, -0.056067545, -0.041247964, -0.101387665, -0.0183978, -0.013610593, 0.063215144, 0.062192805, 0.037709236, 0.04306447, -0.042798895, -0.115745544, -0.020932162, 0.12740144, 0.06280549, 0.026706107, 0.06971476, 0.0829516, 0.039535824, 0.079720825, 0.11354577, 0.047798112, -0.10131114, -0.04985513, 0.050057165, 0.046170693, 0.10490024, 0.061944783, -0.0629338, -0.0037705007, -0.078109324, -0.05366592, -0.016333811, -0.104923196, 0.055639613, -0.062168296, 0.08053135, -0.01627296, -0.0929916, 0.008650276, 0.03450621, -0.1061992, 0.027322493, -0.010099544, -0.04708629, -0.07032232, -0.10123006, -0.06936786, -0.077714354, -0.010149218, -0.026884848, -0.047130413, -0.14215514, -0.043167654, -0.08244822},
{0.06548912, -0.06410299, -0.023388792, 0.06389827, 0.006253208, -0.004148856, -0.082580835, 0.05188647, 0.042175636, 0.04491675, 0.023785576, 0.09275781, -0.049543098, -0.077077605, 0.029260827, 0.06903091, 0.0013528394, -0.093085304, 0.02694781, 0.04664134, -0.10070356, -0.07746287, -0.11207378, -0.1365074, 0.08596162, -0.05651127, 0.07367428, -0.120537184, -0.08077477, 0.07112413, -0.090137035, -0.0831797, -0.04460848, -0.047708448, 0.07370576, 0.07473003, 0.01960403, 0.112753324, -0.042765193, -0.008637451, -0.045516785, 0.044932783, 0.07291356, -0.016740406, -0.088084884, 0.070605226, -0.0013499409, 0.05040858, 0.097821966, 0.014596082, 0.036897305, -0.04810085, -0.07206344, -0.06046186, 0.070737556, -0.09141429, 0.013873823, -0.07409288, -0.02023014, -0.04959239, -0.05819392, 0.010052275, -0.03778195, -0.046456497, -0.10278902, -0.018701792, 0.06522936, 0.058213353, -0.056105062, 0.057810016, -0.0742331, -0.0051345075, -0.07904914, -0.066039205, 0.1459672, 0.124362394, 0.010048565, -0.086125806, -0.0593561, 0.011964746, -0.0819292, 0.010467075, 0.0680578, 0.05211415, 0.017928625, 0.058196828, 0.02909068, -0.060015187, 0.05808522, 0.09406977, 0.079359874, -0.0711028, 0.07461141, 0.15002313, 0.115165144, -0.0048190877, -0.06363773, -0.024775783, -0.10649265, 0.0968104, -0.049642228, 0.08238764, 0.035413492, -0.09388163, -0.04741268, -0.0006833885, -0.0393522, -0.03466683, 0.0134859225, 0.07014576, -0.056209337, 0.054163545, -0.033622924, 0.057468664, 0.0693745, -0.057471085, -0.04328627, 0.09043765, 0.031039424, -0.013286486, 0.045972276, 0.1148191, -0.057970833, -0.04877028, -0.10570609, -0.036462765, -0.056358345, -0.016274048},
{-0.025011538, 0.050161168, -0.0992026, 0.044552628, 0.06510201, 0.05813457, 0.03448865, -0.02068784, 0.09136246, 0.093458846, 0.08832933, -0.07656329, -0.075625174, -0.07439954, 0.030722301, -0.03020645, 0.09424307, -0.10878391, 0.12896621, 0.09904826, -0.057456724, 0.025533335, -0.053546406, -0.007343409, 0.09581247, 0.13292827, 0.03769618, -0.10557729, -0.09495312, 0.019045448, -0.06777445, 0.011051904, -0.08459575, 0.05624747, -0.017366832, -0.08325339, -0.035153635, 0.058766782, 0.06937512, 0.013666368, 0.08703233, -0.014903858, 0.011423514, 0.030479627, 0.036358625, 0.02350686, -0.015067205, -0.09836702, 0.0061478615, -0.10380294, 0.027391873, -0.045528907, 0.004255785, -0.053294986, -0.008445367, -0.12229116, -0.06677515, 0.010222495, -0.089175865, 0.024544312, -0.015936444, -0.048091453, -0.06359611, 0.10572086, 0.016724266, 0.029934555, -0.03338814, 0.07871853, 0.09676009, -0.087240584, -0.10171836, -0.02216259, 0.10496195, 0.05497071, -0.035072915, 0.036632534, 0.10743109, 0.077394456, 0.031419463, 0.0721344, -0.051095564, 0.05015433, -0.053799275, -0.068759516, -0.13096015, -0.031110771, 0.110527486, -0.05123911, 0.04128914, -0.060432814, 0.043920696, -0.006036653, 0.06669527, -0.003519617, 0.030264366, -0.056341045, 0.10070185, 0.019632583, 0.027428718, 0.0064189434, -0.036717854, 0.16896766, -0.10967976, 0.071944594, 0.042603135, 0.08444156, -0.047081895, 0.018961808, -0.070143856, 0.015921412, -0.0011225075, -0.07689934, 0.09105149, 0.011956686, -0.053077716, 0.05844753, -0.108654484, 0.027584717, 0.071268454, -0.10151843, -0.003664874, -0.046552148, -0.02311637, 0.05727312, 0.0035775155, -0.0764412, -0.038656935, 0.15754148},
{0.036705397, 0.110134795, -0.06465035, -0.09904469, -0.09486392, 0.0146222785, 0.100528404, 0.03992009, -0.043925494, -0.06923631, -0.06814621, -0.04790283, -0.0053018355, 0.058673, 0.09228468, 0.038609263, 0.04310661, -0.09333151, -0.062066022, 0.103012964, -0.08469778, -0.081434175, -0.06497498, -0.10477692, 0.075062156, -0.026526498, 0.004873297, 0.02018036, -0.093848, -0.05627862, -0.06685781, -0.0037357942, 0.05320964, 0.0007684937, 0.12868674, -0.074098684, -0.018321192, 0.09544538, 0.020634562, -0.05979421, -0.08382625, -0.061329067, 0.030983988, 0.023158789, -0.0510263, -0.038783506, -0.018790595, 0.05626376, -0.095826246, -0.048730727, -0.024084995, -0.000225842, -0.10004222, 0.06185504, -0.019507192, 0.042968966, 0.01419559, 0.07075477, 0.03012875, -0.06598193, -0.029692968, -0.009437049, -0.07333272, 0.053482667, -0.077348664, 0.016406007, 0.07462413, 0.09141411, -0.07616064, 0.10731491, 0.06845335, 0.020194512, 0.042570516, 0.013336745, -0.056576394, -0.028256215, 0.106100515, 0.04628952, 0.13738419, -0.0717276, -0.10478941, -0.093240775, -0.0143490955, -0.06755703, 0.046304308, -0.01917036, 0.048248578, -0.0032166853, -0.098293975, 0.0075989612, 0.050616533, 0.018282177, -0.0031802133, 0.11404527, 0.13857216, -0.05695427, 0.068952605, -0.054471005, -0.058854792, -0.0377113, 0.10392515, 0.024424782, -0.024093645, -0.055244822, -0.093200915, -0.072603874, 0.037085466, 0.00014998582, -0.05894529, -0.047526803, 0.053273078, -0.0596429, 0.026626825, 0.04052404, -0.08981913, -0.06906345, -0.08647917, 0.08115804, -0.10555719, -0.0063516945, 0.0034265867, -0.057730004, 0.04124014, -0.014516324, 0.10218726, -0.07252287, 0.026055757, -0.055344895},
{0.037150845, 0.013064788, 0.038517907, -0.03744214, -0.10051623, 0.08313811, 0.027799603, -0.041256003, 0.031984597, -0.0685152, -0.006276435, -0.0027519204, 0.00467993, 0.039580207, -0.0338874, -0.019393664, -0.07537673, -0.042714603, -0.02980497, 0.15365791, -0.111108474, 0.004494645, 0.05845756, 0.013151092, -0.06664323, -0.07503968, -0.10884001, 0.05308447, -0.10295371, -0.017409323, 0.054465305, 0.08463607, -0.07244822, 0.026421778, 0.13406359, 0.0825926, 0.048263952, -0.014204153, -0.03642278, 0.03119977, 0.080792956, 0.09510112, -0.08284777, 0.018628638, -0.07659826, 0.021603934, -0.047488034, 0.036966287, 0.008717723, -0.024573969, -0.055911206, -0.1025383, -0.08785667, 0.042645194, -0.033628143, 0.091838494, 0.034761418, -0.09497459, 0.09195478, 0.07614152, -0.085152805, 0.06887785, -0.055054422, -0.04208739, -0.03725926, -0.0508708, 0.046697825, -0.1059483, 0.018161649, 0.009368766, 0.0984205, -0.059884574, -0.08794398, -0.06775478, 0.12672496, -0.04971631, -0.05926358, 0.09361601, -0.006033281, 0.024148688, 0.029073704, -0.037946925, -0.00847023, 0.09187996, 0.09896056, 0.009228998, -0.025575053, -0.022525, -0.010915992, -0.07067366, 0.10953467, 0.07020095, 0.09766714, 0.015084099, 0.025179395, -0.059993684, -0.09723607, -0.10477833, -0.13711579, 0.05313289, 0.09765227, 0.06470959, -0.10995796, 0.006551124, 0.09046461, -0.05835202, -0.09497136, 0.006307245, -0.016173916, 0.017897232, 0.13935588, -0.048071068, 0.07775287, -0.083598465, 0.02520354, 0.045937918, 0.0015919463, 0.006698638, 0.09373051, -0.0023859069, 0.13178514, -0.06604517, 0.0011214982, -0.09382803, 0.06421596, -0.08606962, -0.024668172, -0.09437442},
{0.06374146, -0.06986354, -0.036773585, -0.09344424, 0.0071266918, 0.005098097, -0.021779867, 0.066811725, -0.0062630177, -0.005755417, 0.06846024, 0.08414881, 0.13179192, -0.019490868, 0.024104003, -0.0915332, 0.06770581, -0.09183684, 0.09607307, 0.14341508, 0.08063289, -0.07470377, -0.03692789, -0.009102272, 0.063450806, -0.09614008, -0.021817453, 0.043586593, 0.09101812, -0.028383737, -0.016520135, -0.00462324, 0.05665935, 0.075118884, 0.11183284, -0.052509677, 0.039782487, 0.0006941438, 0.09332257, 0.042662837, 0.065388046, -0.09787066, 0.05396535, -0.0700119, -0.038514804, -0.1026393, -0.087301955, 0.08001843, -0.03474132, -0.06941043, -0.031039191, -0.09481168, -0.092569895, 0.024083892, 0.06288998, -0.057382345, -0.09519658, -0.027836539, 0.013958645, 0.067173205, -0.05058922, -0.09695786, 0.059280947, 0.05356565, 0.049172908, 0.020915974, 0.055270042, -0.068822145, -0.0064954157, 0.013218621, 0.030670542, -0.053381287, 0.08311632, 0.08872412, 0.09656435, -0.056816176, -0.017698828, -0.09592844, -0.019769138, 0.009522116, 0.13765904, 0.05065745, -0.044010524, 0.0750681, 0.004994494, 0.06769204, -0.031086067, 0.07423559, -0.05221025, 0.09781311, -0.048414446, -0.054232758, -0.10639546, -0.00018979645, 0.069459006, 0.027165085, 0.097047895, 0.030291567, -0.05467491, 0.07874064, -0.06140577, -0.10471589, -0.033461455, -0.01632969, -0.039629787, 0.030268773, -0.06696307, 0.08080744, 0.003695178, -0.059185155, -0.010273712, -0.015736185, 0.026904771, -0.07243188, -0.01570338, 0.13438873, -0.09957812, 0.08126758, 0.023931123, -0.02196388, 0.056271385, 0.05517661, 0.078318104, -0.051329266, -0.10049703, -0.09340807, -0.035755716, 0.025853958},
{-0.06749929, 0.0024491248, 0.019608723, 0.08855493, -0.0012547635, -0.025152966, -0.08208777, 0.091104805, 0.0015388802, 0.00054742396, 0.1509918, -0.07913742, -0.06642465, 0.087132305, -0.045202415, -0.08894372, -0.09820022, -0.10425158, -0.007830036, 0.08117381, 0.055416886, -0.0590886, 0.021109428, 0.061412368, -0.06952336, 0.013670769, -0.06621416, -0.08736174, -0.099833146, -0.09622105, -0.0742808, 0.024745429, -0.025055783, 0.12919419, -0.0062211975, -0.01746917, -0.0253298, -0.008841981, 0.07993387, -0.062322237, 0.07356708, -0.09810322, -0.056164384, 0.05174876, -0.025074359, 0.027295923, 0.012294471, -0.06400128, 0.09989117, -0.03537371, -0.055423144, -0.038215317, 0.043814823, 0.0791669, 0.025154367, 0.046174623, -0.11918024, -0.026525833, 0.0063050766, -0.032948773, 0.085922524, -0.052079782, 0.021641854, -0.016538657, -0.10458333, 0.025057497, 0.033085905, -0.046526693, -0.09615549, -0.06307098, 0.071149915, 0.07354642, 0.0204757, -0.014101076, -0.051596675, 0.071656436, 0.024573145, 0.100035354, 0.042976458, 0.026545675, -0.040442873, -0.05293961, 0.030218853, 0.041854173, 0.04557438, -0.10412431, 0.07903677, 0.051565763, 0.04942825, -0.10452008, 0.045130983, -0.067844026, -0.089888416, -0.050800957, 0.039212193, 0.036934912, 0.061404273, -0.11065521, -0.07006818, -0.09999787, 0.07075827, -0.09324879, -0.057599053, -0.09166603, 0.043043204, -0.032995563, -0.008980679, -0.03195043, -0.11165286, 0.03573268, 0.05110156, -0.09113375, -0.001953146, 0.05679238, -0.08606756, 0.09832192, 0.03728704, -0.06855307, 0.077894785, -0.028778307, 0.11351304, 0.06572581, -0.09298414, 0.09255693, -0.030601874, -0.010653545, -0.044036925, -0.04867056},
{0.0278241, 0.024112357, -0.077523425, -0.10624096, -0.00748854, -0.07006946, -0.011218241, 0.08267443, -0.093452916, 0.0870444, 0.07489794, -0.004417442, 0.09525221, 4.54911e-05, 0.0048839413, 0.028225107, -0.052533906, -0.080589905, -0.010864336, 0.05620489, -0.057608005, 0.04930868, -0.07150483, -0.09007796, 0.080789074, 0.11627062, 0.008532366, -0.12240724, 0.042589344, -0.090410896, -0.06625899, 0.0850673, -0.018474234, 0.1327876, 0.1255946, -0.061678745, -0.08845188, -0.071731046, -0.014327614, -0.11272849, 0.021839455, -0.055854615, -0.06631812, -0.022099186, -0.044158224, 0.011309398, 0.059018895, 0.091475725, 0.10027619, 0.035306852, -0.031044358, 0.02013211, 0.07271918, -0.10961882, -0.010330968, 0.051241867, 0.053569723, -0.065849215, -0.066982456, 0.06872795, 0.023269426, -0.084661804, -0.0076074693, -0.060167346, -0.035063766, 0.029546447, -0.005121815, 0.08961952, 0.055504132, -0.07014518, -0.0131594855, 0.051883128, -0.041338317, -0.018127073, 0.1360208, 0.12702958, 0.08912569, 0.052792028, 0.0959214, 0.03315033, -0.03780841, -0.04222776, 0.0030920124, -0.08667409, -0.0552822, -0.085508175, 0.0844023, 0.041073263, 0.014401304, -0.06875495, -0.011262363, 0.09846298, -0.1018559, 0.116728105, 0.017317947, -0.018910103, -0.041979097, -0.08598541, -0.027739117, -0.07982052, -0.059160564, 0.038957, 0.081591815, -0.006278798, -0.0083365515, 0.08566204, -0.0350249, 0.015126135, -0.12880327, 0.04173784, -0.05236233, -0.05521478, 0.060734447, 0.023355063, 0.0351927, 0.032581728, -0.05989997, 0.08847329, 0.0023663554, -0.056388874, 0.014728261, -0.00465219, 0.023239357, -0.080942236, -0.035976186, 0.05815206, -0.046615142, 0.12902318},
{-0.1223808, 0.06103366, -0.053606708, -0.012359297, 0.022494987, -0.09671703, -0.05031618, -0.05034733, -0.095102616, 0.09752281, -0.08484402, 0.0592011, 0.020209005, 0.11397062, -0.0039908425, 0.13123186, 0.0014281977, 0.016549999, 0.10040629, 0.014113977, -0.08616577, -0.018217938, -0.04320318, -0.14769985, -0.1018604, 0.124730654, 0.083396524, -0.032849614, -0.06592138, -0.0065540955, -0.011706052, -0.044875916, -0.09046759, 0.12792526, -0.0022888428, -0.0023988255, 0.01318823, 0.13270523, -0.021632582, -0.041000504, -0.119296856, 0.06343621, 0.1296098, -0.071261965, -0.045181025, 0.0927821, 0.0501699, 0.036326196, 0.038165018, 0.08635635, -0.0835111, 0.101603165, 0.069157586, 0.029933004, -0.07083126, -0.09773415, -0.034639876, -0.052930307, 0.081465095, -0.061924815, -0.08149923, -0.10386568, 0.032106973, 0.10476798, 0.0043237135, -0.0110614505, -0.020813385, -0.0016444623, -0.08030849, -0.07916581, 0.04277018, -0.04694371, 0.0647302, -0.04424869, 0.061126944, -0.010151942, 0.10535706, -0.08415227, 0.008748032, 0.06539713, -0.009649103, 0.020920724, 0.10872768, 0.037475765, 0.0028017354, -0.069153346, 0.03500069, -0.07398269, -0.0654845, 0.057055045, -0.053726155, -0.06838778, -0.08910793, 0.08030427, 0.031656157, -0.00049636513, 0.041670725, 0.02873469, 0.005502205, 0.03431779, 0.03455749, 0.014963202, -0.1001516, -0.0822244, 0.07318231, 0.117853574, 0.053708564, 0.029662212, 0.026404956, -0.037872713, -0.0003798308, -0.09979912, 0.006801663, 0.06848104, 0.09142268, 0.015253071, -0.06925016, -0.005786121, 0.08119438, 0.06080462, 0.10086628, 0.15074371, -0.085738525, 0.024941813, 0.03477581, 0.090532094, -0.1286783, -0.012231357},
{-0.11493295, 0.06693033, -0.07290942, -0.1023615, 0.07481928, -0.07888848, -0.07378378, -0.025440156, -0.049103342, -0.00841932, -0.104151845, 0.02895225, -0.057143055, 0.043177962, 0.13604325, -0.031731553, 0.010978929, -0.092179745, 0.07436104, 0.050454143, -0.07109875, -0.045039583, -0.014441109, -0.15658912, 0.079714105, 0.09439887, -0.002883169, -0.10474847, -0.092416294, -0.103275545, -0.06305934, -0.0633524, -0.05215465, 0.12600456, 0.015415728, -0.0694684, -0.021444894, -0.035098933, 0.05348806, -0.04115998, 0.056845482, -0.08627677, 0.1322714, 0.06672136, -0.08844104, 0.08880589, 0.016345829, -0.028701441, 0.040697187, 0.059460383, -0.062355604, -0.02311454, 0.11157071, -0.07850312, -0.03667427, -0.13273373, 0.060172778, -0.056360282, 0.05077055, -0.023610415, -0.0040525706, -0.034167767, -0.01636364, -0.07892102, -0.038318753, -0.019993149, 0.026579222, 0.047176436, 0.09418348, -0.06917912, -0.10492837, -0.0005986789, 0.007686436, 0.052879877, 0.0070394035, 0.01297269, 0.044994943, 0.07892516, 0.06633335, 0.058521684, 0.053246032, 0.007820249, 0.087684475, -0.07196196, -0.1225688, 0.018005718, 0.17312747, 0.10926196, -0.05489027, -0.10878884, 0.09987775, -0.06536459, -0.06525475, 0.074888505, -0.013753731, 0.07225038, 0.028107345, 0.005763314, -0.1213554, -0.041700393, -0.010541871, 0.12660915, 0.097296044, -0.07975963, 0.058251347, -0.055896513, 0.027639218, -0.0475564, -0.09625244, -0.024210824, 0.0030113088, 0.051611617, -0.12594646, 0.040535316, 0.10272394, -0.038934167, -0.0006797834, 0.010079205, 0.010904916, -0.012371123, 0.093064636, 0.06753707, -0.02229598, -0.01764465, 0.007542357, 0.018918956, -0.021806855, 0.11229557},
{-0.11708317, 0.08180582, -0.05404926, -0.05129199, 0.09067305, -0.042796537, 0.09876587, -0.010435633, -0.062309824, 0.07338676, -0.10046634, -0.027908524, -0.06230032, 0.039967522, 0.11194798, 0.048322856, 0.085610606, 0.050684605, -0.04951232, -0.040695023, 0.08290798, -0.14507166, -0.0833989, -0.027603544, -0.027129099, -0.04195203, 0.07006164, -0.009495814, -0.1593176, -0.05028801, -0.008959086, -0.06786222, 0.047414366, 0.04015349, 0.034740288, -0.09173902, 0.08166622, -0.046286408, -0.02699809, 0.06573744, 0.009695317, 0.043435097, 0.097352855, -0.05504146, 0.03796093, 0.056722682, -0.029889122, -0.06224041, 0.09731935, 0.079814605, -0.09133891, 0.032813445, -0.06416542, -0.058532387, 0.03837566, -0.020070288, -0.02178158, 0.08342497, -0.036538098, 0.08437037, -0.025008036, 0.07478936, -0.028870171, 0.07084966, -0.07665612, 0.008404471, 0.069330804, 0.06354855, -0.028605558, 0.056053612, 0.092440225, 0.025285188, -0.09082549, 0.02999585, 0.12054358, 0.15353785, -0.08246202, -0.059568737, 0.00077170366, 0.019470427, 0.11253931, -0.064376235, 0.0053702877, 0.08598207, -0.1561013, -0.013562038, 0.077841096, -0.033943333, -0.021627948, -0.04867134, 0.07240555, -0.051382285, -0.06721352, 0.06627071, 0.021746423, 0.05793315, -0.054674905, -0.054726098, -0.071591765, -0.052096274, -0.09573993, 0.14248343, 0.019663814, 0.09944528, -0.035604805, -0.029481629, -0.03969368, 0.05066694, -0.10050633, 0.05976734, 0.069493525, 0.0023645312, -0.08185043, 0.042389125, -0.059310947, -0.044291586, 0.0727684, -0.020941183, 0.053719506, 0.008309625, 0.07273487, 0.12716188, 0.0510361, 0.08695404, 0.032727927, 0.11019719, 0.03657075, 0.13998275},
{0.06694508, -0.057780325, -0.010092999, -0.076132715, 0.032075033, -0.034613505, 0.055246014, -0.0056720823, -0.0935256, 0.04811679, -0.026819719, 0.10703918, 0.08697695, 0.029198764, 0.00944513, 0.07490359, 0.03211159, 0.07783405, -0.03194677, 0.025594726, -0.057676762, 0.082601085, 0.09043627, -0.12082843, -0.09080927, -0.05148402, 0.0071158805, -0.054015312, -0.0896153, -0.08309837, -0.07146574, -0.0027796545, 0.012807571, 0.07788229, 0.002116192, 0.030057715, -0.10090074, 0.03210032, 0.036447488, 0.06366651, -0.060957953, -0.003967464, -0.047194988, -0.06993437, -0.098044686, -0.048449334, -0.018942788, 0.010234149, -0.053971555, -0.061123364, 0.03908519, -0.072787315, -0.07157139, 0.09966764, 0.016176283, -0.051300254, 0.053824052, 0.016366467, 0.062364206, 0.06456292, -0.0971865, 0.025943456, 0.06782132, -0.087871395, 0.07887453, -0.056805734, -0.05326786, -0.04434228, 0.0816328, -0.055630207, -0.003745341, 0.06552707, -0.09294161, 0.097747974, 0.08164208, 0.023037234, 0.08640732, 0.06189382, 0.12195917, 0.04218053, 0.024216466, -0.058662392, 0.11071583, -0.06771632, 0.015162066, -0.0019575835, -0.08219577, 0.01784238, -0.050671224, -0.058462337, 0.039838247, -0.080409534, -0.06947926, 0.075417615, -0.079584554, -0.09168324, -0.08180085, -0.09105065, -0.004305866, 0.08800043, 0.06247002, 0.064834684, 0.00069338485, -0.010090895, -0.10754904, -0.0424395, -0.11581496, -0.047122758, -0.0352163, 0.0031750274, 0.08665562, 0.0119414255, 0.032852486, -0.06640542, -0.06576595, -0.02799599, 0.038395777, -0.016343921, -0.07248562, -0.060994215, 0.04884992, 0.07859893, -0.055414297, 0.13620955, 0.039479017, -0.013871685, 0.05923355, 0.03611034},
{0.08309554, 0.093561195, 0.074362524, -0.020751815, -0.04831803, -0.07929424, 0.026730124, 0.08760609, -0.08261971, -0.011393063, 0.0038333219, 0.053898927, -0.040606502, -0.0036598486, 0.03565039, -0.09454945, -0.07010438, 0.078133695, 0.13427179, -0.10723161, -0.039367847, 0.09163178, -0.023509057, -0.052409377, -0.113730416, 0.13780813, 0.0274976, -0.031168912, -0.074812144, -0.09357025, -0.10147055, -0.055013303, 0.06706424, 0.09826011, -0.0842916, -0.03195078, 0.070001006, 0.1277391, -0.008542965, 0.06875661, 0.017214192, -0.0295759, -0.044636358, -0.07065687, 0.07800937, 0.06217448, -0.09547548, -0.118328325, -0.002351649, -0.093081966, 0.059022985, 0.09671426, -0.07948591, -0.08315501, -0.03438794, 0.0018919507, 0.10788013, -0.023437567, -0.063617595, -0.074910305, 0.039724004, 0.055872597, 0.10711869, 0.03617023, 0.0047201663, 0.07674357, 0.04406524, 0.08232951, 0.0075404244, -0.003049696, 0.08665612, -0.036879007, 0.080001324, 0.063185476, 0.0150818825, -0.03452735, 0.0017529955, -0.036817968, -0.0024864948, 0.047858126, 0.043718785, 0.07158096, -0.059037503, 0.070862345, -0.102544986, -0.04788079, -0.005742475, -0.013158908, 0.031946078, -0.066930935, 0.06792398, -0.11283438, -0.07083203, 0.025350299, -0.075884834, -0.02209121, 0.0044157133, 0.018165497, 0.08675128, -0.01807589, 0.032558277, 0.14002408, 0.03480856, 0.023628026, -0.0588786, 0.072556674, 0.0818593, -0.06635016, 0.03824606, -0.075366534, -0.029851198, 0.018846303, 0.052399162, -0.087500386, 0.004387602, 0.017776705, -0.09057684, 0.0023902506, -0.0055259196, 0.09808043, 0.0695414, 0.02574318, 0.089053854, 0.035043076, -0.095372856, 0.029689802, 0.023954598, 0.06855304},
{-0.041729353, 0.12169806, 0.05604931, -0.016221391, -0.028311877, -0.066054165, 0.06923984, -0.10595079, 0.03408985, -0.08503739, -0.016162137, 0.06517472, -0.10797902, -0.07988682, 0.12445212, -0.12297594, 0.02264222, -0.022006577, -0.059840452, -0.016778609, -0.072051965, 0.07548355, -0.04869612, -0.101157054, 0.04286573, -0.05941807, -0.055851035, 0.0824977, -0.010146456, -0.008394411, 0.064026214, -0.06401506, -0.0028224813, 0.055293307, 0.087833375, -0.028151684, -0.03427676, 0.06228155, -0.10422426, -0.019181138, 0.072176464, -0.08999245, 0.07767632, -0.047237523, 0.045690745, -0.007833199, -0.06578346, -0.06292739, -0.03717882, 0.04732223, -0.013846024, -0.0272578, -0.0154004125, -0.09627157, -0.096488774, 0.019074665, 0.0574591, 0.06226182, 0.084864624, 0.09440447, -0.096487224, -0.034052294, 0.05888825, -0.0591522, -0.020885348, 0.0021548867, 0.040864926, -0.08108708, -0.0029371832, 0.044493414, -0.025334634, -0.015165036, -0.011023164, 0.042672273, 0.09423495, 0.091822304, -0.07187243, -0.013493396, 0.05039626, 0.11276706, -0.086698286, 0.06290312, 0.0779676, 0.0935034, 0.055756383, 0.003589688, 0.048295274, -0.0045310925, -0.10984083, -0.058881167, 0.13270366, 0.01573377, 0.09251402, -0.05636727, -0.042742256, -0.0913153, 0.07351415, -0.05410007, 0.1272899, 0.042707384, -0.07977714, 0.11100686, -0.046436943, -0.102159, 0.06427813, 0.09726434, 0.009422735, -0.0059706704, -0.07871802, -0.014567588, 0.07252507, -0.057564624, 0.006992154, -0.091183335, -0.004406899, -0.037568945, -0.07410368, -0.07950418, 0.08279397, -0.07246576, 0.13027504, 0.0884436, 0.09078264, -0.042162646, -0.052102167, -0.068464644, -0.12248664, 0.08770448},
{-0.044248275, 0.120823495, 0.024528868, 0.031299293, -0.107978456, -0.022131845, 0.02579766, -0.08385514, -0.03295441, 0.1055361, -0.06842997, 0.04761468, -0.024944097, 0.10232243, 0.06598662, 0.0010313137, -0.10910677, -0.07337038, 0.117125005, -0.08651172, -0.08682606, 0.07730489, 0.02002439, 0.020284241, -0.06888562, 0.005792712, 0.0849789, 0.06711337, 0.008777002, -0.031198569, -0.10576958, -0.077068016, 0.04840783, -0.020337086, -0.005210702, 0.09063307, 0.011010599, -0.04365765, -0.06869987, 0.004641401, -0.05669923, -0.042037934, 0.043561097, 0.051109325, -0.0506903, 0.06456382, -0.056598272, -0.05730146, -0.053736996, -0.0012243254, 0.09073041, 0.07583268, -0.064281926, -0.0765632, 0.05794169, -0.07325951, -0.0014251049, -0.063063085, 0.087268904, 0.056120075, -0.012299122, 0.0302924, 0.054514755, -0.034975603, -0.10599781, 0.031152569, 0.06295781, 0.017030038, 0.0053033754, -0.012792085, 0.09748598, -0.08803071, 0.08141281, -0.041401573, 0.017906016, -0.059909552, -0.077829584, 0.07201229, 0.06019858, 0.018476399, -0.092080906, -0.0055703893, 0.105657965, -0.049933143, -0.0010293529, -0.09950441, 0.0030050124, 0.04430792, -0.10435142, -0.042899933, 0.13229038, -0.07786079, 0.011091247, -0.057375036, 0.06251028, -0.09403102, -0.03696368, -0.08101127, -0.015979819, -0.08946947, -0.09820015, 0.06976331, 0.0541221, 0.042241126, -0.120880656, 0.086922586, 0.01965069, 0.09304407, -0.07947548, 0.00506112, -0.07294471, 0.045306727, -0.06415326, -0.023536332, 0.022683159, -0.006846086, 0.012877079, -0.038616166, -0.025442714, -0.02902931, 0.022348143, -0.053277478, 0.016795047, 0.1471587, -0.049874146, -0.016554184, 0.038306255, 0.000116241616},
{0.0040255436, 0.016387846, -0.099861674, 0.060218915, 0.033143327, 0.029473677, 0.070241466, -0.05053957, -0.06192084, -0.08707009, 0.08370049, -0.041980416, -0.005904941, -0.024794973, 0.06342381, 0.03308228, 0.017002417, -0.078704655, 0.017353741, -0.08018822, -0.07170069, -0.025866548, 0.065516636, -0.10233501, -0.09308745, -0.055631522, -0.02595037, -0.042046577, 0.08897567, 0.08031615, 0.05162284, -0.053613737, -0.07113484, 0.099206164, 0.0037540118, -0.013358163, 0.023453446, -0.06648665, 0.0068510934, 0.0709997, 0.07018484, 0.04369451, 0.06663981, 0.04163462, -0.11683019, 0.0024864795, -0.061679393, 0.061495695, -0.0019914284, 0.059852634, 0.07718404, 0.100823596, -0.094080746, -0.09682952, -0.08432039, -0.030715398, 0.093354926, 0.09820704, 0.013460495, 0.08299516, 0.032044843, -0.0718989, 0.1136451, 0.032661438, -0.054809302, -0.09591525, -0.03620931, -0.012429304, 0.088200815, 0.029316077, -0.046598773, 0.049009126, 0.08625418, 0.006200487, -0.03886692, -0.039759118, 0.0070771463, 0.05957003, 0.021608207, -0.0666332, 0.05714772, 0.0006357655, -0.039453454, -0.0015627666, 0.036671687, -0.10555153, 0.100114696, -0.044984635, -0.039005406, -0.022528514, 0.1010995, -0.01918651, -0.09563009, 0.07293764, 0.0049875253, -0.06620104, -0.016133636, -0.11713404, -0.07050413, -0.06511361, 0.08576976, -0.04942411, -0.0366011, -0.0066057667, -0.09662881, 0.010519839, -0.086383216, 0.09988944, 0.07731244, 0.035822988, 0.11884606, -0.028372578, 0.014024173, 0.06167015, 0.07198958, -0.0791547, 0.04428223, -0.08119054, -0.008499418, 0.028037474, -0.06574135, -0.07327592, 0.039347414, 0.015010482, 0.003483601, -0.04453961, -0.0085443, -0.06553434},
{0.039600242, 0.10741169, 0.056326054, -0.0013820406, -0.028814567, 0.010980263, 0.029524708, -0.09280444, -0.058025178, -0.104323864, -0.054188464, 0.0575277, 0.04448776, -0.038147755, 0.13095221, 0.024556248, 0.063477084, -0.08022175, -0.0070527885, -0.07617186, -0.030543255, 0.101105526, 0.031718854, -0.026822118, -0.10913069, 0.12500335, -0.10554958, -0.07420135, 0.098519035, -0.04539891, -0.060449194, 0.09241235, -0.05079111, 0.033184286, 0.016153492, 0.06582714, 0.072906725, -0.024051648, -0.029519351, 0.04145979, -0.02858148, 0.054678455, 0.10314526, 0.100484915, -0.033448614, -0.07048302, -0.10652963, 0.0026457573, 0.09072879, 0.067048766, 0.104704544, 0.009329572, 0.10095029, 0.0083417175, 0.0029877722, 0.08046605, -0.029188598, 0.09803891, 0.10909366, -0.08548559, 0.0532837, 0.032172136, 0.066263184, -0.0902056, 0.0129953325, -0.017830104, -0.06599414, 0.06666657, 0.11904149, 0.07924605, -0.030546919, -0.061232287, 0.03922367, -0.036493674, -0.03159373, 0.12449872, 0.07219509, 0.10227889, -0.008635567, -0.070096076, -0.056644224, 0.028273195, 0.06429609, 0.0051398166, -0.12132663, -0.011194707, 0.09436437, 0.13714528, -0.0042753504, 0.061407655, 0.06699611, -0.0490588, -0.064455986, -0.0590729, 0.061325584, -0.026939824, 0.0048505217, -0.10998696, 0.028234897, -0.05584018, 0.10370347, -0.032911964, -0.09176175, 0.081192076, 0.041849576, 0.10008882, -0.07816155, 0.043780047, -0.04023182, -0.09312505, -0.057765763, 0.074694365, -0.08090261, 0.06325742, -0.0706166, 0.028411759, 0.016261926, 0.0039037168, -0.06085462, 0.06274438, 0.13238826, -0.0950762, 0.028452722, 0.120610654, 0.04921174, -0.01832445, -0.06710198, 0.124935195},
{0.025155578, -0.06950449, -0.10942895, -0.12375309, -0.036149435, -0.062798105, 0.067476414, -0.04813679, 0.061624497, 0.0030747429, 0.033661563, 0.05760706, 0.09936641, 0.05596423, 0.13560998, 0.082395844, 0.07760664, 0.062472302, -0.003204005, 0.012903401, -0.10714542, 0.022738842, -0.114617, -0.026438361, -0.08797527, 0.11424985, 0.051661313, -0.07378147, -0.06775499, -0.06811211, 0.08406972, -0.09415188, -0.01870704, 0.07718072, 0.10619297, 0.057781085, 0.052059457, 0.108646065, -0.09407457, 0.103732795, -0.028440062, 0.05695927, 0.10254577, 0.060534835, 0.074599504, -0.10738229, 0.050263718, -0.12990522, -0.00641571, -0.006337567, -0.04804626, -0.09855373, -0.097625725, 0.0026424972, 0.08317232, -0.09534822, 0.11698193, -0.03023772, 0.060408868, 0.069908716, -0.10039374, 0.085846625, 0.07066244, -0.099677585, -0.062786415, 0.074679226, -0.056989618, -0.05532755, 0.027613727, 0.017826455, 0.050334975, 0.031201841, 0.09926854, 0.026728828, -0.029543074, 0.14772822, -0.091686815, -0.006595984, 0.13241963, -0.029302713, 0.08240869, 0.05714476, 0.03995544, 0.031250644, 0.060071602, 0.049964383, -0.009596433, -0.046816908, -0.031867743, -0.015547013, -0.029452316, 0.05261697, 0.058739886, 0.05618411, 0.026146505, -0.0705709, -0.013691895, 0.049338263, -0.024350222, 0.095068604, 0.06203717, -0.011384709, 0.061948635, -0.05526439, -0.10294684, 0.10752508, 0.0065390924, -0.058720328, 0.07487996, -0.040759016, 0.09546754, 0.0036060512, -0.14348647, 0.09190196, 0.029946119, 0.119961314, -0.014889699, -0.023623511, 0.004357643, -0.049683552, 0.04631726, 0.06877017, 0.012949436, 0.118619785, -0.08527304, 0.05801349, -0.044620425, 0.038691744},
{-0.080412924, 0.03974312, 0.027195193, 0.055667024, 0.075469285, 0.0043051615, -0.0011616274, 0.049991384, 0.0639521, 0.030916572, 0.063820496, -0.07621688, -0.056235123, -0.0785501, 0.005802803, -0.05646192, -0.018880961, 0.100277565, 0.019940814, -0.0717665, -0.053104736, 0.10526963, 0.08368947, 0.0073197703, 0.04766136, 0.058080025, -0.026450738, -0.07125675, -0.07596305, -0.004231156, 0.051408906, -0.065241665, -0.0475698, 0.09133188, 0.035907965, -0.046410203, 0.0898894, 0.104709685, 0.07521965, -0.04272866, -0.021168154, 0.079635695, -0.037139807, -0.07609125, -0.119477704, -0.008853583, 0.09067322, 0.032930594, 0.075249135, -0.050648876, -0.04200789, 0.042964563, 0.0025856413, -0.036756907, -0.058282178, -0.123929605, 0.05309323, -0.082060516, -0.048986282, -0.0809607, -0.102507964, -0.09137138, 0.0076020905, -0.004384659, -0.07039198, 0.009108407, -0.030262541, -0.035404615, -0.097069696, 0.01888683, -0.08278843, -0.022355, 0.04420626, 0.113320366, -0.024839697, 0.030177787, 0.03975489, 0.009828173, 0.10906553, -0.062217765, 0.030631104, 0.058645725, 0.054506414, 0.08762694, -0.09447256, 0.02773828, -0.05110032, 0.024465475, -0.12698486, -0.077563755, -0.041685022, -0.104483195, -0.064686276, -0.04487707, -0.08850714, 0.06326522, 0.094096646, -0.01481255, 0.0790881, 0.02315706, -0.020718798, 0.06560223, -0.085556746, -0.06708603, 0.058863975, 0.053855408, -0.045527007, 0.07949494, -0.060344577, -0.059376933, -0.017897664, -0.061638195, -0.12110778, 0.08150395, -0.00033726543, 0.09218046, -0.09115695, 0.03475456, 0.07476612, -0.009456985, -0.049364485, 0.0930012, 0.04764278, 0.012963109, -0.07424266, 0.056716736, 0.0057294876, -0.03271512}};
}
# 13 "src/hls/matmul.hpp" 2


void float_to_fixed(float input[400], ap_fixed<32,24> output[400]);

void hwmm_layer1(ap_fixed<32,24> input[400], const ap_fixed<32,24> weights[400][128], ap_fixed<32,24> output[1][128]);
void hw_act_layer1(ap_fixed<32,24> input[1][128], ap_fixed<32,24> output[1][128]);
void hwmm_layer2(ap_fixed<32,24> input[1][128], const ap_fixed<32,24> weights[128][64], ap_fixed<32,24> output[1][64]);
void hw_act_layer2(ap_fixed<32,24> input[1][64], ap_fixed<32,24> output[1][64]);
void hwmm_layer3(ap_fixed<32,24> input[1][64], const ap_fixed<32,24> weights[64][5], ap_fixed<32,24> output[1][5]);
void hw_act_layer3(ap_fixed<32,24> input[1][5], ap_fixed<32,24> &pred);
__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(float input_img[400]);
# 2 "src/hls/matmul.cpp" 2


void float_to_fixed(float input[400], ap_fixed<32,24> output[400]) {
 VITIS_LOOP_5_1: for(int i = 0; i < 400; i++){
  output[i] = input[i];
 }
}
# 19 "src/hls/matmul.cpp"
void hwmm_layer1(ap_fixed<32,24> input[400], const ap_fixed<32,24> weights[400][128], ap_fixed<32,24> output[1][128]) {

    col: for (int j = 0; j < 128; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 400; ++k){
#pragma HLS UNROLL factor=2
 sum += input[k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hwmm_layer2(ap_fixed<32,24> input[1][128], const ap_fixed<32,24> weights[128][64], ap_fixed<32,24> output[1][64]) {

    col: for (int j = 0; j < 64; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 128; ++k){

        sum += input[0][k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hwmm_layer3(ap_fixed<32,24> input[1][64], const ap_fixed<32,24> weights[64][5], ap_fixed<32,24> output[1][5]) {

    col: for (int j = 0; j < 5; ++j) {

      ap_fixed<32,24> sum = 0;

      prod: for (int k = 0; k < 64; ++k){

        sum += input[0][k] * weights[k][j];
      }
      output[0][j] = sum;
    }

  return;
}




void hw_act_layer1(ap_fixed<32,24> input[1][128], ap_fixed<32,24> output[1][128]){
 loop1: for (int i = 0; i < 128; i++){

  if (input[0][i] < 0.0)
   output[0][i] = 0.0;
  else
   output[0][i] = input[0][i];
 }

 return;
}




void hw_act_layer2(ap_fixed<32,24> input[1][64], ap_fixed<32,24> output[1][64]){
 loop1: for (int i = 0; i < 64; i++){

  if (input[0][i] < 0.0)
   output[0][i] = 0.0;
  else
   output[0][i] = input[0][i];
 }

 return;
}




void hw_act_layer3(ap_fixed<32,24> input[1][5], ap_fixed<32,24> &pred){
 ap_fixed<32,24> max_idx = -1;
 ap_fixed<32,24> max_val = -126;
 loop1: for (int i = 0; i < 5; i++){

  if (input[0][i] > max_val){
   max_idx = (ap_fixed<32,24>)i;
   max_val = input[0][i];
  }
 }
 pred = max_idx;
 return;
}





__attribute__((sdx_kernel("nn_inference", 0))) int nn_inference(float input_img[400]){_ssdm_SpecArrayDimSize(input_img, 400);
#pragma HLS TOP name=nn_inference
# 124 "src/hls/matmul.cpp"






 ap_fixed<32,24> fp_input_img[400] = {1.0};
 float_to_fixed(input_img, fp_input_img);

 ap_fixed<32,24> temp_output[1][128] = {1};
 ap_fixed<32,24> temp_output2[1][64] = {1};
 ap_fixed<32,24> temp_output3[1][5] = {1};
 ap_fixed<32,24> prediction = -1;
 int prediction_int = -1;

 hwmm_layer1(fp_input_img, weights::layer1_weights, temp_output);
 hw_act_layer1(temp_output, temp_output);
 hwmm_layer2(temp_output, weights::layer2_weights, temp_output2);
 hw_act_layer2(temp_output2, temp_output2);
 hwmm_layer3(temp_output2, weights::layer3_weights, temp_output3);
 hw_act_layer3(temp_output3, prediction);

 prediction_int = prediction;

 return prediction_int;

}
