// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=13630,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=9740,HLS_SYN_LUT=10566,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_pp0_stage0 = 56'd2;
parameter    ap_ST_fsm_state6 = 56'd4;
parameter    ap_ST_fsm_state7 = 56'd8;
parameter    ap_ST_fsm_pp1_stage0 = 56'd16;
parameter    ap_ST_fsm_state11 = 56'd32;
parameter    ap_ST_fsm_pp2_stage0 = 56'd64;
parameter    ap_ST_fsm_state16 = 56'd128;
parameter    ap_ST_fsm_state17 = 56'd256;
parameter    ap_ST_fsm_state18 = 56'd512;
parameter    ap_ST_fsm_state19 = 56'd1024;
parameter    ap_ST_fsm_state20 = 56'd2048;
parameter    ap_ST_fsm_state21 = 56'd4096;
parameter    ap_ST_fsm_state22 = 56'd8192;
parameter    ap_ST_fsm_state23 = 56'd16384;
parameter    ap_ST_fsm_state24 = 56'd32768;
parameter    ap_ST_fsm_state25 = 56'd65536;
parameter    ap_ST_fsm_state26 = 56'd131072;
parameter    ap_ST_fsm_state27 = 56'd262144;
parameter    ap_ST_fsm_state28 = 56'd524288;
parameter    ap_ST_fsm_state29 = 56'd1048576;
parameter    ap_ST_fsm_state30 = 56'd2097152;
parameter    ap_ST_fsm_state31 = 56'd4194304;
parameter    ap_ST_fsm_state32 = 56'd8388608;
parameter    ap_ST_fsm_state33 = 56'd16777216;
parameter    ap_ST_fsm_state34 = 56'd33554432;
parameter    ap_ST_fsm_state35 = 56'd67108864;
parameter    ap_ST_fsm_state36 = 56'd134217728;
parameter    ap_ST_fsm_state37 = 56'd268435456;
parameter    ap_ST_fsm_state38 = 56'd536870912;
parameter    ap_ST_fsm_state39 = 56'd1073741824;
parameter    ap_ST_fsm_state40 = 56'd2147483648;
parameter    ap_ST_fsm_state41 = 56'd4294967296;
parameter    ap_ST_fsm_state42 = 56'd8589934592;
parameter    ap_ST_fsm_state43 = 56'd17179869184;
parameter    ap_ST_fsm_state44 = 56'd34359738368;
parameter    ap_ST_fsm_state45 = 56'd68719476736;
parameter    ap_ST_fsm_state46 = 56'd137438953472;
parameter    ap_ST_fsm_state47 = 56'd274877906944;
parameter    ap_ST_fsm_state48 = 56'd549755813888;
parameter    ap_ST_fsm_pp3_stage0 = 56'd1099511627776;
parameter    ap_ST_fsm_state64 = 56'd2199023255552;
parameter    ap_ST_fsm_pp4_stage0 = 56'd4398046511104;
parameter    ap_ST_fsm_state69 = 56'd8796093022208;
parameter    ap_ST_fsm_state70 = 56'd17592186044416;
parameter    ap_ST_fsm_state71 = 56'd35184372088832;
parameter    ap_ST_fsm_state72 = 56'd70368744177664;
parameter    ap_ST_fsm_state73 = 56'd140737488355328;
parameter    ap_ST_fsm_state74 = 56'd281474976710656;
parameter    ap_ST_fsm_state75 = 56'd562949953421312;
parameter    ap_ST_fsm_state76 = 56'd1125899906842624;
parameter    ap_ST_fsm_state77 = 56'd2251799813685248;
parameter    ap_ST_fsm_pp5_stage0 = 56'd4503599627370496;
parameter    ap_ST_fsm_state82 = 56'd9007199254740992;
parameter    ap_ST_fsm_state83 = 56'd18014398509481984;
parameter    ap_ST_fsm_state84 = 56'd36028797018963968;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;

(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire   [6:0] weights_layer1_weights_V_q0;
wire   [14:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire   [6:0] weights_layer1_weights_V_q1;
wire   [3:0] layer2_weights_V_0_address0;
reg    layer2_weights_V_0_ce0;
wire  signed [7:0] layer2_weights_V_0_q0;
wire   [3:0] layer2_weights_V_1_address0;
reg    layer2_weights_V_1_ce0;
wire  signed [7:0] layer2_weights_V_1_q0;
wire   [3:0] layer2_weights_V_2_address0;
reg    layer2_weights_V_2_ce0;
wire  signed [6:0] layer2_weights_V_2_q0;
wire   [3:0] layer2_weights_V_3_address0;
reg    layer2_weights_V_3_ce0;
wire  signed [7:0] layer2_weights_V_3_q0;
wire   [3:0] layer2_weights_V_4_address0;
reg    layer2_weights_V_4_ce0;
wire  signed [6:0] layer2_weights_V_4_q0;
wire   [3:0] layer2_weights_V_5_address0;
reg    layer2_weights_V_5_ce0;
wire  signed [7:0] layer2_weights_V_5_q0;
wire   [3:0] layer2_weights_V_6_address0;
reg    layer2_weights_V_6_ce0;
wire  signed [7:0] layer2_weights_V_6_q0;
wire   [3:0] layer2_weights_V_7_address0;
reg    layer2_weights_V_7_ce0;
wire  signed [7:0] layer2_weights_V_7_q0;
wire   [3:0] layer2_weights_V_8_address0;
reg    layer2_weights_V_8_ce0;
wire  signed [7:0] layer2_weights_V_8_q0;
wire   [3:0] layer2_weights_V_9_address0;
reg    layer2_weights_V_9_ce0;
wire  signed [7:0] layer2_weights_V_9_q0;
wire   [3:0] layer2_weights_V_10_address0;
reg    layer2_weights_V_10_ce0;
wire  signed [7:0] layer2_weights_V_10_q0;
wire   [3:0] layer2_weights_V_11_address0;
reg    layer2_weights_V_11_ce0;
wire  signed [7:0] layer2_weights_V_11_q0;
wire   [3:0] layer2_weights_V_12_address0;
reg    layer2_weights_V_12_ce0;
wire  signed [7:0] layer2_weights_V_12_q0;
wire   [3:0] layer2_weights_V_13_address0;
reg    layer2_weights_V_13_ce0;
wire  signed [7:0] layer2_weights_V_13_q0;
wire   [3:0] layer2_weights_V_14_address0;
reg    layer2_weights_V_14_ce0;
wire  signed [7:0] layer2_weights_V_14_q0;
wire   [3:0] layer2_weights_V_15_address0;
reg    layer2_weights_V_15_ce0;
wire  signed [7:0] layer2_weights_V_15_q0;
wire   [3:0] layer2_weights_V_16_address0;
reg    layer2_weights_V_16_ce0;
wire  signed [7:0] layer2_weights_V_16_q0;
wire   [3:0] layer2_weights_V_17_address0;
reg    layer2_weights_V_17_ce0;
wire  signed [7:0] layer2_weights_V_17_q0;
wire   [3:0] layer2_weights_V_18_address0;
reg    layer2_weights_V_18_ce0;
wire  signed [7:0] layer2_weights_V_18_q0;
wire   [3:0] layer2_weights_V_19_address0;
reg    layer2_weights_V_19_ce0;
wire  signed [6:0] layer2_weights_V_19_q0;
wire   [3:0] layer2_weights_V_20_address0;
reg    layer2_weights_V_20_ce0;
wire  signed [7:0] layer2_weights_V_20_q0;
wire   [3:0] layer2_weights_V_21_address0;
reg    layer2_weights_V_21_ce0;
wire  signed [7:0] layer2_weights_V_21_q0;
wire   [3:0] layer2_weights_V_22_address0;
reg    layer2_weights_V_22_ce0;
wire  signed [7:0] layer2_weights_V_22_q0;
wire   [3:0] layer2_weights_V_23_address0;
reg    layer2_weights_V_23_ce0;
wire  signed [7:0] layer2_weights_V_23_q0;
wire   [3:0] layer2_weights_V_24_address0;
reg    layer2_weights_V_24_ce0;
wire  signed [7:0] layer2_weights_V_24_q0;
wire   [3:0] layer2_weights_V_25_address0;
reg    layer2_weights_V_25_ce0;
wire  signed [7:0] layer2_weights_V_25_q0;
wire   [3:0] layer2_weights_V_26_address0;
reg    layer2_weights_V_26_ce0;
wire  signed [7:0] layer2_weights_V_26_q0;
wire   [3:0] layer2_weights_V_27_address0;
reg    layer2_weights_V_27_ce0;
wire  signed [7:0] layer2_weights_V_27_q0;
wire   [3:0] layer2_weights_V_28_address0;
reg    layer2_weights_V_28_ce0;
wire  signed [7:0] layer2_weights_V_28_q0;
wire   [3:0] layer2_weights_V_29_address0;
reg    layer2_weights_V_29_ce0;
wire  signed [7:0] layer2_weights_V_29_q0;
wire   [3:0] layer2_weights_V_30_address0;
reg    layer2_weights_V_30_ce0;
wire  signed [7:0] layer2_weights_V_30_q0;
wire   [3:0] layer2_weights_V_31_address0;
reg    layer2_weights_V_31_ce0;
wire  signed [6:0] layer2_weights_V_31_q0;
wire   [3:0] layer2_weights_V_32_address0;
reg    layer2_weights_V_32_ce0;
wire  signed [7:0] layer2_weights_V_32_q0;
wire   [3:0] layer2_weights_V_33_address0;
reg    layer2_weights_V_33_ce0;
wire  signed [7:0] layer2_weights_V_33_q0;
wire   [3:0] layer2_weights_V_34_address0;
reg    layer2_weights_V_34_ce0;
wire  signed [7:0] layer2_weights_V_34_q0;
wire   [3:0] layer2_weights_V_35_address0;
reg    layer2_weights_V_35_ce0;
wire  signed [7:0] layer2_weights_V_35_q0;
wire   [3:0] layer2_weights_V_36_address0;
reg    layer2_weights_V_36_ce0;
wire  signed [7:0] layer2_weights_V_36_q0;
wire   [3:0] layer2_weights_V_37_address0;
reg    layer2_weights_V_37_ce0;
wire  signed [7:0] layer2_weights_V_37_q0;
wire   [3:0] layer2_weights_V_38_address0;
reg    layer2_weights_V_38_ce0;
wire  signed [7:0] layer2_weights_V_38_q0;
wire   [3:0] layer2_weights_V_39_address0;
reg    layer2_weights_V_39_ce0;
wire  signed [7:0] layer2_weights_V_39_q0;
wire   [3:0] layer2_weights_V_40_address0;
reg    layer2_weights_V_40_ce0;
wire  signed [7:0] layer2_weights_V_40_q0;
wire   [3:0] layer2_weights_V_41_address0;
reg    layer2_weights_V_41_ce0;
wire  signed [6:0] layer2_weights_V_41_q0;
wire   [3:0] layer2_weights_V_42_address0;
reg    layer2_weights_V_42_ce0;
wire  signed [7:0] layer2_weights_V_42_q0;
wire   [3:0] layer2_weights_V_43_address0;
reg    layer2_weights_V_43_ce0;
wire  signed [7:0] layer2_weights_V_43_q0;
wire   [3:0] layer2_weights_V_44_address0;
reg    layer2_weights_V_44_ce0;
wire  signed [7:0] layer2_weights_V_44_q0;
wire   [3:0] layer2_weights_V_45_address0;
reg    layer2_weights_V_45_ce0;
wire  signed [7:0] layer2_weights_V_45_q0;
wire   [3:0] layer2_weights_V_46_address0;
reg    layer2_weights_V_46_ce0;
wire  signed [7:0] layer2_weights_V_46_q0;
wire   [3:0] layer2_weights_V_47_address0;
reg    layer2_weights_V_47_ce0;
wire  signed [7:0] layer2_weights_V_47_q0;
wire   [3:0] layer2_weights_V_48_address0;
reg    layer2_weights_V_48_ce0;
wire  signed [7:0] layer2_weights_V_48_q0;
wire   [3:0] layer2_weights_V_49_address0;
reg    layer2_weights_V_49_ce0;
wire  signed [7:0] layer2_weights_V_49_q0;
wire   [3:0] layer2_weights_V_50_address0;
reg    layer2_weights_V_50_ce0;
wire  signed [7:0] layer2_weights_V_50_q0;
wire   [3:0] layer2_weights_V_51_address0;
reg    layer2_weights_V_51_ce0;
wire  signed [7:0] layer2_weights_V_51_q0;
wire   [3:0] layer2_weights_V_52_address0;
reg    layer2_weights_V_52_ce0;
wire  signed [7:0] layer2_weights_V_52_q0;
wire   [3:0] layer2_weights_V_53_address0;
reg    layer2_weights_V_53_ce0;
wire  signed [7:0] layer2_weights_V_53_q0;
wire   [3:0] layer2_weights_V_54_address0;
reg    layer2_weights_V_54_ce0;
wire  signed [7:0] layer2_weights_V_54_q0;
wire   [3:0] layer2_weights_V_55_address0;
reg    layer2_weights_V_55_ce0;
wire  signed [7:0] layer2_weights_V_55_q0;
wire   [3:0] layer2_weights_V_56_address0;
reg    layer2_weights_V_56_ce0;
wire  signed [7:0] layer2_weights_V_56_q0;
wire   [3:0] layer2_weights_V_57_address0;
reg    layer2_weights_V_57_ce0;
wire  signed [7:0] layer2_weights_V_57_q0;
wire   [3:0] layer2_weights_V_58_address0;
reg    layer2_weights_V_58_ce0;
wire  signed [6:0] layer2_weights_V_58_q0;
wire   [3:0] layer2_weights_V_59_address0;
reg    layer2_weights_V_59_ce0;
wire  signed [7:0] layer2_weights_V_59_q0;
wire   [3:0] layer2_weights_V_60_address0;
reg    layer2_weights_V_60_ce0;
wire  signed [7:0] layer2_weights_V_60_q0;
wire   [3:0] layer2_weights_V_61_address0;
reg    layer2_weights_V_61_ce0;
wire  signed [7:0] layer2_weights_V_61_q0;
wire   [3:0] layer2_weights_V_62_address0;
reg    layer2_weights_V_62_ce0;
wire   [7:0] layer2_weights_V_62_q0;
wire   [3:0] layer2_weights_V_63_address0;
reg    layer2_weights_V_63_ce0;
wire  signed [7:0] layer2_weights_V_63_q0;
reg   [8:0] i_reg_2112;
reg   [8:0] k_reg_2135;
reg   [31:0] sum_V_2_reg_2146;
reg   [6:0] i_1_reg_2159;
reg   [4:0] j_1_reg_2170;
reg   [4:0] i_2_reg_2181;
reg   [31:0] temp_output3_V_0_1_0305_reg_2192;
reg   [31:0] temp_output3_V_0_0_0_reg_2204;
reg   [1:0] j_2_reg_2216;
wire   [8:0] add_ln5_fu_2269_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_2275_p2;
reg   [0:0] icmp_ln5_reg_6497;
reg   [0:0] icmp_ln5_reg_6497_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_6497_pp0_iter2_reg;
wire   [63:0] i_cast_fu_2281_p1;
reg   [63:0] i_cast_reg_6501;
reg   [63:0] i_cast_reg_6501_pp0_iter1_reg;
reg   [63:0] i_cast_reg_6501_pp0_iter2_reg;
reg   [31:0] input_img_load_reg_6511;
reg   [31:0] input_img_load_reg_6511_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_6521;
wire   [51:0] trunc_ln565_fu_2321_p1;
reg   [51:0] trunc_ln565_reg_6526;
wire   [0:0] icmp_ln571_fu_2325_p2;
reg   [0:0] icmp_ln571_reg_6531;
wire   [11:0] F2_fu_2331_p2;
reg   [11:0] F2_reg_6539;
wire   [5:0] temp_output_0_V_addr_reg_6547;
wire    ap_CS_fsm_state6;
wire   [3:0] temp_output2_0_V_addr_reg_6552;
wire   [6:0] add_ln21_fu_2557_p2;
reg   [6:0] add_ln21_reg_6557;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_2563_p2;
wire   [63:0] zext_ln21_fu_2569_p1;
reg   [63:0] zext_ln21_reg_6566;
wire   [14:0] zext_ln21_1_fu_2573_p1;
reg   [14:0] zext_ln21_1_reg_6571;
wire   [0:0] icmp_ln25_fu_2577_p2;
reg   [0:0] icmp_ln25_reg_6576;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_6576_pp1_iter1_reg;
wire   [8:0] add_ln25_fu_2583_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] fp_input_img_V_q1;
reg  signed [31:0] r_V_reg_6605;
reg    ap_enable_reg_pp1_iter1;
reg  signed [6:0] weights_layer1_weights_V_load_reg_6610;
wire   [31:0] fp_input_img_V_q0;
reg  signed [31:0] r_V_2_reg_6615;
reg  signed [6:0] weights_layer1_weights_V_load_1_reg_6620;
reg    ap_enable_reg_pp1_iter2;
wire   [6:0] add_ln77_fu_2726_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln77_fu_2732_p2;
reg   [5:0] temp_output_0_V_addr_1_reg_6639;
reg   [5:0] temp_output_0_V_addr_1_reg_6639_pp2_iter1_reg;
reg   [5:0] temp_output_0_V_addr_1_reg_6639_pp2_iter2_reg;
wire   [0:0] icmp_ln885_fu_2743_p2;
reg   [0:0] icmp_ln885_reg_6645;
reg   [0:0] icmp_ln885_reg_6645_pp2_iter2_reg;
wire   [0:0] p_Result_10_fu_2749_p3;
reg   [0:0] p_Result_10_reg_6649;
wire   [31:0] tmp_V_4_fu_2763_p3;
reg   [31:0] tmp_V_4_reg_6654;
wire   [0:0] icmp_ln908_fu_2883_p2;
reg   [0:0] icmp_ln908_reg_6659;
wire   [31:0] add_ln908_fu_2897_p2;
reg   [31:0] add_ln908_reg_6664;
wire   [31:0] sub_ln909_fu_2909_p2;
reg   [31:0] sub_ln909_reg_6669;
wire   [0:0] select_ln908_fu_2915_p3;
reg   [0:0] select_ln908_reg_6674;
wire   [10:0] trunc_ln893_fu_2923_p1;
reg   [10:0] trunc_ln893_reg_6679;
wire   [63:0] bitcast_ln734_fu_3024_p1;
wire   [0:0] icmp_ln1506_fu_3039_p2;
reg   [0:0] icmp_ln1506_reg_6689;
wire   [0:0] icmp_ln1506_1_fu_3045_p2;
reg   [0:0] icmp_ln1506_1_reg_6694;
wire    ap_CS_fsm_state16;
wire   [31:0] temp_output_0_V_q0;
reg   [31:0] temp_output_0_V_load_reg_6707;
wire    ap_CS_fsm_state17;
wire   [31:0] temp_output_0_V_q1;
reg   [31:0] temp_output_0_V_load_1_reg_6712;
reg   [31:0] temp_output_0_V_load_2_reg_6727;
wire    ap_CS_fsm_state18;
reg   [31:0] temp_output_0_V_load_3_reg_6732;
reg   [31:0] temp_output_0_V_load_4_reg_6747;
wire    ap_CS_fsm_state19;
reg   [31:0] temp_output_0_V_load_5_reg_6752;
reg   [31:0] temp_output_0_V_load_6_reg_6767;
wire    ap_CS_fsm_state20;
reg   [31:0] temp_output_0_V_load_7_reg_6772;
reg   [31:0] temp_output_0_V_load_8_reg_6787;
wire    ap_CS_fsm_state21;
reg   [31:0] temp_output_0_V_load_9_reg_6792;
reg   [31:0] temp_output_0_V_load_10_reg_6807;
wire    ap_CS_fsm_state22;
reg   [31:0] temp_output_0_V_load_11_reg_6812;
reg   [31:0] temp_output_0_V_load_12_reg_6827;
wire    ap_CS_fsm_state23;
reg   [31:0] temp_output_0_V_load_13_reg_6832;
reg   [31:0] temp_output_0_V_load_14_reg_6847;
wire    ap_CS_fsm_state24;
reg   [31:0] temp_output_0_V_load_15_reg_6852;
reg   [31:0] temp_output_0_V_load_16_reg_6867;
wire    ap_CS_fsm_state25;
reg   [31:0] temp_output_0_V_load_17_reg_6872;
reg   [31:0] temp_output_0_V_load_18_reg_6887;
wire    ap_CS_fsm_state26;
reg   [31:0] temp_output_0_V_load_19_reg_6892;
reg   [31:0] temp_output_0_V_load_20_reg_6907;
wire    ap_CS_fsm_state27;
reg   [31:0] temp_output_0_V_load_21_reg_6912;
reg   [31:0] temp_output_0_V_load_22_reg_6927;
wire    ap_CS_fsm_state28;
reg   [31:0] temp_output_0_V_load_23_reg_6932;
reg   [31:0] temp_output_0_V_load_24_reg_6947;
wire    ap_CS_fsm_state29;
reg   [31:0] temp_output_0_V_load_25_reg_6952;
reg   [31:0] temp_output_0_V_load_26_reg_6967;
wire    ap_CS_fsm_state30;
reg   [31:0] temp_output_0_V_load_27_reg_6972;
reg   [31:0] temp_output_0_V_load_28_reg_6987;
wire    ap_CS_fsm_state31;
reg   [31:0] temp_output_0_V_load_29_reg_6992;
reg   [31:0] temp_output_0_V_load_30_reg_7007;
wire    ap_CS_fsm_state32;
reg   [31:0] temp_output_0_V_load_31_reg_7012;
reg   [31:0] temp_output_0_V_load_32_reg_7027;
wire    ap_CS_fsm_state33;
reg   [31:0] temp_output_0_V_load_33_reg_7032;
reg   [31:0] temp_output_0_V_load_34_reg_7047;
wire    ap_CS_fsm_state34;
reg   [31:0] temp_output_0_V_load_35_reg_7052;
reg   [31:0] temp_output_0_V_load_36_reg_7067;
wire    ap_CS_fsm_state35;
reg   [31:0] temp_output_0_V_load_37_reg_7072;
reg   [31:0] temp_output_0_V_load_38_reg_7087;
wire    ap_CS_fsm_state36;
reg   [31:0] temp_output_0_V_load_39_reg_7092;
reg   [31:0] temp_output_0_V_load_40_reg_7107;
wire    ap_CS_fsm_state37;
reg   [31:0] temp_output_0_V_load_41_reg_7112;
reg   [31:0] temp_output_0_V_load_42_reg_7127;
wire    ap_CS_fsm_state38;
reg   [31:0] temp_output_0_V_load_43_reg_7132;
reg   [31:0] temp_output_0_V_load_44_reg_7147;
wire    ap_CS_fsm_state39;
reg   [31:0] temp_output_0_V_load_45_reg_7152;
reg   [31:0] temp_output_0_V_load_46_reg_7167;
wire    ap_CS_fsm_state40;
reg   [31:0] temp_output_0_V_load_47_reg_7172;
reg   [31:0] temp_output_0_V_load_48_reg_7187;
wire    ap_CS_fsm_state41;
reg   [31:0] temp_output_0_V_load_49_reg_7192;
reg   [31:0] temp_output_0_V_load_50_reg_7207;
wire    ap_CS_fsm_state42;
reg   [31:0] temp_output_0_V_load_51_reg_7212;
reg   [31:0] temp_output_0_V_load_52_reg_7227;
wire    ap_CS_fsm_state43;
reg   [31:0] temp_output_0_V_load_53_reg_7232;
reg   [31:0] temp_output_0_V_load_54_reg_7247;
wire    ap_CS_fsm_state44;
reg   [31:0] temp_output_0_V_load_55_reg_7252;
reg   [31:0] temp_output_0_V_load_56_reg_7267;
wire    ap_CS_fsm_state45;
reg   [31:0] temp_output_0_V_load_57_reg_7272;
reg   [31:0] temp_output_0_V_load_58_reg_7287;
wire    ap_CS_fsm_state46;
reg   [31:0] temp_output_0_V_load_59_reg_7292;
reg   [31:0] temp_output_0_V_load_60_reg_7307;
wire    ap_CS_fsm_state47;
reg   [31:0] temp_output_0_V_load_61_reg_7312;
wire  signed [39:0] sext_ln1116_fu_3061_p1;
reg  signed [39:0] sext_ln1116_reg_7327;
wire    ap_CS_fsm_state48;
wire  signed [39:0] sext_ln1116_1_fu_3064_p1;
reg  signed [39:0] sext_ln1116_1_reg_7332;
wire  signed [38:0] sext_ln1116_2_fu_3067_p1;
reg  signed [38:0] sext_ln1116_2_reg_7337;
wire  signed [39:0] sext_ln1116_3_fu_3070_p1;
reg  signed [39:0] sext_ln1116_3_reg_7342;
wire  signed [38:0] sext_ln1116_4_fu_3073_p1;
reg  signed [38:0] sext_ln1116_4_reg_7347;
wire  signed [39:0] sext_ln1116_5_fu_3076_p1;
reg  signed [39:0] sext_ln1116_5_reg_7352;
wire  signed [39:0] sext_ln1116_6_fu_3079_p1;
reg  signed [39:0] sext_ln1116_6_reg_7357;
wire  signed [39:0] sext_ln1116_7_fu_3082_p1;
reg  signed [39:0] sext_ln1116_7_reg_7362;
wire  signed [39:0] sext_ln1116_8_fu_3085_p1;
reg  signed [39:0] sext_ln1116_8_reg_7367;
wire  signed [39:0] sext_ln1116_9_fu_3088_p1;
reg  signed [39:0] sext_ln1116_9_reg_7372;
wire  signed [39:0] sext_ln1116_10_fu_3091_p1;
reg  signed [39:0] sext_ln1116_10_reg_7377;
wire  signed [39:0] sext_ln1116_11_fu_3094_p1;
reg  signed [39:0] sext_ln1116_11_reg_7382;
wire  signed [39:0] sext_ln1116_12_fu_3097_p1;
reg  signed [39:0] sext_ln1116_12_reg_7387;
wire  signed [39:0] sext_ln1116_13_fu_3100_p1;
reg  signed [39:0] sext_ln1116_13_reg_7392;
wire  signed [39:0] sext_ln1116_14_fu_3103_p1;
reg  signed [39:0] sext_ln1116_14_reg_7397;
wire  signed [39:0] sext_ln1116_15_fu_3106_p1;
reg  signed [39:0] sext_ln1116_15_reg_7402;
wire  signed [39:0] sext_ln1116_16_fu_3109_p1;
reg  signed [39:0] sext_ln1116_16_reg_7407;
wire  signed [39:0] sext_ln1116_17_fu_3112_p1;
reg  signed [39:0] sext_ln1116_17_reg_7412;
wire  signed [39:0] sext_ln1116_18_fu_3115_p1;
reg  signed [39:0] sext_ln1116_18_reg_7417;
wire  signed [38:0] sext_ln1116_19_fu_3118_p1;
reg  signed [38:0] sext_ln1116_19_reg_7422;
wire  signed [39:0] sext_ln1116_20_fu_3121_p1;
reg  signed [39:0] sext_ln1116_20_reg_7427;
wire  signed [39:0] sext_ln1116_21_fu_3124_p1;
reg  signed [39:0] sext_ln1116_21_reg_7432;
wire  signed [39:0] sext_ln1116_22_fu_3127_p1;
reg  signed [39:0] sext_ln1116_22_reg_7437;
wire  signed [39:0] sext_ln1116_23_fu_3130_p1;
reg  signed [39:0] sext_ln1116_23_reg_7442;
wire  signed [39:0] sext_ln1116_24_fu_3133_p1;
reg  signed [39:0] sext_ln1116_24_reg_7447;
wire  signed [39:0] sext_ln1116_25_fu_3136_p1;
reg  signed [39:0] sext_ln1116_25_reg_7452;
wire  signed [39:0] sext_ln1116_26_fu_3139_p1;
reg  signed [39:0] sext_ln1116_26_reg_7457;
wire  signed [39:0] sext_ln1116_27_fu_3142_p1;
reg  signed [39:0] sext_ln1116_27_reg_7462;
wire  signed [39:0] sext_ln1116_28_fu_3145_p1;
reg  signed [39:0] sext_ln1116_28_reg_7467;
wire  signed [39:0] sext_ln1116_29_fu_3148_p1;
reg  signed [39:0] sext_ln1116_29_reg_7472;
wire  signed [39:0] sext_ln1116_30_fu_3151_p1;
reg  signed [39:0] sext_ln1116_30_reg_7477;
wire  signed [38:0] sext_ln1116_31_fu_3154_p1;
reg  signed [38:0] sext_ln1116_31_reg_7482;
wire  signed [39:0] sext_ln1116_32_fu_3157_p1;
reg  signed [39:0] sext_ln1116_32_reg_7487;
wire  signed [39:0] sext_ln1116_33_fu_3160_p1;
reg  signed [39:0] sext_ln1116_33_reg_7492;
wire  signed [39:0] sext_ln1116_34_fu_3163_p1;
reg  signed [39:0] sext_ln1116_34_reg_7497;
wire  signed [39:0] sext_ln1116_35_fu_3166_p1;
reg  signed [39:0] sext_ln1116_35_reg_7502;
wire  signed [39:0] sext_ln1116_36_fu_3169_p1;
reg  signed [39:0] sext_ln1116_36_reg_7507;
wire  signed [39:0] sext_ln1116_37_fu_3172_p1;
reg  signed [39:0] sext_ln1116_37_reg_7512;
wire  signed [39:0] sext_ln1116_38_fu_3175_p1;
reg  signed [39:0] sext_ln1116_38_reg_7517;
wire  signed [39:0] sext_ln1116_39_fu_3178_p1;
reg  signed [39:0] sext_ln1116_39_reg_7522;
wire  signed [39:0] sext_ln1116_40_fu_3181_p1;
reg  signed [39:0] sext_ln1116_40_reg_7527;
wire  signed [38:0] sext_ln1116_41_fu_3184_p1;
reg  signed [38:0] sext_ln1116_41_reg_7532;
wire  signed [39:0] sext_ln1116_42_fu_3187_p1;
reg  signed [39:0] sext_ln1116_42_reg_7537;
wire  signed [39:0] sext_ln1116_43_fu_3190_p1;
reg  signed [39:0] sext_ln1116_43_reg_7542;
wire  signed [39:0] sext_ln1116_44_fu_3193_p1;
reg  signed [39:0] sext_ln1116_44_reg_7547;
wire  signed [39:0] sext_ln1116_45_fu_3196_p1;
reg  signed [39:0] sext_ln1116_45_reg_7552;
wire  signed [39:0] sext_ln1116_46_fu_3199_p1;
reg  signed [39:0] sext_ln1116_46_reg_7557;
wire  signed [39:0] sext_ln1116_47_fu_3202_p1;
reg  signed [39:0] sext_ln1116_47_reg_7562;
wire  signed [39:0] sext_ln1116_48_fu_3205_p1;
reg  signed [39:0] sext_ln1116_48_reg_7567;
wire  signed [39:0] sext_ln1116_49_fu_3208_p1;
reg  signed [39:0] sext_ln1116_49_reg_7572;
wire  signed [39:0] sext_ln1116_50_fu_3211_p1;
reg  signed [39:0] sext_ln1116_50_reg_7577;
wire  signed [39:0] sext_ln1116_51_fu_3214_p1;
reg  signed [39:0] sext_ln1116_51_reg_7582;
wire  signed [39:0] sext_ln1116_52_fu_3217_p1;
reg  signed [39:0] sext_ln1116_52_reg_7587;
wire  signed [39:0] sext_ln1116_53_fu_3220_p1;
reg  signed [39:0] sext_ln1116_53_reg_7592;
wire  signed [39:0] sext_ln1116_54_fu_3223_p1;
reg  signed [39:0] sext_ln1116_54_reg_7597;
wire  signed [39:0] sext_ln1116_55_fu_3226_p1;
reg  signed [39:0] sext_ln1116_55_reg_7602;
wire  signed [39:0] sext_ln1116_56_fu_3229_p1;
reg  signed [39:0] sext_ln1116_56_reg_7607;
wire  signed [39:0] sext_ln1116_57_fu_3232_p1;
reg  signed [39:0] sext_ln1116_57_reg_7612;
wire  signed [38:0] sext_ln1116_58_fu_3235_p1;
reg  signed [38:0] sext_ln1116_58_reg_7617;
wire  signed [39:0] sext_ln1116_59_fu_3238_p1;
reg  signed [39:0] sext_ln1116_59_reg_7622;
wire  signed [39:0] sext_ln1116_60_fu_3241_p1;
reg  signed [39:0] sext_ln1116_60_reg_7627;
wire  signed [39:0] sext_ln1116_61_fu_3244_p1;
reg  signed [39:0] sext_ln1116_61_reg_7632;
wire  signed [39:0] sext_ln1116_62_fu_3247_p1;
reg  signed [39:0] sext_ln1116_62_reg_7637;
wire  signed [39:0] temp_output_0_V_load_63_cast_fu_3251_p1;
reg  signed [39:0] temp_output_0_V_load_63_cast_reg_7642;
wire   [4:0] add_ln40_fu_3255_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state49_pp3_stage0_iter0;
wire    ap_block_state50_pp3_stage0_iter1;
wire    ap_block_state51_pp3_stage0_iter2;
wire    ap_block_state52_pp3_stage0_iter3;
wire    ap_block_state53_pp3_stage0_iter4;
wire    ap_block_state54_pp3_stage0_iter5;
wire    ap_block_state55_pp3_stage0_iter6;
wire    ap_block_state56_pp3_stage0_iter7;
wire    ap_block_state57_pp3_stage0_iter8;
wire    ap_block_state58_pp3_stage0_iter9;
wire    ap_block_state59_pp3_stage0_iter10;
wire    ap_block_state60_pp3_stage0_iter11;
wire    ap_block_state61_pp3_stage0_iter12;
wire    ap_block_state62_pp3_stage0_iter13;
wire    ap_block_state63_pp3_stage0_iter14;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln40_fu_3261_p2;
reg   [0:0] icmp_ln40_reg_7652;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter1_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter2_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter3_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter4_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter5_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter6_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter7_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter8_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter9_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter10_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter11_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter12_reg;
reg   [0:0] icmp_ln40_reg_7652_pp3_iter13_reg;
wire   [63:0] j_1_cast_fu_3267_p1;
reg   [63:0] j_1_cast_reg_7656;
reg   [63:0] j_1_cast_reg_7656_pp3_iter1_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter2_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter3_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter4_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter5_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter6_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter7_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter8_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter9_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter10_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter11_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter12_reg;
reg   [63:0] j_1_cast_reg_7656_pp3_iter13_reg;
wire   [39:0] mul_ln703_1_fu_3360_p2;
reg   [39:0] mul_ln703_1_reg_7749;
reg   [31:0] tmp_10_reg_7754;
wire   [38:0] mul_ln1118_4_fu_3379_p2;
reg   [38:0] mul_ln1118_4_reg_7759;
wire   [39:0] mul_ln703_2_fu_3388_p2;
reg   [39:0] mul_ln703_2_reg_7764;
wire   [39:0] mul_ln703_5_fu_3525_p2;
reg   [39:0] mul_ln703_5_reg_7794;
reg   [31:0] tmp_15_reg_7799;
wire   [39:0] mul_ln703_6_fu_3544_p2;
reg   [39:0] mul_ln703_6_reg_7804;
wire   [39:0] mul_ln703_7_fu_3553_p2;
reg   [39:0] mul_ln703_7_reg_7809;
wire   [39:0] mul_ln703_10_fu_3686_p2;
reg   [39:0] mul_ln703_10_reg_7839;
reg   [31:0] tmp_20_reg_7844;
wire   [39:0] mul_ln703_11_fu_3705_p2;
reg   [39:0] mul_ln703_11_reg_7849;
wire   [39:0] mul_ln703_12_fu_3714_p2;
reg   [39:0] mul_ln703_12_reg_7854;
wire   [39:0] mul_ln703_15_fu_3847_p2;
reg   [39:0] mul_ln703_15_reg_7884;
reg   [31:0] tmp_25_reg_7889;
wire   [38:0] mul_ln1118_5_fu_3866_p2;
reg   [38:0] mul_ln1118_5_reg_7894;
wire   [39:0] mul_ln703_16_fu_3875_p2;
reg   [39:0] mul_ln703_16_reg_7899;
wire   [39:0] mul_ln703_19_fu_4012_p2;
reg   [39:0] mul_ln703_19_reg_7929;
reg   [31:0] tmp_30_reg_7934;
wire   [39:0] mul_ln703_20_fu_4031_p2;
reg   [39:0] mul_ln703_20_reg_7939;
wire   [39:0] mul_ln703_21_fu_4040_p2;
reg   [39:0] mul_ln703_21_reg_7944;
wire   [39:0] mul_ln703_24_fu_4173_p2;
reg   [39:0] mul_ln703_24_reg_7974;
reg   [31:0] tmp_35_reg_7979;
wire   [39:0] mul_ln703_25_fu_4192_p2;
reg   [39:0] mul_ln703_25_reg_7984;
wire   [39:0] mul_ln703_26_fu_4201_p2;
reg   [39:0] mul_ln703_26_reg_7989;
wire   [39:0] mul_ln703_28_fu_4338_p2;
reg   [39:0] mul_ln703_28_reg_8019;
reg   [31:0] tmp_40_reg_8024;
wire   [39:0] mul_ln703_29_fu_4357_p2;
reg   [39:0] mul_ln703_29_reg_8029;
wire   [39:0] mul_ln703_30_fu_4366_p2;
reg   [39:0] mul_ln703_30_reg_8034;
wire   [39:0] mul_ln703_33_fu_4499_p2;
reg   [39:0] mul_ln703_33_reg_8064;
reg   [31:0] tmp_45_reg_8069;
wire   [39:0] mul_ln703_34_fu_4518_p2;
reg   [39:0] mul_ln703_34_reg_8074;
wire   [39:0] mul_ln703_35_fu_4527_p2;
reg   [39:0] mul_ln703_35_reg_8079;
wire   [39:0] mul_ln703_37_fu_4664_p2;
reg   [39:0] mul_ln703_37_reg_8109;
reg   [31:0] tmp_50_reg_8114;
wire   [39:0] mul_ln703_38_fu_4683_p2;
reg   [39:0] mul_ln703_38_reg_8119;
wire   [39:0] mul_ln703_39_fu_4692_p2;
reg   [39:0] mul_ln703_39_reg_8124;
wire   [39:0] mul_ln703_42_fu_4825_p2;
reg   [39:0] mul_ln703_42_reg_8154;
reg   [31:0] tmp_55_reg_8159;
wire   [39:0] mul_ln703_43_fu_4844_p2;
reg   [39:0] mul_ln703_43_reg_8164;
wire   [39:0] mul_ln703_44_fu_4853_p2;
reg   [39:0] mul_ln703_44_reg_8169;
wire   [39:0] mul_ln703_47_fu_4986_p2;
reg   [39:0] mul_ln703_47_reg_8199;
reg   [31:0] tmp_60_reg_8204;
wire   [39:0] mul_ln703_48_fu_5005_p2;
reg   [39:0] mul_ln703_48_reg_8209;
wire   [39:0] mul_ln703_49_fu_5014_p2;
reg   [39:0] mul_ln703_49_reg_8214;
wire   [38:0] mul_ln1118_8_fu_5147_p2;
reg   [38:0] mul_ln1118_8_reg_8239;
reg   [31:0] tmp_65_reg_8244;
wire   [39:0] mul_ln703_52_fu_5166_p2;
reg   [39:0] mul_ln703_52_reg_8249;
reg  signed [7:0] layer2_weights_V_62_load_reg_8269;
reg   [31:0] tmp_69_reg_8274;
wire   [4:0] add_ln92_fu_5351_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state65_pp4_stage0_iter0;
wire    ap_block_state66_pp4_stage0_iter1;
wire    ap_block_state67_pp4_stage0_iter2;
wire    ap_block_state68_pp4_stage0_iter3;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln92_fu_5357_p2;
reg   [3:0] temp_output2_0_V_addr_2_reg_8293;
reg   [3:0] temp_output2_0_V_addr_2_reg_8293_pp4_iter1_reg;
reg   [3:0] temp_output2_0_V_addr_2_reg_8293_pp4_iter2_reg;
wire   [0:0] icmp_ln885_1_fu_5368_p2;
reg   [0:0] icmp_ln885_1_reg_8299;
reg   [0:0] icmp_ln885_1_reg_8299_pp4_iter2_reg;
wire   [0:0] p_Result_14_fu_5374_p3;
reg   [0:0] p_Result_14_reg_8303;
wire   [31:0] tmp_V_5_fu_5388_p3;
reg   [31:0] tmp_V_5_reg_8308;
wire   [0:0] icmp_ln908_1_fu_5508_p2;
reg   [0:0] icmp_ln908_1_reg_8313;
wire   [31:0] add_ln908_1_fu_5522_p2;
reg   [31:0] add_ln908_1_reg_8318;
wire   [31:0] sub_ln909_1_fu_5534_p2;
reg   [31:0] sub_ln909_1_reg_8323;
wire   [0:0] select_ln908_2_fu_5540_p3;
reg   [0:0] select_ln908_2_reg_8328;
wire   [10:0] trunc_ln893_1_fu_5548_p1;
reg   [10:0] trunc_ln893_1_reg_8333;
wire   [63:0] bitcast_ln734_1_fu_5649_p1;
wire   [0:0] icmp_ln1506_2_fu_5664_p2;
reg   [0:0] icmp_ln1506_2_reg_8343;
wire   [0:0] icmp_ln1506_3_fu_5670_p2;
reg   [0:0] icmp_ln1506_3_reg_8348;
wire    ap_CS_fsm_state69;
wire  signed [31:0] temp_output2_0_V_q0;
reg   [31:0] temp_output2_0_V_load_reg_8361;
wire    ap_CS_fsm_state70;
wire   [31:0] temp_output2_0_V_q1;
reg   [31:0] temp_output2_0_V_load_1_reg_8366;
reg   [31:0] temp_output2_0_V_load_2_reg_8381;
wire    ap_CS_fsm_state71;
reg  signed [31:0] temp_output2_0_V_load_3_reg_8386;
reg   [31:0] temp_output2_0_V_load_4_reg_8402;
wire    ap_CS_fsm_state72;
reg   [31:0] temp_output2_0_V_load_5_reg_8407;
reg   [31:0] temp_output2_0_V_load_6_reg_8422;
wire    ap_CS_fsm_state73;
reg   [31:0] temp_output2_0_V_load_7_reg_8427;
reg  signed [31:0] temp_output2_0_V_load_8_reg_8442;
wire    ap_CS_fsm_state74;
reg   [31:0] temp_output2_0_V_load_9_reg_8448;
reg   [31:0] temp_output2_0_V_load_10_reg_8463;
wire    ap_CS_fsm_state75;
reg   [31:0] temp_output2_0_V_load_11_reg_8468;
reg   [31:0] temp_output2_0_V_load_12_reg_8483;
wire    ap_CS_fsm_state76;
reg   [31:0] temp_output2_0_V_load_13_reg_8488;
wire  signed [39:0] sext_ln708_fu_5686_p1;
reg  signed [39:0] sext_ln708_reg_8503;
wire    ap_CS_fsm_state77;
wire  signed [38:0] sext_ln1116_63_fu_5689_p1;
reg  signed [38:0] sext_ln1116_63_reg_8508;
wire  signed [39:0] sext_ln1116_64_fu_5692_p1;
reg  signed [39:0] sext_ln1116_64_reg_8513;
wire   [37:0] mul_ln1118_9_fu_5698_p2;
reg   [37:0] mul_ln1118_9_reg_8518;
wire  signed [37:0] sext_ln1116_65_fu_5711_p1;
reg  signed [37:0] sext_ln1116_65_reg_8523;
wire  signed [39:0] sext_ln1116_66_fu_5715_p1;
reg  signed [39:0] sext_ln1116_66_reg_8528;
wire  signed [39:0] sext_ln1192_fu_5718_p1;
reg  signed [39:0] sext_ln1192_reg_8533;
wire  signed [39:0] sext_ln1116_67_fu_5721_p1;
reg  signed [39:0] sext_ln1116_67_reg_8538;
wire  signed [39:0] sext_ln1192_1_fu_5724_p1;
reg  signed [39:0] sext_ln1192_1_reg_8543;
wire   [37:0] mul_ln1118_10_fu_5730_p2;
reg   [37:0] mul_ln1118_10_reg_8548;
wire  signed [37:0] sext_ln1116_68_fu_5753_p1;
reg  signed [37:0] sext_ln1116_68_reg_8553;
wire  signed [39:0] sext_ln1192_2_fu_5757_p1;
reg  signed [39:0] sext_ln1192_2_reg_8558;
wire  signed [39:0] sext_ln1116_69_fu_5760_p1;
reg  signed [39:0] sext_ln1116_69_reg_8563;
wire  signed [39:0] sext_ln1192_3_fu_5763_p1;
reg  signed [39:0] sext_ln1192_3_reg_8568;
wire  signed [39:0] sext_ln1116_70_fu_5766_p1;
reg  signed [39:0] sext_ln1116_70_reg_8573;
wire  signed [39:0] sext_ln1116_71_fu_5769_p1;
reg  signed [39:0] sext_ln1116_71_reg_8578;
wire   [38:0] mul_ln1118_11_fu_5776_p2;
reg   [38:0] mul_ln1118_11_reg_8583;
wire   [38:0] shl_ln1118_2_fu_5782_p3;
reg   [38:0] shl_ln1118_2_reg_8588;
wire  signed [38:0] temp_output2_0_V_load_15_cast_fu_5790_p1;
reg  signed [38:0] temp_output2_0_V_load_15_cast_reg_8593;
wire   [1:0] add_ln59_fu_5794_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state78_pp5_stage0_iter0;
wire    ap_block_state79_pp5_stage0_iter1;
wire    ap_block_state80_pp5_stage0_iter2;
wire    ap_block_state81_pp5_stage0_iter3;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln59_fu_5800_p2;
reg   [0:0] icmp_ln59_reg_8603;
reg   [0:0] icmp_ln59_reg_8603_pp5_iter1_reg;
reg   [0:0] icmp_ln59_reg_8603_pp5_iter2_reg;
wire   [0:0] trunc_ln1118_fu_5806_p1;
reg   [0:0] trunc_ln1118_reg_8607;
reg   [0:0] trunc_ln1118_reg_8607_pp5_iter1_reg;
reg   [0:0] trunc_ln1118_reg_8607_pp5_iter2_reg;
wire   [39:0] mul_ln703_57_fu_5872_p2;
reg   [39:0] mul_ln703_57_reg_8625;
reg   [31:0] tmp_72_reg_8630;
wire   [39:0] mul_ln703_58_fu_5895_p2;
reg   [39:0] mul_ln703_58_reg_8635;
wire   [39:0] mul_ln1192_1_fu_6047_p2;
reg   [39:0] mul_ln1192_1_reg_8640;
reg   [31:0] tmp_77_reg_8645;
wire   [39:0] mul_ln1192_2_fu_6069_p2;
reg   [39:0] mul_ln1192_2_reg_8650;
wire   [39:0] mul_ln703_61_fu_6221_p2;
reg   [39:0] mul_ln703_61_reg_8655;
reg   [31:0] tmp_82_reg_8660;
wire   [39:0] mul_ln703_62_fu_6243_p2;
reg   [39:0] mul_ln703_62_reg_8665;
wire   [31:0] temp_output3_0_1_V_1_fu_6366_p3;
reg    ap_enable_reg_pp5_iter3;
wire   [31:0] temp_output3_0_1_V_2_fu_6373_p3;
wire   [1:0] add_ln109_fu_6380_p2;
wire    ap_CS_fsm_state83;
wire   [31:0] max_val_V_1_fu_6410_p3;
wire   [0:0] icmp_ln109_fu_6386_p2;
wire   [31:0] max_idx_V_1_fu_6430_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state49;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
reg    ap_enable_reg_pp3_iter13;
reg    ap_enable_reg_pp3_iter14;
wire    ap_CS_fsm_state64;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state65;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state78;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg   [8:0] fp_input_img_V_address0;
reg    fp_input_img_V_ce0;
reg    fp_input_img_V_we0;
reg   [31:0] fp_input_img_V_d0;
wire   [8:0] fp_input_img_V_address1;
reg    fp_input_img_V_ce1;
reg   [5:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [31:0] temp_output_0_V_d0;
reg   [5:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
reg   [3:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [31:0] temp_output2_0_V_d0;
reg   [3:0] temp_output2_0_V_address1;
reg    temp_output2_0_V_ce1;
reg   [6:0] j_reg_2123;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0;
reg   [1:0] i_3_reg_2227;
wire    ap_CS_fsm_state82;
reg   [31:0] max_idx_V_reg_2238;
reg   [31:0] max_val_V_reg_2250;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1118_fu_2612_p1;
wire   [63:0] k_cast60_fu_2589_p1;
wire   [63:0] zext_ln1118_1_fu_2641_p1;
wire   [63:0] zext_ln23_fu_2623_p1;
wire   [63:0] i_1_cast_fu_2738_p1;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] i_2_cast_fu_5363_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] select_ln571_4_fu_2548_p3;
wire   [0:0] and_ln1506_fu_3055_p2;
wire   [0:0] and_ln1506_1_fu_5680_p2;
wire   [31:0] grp_fu_2261_p0;
reg   [63:0] grp_fu_2264_p0;
wire   [63:0] grp_fu_2261_p1;
wire   [63:0] ireg_fu_2291_p1;
wire   [10:0] exp_tmp_fu_2307_p4;
wire   [62:0] trunc_ln555_fu_2295_p1;
wire   [11:0] zext_ln455_fu_2317_p1;
wire   [52:0] p_Result_9_fu_2337_p3;
wire   [53:0] zext_ln569_fu_2344_p1;
wire   [53:0] man_V_1_fu_2348_p2;
wire   [0:0] icmp_ln581_fu_2361_p2;
wire   [11:0] add_ln581_fu_2366_p2;
wire   [11:0] sub_ln581_fu_2371_p2;
wire  signed [11:0] sh_amt_fu_2376_p3;
wire   [53:0] man_V_2_fu_2354_p3;
wire   [6:0] tmp_5_fu_2397_p4;
wire  signed [31:0] sext_ln581_fu_2384_p1;
wire   [53:0] zext_ln586_fu_2413_p1;
wire   [53:0] ashr_ln586_fu_2417_p2;
wire   [0:0] tmp_88_fu_2427_p3;
wire   [31:0] trunc_ln583_fu_2393_p1;
wire   [0:0] icmp_ln582_fu_2388_p2;
wire   [0:0] xor_ln571_fu_2448_p2;
wire   [0:0] or_ln582_fu_2459_p2;
wire   [0:0] xor_ln582_fu_2464_p2;
wire   [0:0] and_ln581_fu_2470_p2;
wire   [0:0] icmp_ln585_fu_2476_p2;
wire   [0:0] or_ln581_fu_2488_p2;
wire   [0:0] icmp_ln603_fu_2407_p2;
wire   [0:0] xor_ln581_fu_2494_p2;
wire   [31:0] shl_ln604_fu_2442_p2;
wire   [0:0] and_ln603_fu_2500_p2;
wire   [0:0] and_ln585_fu_2482_p2;
wire   [31:0] select_ln588_fu_2434_p3;
wire   [31:0] trunc_ln586_fu_2423_p1;
wire   [0:0] and_ln582_fu_2453_p2;
wire   [0:0] or_ln571_fu_2513_p2;
wire   [31:0] select_ln571_fu_2506_p3;
wire   [31:0] select_ln571_1_fu_2518_p3;
wire   [0:0] or_ln571_1_fu_2542_p2;
wire   [31:0] select_ln571_3_fu_2534_p3;
wire   [31:0] select_ln571_2_fu_2526_p3;
wire   [7:0] tmp_6_fu_2594_p4;
wire   [14:0] tmp_7_fu_2604_p3;
wire   [8:0] or_ln25_fu_2617_p2;
wire   [14:0] tmp_8_fu_2628_p3;
wire   [14:0] add_ln1118_fu_2636_p2;
wire   [38:0] r_V_1_fu_2652_p2;
wire   [39:0] lhs_1_fu_2658_p3;
wire  signed [39:0] sext_ln703_fu_2666_p1;
wire   [39:0] ret_V_fu_2670_p2;
wire   [31:0] tmp_9_fu_2688_p4;
wire   [38:0] r_V_3_fu_2682_p2;
wire   [39:0] lhs_2_fu_2698_p3;
wire  signed [39:0] sext_ln703_1_fu_2706_p1;
wire   [39:0] ret_V_1_fu_2710_p2;
wire   [31:0] tmp_V_fu_2757_p2;
reg   [31:0] p_Result_11_fu_2771_p4;
reg   [31:0] l_fu_2781_p3;
wire   [31:0] sub_ln894_fu_2789_p2;
wire   [31:0] lsb_index_fu_2795_p2;
wire   [30:0] tmp_90_fu_2801_p4;
wire   [5:0] trunc_ln897_fu_2817_p1;
wire   [5:0] sub_ln897_fu_2821_p2;
wire   [31:0] zext_ln897_fu_2827_p1;
wire   [31:0] lshr_ln897_fu_2831_p2;
wire   [31:0] shl_ln899_fu_2837_p2;
wire   [31:0] or_ln899_2_fu_2843_p2;
wire   [31:0] and_ln899_fu_2849_p2;
wire   [0:0] tmp_91_fu_2861_p3;
wire   [0:0] icmp_ln896_fu_2811_p2;
wire   [0:0] icmp_ln899_fu_2855_p2;
wire   [0:0] p_Result_12_fu_2875_p3;
wire   [0:0] xor_ln899_fu_2869_p2;
wire   [0:0] select_ln896_fu_2889_p3;
wire   [0:0] and_ln899_1_fu_2903_p2;
wire   [63:0] zext_ln907_fu_2927_p1;
wire   [63:0] zext_ln908_fu_2930_p1;
wire   [63:0] zext_ln909_fu_2939_p1;
wire   [63:0] lshr_ln908_fu_2933_p2;
wire   [63:0] shl_ln909_fu_2942_p2;
wire   [63:0] m_2_fu_2948_p3;
wire   [63:0] zext_ln911_fu_2955_p1;
wire   [63:0] m_3_fu_2958_p2;
wire   [62:0] m_8_fu_2964_p4;
wire   [0:0] p_Result_s_fu_2978_p3;
wire   [10:0] sub_ln915_fu_2994_p2;
wire   [10:0] select_ln893_fu_2986_p3;
wire   [10:0] add_ln915_fu_2999_p2;
wire   [63:0] zext_ln912_fu_2974_p1;
wire   [11:0] tmp_1_fu_3005_p3;
wire   [63:0] p_Result_13_fu_3012_p5;
wire   [51:0] trunc_ln6_fu_3029_p4;
wire   [0:0] or_ln1506_fu_3051_p2;
wire   [0:0] grp_fu_2264_p2;
wire  signed [31:0] mul_ln1118_fu_3281_p1;
wire  signed [31:0] mul_ln703_fu_3290_p1;
wire   [39:0] mul_ln1118_fu_3281_p2;
wire   [31:0] tmp_s_fu_3295_p4;
wire   [39:0] shl_ln_fu_3305_p3;
wire   [39:0] mul_ln703_fu_3290_p2;
wire  signed [31:0] mul_ln1118_2_fu_3323_p1;
wire   [39:0] add_ln1192_fu_3313_p2;
wire   [31:0] tmp_4_fu_3328_p4;
wire   [38:0] mul_ln1118_2_fu_3323_p2;
wire   [39:0] shl_ln728_1_fu_3338_p3;
wire  signed [39:0] sext_ln703_2_fu_3346_p1;
wire  signed [31:0] mul_ln703_1_fu_3360_p1;
wire   [39:0] add_ln1192_1_fu_3350_p2;
wire  signed [31:0] mul_ln1118_4_fu_3379_p1;
wire  signed [31:0] mul_ln703_2_fu_3388_p1;
wire   [39:0] shl_ln728_2_fu_3393_p3;
wire   [39:0] add_ln1192_2_fu_3400_p2;
wire   [31:0] tmp_11_fu_3405_p4;
wire   [39:0] shl_ln728_3_fu_3415_p3;
wire  signed [39:0] sext_ln703_3_fu_3423_p1;
wire   [39:0] add_ln1192_3_fu_3426_p2;
wire   [31:0] tmp_12_fu_3432_p4;
wire   [39:0] shl_ln728_4_fu_3442_p3;
wire  signed [31:0] mul_ln703_3_fu_3459_p1;
wire   [39:0] add_ln1192_4_fu_3450_p2;
wire   [31:0] tmp_13_fu_3464_p4;
wire   [39:0] shl_ln728_5_fu_3474_p3;
wire   [39:0] mul_ln703_3_fu_3459_p2;
wire  signed [31:0] mul_ln703_4_fu_3492_p1;
wire   [39:0] add_ln1192_5_fu_3482_p2;
wire   [31:0] tmp_14_fu_3497_p4;
wire   [39:0] shl_ln728_6_fu_3507_p3;
wire   [39:0] mul_ln703_4_fu_3492_p2;
wire  signed [31:0] mul_ln703_5_fu_3525_p1;
wire   [39:0] add_ln1192_6_fu_3515_p2;
wire  signed [31:0] mul_ln703_6_fu_3544_p1;
wire  signed [31:0] mul_ln703_7_fu_3553_p1;
wire   [39:0] shl_ln728_7_fu_3558_p3;
wire   [39:0] add_ln1192_7_fu_3565_p2;
wire   [31:0] tmp_16_fu_3570_p4;
wire   [39:0] shl_ln728_8_fu_3580_p3;
wire   [39:0] add_ln1192_8_fu_3588_p2;
wire   [31:0] tmp_17_fu_3593_p4;
wire   [39:0] shl_ln728_9_fu_3603_p3;
wire  signed [31:0] mul_ln703_8_fu_3620_p1;
wire   [39:0] add_ln1192_9_fu_3611_p2;
wire   [31:0] tmp_18_fu_3625_p4;
wire   [39:0] shl_ln728_s_fu_3635_p3;
wire   [39:0] mul_ln703_8_fu_3620_p2;
wire  signed [31:0] mul_ln703_9_fu_3653_p1;
wire   [39:0] add_ln1192_10_fu_3643_p2;
wire   [31:0] tmp_19_fu_3658_p4;
wire   [39:0] shl_ln728_10_fu_3668_p3;
wire   [39:0] mul_ln703_9_fu_3653_p2;
wire  signed [31:0] mul_ln703_10_fu_3686_p1;
wire   [39:0] add_ln1192_11_fu_3676_p2;
wire  signed [31:0] mul_ln703_11_fu_3705_p1;
wire  signed [31:0] mul_ln703_12_fu_3714_p1;
wire   [39:0] shl_ln728_11_fu_3719_p3;
wire   [39:0] add_ln1192_12_fu_3726_p2;
wire   [31:0] tmp_21_fu_3731_p4;
wire   [39:0] shl_ln728_12_fu_3741_p3;
wire   [39:0] add_ln1192_13_fu_3749_p2;
wire   [31:0] tmp_22_fu_3754_p4;
wire   [39:0] shl_ln728_13_fu_3764_p3;
wire  signed [31:0] mul_ln703_13_fu_3781_p1;
wire   [39:0] add_ln1192_14_fu_3772_p2;
wire   [31:0] tmp_23_fu_3786_p4;
wire   [39:0] shl_ln728_14_fu_3796_p3;
wire   [39:0] mul_ln703_13_fu_3781_p2;
wire  signed [31:0] mul_ln703_14_fu_3814_p1;
wire   [39:0] add_ln1192_15_fu_3804_p2;
wire   [31:0] tmp_24_fu_3819_p4;
wire   [39:0] shl_ln728_15_fu_3829_p3;
wire   [39:0] mul_ln703_14_fu_3814_p2;
wire  signed [31:0] mul_ln703_15_fu_3847_p1;
wire   [39:0] add_ln1192_16_fu_3837_p2;
wire  signed [31:0] mul_ln1118_5_fu_3866_p1;
wire  signed [31:0] mul_ln703_16_fu_3875_p1;
wire   [39:0] shl_ln728_16_fu_3880_p3;
wire   [39:0] add_ln1192_17_fu_3887_p2;
wire   [31:0] tmp_26_fu_3892_p4;
wire   [39:0] shl_ln728_17_fu_3902_p3;
wire  signed [39:0] sext_ln703_4_fu_3910_p1;
wire   [39:0] add_ln1192_18_fu_3913_p2;
wire   [31:0] tmp_27_fu_3919_p4;
wire   [39:0] shl_ln728_18_fu_3929_p3;
wire  signed [31:0] mul_ln703_17_fu_3946_p1;
wire   [39:0] add_ln1192_19_fu_3937_p2;
wire   [31:0] tmp_28_fu_3951_p4;
wire   [39:0] shl_ln728_19_fu_3961_p3;
wire   [39:0] mul_ln703_17_fu_3946_p2;
wire  signed [31:0] mul_ln703_18_fu_3979_p1;
wire   [39:0] add_ln1192_20_fu_3969_p2;
wire   [31:0] tmp_29_fu_3984_p4;
wire   [39:0] shl_ln728_20_fu_3994_p3;
wire   [39:0] mul_ln703_18_fu_3979_p2;
wire  signed [31:0] mul_ln703_19_fu_4012_p1;
wire   [39:0] add_ln1192_21_fu_4002_p2;
wire  signed [31:0] mul_ln703_20_fu_4031_p1;
wire  signed [31:0] mul_ln703_21_fu_4040_p1;
wire   [39:0] shl_ln728_21_fu_4045_p3;
wire   [39:0] add_ln1192_22_fu_4052_p2;
wire   [31:0] tmp_31_fu_4057_p4;
wire   [39:0] shl_ln728_22_fu_4067_p3;
wire   [39:0] add_ln1192_23_fu_4075_p2;
wire   [31:0] tmp_32_fu_4080_p4;
wire   [39:0] shl_ln728_23_fu_4090_p3;
wire  signed [31:0] mul_ln703_22_fu_4107_p1;
wire   [39:0] add_ln1192_24_fu_4098_p2;
wire   [31:0] tmp_33_fu_4112_p4;
wire   [39:0] shl_ln728_24_fu_4122_p3;
wire   [39:0] mul_ln703_22_fu_4107_p2;
wire  signed [31:0] mul_ln703_23_fu_4140_p1;
wire   [39:0] add_ln1192_25_fu_4130_p2;
wire   [31:0] tmp_34_fu_4145_p4;
wire   [39:0] shl_ln728_25_fu_4155_p3;
wire   [39:0] mul_ln703_23_fu_4140_p2;
wire  signed [31:0] mul_ln703_24_fu_4173_p1;
wire   [39:0] add_ln1192_26_fu_4163_p2;
wire  signed [31:0] mul_ln703_25_fu_4192_p1;
wire  signed [31:0] mul_ln703_26_fu_4201_p1;
wire   [39:0] shl_ln728_26_fu_4206_p3;
wire   [39:0] add_ln1192_27_fu_4213_p2;
wire   [31:0] tmp_36_fu_4218_p4;
wire   [39:0] shl_ln728_27_fu_4228_p3;
wire   [39:0] add_ln1192_28_fu_4236_p2;
wire   [31:0] tmp_37_fu_4241_p4;
wire   [39:0] shl_ln728_28_fu_4251_p3;
wire  signed [31:0] mul_ln1118_6_fu_4268_p1;
wire   [39:0] add_ln1192_29_fu_4259_p2;
wire   [31:0] tmp_38_fu_4273_p4;
wire   [38:0] mul_ln1118_6_fu_4268_p2;
wire   [39:0] shl_ln728_29_fu_4283_p3;
wire  signed [39:0] sext_ln703_5_fu_4291_p1;
wire  signed [31:0] mul_ln703_27_fu_4305_p1;
wire   [39:0] add_ln1192_30_fu_4295_p2;
wire   [31:0] tmp_39_fu_4310_p4;
wire   [39:0] shl_ln728_30_fu_4320_p3;
wire   [39:0] mul_ln703_27_fu_4305_p2;
wire  signed [31:0] mul_ln703_28_fu_4338_p1;
wire   [39:0] add_ln1192_31_fu_4328_p2;
wire  signed [31:0] mul_ln703_29_fu_4357_p1;
wire  signed [31:0] mul_ln703_30_fu_4366_p1;
wire   [39:0] shl_ln728_31_fu_4371_p3;
wire   [39:0] add_ln1192_32_fu_4378_p2;
wire   [31:0] tmp_41_fu_4383_p4;
wire   [39:0] shl_ln728_32_fu_4393_p3;
wire   [39:0] add_ln1192_33_fu_4401_p2;
wire   [31:0] tmp_42_fu_4406_p4;
wire   [39:0] shl_ln728_33_fu_4416_p3;
wire  signed [31:0] mul_ln703_31_fu_4433_p1;
wire   [39:0] add_ln1192_34_fu_4424_p2;
wire   [31:0] tmp_43_fu_4438_p4;
wire   [39:0] shl_ln728_34_fu_4448_p3;
wire   [39:0] mul_ln703_31_fu_4433_p2;
wire  signed [31:0] mul_ln703_32_fu_4466_p1;
wire   [39:0] add_ln1192_35_fu_4456_p2;
wire   [31:0] tmp_44_fu_4471_p4;
wire   [39:0] shl_ln728_35_fu_4481_p3;
wire   [39:0] mul_ln703_32_fu_4466_p2;
wire  signed [31:0] mul_ln703_33_fu_4499_p1;
wire   [39:0] add_ln1192_36_fu_4489_p2;
wire  signed [31:0] mul_ln703_34_fu_4518_p1;
wire  signed [31:0] mul_ln703_35_fu_4527_p1;
wire   [39:0] shl_ln728_36_fu_4532_p3;
wire   [39:0] add_ln1192_37_fu_4539_p2;
wire   [31:0] tmp_46_fu_4544_p4;
wire   [39:0] shl_ln728_37_fu_4554_p3;
wire   [39:0] add_ln1192_38_fu_4562_p2;
wire   [31:0] tmp_47_fu_4567_p4;
wire   [39:0] shl_ln728_38_fu_4577_p3;
wire  signed [31:0] mul_ln1118_7_fu_4594_p1;
wire   [39:0] add_ln1192_39_fu_4585_p2;
wire   [31:0] tmp_48_fu_4599_p4;
wire   [38:0] mul_ln1118_7_fu_4594_p2;
wire   [39:0] shl_ln728_39_fu_4609_p3;
wire  signed [39:0] sext_ln703_6_fu_4617_p1;
wire  signed [31:0] mul_ln703_36_fu_4631_p1;
wire   [39:0] add_ln1192_40_fu_4621_p2;
wire   [31:0] tmp_49_fu_4636_p4;
wire   [39:0] shl_ln728_40_fu_4646_p3;
wire   [39:0] mul_ln703_36_fu_4631_p2;
wire  signed [31:0] mul_ln703_37_fu_4664_p1;
wire   [39:0] add_ln1192_41_fu_4654_p2;
wire  signed [31:0] mul_ln703_38_fu_4683_p1;
wire  signed [31:0] mul_ln703_39_fu_4692_p1;
wire   [39:0] shl_ln728_41_fu_4697_p3;
wire   [39:0] add_ln1192_42_fu_4704_p2;
wire   [31:0] tmp_51_fu_4709_p4;
wire   [39:0] shl_ln728_42_fu_4719_p3;
wire   [39:0] add_ln1192_43_fu_4727_p2;
wire   [31:0] tmp_52_fu_4732_p4;
wire   [39:0] shl_ln728_43_fu_4742_p3;
wire  signed [31:0] mul_ln703_40_fu_4759_p1;
wire   [39:0] add_ln1192_44_fu_4750_p2;
wire   [31:0] tmp_53_fu_4764_p4;
wire   [39:0] shl_ln728_44_fu_4774_p3;
wire   [39:0] mul_ln703_40_fu_4759_p2;
wire  signed [31:0] mul_ln703_41_fu_4792_p1;
wire   [39:0] add_ln1192_45_fu_4782_p2;
wire   [31:0] tmp_54_fu_4797_p4;
wire   [39:0] shl_ln728_45_fu_4807_p3;
wire   [39:0] mul_ln703_41_fu_4792_p2;
wire  signed [31:0] mul_ln703_42_fu_4825_p1;
wire   [39:0] add_ln1192_46_fu_4815_p2;
wire  signed [31:0] mul_ln703_43_fu_4844_p1;
wire  signed [31:0] mul_ln703_44_fu_4853_p1;
wire   [39:0] shl_ln728_46_fu_4858_p3;
wire   [39:0] add_ln1192_47_fu_4865_p2;
wire   [31:0] tmp_56_fu_4870_p4;
wire   [39:0] shl_ln728_47_fu_4880_p3;
wire   [39:0] add_ln1192_48_fu_4888_p2;
wire   [31:0] tmp_57_fu_4893_p4;
wire   [39:0] shl_ln728_48_fu_4903_p3;
wire  signed [31:0] mul_ln703_45_fu_4920_p1;
wire   [39:0] add_ln1192_49_fu_4911_p2;
wire   [31:0] tmp_58_fu_4925_p4;
wire   [39:0] shl_ln728_49_fu_4935_p3;
wire   [39:0] mul_ln703_45_fu_4920_p2;
wire  signed [31:0] mul_ln703_46_fu_4953_p1;
wire   [39:0] add_ln1192_50_fu_4943_p2;
wire   [31:0] tmp_59_fu_4958_p4;
wire   [39:0] shl_ln728_50_fu_4968_p3;
wire   [39:0] mul_ln703_46_fu_4953_p2;
wire  signed [31:0] mul_ln703_47_fu_4986_p1;
wire   [39:0] add_ln1192_51_fu_4976_p2;
wire  signed [31:0] mul_ln703_48_fu_5005_p1;
wire  signed [31:0] mul_ln703_49_fu_5014_p1;
wire   [39:0] shl_ln728_51_fu_5019_p3;
wire   [39:0] add_ln1192_52_fu_5026_p2;
wire   [31:0] tmp_61_fu_5031_p4;
wire   [39:0] shl_ln728_52_fu_5041_p3;
wire   [39:0] add_ln1192_53_fu_5049_p2;
wire   [31:0] tmp_62_fu_5054_p4;
wire   [39:0] shl_ln728_53_fu_5064_p3;
wire  signed [31:0] mul_ln703_50_fu_5081_p1;
wire   [39:0] add_ln1192_54_fu_5072_p2;
wire   [31:0] tmp_63_fu_5086_p4;
wire   [39:0] shl_ln728_54_fu_5096_p3;
wire   [39:0] mul_ln703_50_fu_5081_p2;
wire  signed [31:0] mul_ln703_51_fu_5114_p1;
wire   [39:0] add_ln1192_55_fu_5104_p2;
wire   [31:0] tmp_64_fu_5119_p4;
wire   [39:0] shl_ln728_55_fu_5129_p3;
wire   [39:0] mul_ln703_51_fu_5114_p2;
wire  signed [31:0] mul_ln1118_8_fu_5147_p1;
wire   [39:0] add_ln1192_56_fu_5137_p2;
wire  signed [31:0] mul_ln703_52_fu_5166_p1;
wire   [39:0] shl_ln728_56_fu_5171_p3;
wire  signed [39:0] sext_ln703_7_fu_5178_p1;
wire   [39:0] add_ln1192_57_fu_5181_p2;
wire   [31:0] tmp_66_fu_5187_p4;
wire   [39:0] shl_ln728_57_fu_5197_p3;
wire  signed [31:0] mul_ln703_53_fu_5214_p1;
wire   [39:0] add_ln1192_58_fu_5205_p2;
wire   [31:0] tmp_67_fu_5219_p4;
wire   [39:0] shl_ln728_58_fu_5229_p3;
wire   [39:0] mul_ln703_53_fu_5214_p2;
wire  signed [31:0] mul_ln703_54_fu_5247_p1;
wire   [39:0] add_ln1192_59_fu_5237_p2;
wire   [31:0] tmp_68_fu_5252_p4;
wire   [39:0] shl_ln728_59_fu_5262_p3;
wire   [39:0] mul_ln703_54_fu_5247_p2;
wire   [39:0] add_ln1192_60_fu_5270_p2;
wire  signed [31:0] mul_ln703_55_fu_5289_p1;
wire   [39:0] shl_ln728_60_fu_5294_p3;
wire   [39:0] mul_ln703_55_fu_5289_p2;
wire  signed [31:0] mul_ln703_56_fu_5311_p1;
wire   [39:0] add_ln1192_61_fu_5301_p2;
wire   [31:0] tmp_70_fu_5316_p4;
wire   [39:0] shl_ln728_61_fu_5326_p3;
wire   [39:0] mul_ln703_56_fu_5311_p2;
wire   [39:0] add_ln1192_62_fu_5334_p2;
wire   [31:0] tmp_V_2_fu_5382_p2;
reg   [31:0] p_Result_15_fu_5396_p4;
reg   [31:0] l_1_fu_5406_p3;
wire   [31:0] sub_ln894_1_fu_5414_p2;
wire   [31:0] lsb_index_1_fu_5420_p2;
wire   [30:0] tmp_94_fu_5426_p4;
wire   [5:0] trunc_ln897_1_fu_5442_p1;
wire   [5:0] sub_ln897_1_fu_5446_p2;
wire   [31:0] zext_ln897_1_fu_5452_p1;
wire   [31:0] lshr_ln897_1_fu_5456_p2;
wire   [31:0] shl_ln899_1_fu_5462_p2;
wire   [31:0] or_ln899_fu_5468_p2;
wire   [31:0] and_ln899_2_fu_5474_p2;
wire   [0:0] tmp_95_fu_5486_p3;
wire   [0:0] icmp_ln896_1_fu_5436_p2;
wire   [0:0] icmp_ln899_1_fu_5480_p2;
wire   [0:0] p_Result_16_fu_5500_p3;
wire   [0:0] xor_ln899_1_fu_5494_p2;
wire   [0:0] select_ln896_1_fu_5514_p3;
wire   [0:0] and_ln899_3_fu_5528_p2;
wire   [63:0] zext_ln907_1_fu_5552_p1;
wire   [63:0] zext_ln908_1_fu_5555_p1;
wire   [63:0] zext_ln909_1_fu_5564_p1;
wire   [63:0] lshr_ln908_1_fu_5558_p2;
wire   [63:0] shl_ln909_1_fu_5567_p2;
wire   [63:0] m_4_fu_5573_p3;
wire   [63:0] zext_ln911_1_fu_5580_p1;
wire   [63:0] m_5_fu_5583_p2;
wire   [62:0] m_fu_5589_p4;
wire   [0:0] p_Result_5_fu_5603_p3;
wire   [10:0] sub_ln915_1_fu_5619_p2;
wire   [10:0] select_ln893_1_fu_5611_p3;
wire   [10:0] add_ln915_1_fu_5624_p2;
wire   [63:0] zext_ln912_1_fu_5599_p1;
wire   [11:0] tmp_2_fu_5630_p3;
wire   [63:0] p_Result_17_fu_5637_p5;
wire   [51:0] trunc_ln1506_1_fu_5654_p4;
wire   [0:0] or_ln1506_1_fu_5676_p2;
wire  signed [6:0] mul_ln1118_9_fu_5698_p1;
wire   [36:0] shl_ln1_fu_5704_p3;
wire   [6:0] mul_ln1118_10_fu_5730_p1;
wire   [35:0] shl_ln1118_1_fu_5736_p3;
wire  signed [36:0] sext_ln1118_68_fu_5743_p1;
wire   [36:0] sub_ln1118_fu_5747_p2;
wire  signed [6:0] mul_ln1118_11_fu_5776_p1;
wire  signed [31:0] shl_ln1118_2_fu_5782_p1;
wire    ap_block_pp5_stage0;
wire  signed [8:0] mul_ln708_fu_5818_p0;
wire  signed [31:0] mul_ln708_fu_5818_p1;
wire  signed [6:0] mul_ln1118_12_fu_5831_p0;
wire  signed [31:0] mul_ln1118_12_fu_5831_p1;
wire   [39:0] mul_ln708_fu_5818_p2;
wire   [31:0] tmp_71_fu_5836_p4;
wire   [38:0] mul_ln1118_12_fu_5831_p2;
wire   [39:0] shl_ln728_62_fu_5846_p3;
wire  signed [39:0] sext_ln703_8_fu_5854_p1;
wire  signed [7:0] mul_ln703_57_fu_5872_p0;
wire  signed [31:0] mul_ln703_57_fu_5872_p1;
wire   [39:0] add_ln1192_65_fu_5858_p2;
wire  signed [7:0] mul_ln703_58_fu_5895_p0;
wire  signed [31:0] mul_ln703_58_fu_5895_p1;
wire   [39:0] shl_ln728_63_fu_5900_p3;
wire   [39:0] add_ln1192_66_fu_5907_p2;
wire   [31:0] tmp_73_fu_5917_p4;
wire   [37:0] select_ln1118_1_fu_5912_p3;
wire   [39:0] shl_ln728_64_fu_5927_p3;
wire  signed [39:0] sext_ln703_9_fu_5935_p1;
wire   [39:0] add_ln1192_67_fu_5939_p2;
wire   [31:0] tmp_74_fu_5945_p4;
wire   [39:0] shl_ln728_65_fu_5955_p3;
wire  signed [8:0] mul_ln1192_fu_5975_p0;
wire  signed [31:0] mul_ln1192_fu_5975_p1;
wire   [39:0] add_ln1192_68_fu_5963_p2;
wire   [31:0] tmp_75_fu_5980_p4;
wire   [39:0] shl_ln728_66_fu_5990_p3;
wire   [39:0] mul_ln1192_fu_5975_p2;
wire  signed [7:0] mul_ln703_59_fu_6011_p0;
wire  signed [31:0] mul_ln703_59_fu_6011_p1;
wire   [39:0] add_ln1192_69_fu_5998_p2;
wire   [31:0] tmp_76_fu_6016_p4;
wire   [39:0] shl_ln728_67_fu_6026_p3;
wire   [39:0] mul_ln703_59_fu_6011_p2;
wire  signed [8:0] mul_ln1192_1_fu_6047_p0;
wire  signed [31:0] mul_ln1192_1_fu_6047_p1;
wire   [39:0] add_ln1192_70_fu_6034_p2;
wire  signed [8:0] mul_ln1192_2_fu_6069_p0;
wire  signed [31:0] mul_ln1192_2_fu_6069_p1;
wire   [39:0] shl_ln728_68_fu_6074_p3;
wire   [39:0] add_ln1192_71_fu_6081_p2;
wire   [31:0] tmp_78_fu_6091_p4;
wire   [37:0] select_ln1118_2_fu_6086_p3;
wire   [39:0] shl_ln728_69_fu_6101_p3;
wire  signed [39:0] sext_ln703_10_fu_6109_p1;
wire   [39:0] add_ln1192_72_fu_6113_p2;
wire   [31:0] tmp_79_fu_6119_p4;
wire   [39:0] shl_ln728_70_fu_6129_p3;
wire  signed [7:0] mul_ln703_60_fu_6149_p0;
wire  signed [31:0] mul_ln703_60_fu_6149_p1;
wire   [39:0] add_ln1192_73_fu_6137_p2;
wire   [31:0] tmp_80_fu_6154_p4;
wire   [39:0] shl_ln728_71_fu_6164_p3;
wire   [39:0] mul_ln703_60_fu_6149_p2;
wire  signed [8:0] mul_ln1192_3_fu_6185_p0;
wire  signed [31:0] mul_ln1192_3_fu_6185_p1;
wire   [39:0] add_ln1192_74_fu_6172_p2;
wire   [31:0] tmp_81_fu_6190_p4;
wire   [39:0] shl_ln728_72_fu_6200_p3;
wire   [39:0] mul_ln1192_3_fu_6185_p2;
wire  signed [7:0] mul_ln703_61_fu_6221_p0;
wire  signed [31:0] mul_ln703_61_fu_6221_p1;
wire   [39:0] add_ln1192_75_fu_6208_p2;
wire  signed [7:0] mul_ln703_62_fu_6243_p0;
wire  signed [31:0] mul_ln703_62_fu_6243_p1;
wire   [39:0] shl_ln728_73_fu_6248_p3;
wire   [39:0] add_ln1192_76_fu_6255_p2;
wire   [31:0] tmp_83_fu_6260_p4;
wire   [39:0] shl_ln728_74_fu_6270_p3;
wire   [39:0] add_ln1192_77_fu_6278_p2;
wire   [31:0] tmp_84_fu_6288_p4;
wire   [38:0] select_ln1118_3_fu_6283_p3;
wire   [39:0] shl_ln728_75_fu_6298_p3;
wire  signed [39:0] sext_ln703_11_fu_6306_p1;
wire  signed [6:0] mul_ln1118_13_fu_6323_p0;
wire  signed [31:0] mul_ln1118_13_fu_6323_p1;
wire   [39:0] add_ln1192_78_fu_6310_p2;
wire   [31:0] tmp_85_fu_6328_p4;
wire   [38:0] mul_ln1118_13_fu_6323_p2;
wire   [39:0] shl_ln728_76_fu_6338_p3;
wire  signed [39:0] sext_ln703_12_fu_6346_p1;
wire   [39:0] add_ln1192_79_fu_6350_p2;
wire   [31:0] temp_output3_0_0_V_fu_6356_p4;
wire   [0:0] trunc_ln1494_fu_6392_p1;
wire   [31:0] select_ln1494_fu_6396_p3;
wire   [0:0] icmp_ln1494_fu_6404_p2;
wire   [8:0] shl_ln2_fu_6418_p3;
wire   [31:0] zext_ln111_fu_6426_p1;
wire    ap_CS_fsm_state84;
wire   [7:0] trunc_ln851_fu_6456_p1;
wire   [23:0] ret_V_2_fu_6438_p4;
wire   [0:0] icmp_ln851_fu_6460_p2;
wire   [23:0] ret_V_3_fu_6466_p2;
wire   [0:0] p_Result_7_fu_6448_p3;
wire   [23:0] select_ln850_fu_6472_p3;
wire   [23:0] ret_V_5_fu_6480_p3;
wire    ap_block_pp2_stage0_00001;
wire    ap_block_pp4_stage0_00001;
reg   [55:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire  signed [38:0] mul_ln1118_12_fu_5831_p00;
wire  signed [38:0] mul_ln1118_13_fu_6323_p00;
wire  signed [39:0] mul_ln1192_1_fu_6047_p00;
wire  signed [39:0] mul_ln1192_2_fu_6069_p00;
wire  signed [39:0] mul_ln1192_3_fu_6185_p00;
wire  signed [39:0] mul_ln1192_fu_5975_p00;
wire  signed [39:0] mul_ln703_57_fu_5872_p00;
wire  signed [39:0] mul_ln703_58_fu_5895_p00;
wire  signed [39:0] mul_ln703_59_fu_6011_p00;
wire  signed [39:0] mul_ln703_60_fu_6149_p00;
wire  signed [39:0] mul_ln703_61_fu_6221_p00;
wire  signed [39:0] mul_ln703_62_fu_6243_p00;
wire  signed [39:0] mul_ln708_fu_5818_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter14 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 7 ),
    .AddressRange( 25600 ),
    .AddressWidth( 15 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_layer2_weights_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_0_address0),
    .ce0(layer2_weights_V_0_ce0),
    .q0(layer2_weights_V_0_q0)
);

nn_inference_layer2_weights_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_1_address0),
    .ce0(layer2_weights_V_1_ce0),
    .q0(layer2_weights_V_1_q0)
);

nn_inference_layer2_weights_V_2 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_2_address0),
    .ce0(layer2_weights_V_2_ce0),
    .q0(layer2_weights_V_2_q0)
);

nn_inference_layer2_weights_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_3_address0),
    .ce0(layer2_weights_V_3_ce0),
    .q0(layer2_weights_V_3_q0)
);

nn_inference_layer2_weights_V_4 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_4_address0),
    .ce0(layer2_weights_V_4_ce0),
    .q0(layer2_weights_V_4_q0)
);

nn_inference_layer2_weights_V_5 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_5_address0),
    .ce0(layer2_weights_V_5_ce0),
    .q0(layer2_weights_V_5_q0)
);

nn_inference_layer2_weights_V_6 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_6_address0),
    .ce0(layer2_weights_V_6_ce0),
    .q0(layer2_weights_V_6_q0)
);

nn_inference_layer2_weights_V_7 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_7_address0),
    .ce0(layer2_weights_V_7_ce0),
    .q0(layer2_weights_V_7_q0)
);

nn_inference_layer2_weights_V_8 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_8_address0),
    .ce0(layer2_weights_V_8_ce0),
    .q0(layer2_weights_V_8_q0)
);

nn_inference_layer2_weights_V_9 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_9_address0),
    .ce0(layer2_weights_V_9_ce0),
    .q0(layer2_weights_V_9_q0)
);

nn_inference_layer2_weights_V_10 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_10_address0),
    .ce0(layer2_weights_V_10_ce0),
    .q0(layer2_weights_V_10_q0)
);

nn_inference_layer2_weights_V_11 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_11_address0),
    .ce0(layer2_weights_V_11_ce0),
    .q0(layer2_weights_V_11_q0)
);

nn_inference_layer2_weights_V_12 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_12_address0),
    .ce0(layer2_weights_V_12_ce0),
    .q0(layer2_weights_V_12_q0)
);

nn_inference_layer2_weights_V_13 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_13_address0),
    .ce0(layer2_weights_V_13_ce0),
    .q0(layer2_weights_V_13_q0)
);

nn_inference_layer2_weights_V_14 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_14_address0),
    .ce0(layer2_weights_V_14_ce0),
    .q0(layer2_weights_V_14_q0)
);

nn_inference_layer2_weights_V_15 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_15_address0),
    .ce0(layer2_weights_V_15_ce0),
    .q0(layer2_weights_V_15_q0)
);

nn_inference_layer2_weights_V_16 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_16_address0),
    .ce0(layer2_weights_V_16_ce0),
    .q0(layer2_weights_V_16_q0)
);

nn_inference_layer2_weights_V_17 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_17_address0),
    .ce0(layer2_weights_V_17_ce0),
    .q0(layer2_weights_V_17_q0)
);

nn_inference_layer2_weights_V_18 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_18_address0),
    .ce0(layer2_weights_V_18_ce0),
    .q0(layer2_weights_V_18_q0)
);

nn_inference_layer2_weights_V_19 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_19_address0),
    .ce0(layer2_weights_V_19_ce0),
    .q0(layer2_weights_V_19_q0)
);

nn_inference_layer2_weights_V_20 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_20_address0),
    .ce0(layer2_weights_V_20_ce0),
    .q0(layer2_weights_V_20_q0)
);

nn_inference_layer2_weights_V_21 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_21_address0),
    .ce0(layer2_weights_V_21_ce0),
    .q0(layer2_weights_V_21_q0)
);

nn_inference_layer2_weights_V_22 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_22_address0),
    .ce0(layer2_weights_V_22_ce0),
    .q0(layer2_weights_V_22_q0)
);

nn_inference_layer2_weights_V_23 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_23_address0),
    .ce0(layer2_weights_V_23_ce0),
    .q0(layer2_weights_V_23_q0)
);

nn_inference_layer2_weights_V_24 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_24_address0),
    .ce0(layer2_weights_V_24_ce0),
    .q0(layer2_weights_V_24_q0)
);

nn_inference_layer2_weights_V_25 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_25_address0),
    .ce0(layer2_weights_V_25_ce0),
    .q0(layer2_weights_V_25_q0)
);

nn_inference_layer2_weights_V_26 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_26_address0),
    .ce0(layer2_weights_V_26_ce0),
    .q0(layer2_weights_V_26_q0)
);

nn_inference_layer2_weights_V_27 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_27_address0),
    .ce0(layer2_weights_V_27_ce0),
    .q0(layer2_weights_V_27_q0)
);

nn_inference_layer2_weights_V_28 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_28_address0),
    .ce0(layer2_weights_V_28_ce0),
    .q0(layer2_weights_V_28_q0)
);

nn_inference_layer2_weights_V_29 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_29_address0),
    .ce0(layer2_weights_V_29_ce0),
    .q0(layer2_weights_V_29_q0)
);

nn_inference_layer2_weights_V_30 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_30_address0),
    .ce0(layer2_weights_V_30_ce0),
    .q0(layer2_weights_V_30_q0)
);

nn_inference_layer2_weights_V_31 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_31_address0),
    .ce0(layer2_weights_V_31_ce0),
    .q0(layer2_weights_V_31_q0)
);

nn_inference_layer2_weights_V_32 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_32_address0),
    .ce0(layer2_weights_V_32_ce0),
    .q0(layer2_weights_V_32_q0)
);

nn_inference_layer2_weights_V_33 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_33_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_33_address0),
    .ce0(layer2_weights_V_33_ce0),
    .q0(layer2_weights_V_33_q0)
);

nn_inference_layer2_weights_V_34 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_34_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_34_address0),
    .ce0(layer2_weights_V_34_ce0),
    .q0(layer2_weights_V_34_q0)
);

nn_inference_layer2_weights_V_35 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_35_address0),
    .ce0(layer2_weights_V_35_ce0),
    .q0(layer2_weights_V_35_q0)
);

nn_inference_layer2_weights_V_36 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_36_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_36_address0),
    .ce0(layer2_weights_V_36_ce0),
    .q0(layer2_weights_V_36_q0)
);

nn_inference_layer2_weights_V_37 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_37_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_37_address0),
    .ce0(layer2_weights_V_37_ce0),
    .q0(layer2_weights_V_37_q0)
);

nn_inference_layer2_weights_V_38 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_38_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_38_address0),
    .ce0(layer2_weights_V_38_ce0),
    .q0(layer2_weights_V_38_q0)
);

nn_inference_layer2_weights_V_39 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_39_address0),
    .ce0(layer2_weights_V_39_ce0),
    .q0(layer2_weights_V_39_q0)
);

nn_inference_layer2_weights_V_40 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_40_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_40_address0),
    .ce0(layer2_weights_V_40_ce0),
    .q0(layer2_weights_V_40_q0)
);

nn_inference_layer2_weights_V_41 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_41_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_41_address0),
    .ce0(layer2_weights_V_41_ce0),
    .q0(layer2_weights_V_41_q0)
);

nn_inference_layer2_weights_V_42 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_42_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_42_address0),
    .ce0(layer2_weights_V_42_ce0),
    .q0(layer2_weights_V_42_q0)
);

nn_inference_layer2_weights_V_43 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_43_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_43_address0),
    .ce0(layer2_weights_V_43_ce0),
    .q0(layer2_weights_V_43_q0)
);

nn_inference_layer2_weights_V_44 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_44_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_44_address0),
    .ce0(layer2_weights_V_44_ce0),
    .q0(layer2_weights_V_44_q0)
);

nn_inference_layer2_weights_V_45 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_45_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_45_address0),
    .ce0(layer2_weights_V_45_ce0),
    .q0(layer2_weights_V_45_q0)
);

nn_inference_layer2_weights_V_46 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_46_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_46_address0),
    .ce0(layer2_weights_V_46_ce0),
    .q0(layer2_weights_V_46_q0)
);

nn_inference_layer2_weights_V_47 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_47_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_47_address0),
    .ce0(layer2_weights_V_47_ce0),
    .q0(layer2_weights_V_47_q0)
);

nn_inference_layer2_weights_V_48 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_48_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_48_address0),
    .ce0(layer2_weights_V_48_ce0),
    .q0(layer2_weights_V_48_q0)
);

nn_inference_layer2_weights_V_49 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_49_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_49_address0),
    .ce0(layer2_weights_V_49_ce0),
    .q0(layer2_weights_V_49_q0)
);

nn_inference_layer2_weights_V_50 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_50_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_50_address0),
    .ce0(layer2_weights_V_50_ce0),
    .q0(layer2_weights_V_50_q0)
);

nn_inference_layer2_weights_V_51 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_51_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_51_address0),
    .ce0(layer2_weights_V_51_ce0),
    .q0(layer2_weights_V_51_q0)
);

nn_inference_layer2_weights_V_52 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_52_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_52_address0),
    .ce0(layer2_weights_V_52_ce0),
    .q0(layer2_weights_V_52_q0)
);

nn_inference_layer2_weights_V_53 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_53_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_53_address0),
    .ce0(layer2_weights_V_53_ce0),
    .q0(layer2_weights_V_53_q0)
);

nn_inference_layer2_weights_V_54 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_54_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_54_address0),
    .ce0(layer2_weights_V_54_ce0),
    .q0(layer2_weights_V_54_q0)
);

nn_inference_layer2_weights_V_55 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_55_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_55_address0),
    .ce0(layer2_weights_V_55_ce0),
    .q0(layer2_weights_V_55_q0)
);

nn_inference_layer2_weights_V_56 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_56_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_56_address0),
    .ce0(layer2_weights_V_56_ce0),
    .q0(layer2_weights_V_56_q0)
);

nn_inference_layer2_weights_V_57 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_57_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_57_address0),
    .ce0(layer2_weights_V_57_ce0),
    .q0(layer2_weights_V_57_q0)
);

nn_inference_layer2_weights_V_58 #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_58_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_58_address0),
    .ce0(layer2_weights_V_58_ce0),
    .q0(layer2_weights_V_58_q0)
);

nn_inference_layer2_weights_V_59 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_59_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_59_address0),
    .ce0(layer2_weights_V_59_ce0),
    .q0(layer2_weights_V_59_q0)
);

nn_inference_layer2_weights_V_60 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_60_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_60_address0),
    .ce0(layer2_weights_V_60_ce0),
    .q0(layer2_weights_V_60_q0)
);

nn_inference_layer2_weights_V_61 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_61_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_61_address0),
    .ce0(layer2_weights_V_61_ce0),
    .q0(layer2_weights_V_61_q0)
);

nn_inference_layer2_weights_V_62 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_62_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_62_address0),
    .ce0(layer2_weights_V_62_ce0),
    .q0(layer2_weights_V_62_q0)
);

nn_inference_layer2_weights_V_63 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
layer2_weights_V_63_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_V_63_address0),
    .ce0(layer2_weights_V_63_ce0),
    .q0(layer2_weights_V_63_q0)
);

nn_inference_fp_input_img_V #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
fp_input_img_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fp_input_img_V_address0),
    .ce0(fp_input_img_V_ce0),
    .we0(fp_input_img_V_we0),
    .d0(fp_input_img_V_d0),
    .q0(fp_input_img_V_q0),
    .address1(fp_input_img_V_address1),
    .ce1(fp_input_img_V_ce1),
    .q1(fp_input_img_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .q0(temp_output_0_V_q0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0),
    .address1(temp_output2_0_V_address1),
    .ce1(temp_output2_0_V_ce1),
    .q1(temp_output2_0_V_q1)
);

nn_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2261_p0),
    .ce(1'b1),
    .dout(grp_fu_2261_p1)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2264_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_2264_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U3(
    .din0(weights_layer1_weights_V_load_reg_6610),
    .din1(r_V_reg_6605),
    .dout(r_V_1_fu_2652_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U4(
    .din0(weights_layer1_weights_V_load_1_reg_6620),
    .din1(r_V_2_reg_6615),
    .dout(r_V_3_fu_2682_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U5(
    .din0(layer2_weights_V_0_q0),
    .din1(mul_ln1118_fu_3281_p1),
    .dout(mul_ln1118_fu_3281_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U6(
    .din0(layer2_weights_V_1_q0),
    .din1(mul_ln703_fu_3290_p1),
    .dout(mul_ln703_fu_3290_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U7(
    .din0(layer2_weights_V_2_q0),
    .din1(mul_ln1118_2_fu_3323_p1),
    .dout(mul_ln1118_2_fu_3323_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U8(
    .din0(layer2_weights_V_3_q0),
    .din1(mul_ln703_1_fu_3360_p1),
    .dout(mul_ln703_1_fu_3360_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U9(
    .din0(layer2_weights_V_4_q0),
    .din1(mul_ln1118_4_fu_3379_p1),
    .dout(mul_ln1118_4_fu_3379_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U10(
    .din0(layer2_weights_V_5_q0),
    .din1(mul_ln703_2_fu_3388_p1),
    .dout(mul_ln703_2_fu_3388_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U11(
    .din0(layer2_weights_V_6_q0),
    .din1(mul_ln703_3_fu_3459_p1),
    .dout(mul_ln703_3_fu_3459_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U12(
    .din0(layer2_weights_V_7_q0),
    .din1(mul_ln703_4_fu_3492_p1),
    .dout(mul_ln703_4_fu_3492_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U13(
    .din0(layer2_weights_V_8_q0),
    .din1(mul_ln703_5_fu_3525_p1),
    .dout(mul_ln703_5_fu_3525_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U14(
    .din0(layer2_weights_V_9_q0),
    .din1(mul_ln703_6_fu_3544_p1),
    .dout(mul_ln703_6_fu_3544_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U15(
    .din0(layer2_weights_V_10_q0),
    .din1(mul_ln703_7_fu_3553_p1),
    .dout(mul_ln703_7_fu_3553_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U16(
    .din0(layer2_weights_V_11_q0),
    .din1(mul_ln703_8_fu_3620_p1),
    .dout(mul_ln703_8_fu_3620_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U17(
    .din0(layer2_weights_V_12_q0),
    .din1(mul_ln703_9_fu_3653_p1),
    .dout(mul_ln703_9_fu_3653_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U18(
    .din0(layer2_weights_V_13_q0),
    .din1(mul_ln703_10_fu_3686_p1),
    .dout(mul_ln703_10_fu_3686_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U19(
    .din0(layer2_weights_V_14_q0),
    .din1(mul_ln703_11_fu_3705_p1),
    .dout(mul_ln703_11_fu_3705_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U20(
    .din0(layer2_weights_V_15_q0),
    .din1(mul_ln703_12_fu_3714_p1),
    .dout(mul_ln703_12_fu_3714_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U21(
    .din0(layer2_weights_V_16_q0),
    .din1(mul_ln703_13_fu_3781_p1),
    .dout(mul_ln703_13_fu_3781_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U22(
    .din0(layer2_weights_V_17_q0),
    .din1(mul_ln703_14_fu_3814_p1),
    .dout(mul_ln703_14_fu_3814_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U23(
    .din0(layer2_weights_V_18_q0),
    .din1(mul_ln703_15_fu_3847_p1),
    .dout(mul_ln703_15_fu_3847_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U24(
    .din0(layer2_weights_V_19_q0),
    .din1(mul_ln1118_5_fu_3866_p1),
    .dout(mul_ln1118_5_fu_3866_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U25(
    .din0(layer2_weights_V_20_q0),
    .din1(mul_ln703_16_fu_3875_p1),
    .dout(mul_ln703_16_fu_3875_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U26(
    .din0(layer2_weights_V_21_q0),
    .din1(mul_ln703_17_fu_3946_p1),
    .dout(mul_ln703_17_fu_3946_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U27(
    .din0(layer2_weights_V_22_q0),
    .din1(mul_ln703_18_fu_3979_p1),
    .dout(mul_ln703_18_fu_3979_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U28(
    .din0(layer2_weights_V_23_q0),
    .din1(mul_ln703_19_fu_4012_p1),
    .dout(mul_ln703_19_fu_4012_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U29(
    .din0(layer2_weights_V_24_q0),
    .din1(mul_ln703_20_fu_4031_p1),
    .dout(mul_ln703_20_fu_4031_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U30(
    .din0(layer2_weights_V_25_q0),
    .din1(mul_ln703_21_fu_4040_p1),
    .dout(mul_ln703_21_fu_4040_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U31(
    .din0(layer2_weights_V_26_q0),
    .din1(mul_ln703_22_fu_4107_p1),
    .dout(mul_ln703_22_fu_4107_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U32(
    .din0(layer2_weights_V_27_q0),
    .din1(mul_ln703_23_fu_4140_p1),
    .dout(mul_ln703_23_fu_4140_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U33(
    .din0(layer2_weights_V_28_q0),
    .din1(mul_ln703_24_fu_4173_p1),
    .dout(mul_ln703_24_fu_4173_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U34(
    .din0(layer2_weights_V_29_q0),
    .din1(mul_ln703_25_fu_4192_p1),
    .dout(mul_ln703_25_fu_4192_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U35(
    .din0(layer2_weights_V_30_q0),
    .din1(mul_ln703_26_fu_4201_p1),
    .dout(mul_ln703_26_fu_4201_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U36(
    .din0(layer2_weights_V_31_q0),
    .din1(mul_ln1118_6_fu_4268_p1),
    .dout(mul_ln1118_6_fu_4268_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U37(
    .din0(layer2_weights_V_32_q0),
    .din1(mul_ln703_27_fu_4305_p1),
    .dout(mul_ln703_27_fu_4305_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U38(
    .din0(layer2_weights_V_33_q0),
    .din1(mul_ln703_28_fu_4338_p1),
    .dout(mul_ln703_28_fu_4338_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U39(
    .din0(layer2_weights_V_34_q0),
    .din1(mul_ln703_29_fu_4357_p1),
    .dout(mul_ln703_29_fu_4357_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U40(
    .din0(layer2_weights_V_35_q0),
    .din1(mul_ln703_30_fu_4366_p1),
    .dout(mul_ln703_30_fu_4366_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U41(
    .din0(layer2_weights_V_36_q0),
    .din1(mul_ln703_31_fu_4433_p1),
    .dout(mul_ln703_31_fu_4433_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U42(
    .din0(layer2_weights_V_37_q0),
    .din1(mul_ln703_32_fu_4466_p1),
    .dout(mul_ln703_32_fu_4466_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U43(
    .din0(layer2_weights_V_38_q0),
    .din1(mul_ln703_33_fu_4499_p1),
    .dout(mul_ln703_33_fu_4499_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U44(
    .din0(layer2_weights_V_39_q0),
    .din1(mul_ln703_34_fu_4518_p1),
    .dout(mul_ln703_34_fu_4518_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U45(
    .din0(layer2_weights_V_40_q0),
    .din1(mul_ln703_35_fu_4527_p1),
    .dout(mul_ln703_35_fu_4527_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U46(
    .din0(layer2_weights_V_41_q0),
    .din1(mul_ln1118_7_fu_4594_p1),
    .dout(mul_ln1118_7_fu_4594_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U47(
    .din0(layer2_weights_V_42_q0),
    .din1(mul_ln703_36_fu_4631_p1),
    .dout(mul_ln703_36_fu_4631_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U48(
    .din0(layer2_weights_V_43_q0),
    .din1(mul_ln703_37_fu_4664_p1),
    .dout(mul_ln703_37_fu_4664_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U49(
    .din0(layer2_weights_V_44_q0),
    .din1(mul_ln703_38_fu_4683_p1),
    .dout(mul_ln703_38_fu_4683_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U50(
    .din0(layer2_weights_V_45_q0),
    .din1(mul_ln703_39_fu_4692_p1),
    .dout(mul_ln703_39_fu_4692_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U51(
    .din0(layer2_weights_V_46_q0),
    .din1(mul_ln703_40_fu_4759_p1),
    .dout(mul_ln703_40_fu_4759_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U52(
    .din0(layer2_weights_V_47_q0),
    .din1(mul_ln703_41_fu_4792_p1),
    .dout(mul_ln703_41_fu_4792_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U53(
    .din0(layer2_weights_V_48_q0),
    .din1(mul_ln703_42_fu_4825_p1),
    .dout(mul_ln703_42_fu_4825_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U54(
    .din0(layer2_weights_V_49_q0),
    .din1(mul_ln703_43_fu_4844_p1),
    .dout(mul_ln703_43_fu_4844_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U55(
    .din0(layer2_weights_V_50_q0),
    .din1(mul_ln703_44_fu_4853_p1),
    .dout(mul_ln703_44_fu_4853_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U56(
    .din0(layer2_weights_V_51_q0),
    .din1(mul_ln703_45_fu_4920_p1),
    .dout(mul_ln703_45_fu_4920_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U57(
    .din0(layer2_weights_V_52_q0),
    .din1(mul_ln703_46_fu_4953_p1),
    .dout(mul_ln703_46_fu_4953_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U58(
    .din0(layer2_weights_V_53_q0),
    .din1(mul_ln703_47_fu_4986_p1),
    .dout(mul_ln703_47_fu_4986_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U59(
    .din0(layer2_weights_V_54_q0),
    .din1(mul_ln703_48_fu_5005_p1),
    .dout(mul_ln703_48_fu_5005_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U60(
    .din0(layer2_weights_V_55_q0),
    .din1(mul_ln703_49_fu_5014_p1),
    .dout(mul_ln703_49_fu_5014_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U61(
    .din0(layer2_weights_V_56_q0),
    .din1(mul_ln703_50_fu_5081_p1),
    .dout(mul_ln703_50_fu_5081_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U62(
    .din0(layer2_weights_V_57_q0),
    .din1(mul_ln703_51_fu_5114_p1),
    .dout(mul_ln703_51_fu_5114_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U63(
    .din0(layer2_weights_V_58_q0),
    .din1(mul_ln1118_8_fu_5147_p1),
    .dout(mul_ln1118_8_fu_5147_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U64(
    .din0(layer2_weights_V_59_q0),
    .din1(mul_ln703_52_fu_5166_p1),
    .dout(mul_ln703_52_fu_5166_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U65(
    .din0(layer2_weights_V_60_q0),
    .din1(mul_ln703_53_fu_5214_p1),
    .dout(mul_ln703_53_fu_5214_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U66(
    .din0(layer2_weights_V_61_q0),
    .din1(mul_ln703_54_fu_5247_p1),
    .dout(mul_ln703_54_fu_5247_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U67(
    .din0(layer2_weights_V_62_load_reg_8269),
    .din1(mul_ln703_55_fu_5289_p1),
    .dout(mul_ln703_55_fu_5289_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U68(
    .din0(layer2_weights_V_63_q0),
    .din1(mul_ln703_56_fu_5311_p1),
    .dout(mul_ln703_56_fu_5311_p2)
);

nn_inference_mul_32s_7s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 38 ))
mul_32s_7s_38_1_1_U69(
    .din0(temp_output2_0_V_load_3_reg_8386),
    .din1(mul_ln1118_9_fu_5698_p1),
    .dout(mul_ln1118_9_fu_5698_p2)
);

nn_inference_mul_32s_7ns_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 38 ))
mul_32s_7ns_38_1_1_U70(
    .din0(temp_output2_0_V_load_8_reg_8442),
    .din1(mul_ln1118_10_fu_5730_p1),
    .dout(mul_ln1118_10_fu_5730_p2)
);

nn_inference_mul_32s_7s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 39 ))
mul_32s_7s_39_1_1_U71(
    .din0(temp_output2_0_V_q0),
    .din1(mul_ln1118_11_fu_5776_p1),
    .dout(mul_ln1118_11_fu_5776_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U72(
    .din0(mul_ln708_fu_5818_p0),
    .din1(mul_ln708_fu_5818_p1),
    .dout(mul_ln708_fu_5818_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U73(
    .din0(mul_ln1118_12_fu_5831_p0),
    .din1(mul_ln1118_12_fu_5831_p1),
    .dout(mul_ln1118_12_fu_5831_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U74(
    .din0(mul_ln703_57_fu_5872_p0),
    .din1(mul_ln703_57_fu_5872_p1),
    .dout(mul_ln703_57_fu_5872_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U75(
    .din0(mul_ln703_58_fu_5895_p0),
    .din1(mul_ln703_58_fu_5895_p1),
    .dout(mul_ln703_58_fu_5895_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U76(
    .din0(mul_ln1192_fu_5975_p0),
    .din1(mul_ln1192_fu_5975_p1),
    .dout(mul_ln1192_fu_5975_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U77(
    .din0(mul_ln703_59_fu_6011_p0),
    .din1(mul_ln703_59_fu_6011_p1),
    .dout(mul_ln703_59_fu_6011_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U78(
    .din0(mul_ln1192_1_fu_6047_p0),
    .din1(mul_ln1192_1_fu_6047_p1),
    .dout(mul_ln1192_1_fu_6047_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U79(
    .din0(mul_ln1192_2_fu_6069_p0),
    .din1(mul_ln1192_2_fu_6069_p1),
    .dout(mul_ln1192_2_fu_6069_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U80(
    .din0(mul_ln703_60_fu_6149_p0),
    .din1(mul_ln703_60_fu_6149_p1),
    .dout(mul_ln703_60_fu_6149_p2)
);

nn_inference_mul_9s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_9s_32s_40_1_1_U81(
    .din0(mul_ln1192_3_fu_6185_p0),
    .din1(mul_ln1192_3_fu_6185_p1),
    .dout(mul_ln1192_3_fu_6185_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U82(
    .din0(mul_ln703_61_fu_6221_p0),
    .din1(mul_ln703_61_fu_6221_p1),
    .dout(mul_ln703_61_fu_6221_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U83(
    .din0(mul_ln703_62_fu_6243_p0),
    .din1(mul_ln703_62_fu_6243_p1),
    .dout(mul_ln703_62_fu_6243_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U84(
    .din0(mul_ln1118_13_fu_6323_p0),
    .din1(mul_ln1118_13_fu_6323_p1),
    .dout(mul_ln1118_13_fu_6323_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_2563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln21_fu_2563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state49) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state49)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state49);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state65) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state65)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state65);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state78) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state78)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state78);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp5_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_2159 <= 7'd0;
    end else if (((icmp_ln77_fu_2732_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_2159 <= add_ln77_fu_2726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_2_reg_2181 <= 5'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln92_fu_5357_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        i_2_reg_2181 <= add_ln92_fu_5351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        i_3_reg_2227 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln109_fu_6386_p2 == 1'd0))) begin
        i_3_reg_2227 <= add_ln109_fu_6380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_2112 <= 9'd0;
    end else if (((icmp_ln5_fu_2275_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_2112 <= add_ln5_fu_2269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j_1_reg_2170 <= 5'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln40_fu_3261_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        j_1_reg_2170 <= add_ln40_fu_3255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        j_2_reg_2216 <= 2'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_5800_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        j_2_reg_2216 <= add_ln59_fu_5794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_2123 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_2123 <= add_ln21_reg_6557;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_2135 <= 9'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_2577_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_reg_2135 <= add_ln25_fu_2583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        max_idx_V_reg_2238 <= 32'd4294967040;
    end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln109_fu_6386_p2 == 1'd0))) begin
        max_idx_V_reg_2238 <= max_idx_V_1_fu_6430_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        max_val_V_reg_2250 <= 32'd4294935040;
    end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln109_fu_6386_p2 == 1'd0))) begin
        max_val_V_reg_2250 <= max_val_V_1_fu_6410_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_V_2_reg_2146 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_reg_6576_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_2_reg_2146 <= {{ret_V_1_fu_2710_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        temp_output3_V_0_0_0_reg_2204 <= 32'd256;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1) & (icmp_ln59_reg_8603_pp5_iter2_reg == 1'd0))) begin
        temp_output3_V_0_0_0_reg_2204 <= temp_output3_0_1_V_2_fu_6373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_6497_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_6539 <= F2_fu_2331_p2;
        icmp_ln571_reg_6531 <= icmp_ln571_fu_2325_p2;
        p_Result_8_reg_6521 <= ireg_fu_2291_p1[32'd63];
        trunc_ln565_reg_6526 <= trunc_ln565_fu_2321_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_reg_6557 <= add_ln21_fu_2557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln885_1_fu_5368_p2 == 1'd0))) begin
        add_ln908_1_reg_8318 <= add_ln908_1_fu_5522_p2;
        icmp_ln908_1_reg_8313 <= icmp_ln908_1_fu_5508_p2;
        p_Result_14_reg_8303 <= temp_output2_0_V_q1[32'd31];
        select_ln908_2_reg_8328 <= select_ln908_2_fu_5540_p3;
        sub_ln909_1_reg_8323 <= sub_ln909_1_fu_5534_p2;
        tmp_V_5_reg_8308 <= tmp_V_5_fu_5388_p3;
        trunc_ln893_1_reg_8333 <= trunc_ln893_1_fu_5548_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_2743_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln908_reg_6664 <= add_ln908_fu_2897_p2;
        icmp_ln908_reg_6659 <= icmp_ln908_fu_2883_p2;
        p_Result_10_reg_6649 <= temp_output_0_V_q1[32'd31];
        select_ln908_reg_6674 <= select_ln908_fu_2915_p3;
        sub_ln909_reg_6669 <= sub_ln909_fu_2909_p2;
        tmp_V_4_reg_6654 <= tmp_V_4_fu_2763_p3;
        trunc_ln893_reg_6679 <= trunc_ln893_fu_2923_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_2275_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_6501[8 : 0] <= i_cast_fu_2281_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_6501_pp0_iter1_reg[8 : 0] <= i_cast_reg_6501[8 : 0];
        icmp_ln5_reg_6497 <= icmp_ln5_fu_2275_p2;
        icmp_ln5_reg_6497_pp0_iter1_reg <= icmp_ln5_reg_6497;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_cast_reg_6501_pp0_iter2_reg[8 : 0] <= i_cast_reg_6501_pp0_iter1_reg[8 : 0];
        icmp_ln5_reg_6497_pp0_iter2_reg <= icmp_ln5_reg_6497_pp0_iter1_reg;
        input_img_load_reg_6511_pp0_iter2_reg <= input_img_load_reg_6511;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_6645 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln1506_1_reg_6694 <= icmp_ln1506_1_fu_3045_p2;
        icmp_ln1506_reg_6689 <= icmp_ln1506_fu_3039_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln885_1_reg_8299 == 1'd0))) begin
        icmp_ln1506_2_reg_8343 <= icmp_ln1506_2_fu_5664_p2;
        icmp_ln1506_3_reg_8348 <= icmp_ln1506_3_fu_5670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_6576 <= icmp_ln25_fu_2577_p2;
        icmp_ln25_reg_6576_pp1_iter1_reg <= icmp_ln25_reg_6576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln40_reg_7652 <= icmp_ln40_fu_3261_p2;
        icmp_ln40_reg_7652_pp3_iter1_reg <= icmp_ln40_reg_7652;
        j_1_cast_reg_7656_pp3_iter1_reg[4 : 0] <= j_1_cast_reg_7656[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln40_reg_7652_pp3_iter10_reg <= icmp_ln40_reg_7652_pp3_iter9_reg;
        icmp_ln40_reg_7652_pp3_iter11_reg <= icmp_ln40_reg_7652_pp3_iter10_reg;
        icmp_ln40_reg_7652_pp3_iter12_reg <= icmp_ln40_reg_7652_pp3_iter11_reg;
        icmp_ln40_reg_7652_pp3_iter13_reg <= icmp_ln40_reg_7652_pp3_iter12_reg;
        icmp_ln40_reg_7652_pp3_iter2_reg <= icmp_ln40_reg_7652_pp3_iter1_reg;
        icmp_ln40_reg_7652_pp3_iter3_reg <= icmp_ln40_reg_7652_pp3_iter2_reg;
        icmp_ln40_reg_7652_pp3_iter4_reg <= icmp_ln40_reg_7652_pp3_iter3_reg;
        icmp_ln40_reg_7652_pp3_iter5_reg <= icmp_ln40_reg_7652_pp3_iter4_reg;
        icmp_ln40_reg_7652_pp3_iter6_reg <= icmp_ln40_reg_7652_pp3_iter5_reg;
        icmp_ln40_reg_7652_pp3_iter7_reg <= icmp_ln40_reg_7652_pp3_iter6_reg;
        icmp_ln40_reg_7652_pp3_iter8_reg <= icmp_ln40_reg_7652_pp3_iter7_reg;
        icmp_ln40_reg_7652_pp3_iter9_reg <= icmp_ln40_reg_7652_pp3_iter8_reg;
        j_1_cast_reg_7656_pp3_iter10_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter9_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter11_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter10_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter12_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter11_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter13_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter12_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter2_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter1_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter3_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter2_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter4_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter3_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter5_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter4_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter6_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter5_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter7_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter6_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter8_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter7_reg[4 : 0];
        j_1_cast_reg_7656_pp3_iter9_reg[4 : 0] <= j_1_cast_reg_7656_pp3_iter8_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln59_reg_8603 <= icmp_ln59_fu_5800_p2;
        icmp_ln59_reg_8603_pp5_iter1_reg <= icmp_ln59_reg_8603;
        trunc_ln1118_reg_8607_pp5_iter1_reg <= trunc_ln1118_reg_8607;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln59_reg_8603_pp5_iter2_reg <= icmp_ln59_reg_8603_pp5_iter1_reg;
        trunc_ln1118_reg_8607_pp5_iter2_reg <= trunc_ln1118_reg_8607_pp5_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln885_1_reg_8299 <= icmp_ln885_1_fu_5368_p2;
        temp_output2_0_V_addr_2_reg_8293_pp4_iter1_reg <= temp_output2_0_V_addr_2_reg_8293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln885_1_reg_8299_pp4_iter2_reg <= icmp_ln885_1_reg_8299;
        temp_output2_0_V_addr_2_reg_8293_pp4_iter2_reg <= temp_output2_0_V_addr_2_reg_8293_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln885_reg_6645 <= icmp_ln885_fu_2743_p2;
        temp_output_0_V_addr_1_reg_6639_pp2_iter1_reg <= temp_output_0_V_addr_1_reg_6639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln885_reg_6645_pp2_iter2_reg <= icmp_ln885_reg_6645;
        temp_output_0_V_addr_1_reg_6639_pp2_iter2_reg <= temp_output_0_V_addr_1_reg_6639_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_6497 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_load_reg_6511 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln40_fu_3261_p2 == 1'd0))) begin
        j_1_cast_reg_7656[4 : 0] <= j_1_cast_fu_3267_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter12_reg == 1'd0))) begin
        layer2_weights_V_62_load_reg_8269 <= layer2_weights_V_62_q0;
        tmp_69_reg_8274 <= {{add_ln1192_60_fu_5270_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        mul_ln1118_10_reg_8548 <= mul_ln1118_10_fu_5730_p2;
        mul_ln1118_11_reg_8583 <= mul_ln1118_11_fu_5776_p2;
        mul_ln1118_9_reg_8518 <= mul_ln1118_9_fu_5698_p2;
        sext_ln1116_63_reg_8508 <= sext_ln1116_63_fu_5689_p1;
        sext_ln1116_64_reg_8513 <= sext_ln1116_64_fu_5692_p1;
        sext_ln1116_65_reg_8523[37 : 5] <= sext_ln1116_65_fu_5711_p1[37 : 5];
        sext_ln1116_66_reg_8528 <= sext_ln1116_66_fu_5715_p1;
        sext_ln1116_67_reg_8538 <= sext_ln1116_67_fu_5721_p1;
        sext_ln1116_68_reg_8553[37 : 4] <= sext_ln1116_68_fu_5753_p1[37 : 4];
        sext_ln1116_69_reg_8563 <= sext_ln1116_69_fu_5760_p1;
        sext_ln1116_70_reg_8573 <= sext_ln1116_70_fu_5766_p1;
        sext_ln1116_71_reg_8578 <= sext_ln1116_71_fu_5769_p1;
        sext_ln1192_1_reg_8543 <= sext_ln1192_1_fu_5724_p1;
        sext_ln1192_2_reg_8558 <= sext_ln1192_2_fu_5757_p1;
        sext_ln1192_3_reg_8568 <= sext_ln1192_3_fu_5763_p1;
        sext_ln1192_reg_8533 <= sext_ln1192_fu_5718_p1;
        sext_ln708_reg_8503 <= sext_ln708_fu_5686_p1;
        shl_ln1118_2_reg_8588[38 : 7] <= shl_ln1118_2_fu_5782_p3[38 : 7];
        temp_output2_0_V_load_15_cast_reg_8593 <= temp_output2_0_V_load_15_cast_fu_5790_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln40_reg_7652 == 1'd0))) begin
        mul_ln1118_4_reg_7759 <= mul_ln1118_4_fu_3379_p2;
        mul_ln703_1_reg_7749 <= mul_ln703_1_fu_3360_p2;
        mul_ln703_2_reg_7764 <= mul_ln703_2_fu_3388_p2;
        tmp_10_reg_7754 <= {{add_ln1192_1_fu_3350_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter3_reg == 1'd0))) begin
        mul_ln1118_5_reg_7894 <= mul_ln1118_5_fu_3866_p2;
        mul_ln703_15_reg_7884 <= mul_ln703_15_fu_3847_p2;
        mul_ln703_16_reg_7899 <= mul_ln703_16_fu_3875_p2;
        tmp_25_reg_7889 <= {{add_ln1192_16_fu_3837_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter11_reg == 1'd0))) begin
        mul_ln1118_8_reg_8239 <= mul_ln1118_8_fu_5147_p2;
        mul_ln703_52_reg_8249 <= mul_ln703_52_fu_5166_p2;
        tmp_65_reg_8244 <= {{add_ln1192_56_fu_5137_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_reg_8603 == 1'd0))) begin
        mul_ln1192_1_reg_8640 <= mul_ln1192_1_fu_6047_p2;
        mul_ln1192_2_reg_8650 <= mul_ln1192_2_fu_6069_p2;
        tmp_77_reg_8645 <= {{add_ln1192_70_fu_6034_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter2_reg == 1'd0))) begin
        mul_ln703_10_reg_7839 <= mul_ln703_10_fu_3686_p2;
        mul_ln703_11_reg_7849 <= mul_ln703_11_fu_3705_p2;
        mul_ln703_12_reg_7854 <= mul_ln703_12_fu_3714_p2;
        tmp_20_reg_7844 <= {{add_ln1192_11_fu_3676_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter4_reg == 1'd0))) begin
        mul_ln703_19_reg_7929 <= mul_ln703_19_fu_4012_p2;
        mul_ln703_20_reg_7939 <= mul_ln703_20_fu_4031_p2;
        mul_ln703_21_reg_7944 <= mul_ln703_21_fu_4040_p2;
        tmp_30_reg_7934 <= {{add_ln1192_21_fu_4002_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter5_reg == 1'd0))) begin
        mul_ln703_24_reg_7974 <= mul_ln703_24_fu_4173_p2;
        mul_ln703_25_reg_7984 <= mul_ln703_25_fu_4192_p2;
        mul_ln703_26_reg_7989 <= mul_ln703_26_fu_4201_p2;
        tmp_35_reg_7979 <= {{add_ln1192_26_fu_4163_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter6_reg == 1'd0))) begin
        mul_ln703_28_reg_8019 <= mul_ln703_28_fu_4338_p2;
        mul_ln703_29_reg_8029 <= mul_ln703_29_fu_4357_p2;
        mul_ln703_30_reg_8034 <= mul_ln703_30_fu_4366_p2;
        tmp_40_reg_8024 <= {{add_ln1192_31_fu_4328_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter7_reg == 1'd0))) begin
        mul_ln703_33_reg_8064 <= mul_ln703_33_fu_4499_p2;
        mul_ln703_34_reg_8074 <= mul_ln703_34_fu_4518_p2;
        mul_ln703_35_reg_8079 <= mul_ln703_35_fu_4527_p2;
        tmp_45_reg_8069 <= {{add_ln1192_36_fu_4489_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter8_reg == 1'd0))) begin
        mul_ln703_37_reg_8109 <= mul_ln703_37_fu_4664_p2;
        mul_ln703_38_reg_8119 <= mul_ln703_38_fu_4683_p2;
        mul_ln703_39_reg_8124 <= mul_ln703_39_fu_4692_p2;
        tmp_50_reg_8114 <= {{add_ln1192_41_fu_4654_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter9_reg == 1'd0))) begin
        mul_ln703_42_reg_8154 <= mul_ln703_42_fu_4825_p2;
        mul_ln703_43_reg_8164 <= mul_ln703_43_fu_4844_p2;
        mul_ln703_44_reg_8169 <= mul_ln703_44_fu_4853_p2;
        tmp_55_reg_8159 <= {{add_ln1192_46_fu_4815_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter10_reg == 1'd0))) begin
        mul_ln703_47_reg_8199 <= mul_ln703_47_fu_4986_p2;
        mul_ln703_48_reg_8209 <= mul_ln703_48_fu_5005_p2;
        mul_ln703_49_reg_8214 <= mul_ln703_49_fu_5014_p2;
        tmp_60_reg_8204 <= {{add_ln1192_51_fu_4976_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_5800_p2 == 1'd0))) begin
        mul_ln703_57_reg_8625 <= mul_ln703_57_fu_5872_p2;
        mul_ln703_58_reg_8635 <= mul_ln703_58_fu_5895_p2;
        tmp_72_reg_8630 <= {{add_ln1192_65_fu_5858_p2[39:8]}};
        trunc_ln1118_reg_8607 <= trunc_ln1118_fu_5806_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln40_reg_7652_pp3_iter1_reg == 1'd0))) begin
        mul_ln703_5_reg_7794 <= mul_ln703_5_fu_3525_p2;
        mul_ln703_6_reg_7804 <= mul_ln703_6_fu_3544_p2;
        mul_ln703_7_reg_7809 <= mul_ln703_7_fu_3553_p2;
        tmp_15_reg_7799 <= {{add_ln1192_6_fu_3515_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_8603_pp5_iter1_reg == 1'd0))) begin
        mul_ln703_61_reg_8655 <= mul_ln703_61_fu_6221_p2;
        mul_ln703_62_reg_8665 <= mul_ln703_62_fu_6243_p2;
        tmp_82_reg_8660 <= {{add_ln1192_75_fu_6208_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_6576 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        r_V_2_reg_6615 <= fp_input_img_V_q0;
        r_V_reg_6605 <= fp_input_img_V_q1;
        weights_layer1_weights_V_load_1_reg_6620 <= weights_layer1_weights_V_q0;
        weights_layer1_weights_V_load_reg_6610 <= weights_layer1_weights_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        sext_ln1116_10_reg_7377 <= sext_ln1116_10_fu_3091_p1;
        sext_ln1116_11_reg_7382 <= sext_ln1116_11_fu_3094_p1;
        sext_ln1116_12_reg_7387 <= sext_ln1116_12_fu_3097_p1;
        sext_ln1116_13_reg_7392 <= sext_ln1116_13_fu_3100_p1;
        sext_ln1116_14_reg_7397 <= sext_ln1116_14_fu_3103_p1;
        sext_ln1116_15_reg_7402 <= sext_ln1116_15_fu_3106_p1;
        sext_ln1116_16_reg_7407 <= sext_ln1116_16_fu_3109_p1;
        sext_ln1116_17_reg_7412 <= sext_ln1116_17_fu_3112_p1;
        sext_ln1116_18_reg_7417 <= sext_ln1116_18_fu_3115_p1;
        sext_ln1116_19_reg_7422 <= sext_ln1116_19_fu_3118_p1;
        sext_ln1116_1_reg_7332 <= sext_ln1116_1_fu_3064_p1;
        sext_ln1116_20_reg_7427 <= sext_ln1116_20_fu_3121_p1;
        sext_ln1116_21_reg_7432 <= sext_ln1116_21_fu_3124_p1;
        sext_ln1116_22_reg_7437 <= sext_ln1116_22_fu_3127_p1;
        sext_ln1116_23_reg_7442 <= sext_ln1116_23_fu_3130_p1;
        sext_ln1116_24_reg_7447 <= sext_ln1116_24_fu_3133_p1;
        sext_ln1116_25_reg_7452 <= sext_ln1116_25_fu_3136_p1;
        sext_ln1116_26_reg_7457 <= sext_ln1116_26_fu_3139_p1;
        sext_ln1116_27_reg_7462 <= sext_ln1116_27_fu_3142_p1;
        sext_ln1116_28_reg_7467 <= sext_ln1116_28_fu_3145_p1;
        sext_ln1116_29_reg_7472 <= sext_ln1116_29_fu_3148_p1;
        sext_ln1116_2_reg_7337 <= sext_ln1116_2_fu_3067_p1;
        sext_ln1116_30_reg_7477 <= sext_ln1116_30_fu_3151_p1;
        sext_ln1116_31_reg_7482 <= sext_ln1116_31_fu_3154_p1;
        sext_ln1116_32_reg_7487 <= sext_ln1116_32_fu_3157_p1;
        sext_ln1116_33_reg_7492 <= sext_ln1116_33_fu_3160_p1;
        sext_ln1116_34_reg_7497 <= sext_ln1116_34_fu_3163_p1;
        sext_ln1116_35_reg_7502 <= sext_ln1116_35_fu_3166_p1;
        sext_ln1116_36_reg_7507 <= sext_ln1116_36_fu_3169_p1;
        sext_ln1116_37_reg_7512 <= sext_ln1116_37_fu_3172_p1;
        sext_ln1116_38_reg_7517 <= sext_ln1116_38_fu_3175_p1;
        sext_ln1116_39_reg_7522 <= sext_ln1116_39_fu_3178_p1;
        sext_ln1116_3_reg_7342 <= sext_ln1116_3_fu_3070_p1;
        sext_ln1116_40_reg_7527 <= sext_ln1116_40_fu_3181_p1;
        sext_ln1116_41_reg_7532 <= sext_ln1116_41_fu_3184_p1;
        sext_ln1116_42_reg_7537 <= sext_ln1116_42_fu_3187_p1;
        sext_ln1116_43_reg_7542 <= sext_ln1116_43_fu_3190_p1;
        sext_ln1116_44_reg_7547 <= sext_ln1116_44_fu_3193_p1;
        sext_ln1116_45_reg_7552 <= sext_ln1116_45_fu_3196_p1;
        sext_ln1116_46_reg_7557 <= sext_ln1116_46_fu_3199_p1;
        sext_ln1116_47_reg_7562 <= sext_ln1116_47_fu_3202_p1;
        sext_ln1116_48_reg_7567 <= sext_ln1116_48_fu_3205_p1;
        sext_ln1116_49_reg_7572 <= sext_ln1116_49_fu_3208_p1;
        sext_ln1116_4_reg_7347 <= sext_ln1116_4_fu_3073_p1;
        sext_ln1116_50_reg_7577 <= sext_ln1116_50_fu_3211_p1;
        sext_ln1116_51_reg_7582 <= sext_ln1116_51_fu_3214_p1;
        sext_ln1116_52_reg_7587 <= sext_ln1116_52_fu_3217_p1;
        sext_ln1116_53_reg_7592 <= sext_ln1116_53_fu_3220_p1;
        sext_ln1116_54_reg_7597 <= sext_ln1116_54_fu_3223_p1;
        sext_ln1116_55_reg_7602 <= sext_ln1116_55_fu_3226_p1;
        sext_ln1116_56_reg_7607 <= sext_ln1116_56_fu_3229_p1;
        sext_ln1116_57_reg_7612 <= sext_ln1116_57_fu_3232_p1;
        sext_ln1116_58_reg_7617 <= sext_ln1116_58_fu_3235_p1;
        sext_ln1116_59_reg_7622 <= sext_ln1116_59_fu_3238_p1;
        sext_ln1116_5_reg_7352 <= sext_ln1116_5_fu_3076_p1;
        sext_ln1116_60_reg_7627 <= sext_ln1116_60_fu_3241_p1;
        sext_ln1116_61_reg_7632 <= sext_ln1116_61_fu_3244_p1;
        sext_ln1116_62_reg_7637 <= sext_ln1116_62_fu_3247_p1;
        sext_ln1116_6_reg_7357 <= sext_ln1116_6_fu_3079_p1;
        sext_ln1116_7_reg_7362 <= sext_ln1116_7_fu_3082_p1;
        sext_ln1116_8_reg_7367 <= sext_ln1116_8_fu_3085_p1;
        sext_ln1116_9_reg_7372 <= sext_ln1116_9_fu_3088_p1;
        sext_ln1116_reg_7327 <= sext_ln1116_fu_3061_p1;
        temp_output_0_V_load_63_cast_reg_7642 <= temp_output_0_V_load_63_cast_fu_3251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln92_fu_5357_p2 == 1'd0))) begin
        temp_output2_0_V_addr_2_reg_8293 <= i_2_cast_fu_5363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        temp_output2_0_V_load_10_reg_8463 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_11_reg_8468 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        temp_output2_0_V_load_12_reg_8483 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_13_reg_8488 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        temp_output2_0_V_load_1_reg_8366 <= temp_output2_0_V_q1;
        temp_output2_0_V_load_reg_8361 <= temp_output2_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        temp_output2_0_V_load_2_reg_8381 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_3_reg_8386 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        temp_output2_0_V_load_4_reg_8402 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_5_reg_8407 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        temp_output2_0_V_load_6_reg_8422 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_7_reg_8427 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        temp_output2_0_V_load_8_reg_8442 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_9_reg_8448 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1) & (icmp_ln59_reg_8603_pp5_iter2_reg == 1'd0))) begin
        temp_output3_V_0_1_0305_reg_2192 <= temp_output3_0_1_V_1_fu_6366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_2732_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_addr_1_reg_6639 <= i_1_cast_fu_2738_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_load_10_reg_6807 <= temp_output_0_V_q0;
        temp_output_0_V_load_11_reg_6812 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_load_12_reg_6827 <= temp_output_0_V_q0;
        temp_output_0_V_load_13_reg_6832 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_load_14_reg_6847 <= temp_output_0_V_q0;
        temp_output_0_V_load_15_reg_6852 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_load_16_reg_6867 <= temp_output_0_V_q0;
        temp_output_0_V_load_17_reg_6872 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_load_18_reg_6887 <= temp_output_0_V_q0;
        temp_output_0_V_load_19_reg_6892 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_load_1_reg_6712 <= temp_output_0_V_q1;
        temp_output_0_V_load_reg_6707 <= temp_output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_load_20_reg_6907 <= temp_output_0_V_q0;
        temp_output_0_V_load_21_reg_6912 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_load_22_reg_6927 <= temp_output_0_V_q0;
        temp_output_0_V_load_23_reg_6932 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_load_24_reg_6947 <= temp_output_0_V_q0;
        temp_output_0_V_load_25_reg_6952 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_load_26_reg_6967 <= temp_output_0_V_q0;
        temp_output_0_V_load_27_reg_6972 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_load_28_reg_6987 <= temp_output_0_V_q0;
        temp_output_0_V_load_29_reg_6992 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_load_2_reg_6727 <= temp_output_0_V_q0;
        temp_output_0_V_load_3_reg_6732 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output_0_V_load_30_reg_7007 <= temp_output_0_V_q0;
        temp_output_0_V_load_31_reg_7012 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output_0_V_load_32_reg_7027 <= temp_output_0_V_q0;
        temp_output_0_V_load_33_reg_7032 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output_0_V_load_34_reg_7047 <= temp_output_0_V_q0;
        temp_output_0_V_load_35_reg_7052 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output_0_V_load_36_reg_7067 <= temp_output_0_V_q0;
        temp_output_0_V_load_37_reg_7072 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output_0_V_load_38_reg_7087 <= temp_output_0_V_q0;
        temp_output_0_V_load_39_reg_7092 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output_0_V_load_40_reg_7107 <= temp_output_0_V_q0;
        temp_output_0_V_load_41_reg_7112 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output_0_V_load_42_reg_7127 <= temp_output_0_V_q0;
        temp_output_0_V_load_43_reg_7132 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output_0_V_load_44_reg_7147 <= temp_output_0_V_q0;
        temp_output_0_V_load_45_reg_7152 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output_0_V_load_46_reg_7167 <= temp_output_0_V_q0;
        temp_output_0_V_load_47_reg_7172 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output_0_V_load_48_reg_7187 <= temp_output_0_V_q0;
        temp_output_0_V_load_49_reg_7192 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_load_4_reg_6747 <= temp_output_0_V_q0;
        temp_output_0_V_load_5_reg_6752 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output_0_V_load_50_reg_7207 <= temp_output_0_V_q0;
        temp_output_0_V_load_51_reg_7212 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output_0_V_load_52_reg_7227 <= temp_output_0_V_q0;
        temp_output_0_V_load_53_reg_7232 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output_0_V_load_54_reg_7247 <= temp_output_0_V_q0;
        temp_output_0_V_load_55_reg_7252 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output_0_V_load_56_reg_7267 <= temp_output_0_V_q0;
        temp_output_0_V_load_57_reg_7272 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output_0_V_load_58_reg_7287 <= temp_output_0_V_q0;
        temp_output_0_V_load_59_reg_7292 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output_0_V_load_60_reg_7307 <= temp_output_0_V_q0;
        temp_output_0_V_load_61_reg_7312 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_load_6_reg_6767 <= temp_output_0_V_q0;
        temp_output_0_V_load_7_reg_6772 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_load_8_reg_6787 <= temp_output_0_V_q0;
        temp_output_0_V_load_9_reg_6792 <= temp_output_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln21_1_reg_6571[6 : 0] <= zext_ln21_1_fu_2573_p1[6 : 0];
        zext_ln21_reg_6566[6 : 0] <= zext_ln21_fu_2569_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_2275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_2577_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_2732_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_3261_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_5357_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_5800_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state78 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state78 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter14 == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_address0 = zext_ln23_fu_2623_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_address0 = i_cast_reg_6501_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_address0 = 64'd0;
    end else begin
        fp_input_img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_ce0 = 1'b1;
    end else begin
        fp_input_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_ce1 = 1'b1;
    end else begin
        fp_input_img_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_d0 = select_ln571_4_fu_2548_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_d0 = 32'd256;
    end else begin
        fp_input_img_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln5_reg_6497_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_we0 = 1'b1;
    end else begin
        fp_input_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_2264_p0 = bitcast_ln734_1_fu_5649_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        grp_fu_2264_p0 = bitcast_ln734_fu_3024_p1;
    end else begin
        grp_fu_2264_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_0_ce0 = 1'b1;
    end else begin
        layer2_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_10_ce0 = 1'b1;
    end else begin
        layer2_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_11_ce0 = 1'b1;
    end else begin
        layer2_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_12_ce0 = 1'b1;
    end else begin
        layer2_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_13_ce0 = 1'b1;
    end else begin
        layer2_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_14_ce0 = 1'b1;
    end else begin
        layer2_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        layer2_weights_V_15_ce0 = 1'b1;
    end else begin
        layer2_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_16_ce0 = 1'b1;
    end else begin
        layer2_weights_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_17_ce0 = 1'b1;
    end else begin
        layer2_weights_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_18_ce0 = 1'b1;
    end else begin
        layer2_weights_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_19_ce0 = 1'b1;
    end else begin
        layer2_weights_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_1_ce0 = 1'b1;
    end else begin
        layer2_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        layer2_weights_V_20_ce0 = 1'b1;
    end else begin
        layer2_weights_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_21_ce0 = 1'b1;
    end else begin
        layer2_weights_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_22_ce0 = 1'b1;
    end else begin
        layer2_weights_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_23_ce0 = 1'b1;
    end else begin
        layer2_weights_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_24_ce0 = 1'b1;
    end else begin
        layer2_weights_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        layer2_weights_V_25_ce0 = 1'b1;
    end else begin
        layer2_weights_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_26_ce0 = 1'b1;
    end else begin
        layer2_weights_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_27_ce0 = 1'b1;
    end else begin
        layer2_weights_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_28_ce0 = 1'b1;
    end else begin
        layer2_weights_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_29_ce0 = 1'b1;
    end else begin
        layer2_weights_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_2_ce0 = 1'b1;
    end else begin
        layer2_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1))) begin
        layer2_weights_V_30_ce0 = 1'b1;
    end else begin
        layer2_weights_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_31_ce0 = 1'b1;
    end else begin
        layer2_weights_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_32_ce0 = 1'b1;
    end else begin
        layer2_weights_V_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_33_ce0 = 1'b1;
    end else begin
        layer2_weights_V_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_34_ce0 = 1'b1;
    end else begin
        layer2_weights_V_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        layer2_weights_V_35_ce0 = 1'b1;
    end else begin
        layer2_weights_V_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        layer2_weights_V_36_ce0 = 1'b1;
    end else begin
        layer2_weights_V_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        layer2_weights_V_37_ce0 = 1'b1;
    end else begin
        layer2_weights_V_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        layer2_weights_V_38_ce0 = 1'b1;
    end else begin
        layer2_weights_V_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        layer2_weights_V_39_ce0 = 1'b1;
    end else begin
        layer2_weights_V_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_3_ce0 = 1'b1;
    end else begin
        layer2_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1))) begin
        layer2_weights_V_40_ce0 = 1'b1;
    end else begin
        layer2_weights_V_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter8 == 1'b1))) begin
        layer2_weights_V_41_ce0 = 1'b1;
    end else begin
        layer2_weights_V_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter8 == 1'b1))) begin
        layer2_weights_V_42_ce0 = 1'b1;
    end else begin
        layer2_weights_V_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter8 == 1'b1))) begin
        layer2_weights_V_43_ce0 = 1'b1;
    end else begin
        layer2_weights_V_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter8 == 1'b1))) begin
        layer2_weights_V_44_ce0 = 1'b1;
    end else begin
        layer2_weights_V_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter8 == 1'b1))) begin
        layer2_weights_V_45_ce0 = 1'b1;
    end else begin
        layer2_weights_V_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter9 == 1'b1))) begin
        layer2_weights_V_46_ce0 = 1'b1;
    end else begin
        layer2_weights_V_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter9 == 1'b1))) begin
        layer2_weights_V_47_ce0 = 1'b1;
    end else begin
        layer2_weights_V_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter9 == 1'b1))) begin
        layer2_weights_V_48_ce0 = 1'b1;
    end else begin
        layer2_weights_V_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter9 == 1'b1))) begin
        layer2_weights_V_49_ce0 = 1'b1;
    end else begin
        layer2_weights_V_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_4_ce0 = 1'b1;
    end else begin
        layer2_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter9 == 1'b1))) begin
        layer2_weights_V_50_ce0 = 1'b1;
    end else begin
        layer2_weights_V_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1))) begin
        layer2_weights_V_51_ce0 = 1'b1;
    end else begin
        layer2_weights_V_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1))) begin
        layer2_weights_V_52_ce0 = 1'b1;
    end else begin
        layer2_weights_V_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1))) begin
        layer2_weights_V_53_ce0 = 1'b1;
    end else begin
        layer2_weights_V_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1))) begin
        layer2_weights_V_54_ce0 = 1'b1;
    end else begin
        layer2_weights_V_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1))) begin
        layer2_weights_V_55_ce0 = 1'b1;
    end else begin
        layer2_weights_V_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        layer2_weights_V_56_ce0 = 1'b1;
    end else begin
        layer2_weights_V_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        layer2_weights_V_57_ce0 = 1'b1;
    end else begin
        layer2_weights_V_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        layer2_weights_V_58_ce0 = 1'b1;
    end else begin
        layer2_weights_V_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        layer2_weights_V_59_ce0 = 1'b1;
    end else begin
        layer2_weights_V_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        layer2_weights_V_5_ce0 = 1'b1;
    end else begin
        layer2_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1))) begin
        layer2_weights_V_60_ce0 = 1'b1;
    end else begin
        layer2_weights_V_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1))) begin
        layer2_weights_V_61_ce0 = 1'b1;
    end else begin
        layer2_weights_V_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter12 == 1'b1))) begin
        layer2_weights_V_62_ce0 = 1'b1;
    end else begin
        layer2_weights_V_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter13 == 1'b1))) begin
        layer2_weights_V_63_ce0 = 1'b1;
    end else begin
        layer2_weights_V_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_6_ce0 = 1'b1;
    end else begin
        layer2_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_7_ce0 = 1'b1;
    end else begin
        layer2_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_8_ce0 = 1'b1;
    end else begin
        layer2_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        layer2_weights_V_9_ce0 = 1'b1;
    end else begin
        layer2_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        temp_output2_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        temp_output2_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        temp_output2_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        temp_output2_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        temp_output2_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        temp_output2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        temp_output2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_reg_6552;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_2_reg_8293_pp4_iter2_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter14 == 1'b1))) begin
        temp_output2_0_V_address0 = j_1_cast_reg_7656_pp3_iter13_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        temp_output2_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        temp_output2_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        temp_output2_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        temp_output2_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        temp_output2_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        temp_output2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        temp_output2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        temp_output2_0_V_address1 = 64'd1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        temp_output2_0_V_address1 = i_2_cast_fu_5363_p1;
    end else begin
        temp_output2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter14 == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        temp_output2_0_V_ce1 = 1'b1;
    end else begin
        temp_output2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter14 == 1'b1))) begin
        temp_output2_0_V_d0 = {{add_ln1192_62_fu_5334_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_d0 = 32'd256;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'd1 == and_ln1506_1_fu_5680_p2) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1) & (icmp_ln885_1_reg_8299_pp4_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter14 == 1'b1) & (icmp_ln40_reg_7652_pp3_iter13_reg == 1'd0)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output_0_V_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output_0_V_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output_0_V_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output_0_V_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output_0_V_address0 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output_0_V_address0 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output_0_V_address0 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output_0_V_address0 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output_0_V_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output_0_V_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output_0_V_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output_0_V_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output_0_V_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output_0_V_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output_0_V_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output_0_V_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_reg_6547;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_6639_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_address0 = zext_ln21_reg_6566;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output_0_V_address1 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output_0_V_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output_0_V_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output_0_V_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output_0_V_address1 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output_0_V_address1 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output_0_V_address1 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output_0_V_address1 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output_0_V_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output_0_V_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output_0_V_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output_0_V_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output_0_V_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output_0_V_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output_0_V_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output_0_V_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output_0_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output_0_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output_0_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output_0_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output_0_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output_0_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output_0_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_output_0_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_output_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_output_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_output_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        temp_output_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        temp_output_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_output_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_output_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_output_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_address1 = i_1_cast_fu_2738_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_d0 = sum_V_2_reg_2146;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = 32'd256;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln885_reg_6645_pp2_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_3055_p2) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_2275_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_2275_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_2563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln77_fu_2732_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln77_fu_2732_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln40_fu_3261_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter14 == 1'b1) & (ap_enable_reg_pp3_iter13 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter14 == 1'b1) & (ap_enable_reg_pp3_iter13 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln40_fu_3261_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln92_fu_5357_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln92_fu_5357_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_5800_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_5800_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln109_fu_6386_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_2331_p2 = (12'd1075 - zext_ln455_fu_2317_p1);

assign add_ln109_fu_6380_p2 = (i_3_reg_2227 + 2'd1);

assign add_ln1118_fu_2636_p2 = (tmp_8_fu_2628_p3 + zext_ln21_1_reg_6571);

assign add_ln1192_10_fu_3643_p2 = (shl_ln728_s_fu_3635_p3 + mul_ln703_8_fu_3620_p2);

assign add_ln1192_11_fu_3676_p2 = (shl_ln728_10_fu_3668_p3 + mul_ln703_9_fu_3653_p2);

assign add_ln1192_12_fu_3726_p2 = (shl_ln728_11_fu_3719_p3 + mul_ln703_10_reg_7839);

assign add_ln1192_13_fu_3749_p2 = (shl_ln728_12_fu_3741_p3 + mul_ln703_11_reg_7849);

assign add_ln1192_14_fu_3772_p2 = (shl_ln728_13_fu_3764_p3 + mul_ln703_12_reg_7854);

assign add_ln1192_15_fu_3804_p2 = (shl_ln728_14_fu_3796_p3 + mul_ln703_13_fu_3781_p2);

assign add_ln1192_16_fu_3837_p2 = (shl_ln728_15_fu_3829_p3 + mul_ln703_14_fu_3814_p2);

assign add_ln1192_17_fu_3887_p2 = (shl_ln728_16_fu_3880_p3 + mul_ln703_15_reg_7884);

assign add_ln1192_18_fu_3913_p2 = ($signed(shl_ln728_17_fu_3902_p3) + $signed(sext_ln703_4_fu_3910_p1));

assign add_ln1192_19_fu_3937_p2 = (shl_ln728_18_fu_3929_p3 + mul_ln703_16_reg_7899);

assign add_ln1192_1_fu_3350_p2 = ($signed(shl_ln728_1_fu_3338_p3) + $signed(sext_ln703_2_fu_3346_p1));

assign add_ln1192_20_fu_3969_p2 = (shl_ln728_19_fu_3961_p3 + mul_ln703_17_fu_3946_p2);

assign add_ln1192_21_fu_4002_p2 = (shl_ln728_20_fu_3994_p3 + mul_ln703_18_fu_3979_p2);

assign add_ln1192_22_fu_4052_p2 = (shl_ln728_21_fu_4045_p3 + mul_ln703_19_reg_7929);

assign add_ln1192_23_fu_4075_p2 = (shl_ln728_22_fu_4067_p3 + mul_ln703_20_reg_7939);

assign add_ln1192_24_fu_4098_p2 = (shl_ln728_23_fu_4090_p3 + mul_ln703_21_reg_7944);

assign add_ln1192_25_fu_4130_p2 = (shl_ln728_24_fu_4122_p3 + mul_ln703_22_fu_4107_p2);

assign add_ln1192_26_fu_4163_p2 = (shl_ln728_25_fu_4155_p3 + mul_ln703_23_fu_4140_p2);

assign add_ln1192_27_fu_4213_p2 = (shl_ln728_26_fu_4206_p3 + mul_ln703_24_reg_7974);

assign add_ln1192_28_fu_4236_p2 = (shl_ln728_27_fu_4228_p3 + mul_ln703_25_reg_7984);

assign add_ln1192_29_fu_4259_p2 = (shl_ln728_28_fu_4251_p3 + mul_ln703_26_reg_7989);

assign add_ln1192_2_fu_3400_p2 = (shl_ln728_2_fu_3393_p3 + mul_ln703_1_reg_7749);

assign add_ln1192_30_fu_4295_p2 = ($signed(shl_ln728_29_fu_4283_p3) + $signed(sext_ln703_5_fu_4291_p1));

assign add_ln1192_31_fu_4328_p2 = (shl_ln728_30_fu_4320_p3 + mul_ln703_27_fu_4305_p2);

assign add_ln1192_32_fu_4378_p2 = (shl_ln728_31_fu_4371_p3 + mul_ln703_28_reg_8019);

assign add_ln1192_33_fu_4401_p2 = (shl_ln728_32_fu_4393_p3 + mul_ln703_29_reg_8029);

assign add_ln1192_34_fu_4424_p2 = (shl_ln728_33_fu_4416_p3 + mul_ln703_30_reg_8034);

assign add_ln1192_35_fu_4456_p2 = (shl_ln728_34_fu_4448_p3 + mul_ln703_31_fu_4433_p2);

assign add_ln1192_36_fu_4489_p2 = (shl_ln728_35_fu_4481_p3 + mul_ln703_32_fu_4466_p2);

assign add_ln1192_37_fu_4539_p2 = (shl_ln728_36_fu_4532_p3 + mul_ln703_33_reg_8064);

assign add_ln1192_38_fu_4562_p2 = (shl_ln728_37_fu_4554_p3 + mul_ln703_34_reg_8074);

assign add_ln1192_39_fu_4585_p2 = (shl_ln728_38_fu_4577_p3 + mul_ln703_35_reg_8079);

assign add_ln1192_3_fu_3426_p2 = ($signed(shl_ln728_3_fu_3415_p3) + $signed(sext_ln703_3_fu_3423_p1));

assign add_ln1192_40_fu_4621_p2 = ($signed(shl_ln728_39_fu_4609_p3) + $signed(sext_ln703_6_fu_4617_p1));

assign add_ln1192_41_fu_4654_p2 = (shl_ln728_40_fu_4646_p3 + mul_ln703_36_fu_4631_p2);

assign add_ln1192_42_fu_4704_p2 = (shl_ln728_41_fu_4697_p3 + mul_ln703_37_reg_8109);

assign add_ln1192_43_fu_4727_p2 = (shl_ln728_42_fu_4719_p3 + mul_ln703_38_reg_8119);

assign add_ln1192_44_fu_4750_p2 = (shl_ln728_43_fu_4742_p3 + mul_ln703_39_reg_8124);

assign add_ln1192_45_fu_4782_p2 = (shl_ln728_44_fu_4774_p3 + mul_ln703_40_fu_4759_p2);

assign add_ln1192_46_fu_4815_p2 = (shl_ln728_45_fu_4807_p3 + mul_ln703_41_fu_4792_p2);

assign add_ln1192_47_fu_4865_p2 = (shl_ln728_46_fu_4858_p3 + mul_ln703_42_reg_8154);

assign add_ln1192_48_fu_4888_p2 = (shl_ln728_47_fu_4880_p3 + mul_ln703_43_reg_8164);

assign add_ln1192_49_fu_4911_p2 = (shl_ln728_48_fu_4903_p3 + mul_ln703_44_reg_8169);

assign add_ln1192_4_fu_3450_p2 = (shl_ln728_4_fu_3442_p3 + mul_ln703_2_reg_7764);

assign add_ln1192_50_fu_4943_p2 = (shl_ln728_49_fu_4935_p3 + mul_ln703_45_fu_4920_p2);

assign add_ln1192_51_fu_4976_p2 = (shl_ln728_50_fu_4968_p3 + mul_ln703_46_fu_4953_p2);

assign add_ln1192_52_fu_5026_p2 = (shl_ln728_51_fu_5019_p3 + mul_ln703_47_reg_8199);

assign add_ln1192_53_fu_5049_p2 = (shl_ln728_52_fu_5041_p3 + mul_ln703_48_reg_8209);

assign add_ln1192_54_fu_5072_p2 = (shl_ln728_53_fu_5064_p3 + mul_ln703_49_reg_8214);

assign add_ln1192_55_fu_5104_p2 = (shl_ln728_54_fu_5096_p3 + mul_ln703_50_fu_5081_p2);

assign add_ln1192_56_fu_5137_p2 = (shl_ln728_55_fu_5129_p3 + mul_ln703_51_fu_5114_p2);

assign add_ln1192_57_fu_5181_p2 = ($signed(shl_ln728_56_fu_5171_p3) + $signed(sext_ln703_7_fu_5178_p1));

assign add_ln1192_58_fu_5205_p2 = (shl_ln728_57_fu_5197_p3 + mul_ln703_52_reg_8249);

assign add_ln1192_59_fu_5237_p2 = (shl_ln728_58_fu_5229_p3 + mul_ln703_53_fu_5214_p2);

assign add_ln1192_5_fu_3482_p2 = (shl_ln728_5_fu_3474_p3 + mul_ln703_3_fu_3459_p2);

assign add_ln1192_60_fu_5270_p2 = (shl_ln728_59_fu_5262_p3 + mul_ln703_54_fu_5247_p2);

assign add_ln1192_61_fu_5301_p2 = (shl_ln728_60_fu_5294_p3 + mul_ln703_55_fu_5289_p2);

assign add_ln1192_62_fu_5334_p2 = (shl_ln728_61_fu_5326_p3 + mul_ln703_56_fu_5311_p2);

assign add_ln1192_65_fu_5858_p2 = ($signed(shl_ln728_62_fu_5846_p3) + $signed(sext_ln703_8_fu_5854_p1));

assign add_ln1192_66_fu_5907_p2 = (shl_ln728_63_fu_5900_p3 + mul_ln703_57_reg_8625);

assign add_ln1192_67_fu_5939_p2 = ($signed(shl_ln728_64_fu_5927_p3) + $signed(sext_ln703_9_fu_5935_p1));

assign add_ln1192_68_fu_5963_p2 = (shl_ln728_65_fu_5955_p3 + mul_ln703_58_reg_8635);

assign add_ln1192_69_fu_5998_p2 = (shl_ln728_66_fu_5990_p3 + mul_ln1192_fu_5975_p2);

assign add_ln1192_6_fu_3515_p2 = (shl_ln728_6_fu_3507_p3 + mul_ln703_4_fu_3492_p2);

assign add_ln1192_70_fu_6034_p2 = (shl_ln728_67_fu_6026_p3 + mul_ln703_59_fu_6011_p2);

assign add_ln1192_71_fu_6081_p2 = (shl_ln728_68_fu_6074_p3 + mul_ln1192_1_reg_8640);

assign add_ln1192_72_fu_6113_p2 = ($signed(shl_ln728_69_fu_6101_p3) + $signed(sext_ln703_10_fu_6109_p1));

assign add_ln1192_73_fu_6137_p2 = (shl_ln728_70_fu_6129_p3 + mul_ln1192_2_reg_8650);

assign add_ln1192_74_fu_6172_p2 = (shl_ln728_71_fu_6164_p3 + mul_ln703_60_fu_6149_p2);

assign add_ln1192_75_fu_6208_p2 = (shl_ln728_72_fu_6200_p3 + mul_ln1192_3_fu_6185_p2);

assign add_ln1192_76_fu_6255_p2 = (shl_ln728_73_fu_6248_p3 + mul_ln703_61_reg_8655);

assign add_ln1192_77_fu_6278_p2 = (shl_ln728_74_fu_6270_p3 + mul_ln703_62_reg_8665);

assign add_ln1192_78_fu_6310_p2 = ($signed(shl_ln728_75_fu_6298_p3) + $signed(sext_ln703_11_fu_6306_p1));

assign add_ln1192_79_fu_6350_p2 = ($signed(shl_ln728_76_fu_6338_p3) + $signed(sext_ln703_12_fu_6346_p1));

assign add_ln1192_7_fu_3565_p2 = (shl_ln728_7_fu_3558_p3 + mul_ln703_5_reg_7794);

assign add_ln1192_8_fu_3588_p2 = (shl_ln728_8_fu_3580_p3 + mul_ln703_6_reg_7804);

assign add_ln1192_9_fu_3611_p2 = (shl_ln728_9_fu_3603_p3 + mul_ln703_7_reg_7809);

assign add_ln1192_fu_3313_p2 = (shl_ln_fu_3305_p3 + mul_ln703_fu_3290_p2);

assign add_ln21_fu_2557_p2 = (j_reg_2123 + 7'd1);

assign add_ln25_fu_2583_p2 = (k_reg_2135 + 9'd2);

assign add_ln40_fu_3255_p2 = (j_1_reg_2170 + 5'd1);

assign add_ln581_fu_2366_p2 = ($signed(F2_reg_6539) + $signed(12'd4088));

assign add_ln59_fu_5794_p2 = (j_2_reg_2216 + 2'd1);

assign add_ln5_fu_2269_p2 = (i_reg_2112 + 9'd1);

assign add_ln77_fu_2726_p2 = (i_1_reg_2159 + 7'd1);

assign add_ln908_1_fu_5522_p2 = ($signed(sub_ln894_1_fu_5414_p2) + $signed(32'd4294967242));

assign add_ln908_fu_2897_p2 = ($signed(sub_ln894_fu_2789_p2) + $signed(32'd4294967242));

assign add_ln915_1_fu_5624_p2 = (sub_ln915_1_fu_5619_p2 + select_ln893_1_fu_5611_p3);

assign add_ln915_fu_2999_p2 = (sub_ln915_fu_2994_p2 + select_ln893_fu_2986_p3);

assign add_ln92_fu_5351_p2 = (i_2_reg_2181 + 5'd1);

assign and_ln1506_1_fu_5680_p2 = (or_ln1506_1_fu_5676_p2 & grp_fu_2264_p2);

assign and_ln1506_fu_3055_p2 = (or_ln1506_fu_3051_p2 & grp_fu_2264_p2);

assign and_ln581_fu_2470_p2 = (xor_ln582_fu_2464_p2 & icmp_ln581_fu_2361_p2);

assign and_ln582_fu_2453_p2 = (xor_ln571_fu_2448_p2 & icmp_ln582_fu_2388_p2);

assign and_ln585_fu_2482_p2 = (icmp_ln585_fu_2476_p2 & and_ln581_fu_2470_p2);

assign and_ln603_fu_2500_p2 = (xor_ln581_fu_2494_p2 & icmp_ln603_fu_2407_p2);

assign and_ln899_1_fu_2903_p2 = (xor_ln899_fu_2869_p2 & p_Result_12_fu_2875_p3);

assign and_ln899_2_fu_5474_p2 = (tmp_V_5_fu_5388_p3 & or_ln899_fu_5468_p2);

assign and_ln899_3_fu_5528_p2 = (xor_ln899_1_fu_5494_p2 & p_Result_16_fu_5500_p3);

assign and_ln899_fu_2849_p2 = (tmp_V_4_fu_2763_p3 & or_ln899_2_fu_2843_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd55];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp3_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_return = $signed(ret_V_5_fu_6480_p3);

assign ashr_ln586_fu_2417_p2 = $signed(man_V_2_fu_2354_p3) >>> zext_ln586_fu_2413_p1;

assign bitcast_ln734_1_fu_5649_p1 = p_Result_17_fu_5637_p5;

assign bitcast_ln734_fu_3024_p1 = p_Result_13_fu_3012_p5;

assign exp_tmp_fu_2307_p4 = {{ireg_fu_2291_p1[62:52]}};

assign fp_input_img_V_address1 = k_cast60_fu_2589_p1;

assign grp_fu_2261_p0 = input_img_q0;

assign i_1_cast_fu_2738_p1 = i_1_reg_2159;

assign i_2_cast_fu_5363_p1 = i_2_reg_2181;

assign i_cast_fu_2281_p1 = i_reg_2112;

assign icmp_ln109_fu_6386_p2 = ((i_3_reg_2227 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_6404_p2 = (($signed(select_ln1494_fu_6396_p3) > $signed(max_val_V_reg_2250)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_3045_p2 = ((trunc_ln6_fu_3029_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_2_fu_5664_p2 = ((add_ln915_1_fu_5624_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1506_3_fu_5670_p2 = ((trunc_ln1506_1_fu_5654_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_3039_p2 = ((add_ln915_fu_2999_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_2563_p2 = ((j_reg_2123 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_2577_p2 = ((k_reg_2135 < 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_3261_p2 = ((j_1_reg_2170 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_2325_p2 = ((trunc_ln555_fu_2295_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_2361_p2 = (($signed(F2_reg_6539) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_2388_p2 = ((F2_reg_6539 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_2476_p2 = ((sh_amt_fu_2376_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_5800_p2 = ((j_2_reg_2216 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_2275_p2 = ((i_reg_2112 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_2407_p2 = ((tmp_5_fu_2397_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_2732_p2 = ((i_1_reg_2159 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_6460_p2 = ((trunc_ln851_fu_6456_p1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_1_fu_5368_p2 = ((temp_output2_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_2743_p2 = ((temp_output_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_1_fu_5436_p2 = (($signed(tmp_94_fu_5426_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_2811_p2 = (($signed(tmp_90_fu_2801_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_5480_p2 = ((and_ln899_2_fu_5474_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_2855_p2 = ((and_ln899_fu_2849_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_1_fu_5508_p2 = (($signed(lsb_index_1_fu_5420_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_2883_p2 = (($signed(lsb_index_fu_2795_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_5357_p2 = ((i_2_reg_2181 == 5'd16) ? 1'b1 : 1'b0);

assign input_img_address0 = i_cast_fu_2281_p1;

assign ireg_fu_2291_p1 = grp_fu_2261_p1;

assign j_1_cast_fu_3267_p1 = j_1_reg_2170;

assign k_cast60_fu_2589_p1 = k_reg_2135;


always @ (p_Result_15_fu_5396_p4) begin
    if (p_Result_15_fu_5396_p4[0] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd0;
    end else if (p_Result_15_fu_5396_p4[1] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd1;
    end else if (p_Result_15_fu_5396_p4[2] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd2;
    end else if (p_Result_15_fu_5396_p4[3] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd3;
    end else if (p_Result_15_fu_5396_p4[4] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd4;
    end else if (p_Result_15_fu_5396_p4[5] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd5;
    end else if (p_Result_15_fu_5396_p4[6] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd6;
    end else if (p_Result_15_fu_5396_p4[7] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd7;
    end else if (p_Result_15_fu_5396_p4[8] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd8;
    end else if (p_Result_15_fu_5396_p4[9] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd9;
    end else if (p_Result_15_fu_5396_p4[10] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd10;
    end else if (p_Result_15_fu_5396_p4[11] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd11;
    end else if (p_Result_15_fu_5396_p4[12] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd12;
    end else if (p_Result_15_fu_5396_p4[13] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd13;
    end else if (p_Result_15_fu_5396_p4[14] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd14;
    end else if (p_Result_15_fu_5396_p4[15] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd15;
    end else if (p_Result_15_fu_5396_p4[16] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd16;
    end else if (p_Result_15_fu_5396_p4[17] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd17;
    end else if (p_Result_15_fu_5396_p4[18] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd18;
    end else if (p_Result_15_fu_5396_p4[19] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd19;
    end else if (p_Result_15_fu_5396_p4[20] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd20;
    end else if (p_Result_15_fu_5396_p4[21] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd21;
    end else if (p_Result_15_fu_5396_p4[22] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd22;
    end else if (p_Result_15_fu_5396_p4[23] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd23;
    end else if (p_Result_15_fu_5396_p4[24] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd24;
    end else if (p_Result_15_fu_5396_p4[25] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd25;
    end else if (p_Result_15_fu_5396_p4[26] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd26;
    end else if (p_Result_15_fu_5396_p4[27] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd27;
    end else if (p_Result_15_fu_5396_p4[28] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd28;
    end else if (p_Result_15_fu_5396_p4[29] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd29;
    end else if (p_Result_15_fu_5396_p4[30] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd30;
    end else if (p_Result_15_fu_5396_p4[31] == 1'b1) begin
        l_1_fu_5406_p3 = 32'd31;
    end else begin
        l_1_fu_5406_p3 = 32'd32;
    end
end


always @ (p_Result_11_fu_2771_p4) begin
    if (p_Result_11_fu_2771_p4[0] == 1'b1) begin
        l_fu_2781_p3 = 32'd0;
    end else if (p_Result_11_fu_2771_p4[1] == 1'b1) begin
        l_fu_2781_p3 = 32'd1;
    end else if (p_Result_11_fu_2771_p4[2] == 1'b1) begin
        l_fu_2781_p3 = 32'd2;
    end else if (p_Result_11_fu_2771_p4[3] == 1'b1) begin
        l_fu_2781_p3 = 32'd3;
    end else if (p_Result_11_fu_2771_p4[4] == 1'b1) begin
        l_fu_2781_p3 = 32'd4;
    end else if (p_Result_11_fu_2771_p4[5] == 1'b1) begin
        l_fu_2781_p3 = 32'd5;
    end else if (p_Result_11_fu_2771_p4[6] == 1'b1) begin
        l_fu_2781_p3 = 32'd6;
    end else if (p_Result_11_fu_2771_p4[7] == 1'b1) begin
        l_fu_2781_p3 = 32'd7;
    end else if (p_Result_11_fu_2771_p4[8] == 1'b1) begin
        l_fu_2781_p3 = 32'd8;
    end else if (p_Result_11_fu_2771_p4[9] == 1'b1) begin
        l_fu_2781_p3 = 32'd9;
    end else if (p_Result_11_fu_2771_p4[10] == 1'b1) begin
        l_fu_2781_p3 = 32'd10;
    end else if (p_Result_11_fu_2771_p4[11] == 1'b1) begin
        l_fu_2781_p3 = 32'd11;
    end else if (p_Result_11_fu_2771_p4[12] == 1'b1) begin
        l_fu_2781_p3 = 32'd12;
    end else if (p_Result_11_fu_2771_p4[13] == 1'b1) begin
        l_fu_2781_p3 = 32'd13;
    end else if (p_Result_11_fu_2771_p4[14] == 1'b1) begin
        l_fu_2781_p3 = 32'd14;
    end else if (p_Result_11_fu_2771_p4[15] == 1'b1) begin
        l_fu_2781_p3 = 32'd15;
    end else if (p_Result_11_fu_2771_p4[16] == 1'b1) begin
        l_fu_2781_p3 = 32'd16;
    end else if (p_Result_11_fu_2771_p4[17] == 1'b1) begin
        l_fu_2781_p3 = 32'd17;
    end else if (p_Result_11_fu_2771_p4[18] == 1'b1) begin
        l_fu_2781_p3 = 32'd18;
    end else if (p_Result_11_fu_2771_p4[19] == 1'b1) begin
        l_fu_2781_p3 = 32'd19;
    end else if (p_Result_11_fu_2771_p4[20] == 1'b1) begin
        l_fu_2781_p3 = 32'd20;
    end else if (p_Result_11_fu_2771_p4[21] == 1'b1) begin
        l_fu_2781_p3 = 32'd21;
    end else if (p_Result_11_fu_2771_p4[22] == 1'b1) begin
        l_fu_2781_p3 = 32'd22;
    end else if (p_Result_11_fu_2771_p4[23] == 1'b1) begin
        l_fu_2781_p3 = 32'd23;
    end else if (p_Result_11_fu_2771_p4[24] == 1'b1) begin
        l_fu_2781_p3 = 32'd24;
    end else if (p_Result_11_fu_2771_p4[25] == 1'b1) begin
        l_fu_2781_p3 = 32'd25;
    end else if (p_Result_11_fu_2771_p4[26] == 1'b1) begin
        l_fu_2781_p3 = 32'd26;
    end else if (p_Result_11_fu_2771_p4[27] == 1'b1) begin
        l_fu_2781_p3 = 32'd27;
    end else if (p_Result_11_fu_2771_p4[28] == 1'b1) begin
        l_fu_2781_p3 = 32'd28;
    end else if (p_Result_11_fu_2771_p4[29] == 1'b1) begin
        l_fu_2781_p3 = 32'd29;
    end else if (p_Result_11_fu_2771_p4[30] == 1'b1) begin
        l_fu_2781_p3 = 32'd30;
    end else if (p_Result_11_fu_2771_p4[31] == 1'b1) begin
        l_fu_2781_p3 = 32'd31;
    end else begin
        l_fu_2781_p3 = 32'd32;
    end
end

assign layer2_weights_V_0_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_10_address0 = j_1_cast_reg_7656;

assign layer2_weights_V_11_address0 = j_1_cast_reg_7656_pp3_iter1_reg;

assign layer2_weights_V_12_address0 = j_1_cast_reg_7656_pp3_iter1_reg;

assign layer2_weights_V_13_address0 = j_1_cast_reg_7656_pp3_iter1_reg;

assign layer2_weights_V_14_address0 = j_1_cast_reg_7656_pp3_iter1_reg;

assign layer2_weights_V_15_address0 = j_1_cast_reg_7656_pp3_iter1_reg;

assign layer2_weights_V_16_address0 = j_1_cast_reg_7656_pp3_iter2_reg;

assign layer2_weights_V_17_address0 = j_1_cast_reg_7656_pp3_iter2_reg;

assign layer2_weights_V_18_address0 = j_1_cast_reg_7656_pp3_iter2_reg;

assign layer2_weights_V_19_address0 = j_1_cast_reg_7656_pp3_iter2_reg;

assign layer2_weights_V_1_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_20_address0 = j_1_cast_reg_7656_pp3_iter2_reg;

assign layer2_weights_V_21_address0 = j_1_cast_reg_7656_pp3_iter3_reg;

assign layer2_weights_V_22_address0 = j_1_cast_reg_7656_pp3_iter3_reg;

assign layer2_weights_V_23_address0 = j_1_cast_reg_7656_pp3_iter3_reg;

assign layer2_weights_V_24_address0 = j_1_cast_reg_7656_pp3_iter3_reg;

assign layer2_weights_V_25_address0 = j_1_cast_reg_7656_pp3_iter3_reg;

assign layer2_weights_V_26_address0 = j_1_cast_reg_7656_pp3_iter4_reg;

assign layer2_weights_V_27_address0 = j_1_cast_reg_7656_pp3_iter4_reg;

assign layer2_weights_V_28_address0 = j_1_cast_reg_7656_pp3_iter4_reg;

assign layer2_weights_V_29_address0 = j_1_cast_reg_7656_pp3_iter4_reg;

assign layer2_weights_V_2_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_30_address0 = j_1_cast_reg_7656_pp3_iter4_reg;

assign layer2_weights_V_31_address0 = j_1_cast_reg_7656_pp3_iter5_reg;

assign layer2_weights_V_32_address0 = j_1_cast_reg_7656_pp3_iter5_reg;

assign layer2_weights_V_33_address0 = j_1_cast_reg_7656_pp3_iter5_reg;

assign layer2_weights_V_34_address0 = j_1_cast_reg_7656_pp3_iter5_reg;

assign layer2_weights_V_35_address0 = j_1_cast_reg_7656_pp3_iter5_reg;

assign layer2_weights_V_36_address0 = j_1_cast_reg_7656_pp3_iter6_reg;

assign layer2_weights_V_37_address0 = j_1_cast_reg_7656_pp3_iter6_reg;

assign layer2_weights_V_38_address0 = j_1_cast_reg_7656_pp3_iter6_reg;

assign layer2_weights_V_39_address0 = j_1_cast_reg_7656_pp3_iter6_reg;

assign layer2_weights_V_3_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_40_address0 = j_1_cast_reg_7656_pp3_iter6_reg;

assign layer2_weights_V_41_address0 = j_1_cast_reg_7656_pp3_iter7_reg;

assign layer2_weights_V_42_address0 = j_1_cast_reg_7656_pp3_iter7_reg;

assign layer2_weights_V_43_address0 = j_1_cast_reg_7656_pp3_iter7_reg;

assign layer2_weights_V_44_address0 = j_1_cast_reg_7656_pp3_iter7_reg;

assign layer2_weights_V_45_address0 = j_1_cast_reg_7656_pp3_iter7_reg;

assign layer2_weights_V_46_address0 = j_1_cast_reg_7656_pp3_iter8_reg;

assign layer2_weights_V_47_address0 = j_1_cast_reg_7656_pp3_iter8_reg;

assign layer2_weights_V_48_address0 = j_1_cast_reg_7656_pp3_iter8_reg;

assign layer2_weights_V_49_address0 = j_1_cast_reg_7656_pp3_iter8_reg;

assign layer2_weights_V_4_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_50_address0 = j_1_cast_reg_7656_pp3_iter8_reg;

assign layer2_weights_V_51_address0 = j_1_cast_reg_7656_pp3_iter9_reg;

assign layer2_weights_V_52_address0 = j_1_cast_reg_7656_pp3_iter9_reg;

assign layer2_weights_V_53_address0 = j_1_cast_reg_7656_pp3_iter9_reg;

assign layer2_weights_V_54_address0 = j_1_cast_reg_7656_pp3_iter9_reg;

assign layer2_weights_V_55_address0 = j_1_cast_reg_7656_pp3_iter9_reg;

assign layer2_weights_V_56_address0 = j_1_cast_reg_7656_pp3_iter10_reg;

assign layer2_weights_V_57_address0 = j_1_cast_reg_7656_pp3_iter10_reg;

assign layer2_weights_V_58_address0 = j_1_cast_reg_7656_pp3_iter10_reg;

assign layer2_weights_V_59_address0 = j_1_cast_reg_7656_pp3_iter10_reg;

assign layer2_weights_V_5_address0 = j_1_cast_fu_3267_p1;

assign layer2_weights_V_60_address0 = j_1_cast_reg_7656_pp3_iter11_reg;

assign layer2_weights_V_61_address0 = j_1_cast_reg_7656_pp3_iter11_reg;

assign layer2_weights_V_62_address0 = j_1_cast_reg_7656_pp3_iter11_reg;

assign layer2_weights_V_63_address0 = j_1_cast_reg_7656_pp3_iter12_reg;

assign layer2_weights_V_6_address0 = j_1_cast_reg_7656;

assign layer2_weights_V_7_address0 = j_1_cast_reg_7656;

assign layer2_weights_V_8_address0 = j_1_cast_reg_7656;

assign layer2_weights_V_9_address0 = j_1_cast_reg_7656;

assign lhs_1_fu_2658_p3 = {{sum_V_2_reg_2146}, {8'd0}};

assign lhs_2_fu_2698_p3 = {{tmp_9_fu_2688_p4}, {8'd0}};

assign lsb_index_1_fu_5420_p2 = ($signed(sub_ln894_1_fu_5414_p2) + $signed(32'd4294967243));

assign lsb_index_fu_2795_p2 = ($signed(sub_ln894_fu_2789_p2) + $signed(32'd4294967243));

assign lshr_ln897_1_fu_5456_p2 = 32'd4294967295 >> zext_ln897_1_fu_5452_p1;

assign lshr_ln897_fu_2831_p2 = 32'd4294967295 >> zext_ln897_fu_2827_p1;

assign lshr_ln908_1_fu_5558_p2 = zext_ln907_1_fu_5552_p1 >> zext_ln908_1_fu_5555_p1;

assign lshr_ln908_fu_2933_p2 = zext_ln907_fu_2927_p1 >> zext_ln908_fu_2930_p1;

assign m_2_fu_2948_p3 = ((icmp_ln908_reg_6659[0:0] == 1'b1) ? lshr_ln908_fu_2933_p2 : shl_ln909_fu_2942_p2);

assign m_3_fu_2958_p2 = (m_2_fu_2948_p3 + zext_ln911_fu_2955_p1);

assign m_4_fu_5573_p3 = ((icmp_ln908_1_reg_8313[0:0] == 1'b1) ? lshr_ln908_1_fu_5558_p2 : shl_ln909_1_fu_5567_p2);

assign m_5_fu_5583_p2 = (m_4_fu_5573_p3 + zext_ln911_1_fu_5580_p1);

assign m_8_fu_2964_p4 = {{m_3_fu_2958_p2[63:1]}};

assign m_fu_5589_p4 = {{m_5_fu_5583_p2[63:1]}};

assign man_V_1_fu_2348_p2 = (54'd0 - zext_ln569_fu_2344_p1);

assign man_V_2_fu_2354_p3 = ((p_Result_8_reg_6521[0:0] == 1'b1) ? man_V_1_fu_2348_p2 : zext_ln569_fu_2344_p1);

assign max_idx_V_1_fu_6430_p3 = ((icmp_ln1494_fu_6404_p2[0:0] == 1'b1) ? zext_ln111_fu_6426_p1 : max_idx_V_reg_2238);

assign max_val_V_1_fu_6410_p3 = ((icmp_ln1494_fu_6404_p2[0:0] == 1'b1) ? select_ln1494_fu_6396_p3 : max_val_V_reg_2250);

assign mul_ln1118_10_fu_5730_p1 = 38'd39;

assign mul_ln1118_11_fu_5776_p1 = 39'd549755813835;

assign mul_ln1118_12_fu_5831_p0 = mul_ln1118_12_fu_5831_p00;

assign mul_ln1118_12_fu_5831_p00 = ((trunc_ln1118_fu_5806_p1[0:0] == 1'b1) ? 39'd549755813878 : 39'd549755813827);

assign mul_ln1118_12_fu_5831_p1 = sext_ln1116_63_reg_8508;

assign mul_ln1118_13_fu_6323_p0 = mul_ln1118_13_fu_6323_p00;

assign mul_ln1118_13_fu_6323_p00 = ((trunc_ln1118_reg_8607_pp5_iter2_reg[0:0] == 1'b1) ? 39'd549755813841 : 39'd45);

assign mul_ln1118_13_fu_6323_p1 = temp_output2_0_V_load_15_cast_reg_8593;

assign mul_ln1118_2_fu_3323_p1 = sext_ln1116_2_reg_7337;

assign mul_ln1118_4_fu_3379_p1 = sext_ln1116_4_reg_7347;

assign mul_ln1118_5_fu_3866_p1 = sext_ln1116_19_reg_7422;

assign mul_ln1118_6_fu_4268_p1 = sext_ln1116_31_reg_7482;

assign mul_ln1118_7_fu_4594_p1 = sext_ln1116_41_reg_7532;

assign mul_ln1118_8_fu_5147_p1 = sext_ln1116_58_reg_7617;

assign mul_ln1118_9_fu_5698_p1 = 38'd274877906893;

assign mul_ln1118_fu_3281_p1 = sext_ln1116_reg_7327;

assign mul_ln1192_1_fu_6047_p0 = mul_ln1192_1_fu_6047_p00;

assign mul_ln1192_1_fu_6047_p00 = ((trunc_ln1118_reg_8607[0:0] == 1'b1) ? 40'd143 : 40'd1099511627764);

assign mul_ln1192_1_fu_6047_p1 = sext_ln1192_1_reg_8543;

assign mul_ln1192_2_fu_6069_p0 = mul_ln1192_2_fu_6069_p00;

assign mul_ln1192_2_fu_6069_p00 = ((trunc_ln1118_reg_8607[0:0] == 1'b1) ? 40'd1099511627638 : 40'd1099511627722);

assign mul_ln1192_2_fu_6069_p1 = sext_ln1192_2_reg_8558;

assign mul_ln1192_3_fu_6185_p0 = mul_ln1192_3_fu_6185_p00;

assign mul_ln1192_3_fu_6185_p00 = ((trunc_ln1118_reg_8607_pp5_iter1_reg[0:0] == 1'b1) ? 40'd1099511627631 : 40'd63);

assign mul_ln1192_3_fu_6185_p1 = sext_ln1192_3_reg_8568;

assign mul_ln1192_fu_5975_p0 = mul_ln1192_fu_5975_p00;

assign mul_ln1192_fu_5975_p00 = ((trunc_ln1118_reg_8607[0:0] == 1'b1) ? 40'd1099511627737 : 40'd163);

assign mul_ln1192_fu_5975_p1 = sext_ln1192_reg_8533;

assign mul_ln703_10_fu_3686_p1 = sext_ln1116_13_reg_7392;

assign mul_ln703_11_fu_3705_p1 = sext_ln1116_14_reg_7397;

assign mul_ln703_12_fu_3714_p1 = sext_ln1116_15_reg_7402;

assign mul_ln703_13_fu_3781_p1 = sext_ln1116_16_reg_7407;

assign mul_ln703_14_fu_3814_p1 = sext_ln1116_17_reg_7412;

assign mul_ln703_15_fu_3847_p1 = sext_ln1116_18_reg_7417;

assign mul_ln703_16_fu_3875_p1 = sext_ln1116_20_reg_7427;

assign mul_ln703_17_fu_3946_p1 = sext_ln1116_21_reg_7432;

assign mul_ln703_18_fu_3979_p1 = sext_ln1116_22_reg_7437;

assign mul_ln703_19_fu_4012_p1 = sext_ln1116_23_reg_7442;

assign mul_ln703_1_fu_3360_p1 = sext_ln1116_3_reg_7342;

assign mul_ln703_20_fu_4031_p1 = sext_ln1116_24_reg_7447;

assign mul_ln703_21_fu_4040_p1 = sext_ln1116_25_reg_7452;

assign mul_ln703_22_fu_4107_p1 = sext_ln1116_26_reg_7457;

assign mul_ln703_23_fu_4140_p1 = sext_ln1116_27_reg_7462;

assign mul_ln703_24_fu_4173_p1 = sext_ln1116_28_reg_7467;

assign mul_ln703_25_fu_4192_p1 = sext_ln1116_29_reg_7472;

assign mul_ln703_26_fu_4201_p1 = sext_ln1116_30_reg_7477;

assign mul_ln703_27_fu_4305_p1 = sext_ln1116_32_reg_7487;

assign mul_ln703_28_fu_4338_p1 = sext_ln1116_33_reg_7492;

assign mul_ln703_29_fu_4357_p1 = sext_ln1116_34_reg_7497;

assign mul_ln703_2_fu_3388_p1 = sext_ln1116_5_reg_7352;

assign mul_ln703_30_fu_4366_p1 = sext_ln1116_35_reg_7502;

assign mul_ln703_31_fu_4433_p1 = sext_ln1116_36_reg_7507;

assign mul_ln703_32_fu_4466_p1 = sext_ln1116_37_reg_7512;

assign mul_ln703_33_fu_4499_p1 = sext_ln1116_38_reg_7517;

assign mul_ln703_34_fu_4518_p1 = sext_ln1116_39_reg_7522;

assign mul_ln703_35_fu_4527_p1 = sext_ln1116_40_reg_7527;

assign mul_ln703_36_fu_4631_p1 = sext_ln1116_42_reg_7537;

assign mul_ln703_37_fu_4664_p1 = sext_ln1116_43_reg_7542;

assign mul_ln703_38_fu_4683_p1 = sext_ln1116_44_reg_7547;

assign mul_ln703_39_fu_4692_p1 = sext_ln1116_45_reg_7552;

assign mul_ln703_3_fu_3459_p1 = sext_ln1116_6_reg_7357;

assign mul_ln703_40_fu_4759_p1 = sext_ln1116_46_reg_7557;

assign mul_ln703_41_fu_4792_p1 = sext_ln1116_47_reg_7562;

assign mul_ln703_42_fu_4825_p1 = sext_ln1116_48_reg_7567;

assign mul_ln703_43_fu_4844_p1 = sext_ln1116_49_reg_7572;

assign mul_ln703_44_fu_4853_p1 = sext_ln1116_50_reg_7577;

assign mul_ln703_45_fu_4920_p1 = sext_ln1116_51_reg_7582;

assign mul_ln703_46_fu_4953_p1 = sext_ln1116_52_reg_7587;

assign mul_ln703_47_fu_4986_p1 = sext_ln1116_53_reg_7592;

assign mul_ln703_48_fu_5005_p1 = sext_ln1116_54_reg_7597;

assign mul_ln703_49_fu_5014_p1 = sext_ln1116_55_reg_7602;

assign mul_ln703_4_fu_3492_p1 = sext_ln1116_7_reg_7362;

assign mul_ln703_50_fu_5081_p1 = sext_ln1116_56_reg_7607;

assign mul_ln703_51_fu_5114_p1 = sext_ln1116_57_reg_7612;

assign mul_ln703_52_fu_5166_p1 = sext_ln1116_59_reg_7622;

assign mul_ln703_53_fu_5214_p1 = sext_ln1116_60_reg_7627;

assign mul_ln703_54_fu_5247_p1 = sext_ln1116_61_reg_7632;

assign mul_ln703_55_fu_5289_p1 = sext_ln1116_62_reg_7637;

assign mul_ln703_56_fu_5311_p1 = temp_output_0_V_load_63_cast_reg_7642;

assign mul_ln703_57_fu_5872_p0 = mul_ln703_57_fu_5872_p00;

assign mul_ln703_57_fu_5872_p00 = ((trunc_ln1118_fu_5806_p1[0:0] == 1'b1) ? 40'd1099511627654 : 40'd1099511627762);

assign mul_ln703_57_fu_5872_p1 = sext_ln1116_64_reg_8513;

assign mul_ln703_58_fu_5895_p0 = mul_ln703_58_fu_5895_p00;

assign mul_ln703_58_fu_5895_p00 = ((trunc_ln1118_fu_5806_p1[0:0] == 1'b1) ? 40'd1099511627681 : 40'd110);

assign mul_ln703_58_fu_5895_p1 = sext_ln1116_66_reg_8528;

assign mul_ln703_59_fu_6011_p0 = mul_ln703_59_fu_6011_p00;

assign mul_ln703_59_fu_6011_p00 = ((trunc_ln1118_reg_8607[0:0] == 1'b1) ? 40'd1099511627748 : 40'd81);

assign mul_ln703_59_fu_6011_p1 = sext_ln1116_67_reg_8538;

assign mul_ln703_5_fu_3525_p1 = sext_ln1116_8_reg_7367;

assign mul_ln703_60_fu_6149_p0 = mul_ln703_60_fu_6149_p00;

assign mul_ln703_60_fu_6149_p00 = ((trunc_ln1118_reg_8607_pp5_iter1_reg[0:0] == 1'b1) ? 40'd1099511627683 : 40'd124);

assign mul_ln703_60_fu_6149_p1 = sext_ln1116_69_reg_8563;

assign mul_ln703_61_fu_6221_p0 = mul_ln703_61_fu_6221_p00;

assign mul_ln703_61_fu_6221_p00 = ((trunc_ln1118_reg_8607_pp5_iter1_reg[0:0] == 1'b1) ? 40'd1099511627665 : 40'd1099511627743);

assign mul_ln703_61_fu_6221_p1 = sext_ln1116_70_reg_8573;

assign mul_ln703_62_fu_6243_p0 = mul_ln703_62_fu_6243_p00;

assign mul_ln703_62_fu_6243_p00 = ((trunc_ln1118_reg_8607_pp5_iter1_reg[0:0] == 1'b1) ? 40'd1099511627714 : 40'd82);

assign mul_ln703_62_fu_6243_p1 = sext_ln1116_71_reg_8578;

assign mul_ln703_6_fu_3544_p1 = sext_ln1116_9_reg_7372;

assign mul_ln703_7_fu_3553_p1 = sext_ln1116_10_reg_7377;

assign mul_ln703_8_fu_3620_p1 = sext_ln1116_11_reg_7382;

assign mul_ln703_9_fu_3653_p1 = sext_ln1116_12_reg_7387;

assign mul_ln703_fu_3290_p1 = sext_ln1116_1_reg_7332;

assign mul_ln708_fu_5818_p0 = mul_ln708_fu_5818_p00;

assign mul_ln708_fu_5818_p00 = ((trunc_ln1118_fu_5806_p1[0:0] == 1'b1) ? 40'd10 : 40'd1099511627614);

assign mul_ln708_fu_5818_p1 = sext_ln708_reg_8503;

assign or_ln1506_1_fu_5676_p2 = (icmp_ln1506_3_reg_8348 | icmp_ln1506_2_reg_8343);

assign or_ln1506_fu_3051_p2 = (icmp_ln1506_reg_6689 | icmp_ln1506_1_reg_6694);

assign or_ln25_fu_2617_p2 = (k_reg_2135 | 9'd1);

assign or_ln571_1_fu_2542_p2 = (or_ln571_fu_2513_p2 | and_ln581_fu_2470_p2);

assign or_ln571_fu_2513_p2 = (icmp_ln571_reg_6531 | and_ln603_fu_2500_p2);

assign or_ln581_fu_2488_p2 = (or_ln582_fu_2459_p2 | icmp_ln581_fu_2361_p2);

assign or_ln582_fu_2459_p2 = (icmp_ln582_fu_2388_p2 | icmp_ln571_reg_6531);

assign or_ln899_2_fu_2843_p2 = (shl_ln899_fu_2837_p2 | lshr_ln897_fu_2831_p2);

assign or_ln899_fu_5468_p2 = (shl_ln899_1_fu_5462_p2 | lshr_ln897_1_fu_5456_p2);

assign p_Result_10_fu_2749_p3 = temp_output_0_V_q1[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_2763_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_11_fu_2771_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_11_fu_2771_p4[ap_tvar_int_0] = tmp_V_4_fu_2763_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_12_fu_2875_p3 = tmp_V_4_fu_2763_p3[lsb_index_fu_2795_p2];

assign p_Result_13_fu_3012_p5 = {{tmp_1_fu_3005_p3}, {zext_ln912_fu_2974_p1[51:0]}};

assign p_Result_14_fu_5374_p3 = temp_output2_0_V_q1[32'd31];

integer ap_tvar_int_1;

always @ (tmp_V_5_fu_5388_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_15_fu_5396_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_15_fu_5396_p4[ap_tvar_int_1] = tmp_V_5_fu_5388_p3[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_16_fu_5500_p3 = tmp_V_5_fu_5388_p3[lsb_index_1_fu_5420_p2];

assign p_Result_17_fu_5637_p5 = {{tmp_2_fu_5630_p3}, {zext_ln912_1_fu_5599_p1[51:0]}};

assign p_Result_5_fu_5603_p3 = m_5_fu_5583_p2[32'd54];

assign p_Result_7_fu_6448_p3 = max_idx_V_reg_2238[32'd31];

assign p_Result_9_fu_2337_p3 = {{1'd1}, {trunc_ln565_reg_6526}};

assign p_Result_s_fu_2978_p3 = m_3_fu_2958_p2[32'd54];

assign ret_V_1_fu_2710_p2 = ($signed(lhs_2_fu_2698_p3) + $signed(sext_ln703_1_fu_2706_p1));

assign ret_V_2_fu_6438_p4 = {{max_idx_V_reg_2238[31:8]}};

assign ret_V_3_fu_6466_p2 = (ret_V_2_fu_6438_p4 + 24'd1);

assign ret_V_5_fu_6480_p3 = ((p_Result_7_fu_6448_p3[0:0] == 1'b1) ? select_ln850_fu_6472_p3 : ret_V_2_fu_6438_p4);

assign ret_V_fu_2670_p2 = ($signed(lhs_1_fu_2658_p3) + $signed(sext_ln703_fu_2666_p1));

assign select_ln1118_1_fu_5912_p3 = ((trunc_ln1118_reg_8607[0:0] == 1'b1) ? sext_ln1116_65_reg_8523 : mul_ln1118_9_reg_8518);

assign select_ln1118_2_fu_6086_p3 = ((trunc_ln1118_reg_8607_pp5_iter1_reg[0:0] == 1'b1) ? sext_ln1116_68_reg_8553 : mul_ln1118_10_reg_8548);

assign select_ln1118_3_fu_6283_p3 = ((trunc_ln1118_reg_8607_pp5_iter2_reg[0:0] == 1'b1) ? shl_ln1118_2_reg_8588 : mul_ln1118_11_reg_8583);

assign select_ln1494_fu_6396_p3 = ((trunc_ln1494_fu_6392_p1[0:0] == 1'b1) ? temp_output3_V_0_1_0305_reg_2192 : temp_output3_V_0_0_0_reg_2204);

assign select_ln571_1_fu_2518_p3 = ((and_ln585_fu_2482_p2[0:0] == 1'b1) ? select_ln588_fu_2434_p3 : trunc_ln586_fu_2423_p1);

assign select_ln571_2_fu_2526_p3 = ((and_ln582_fu_2453_p2[0:0] == 1'b1) ? trunc_ln583_fu_2393_p1 : 32'd0);

assign select_ln571_3_fu_2534_p3 = ((or_ln571_fu_2513_p2[0:0] == 1'b1) ? select_ln571_fu_2506_p3 : select_ln571_1_fu_2518_p3);

assign select_ln571_4_fu_2548_p3 = ((or_ln571_1_fu_2542_p2[0:0] == 1'b1) ? select_ln571_3_fu_2534_p3 : select_ln571_2_fu_2526_p3);

assign select_ln571_fu_2506_p3 = ((icmp_ln571_reg_6531[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_2442_p2);

assign select_ln588_fu_2434_p3 = ((tmp_88_fu_2427_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln850_fu_6472_p3 = ((icmp_ln851_fu_6460_p2[0:0] == 1'b1) ? ret_V_2_fu_6438_p4 : ret_V_3_fu_6466_p2);

assign select_ln893_1_fu_5611_p3 = ((p_Result_5_fu_5603_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln893_fu_2986_p3 = ((p_Result_s_fu_2978_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln896_1_fu_5514_p3 = ((icmp_ln896_1_fu_5436_p2[0:0] == 1'b1) ? icmp_ln899_1_fu_5480_p2 : p_Result_16_fu_5500_p3);

assign select_ln896_fu_2889_p3 = ((icmp_ln896_fu_2811_p2[0:0] == 1'b1) ? icmp_ln899_fu_2855_p2 : p_Result_12_fu_2875_p3);

assign select_ln908_2_fu_5540_p3 = ((icmp_ln908_1_fu_5508_p2[0:0] == 1'b1) ? select_ln896_1_fu_5514_p3 : and_ln899_3_fu_5528_p2);

assign select_ln908_fu_2915_p3 = ((icmp_ln908_fu_2883_p2[0:0] == 1'b1) ? select_ln896_fu_2889_p3 : and_ln899_1_fu_2903_p2);

assign sext_ln1116_10_fu_3091_p1 = $signed(temp_output_0_V_load_10_reg_6807);

assign sext_ln1116_11_fu_3094_p1 = $signed(temp_output_0_V_load_11_reg_6812);

assign sext_ln1116_12_fu_3097_p1 = $signed(temp_output_0_V_load_12_reg_6827);

assign sext_ln1116_13_fu_3100_p1 = $signed(temp_output_0_V_load_13_reg_6832);

assign sext_ln1116_14_fu_3103_p1 = $signed(temp_output_0_V_load_14_reg_6847);

assign sext_ln1116_15_fu_3106_p1 = $signed(temp_output_0_V_load_15_reg_6852);

assign sext_ln1116_16_fu_3109_p1 = $signed(temp_output_0_V_load_16_reg_6867);

assign sext_ln1116_17_fu_3112_p1 = $signed(temp_output_0_V_load_17_reg_6872);

assign sext_ln1116_18_fu_3115_p1 = $signed(temp_output_0_V_load_18_reg_6887);

assign sext_ln1116_19_fu_3118_p1 = $signed(temp_output_0_V_load_19_reg_6892);

assign sext_ln1116_1_fu_3064_p1 = $signed(temp_output_0_V_load_1_reg_6712);

assign sext_ln1116_20_fu_3121_p1 = $signed(temp_output_0_V_load_20_reg_6907);

assign sext_ln1116_21_fu_3124_p1 = $signed(temp_output_0_V_load_21_reg_6912);

assign sext_ln1116_22_fu_3127_p1 = $signed(temp_output_0_V_load_22_reg_6927);

assign sext_ln1116_23_fu_3130_p1 = $signed(temp_output_0_V_load_23_reg_6932);

assign sext_ln1116_24_fu_3133_p1 = $signed(temp_output_0_V_load_24_reg_6947);

assign sext_ln1116_25_fu_3136_p1 = $signed(temp_output_0_V_load_25_reg_6952);

assign sext_ln1116_26_fu_3139_p1 = $signed(temp_output_0_V_load_26_reg_6967);

assign sext_ln1116_27_fu_3142_p1 = $signed(temp_output_0_V_load_27_reg_6972);

assign sext_ln1116_28_fu_3145_p1 = $signed(temp_output_0_V_load_28_reg_6987);

assign sext_ln1116_29_fu_3148_p1 = $signed(temp_output_0_V_load_29_reg_6992);

assign sext_ln1116_2_fu_3067_p1 = $signed(temp_output_0_V_load_2_reg_6727);

assign sext_ln1116_30_fu_3151_p1 = $signed(temp_output_0_V_load_30_reg_7007);

assign sext_ln1116_31_fu_3154_p1 = $signed(temp_output_0_V_load_31_reg_7012);

assign sext_ln1116_32_fu_3157_p1 = $signed(temp_output_0_V_load_32_reg_7027);

assign sext_ln1116_33_fu_3160_p1 = $signed(temp_output_0_V_load_33_reg_7032);

assign sext_ln1116_34_fu_3163_p1 = $signed(temp_output_0_V_load_34_reg_7047);

assign sext_ln1116_35_fu_3166_p1 = $signed(temp_output_0_V_load_35_reg_7052);

assign sext_ln1116_36_fu_3169_p1 = $signed(temp_output_0_V_load_36_reg_7067);

assign sext_ln1116_37_fu_3172_p1 = $signed(temp_output_0_V_load_37_reg_7072);

assign sext_ln1116_38_fu_3175_p1 = $signed(temp_output_0_V_load_38_reg_7087);

assign sext_ln1116_39_fu_3178_p1 = $signed(temp_output_0_V_load_39_reg_7092);

assign sext_ln1116_3_fu_3070_p1 = $signed(temp_output_0_V_load_3_reg_6732);

assign sext_ln1116_40_fu_3181_p1 = $signed(temp_output_0_V_load_40_reg_7107);

assign sext_ln1116_41_fu_3184_p1 = $signed(temp_output_0_V_load_41_reg_7112);

assign sext_ln1116_42_fu_3187_p1 = $signed(temp_output_0_V_load_42_reg_7127);

assign sext_ln1116_43_fu_3190_p1 = $signed(temp_output_0_V_load_43_reg_7132);

assign sext_ln1116_44_fu_3193_p1 = $signed(temp_output_0_V_load_44_reg_7147);

assign sext_ln1116_45_fu_3196_p1 = $signed(temp_output_0_V_load_45_reg_7152);

assign sext_ln1116_46_fu_3199_p1 = $signed(temp_output_0_V_load_46_reg_7167);

assign sext_ln1116_47_fu_3202_p1 = $signed(temp_output_0_V_load_47_reg_7172);

assign sext_ln1116_48_fu_3205_p1 = $signed(temp_output_0_V_load_48_reg_7187);

assign sext_ln1116_49_fu_3208_p1 = $signed(temp_output_0_V_load_49_reg_7192);

assign sext_ln1116_4_fu_3073_p1 = $signed(temp_output_0_V_load_4_reg_6747);

assign sext_ln1116_50_fu_3211_p1 = $signed(temp_output_0_V_load_50_reg_7207);

assign sext_ln1116_51_fu_3214_p1 = $signed(temp_output_0_V_load_51_reg_7212);

assign sext_ln1116_52_fu_3217_p1 = $signed(temp_output_0_V_load_52_reg_7227);

assign sext_ln1116_53_fu_3220_p1 = $signed(temp_output_0_V_load_53_reg_7232);

assign sext_ln1116_54_fu_3223_p1 = $signed(temp_output_0_V_load_54_reg_7247);

assign sext_ln1116_55_fu_3226_p1 = $signed(temp_output_0_V_load_55_reg_7252);

assign sext_ln1116_56_fu_3229_p1 = $signed(temp_output_0_V_load_56_reg_7267);

assign sext_ln1116_57_fu_3232_p1 = $signed(temp_output_0_V_load_57_reg_7272);

assign sext_ln1116_58_fu_3235_p1 = $signed(temp_output_0_V_load_58_reg_7287);

assign sext_ln1116_59_fu_3238_p1 = $signed(temp_output_0_V_load_59_reg_7292);

assign sext_ln1116_5_fu_3076_p1 = $signed(temp_output_0_V_load_5_reg_6752);

assign sext_ln1116_60_fu_3241_p1 = $signed(temp_output_0_V_load_60_reg_7307);

assign sext_ln1116_61_fu_3244_p1 = $signed(temp_output_0_V_load_61_reg_7312);

assign sext_ln1116_62_fu_3247_p1 = $signed(temp_output_0_V_q0);

assign sext_ln1116_63_fu_5689_p1 = $signed(temp_output2_0_V_load_1_reg_8366);

assign sext_ln1116_64_fu_5692_p1 = $signed(temp_output2_0_V_load_2_reg_8381);

assign sext_ln1116_65_fu_5711_p1 = $signed(shl_ln1_fu_5704_p3);

assign sext_ln1116_66_fu_5715_p1 = $signed(temp_output2_0_V_load_4_reg_8402);

assign sext_ln1116_67_fu_5721_p1 = $signed(temp_output2_0_V_load_6_reg_8422);

assign sext_ln1116_68_fu_5753_p1 = $signed(sub_ln1118_fu_5747_p2);

assign sext_ln1116_69_fu_5760_p1 = $signed(temp_output2_0_V_load_10_reg_8463);

assign sext_ln1116_6_fu_3079_p1 = $signed(temp_output_0_V_load_6_reg_6767);

assign sext_ln1116_70_fu_5766_p1 = $signed(temp_output2_0_V_load_12_reg_8483);

assign sext_ln1116_71_fu_5769_p1 = $signed(temp_output2_0_V_load_13_reg_8488);

assign sext_ln1116_7_fu_3082_p1 = $signed(temp_output_0_V_load_7_reg_6772);

assign sext_ln1116_8_fu_3085_p1 = $signed(temp_output_0_V_load_8_reg_6787);

assign sext_ln1116_9_fu_3088_p1 = $signed(temp_output_0_V_load_9_reg_6792);

assign sext_ln1116_fu_3061_p1 = $signed(temp_output_0_V_load_reg_6707);

assign sext_ln1118_68_fu_5743_p1 = $signed(shl_ln1118_1_fu_5736_p3);

assign sext_ln1192_1_fu_5724_p1 = $signed(temp_output2_0_V_load_7_reg_8427);

assign sext_ln1192_2_fu_5757_p1 = $signed(temp_output2_0_V_load_9_reg_8448);

assign sext_ln1192_3_fu_5763_p1 = $signed(temp_output2_0_V_load_11_reg_8468);

assign sext_ln1192_fu_5718_p1 = $signed(temp_output2_0_V_load_5_reg_8407);

assign sext_ln581_fu_2384_p1 = sh_amt_fu_2376_p3;

assign sext_ln703_10_fu_6109_p1 = $signed(select_ln1118_2_fu_6086_p3);

assign sext_ln703_11_fu_6306_p1 = $signed(select_ln1118_3_fu_6283_p3);

assign sext_ln703_12_fu_6346_p1 = $signed(mul_ln1118_13_fu_6323_p2);

assign sext_ln703_1_fu_2706_p1 = $signed(r_V_3_fu_2682_p2);

assign sext_ln703_2_fu_3346_p1 = $signed(mul_ln1118_2_fu_3323_p2);

assign sext_ln703_3_fu_3423_p1 = $signed(mul_ln1118_4_reg_7759);

assign sext_ln703_4_fu_3910_p1 = $signed(mul_ln1118_5_reg_7894);

assign sext_ln703_5_fu_4291_p1 = $signed(mul_ln1118_6_fu_4268_p2);

assign sext_ln703_6_fu_4617_p1 = $signed(mul_ln1118_7_fu_4594_p2);

assign sext_ln703_7_fu_5178_p1 = $signed(mul_ln1118_8_reg_8239);

assign sext_ln703_8_fu_5854_p1 = $signed(mul_ln1118_12_fu_5831_p2);

assign sext_ln703_9_fu_5935_p1 = $signed(select_ln1118_1_fu_5912_p3);

assign sext_ln703_fu_2666_p1 = $signed(r_V_1_fu_2652_p2);

assign sext_ln708_fu_5686_p1 = $signed(temp_output2_0_V_load_reg_8361);

assign sh_amt_fu_2376_p3 = ((icmp_ln581_fu_2361_p2[0:0] == 1'b1) ? add_ln581_fu_2366_p2 : sub_ln581_fu_2371_p2);

assign shl_ln1118_1_fu_5736_p3 = {{temp_output2_0_V_load_8_reg_8442}, {4'd0}};

assign shl_ln1118_2_fu_5782_p1 = temp_output2_0_V_q0;

assign shl_ln1118_2_fu_5782_p3 = {{shl_ln1118_2_fu_5782_p1}, {7'd0}};

assign shl_ln1_fu_5704_p3 = {{temp_output2_0_V_load_3_reg_8386}, {5'd0}};

assign shl_ln2_fu_6418_p3 = {{trunc_ln1494_fu_6392_p1}, {8'd0}};

assign shl_ln604_fu_2442_p2 = trunc_ln583_fu_2393_p1 << sext_ln581_fu_2384_p1;

assign shl_ln728_10_fu_3668_p3 = {{tmp_19_fu_3658_p4}, {8'd0}};

assign shl_ln728_11_fu_3719_p3 = {{tmp_20_reg_7844}, {8'd0}};

assign shl_ln728_12_fu_3741_p3 = {{tmp_21_fu_3731_p4}, {8'd0}};

assign shl_ln728_13_fu_3764_p3 = {{tmp_22_fu_3754_p4}, {8'd0}};

assign shl_ln728_14_fu_3796_p3 = {{tmp_23_fu_3786_p4}, {8'd0}};

assign shl_ln728_15_fu_3829_p3 = {{tmp_24_fu_3819_p4}, {8'd0}};

assign shl_ln728_16_fu_3880_p3 = {{tmp_25_reg_7889}, {8'd0}};

assign shl_ln728_17_fu_3902_p3 = {{tmp_26_fu_3892_p4}, {8'd0}};

assign shl_ln728_18_fu_3929_p3 = {{tmp_27_fu_3919_p4}, {8'd0}};

assign shl_ln728_19_fu_3961_p3 = {{tmp_28_fu_3951_p4}, {8'd0}};

assign shl_ln728_1_fu_3338_p3 = {{tmp_4_fu_3328_p4}, {8'd0}};

assign shl_ln728_20_fu_3994_p3 = {{tmp_29_fu_3984_p4}, {8'd0}};

assign shl_ln728_21_fu_4045_p3 = {{tmp_30_reg_7934}, {8'd0}};

assign shl_ln728_22_fu_4067_p3 = {{tmp_31_fu_4057_p4}, {8'd0}};

assign shl_ln728_23_fu_4090_p3 = {{tmp_32_fu_4080_p4}, {8'd0}};

assign shl_ln728_24_fu_4122_p3 = {{tmp_33_fu_4112_p4}, {8'd0}};

assign shl_ln728_25_fu_4155_p3 = {{tmp_34_fu_4145_p4}, {8'd0}};

assign shl_ln728_26_fu_4206_p3 = {{tmp_35_reg_7979}, {8'd0}};

assign shl_ln728_27_fu_4228_p3 = {{tmp_36_fu_4218_p4}, {8'd0}};

assign shl_ln728_28_fu_4251_p3 = {{tmp_37_fu_4241_p4}, {8'd0}};

assign shl_ln728_29_fu_4283_p3 = {{tmp_38_fu_4273_p4}, {8'd0}};

assign shl_ln728_2_fu_3393_p3 = {{tmp_10_reg_7754}, {8'd0}};

assign shl_ln728_30_fu_4320_p3 = {{tmp_39_fu_4310_p4}, {8'd0}};

assign shl_ln728_31_fu_4371_p3 = {{tmp_40_reg_8024}, {8'd0}};

assign shl_ln728_32_fu_4393_p3 = {{tmp_41_fu_4383_p4}, {8'd0}};

assign shl_ln728_33_fu_4416_p3 = {{tmp_42_fu_4406_p4}, {8'd0}};

assign shl_ln728_34_fu_4448_p3 = {{tmp_43_fu_4438_p4}, {8'd0}};

assign shl_ln728_35_fu_4481_p3 = {{tmp_44_fu_4471_p4}, {8'd0}};

assign shl_ln728_36_fu_4532_p3 = {{tmp_45_reg_8069}, {8'd0}};

assign shl_ln728_37_fu_4554_p3 = {{tmp_46_fu_4544_p4}, {8'd0}};

assign shl_ln728_38_fu_4577_p3 = {{tmp_47_fu_4567_p4}, {8'd0}};

assign shl_ln728_39_fu_4609_p3 = {{tmp_48_fu_4599_p4}, {8'd0}};

assign shl_ln728_3_fu_3415_p3 = {{tmp_11_fu_3405_p4}, {8'd0}};

assign shl_ln728_40_fu_4646_p3 = {{tmp_49_fu_4636_p4}, {8'd0}};

assign shl_ln728_41_fu_4697_p3 = {{tmp_50_reg_8114}, {8'd0}};

assign shl_ln728_42_fu_4719_p3 = {{tmp_51_fu_4709_p4}, {8'd0}};

assign shl_ln728_43_fu_4742_p3 = {{tmp_52_fu_4732_p4}, {8'd0}};

assign shl_ln728_44_fu_4774_p3 = {{tmp_53_fu_4764_p4}, {8'd0}};

assign shl_ln728_45_fu_4807_p3 = {{tmp_54_fu_4797_p4}, {8'd0}};

assign shl_ln728_46_fu_4858_p3 = {{tmp_55_reg_8159}, {8'd0}};

assign shl_ln728_47_fu_4880_p3 = {{tmp_56_fu_4870_p4}, {8'd0}};

assign shl_ln728_48_fu_4903_p3 = {{tmp_57_fu_4893_p4}, {8'd0}};

assign shl_ln728_49_fu_4935_p3 = {{tmp_58_fu_4925_p4}, {8'd0}};

assign shl_ln728_4_fu_3442_p3 = {{tmp_12_fu_3432_p4}, {8'd0}};

assign shl_ln728_50_fu_4968_p3 = {{tmp_59_fu_4958_p4}, {8'd0}};

assign shl_ln728_51_fu_5019_p3 = {{tmp_60_reg_8204}, {8'd0}};

assign shl_ln728_52_fu_5041_p3 = {{tmp_61_fu_5031_p4}, {8'd0}};

assign shl_ln728_53_fu_5064_p3 = {{tmp_62_fu_5054_p4}, {8'd0}};

assign shl_ln728_54_fu_5096_p3 = {{tmp_63_fu_5086_p4}, {8'd0}};

assign shl_ln728_55_fu_5129_p3 = {{tmp_64_fu_5119_p4}, {8'd0}};

assign shl_ln728_56_fu_5171_p3 = {{tmp_65_reg_8244}, {8'd0}};

assign shl_ln728_57_fu_5197_p3 = {{tmp_66_fu_5187_p4}, {8'd0}};

assign shl_ln728_58_fu_5229_p3 = {{tmp_67_fu_5219_p4}, {8'd0}};

assign shl_ln728_59_fu_5262_p3 = {{tmp_68_fu_5252_p4}, {8'd0}};

assign shl_ln728_5_fu_3474_p3 = {{tmp_13_fu_3464_p4}, {8'd0}};

assign shl_ln728_60_fu_5294_p3 = {{tmp_69_reg_8274}, {8'd0}};

assign shl_ln728_61_fu_5326_p3 = {{tmp_70_fu_5316_p4}, {8'd0}};

assign shl_ln728_62_fu_5846_p3 = {{tmp_71_fu_5836_p4}, {8'd0}};

assign shl_ln728_63_fu_5900_p3 = {{tmp_72_reg_8630}, {8'd0}};

assign shl_ln728_64_fu_5927_p3 = {{tmp_73_fu_5917_p4}, {8'd0}};

assign shl_ln728_65_fu_5955_p3 = {{tmp_74_fu_5945_p4}, {8'd0}};

assign shl_ln728_66_fu_5990_p3 = {{tmp_75_fu_5980_p4}, {8'd0}};

assign shl_ln728_67_fu_6026_p3 = {{tmp_76_fu_6016_p4}, {8'd0}};

assign shl_ln728_68_fu_6074_p3 = {{tmp_77_reg_8645}, {8'd0}};

assign shl_ln728_69_fu_6101_p3 = {{tmp_78_fu_6091_p4}, {8'd0}};

assign shl_ln728_6_fu_3507_p3 = {{tmp_14_fu_3497_p4}, {8'd0}};

assign shl_ln728_70_fu_6129_p3 = {{tmp_79_fu_6119_p4}, {8'd0}};

assign shl_ln728_71_fu_6164_p3 = {{tmp_80_fu_6154_p4}, {8'd0}};

assign shl_ln728_72_fu_6200_p3 = {{tmp_81_fu_6190_p4}, {8'd0}};

assign shl_ln728_73_fu_6248_p3 = {{tmp_82_reg_8660}, {8'd0}};

assign shl_ln728_74_fu_6270_p3 = {{tmp_83_fu_6260_p4}, {8'd0}};

assign shl_ln728_75_fu_6298_p3 = {{tmp_84_fu_6288_p4}, {8'd0}};

assign shl_ln728_76_fu_6338_p3 = {{tmp_85_fu_6328_p4}, {8'd0}};

assign shl_ln728_7_fu_3558_p3 = {{tmp_15_reg_7799}, {8'd0}};

assign shl_ln728_8_fu_3580_p3 = {{tmp_16_fu_3570_p4}, {8'd0}};

assign shl_ln728_9_fu_3603_p3 = {{tmp_17_fu_3593_p4}, {8'd0}};

assign shl_ln728_s_fu_3635_p3 = {{tmp_18_fu_3625_p4}, {8'd0}};

assign shl_ln899_1_fu_5462_p2 = 32'd1 << lsb_index_1_fu_5420_p2;

assign shl_ln899_fu_2837_p2 = 32'd1 << lsb_index_fu_2795_p2;

assign shl_ln909_1_fu_5567_p2 = zext_ln907_1_fu_5552_p1 << zext_ln909_1_fu_5564_p1;

assign shl_ln909_fu_2942_p2 = zext_ln907_fu_2927_p1 << zext_ln909_fu_2939_p1;

assign shl_ln_fu_3305_p3 = {{tmp_s_fu_3295_p4}, {8'd0}};

assign sub_ln1118_fu_5747_p2 = ($signed(37'd0) - $signed(sext_ln1118_68_fu_5743_p1));

assign sub_ln581_fu_2371_p2 = (12'd8 - F2_reg_6539);

assign sub_ln894_1_fu_5414_p2 = (32'd32 - l_1_fu_5406_p3);

assign sub_ln894_fu_2789_p2 = (32'd32 - l_fu_2781_p3);

assign sub_ln897_1_fu_5446_p2 = (6'd22 - trunc_ln897_1_fu_5442_p1);

assign sub_ln897_fu_2821_p2 = (6'd22 - trunc_ln897_fu_2817_p1);

assign sub_ln909_1_fu_5534_p2 = (32'd54 - sub_ln894_1_fu_5414_p2);

assign sub_ln909_fu_2909_p2 = (32'd54 - sub_ln894_fu_2789_p2);

assign sub_ln915_1_fu_5619_p2 = (11'd24 - trunc_ln893_1_reg_8333);

assign sub_ln915_fu_2994_p2 = (11'd24 - trunc_ln893_reg_6679);

assign temp_output2_0_V_addr_reg_6552 = 64'd0;

assign temp_output2_0_V_load_15_cast_fu_5790_p1 = $signed(temp_output2_0_V_q1);

assign temp_output3_0_0_V_fu_6356_p4 = {{add_ln1192_79_fu_6350_p2[39:8]}};

assign temp_output3_0_1_V_1_fu_6366_p3 = ((trunc_ln1118_reg_8607_pp5_iter2_reg[0:0] == 1'b1) ? temp_output3_0_0_V_fu_6356_p4 : temp_output3_V_0_1_0305_reg_2192);

assign temp_output3_0_1_V_2_fu_6373_p3 = ((trunc_ln1118_reg_8607_pp5_iter2_reg[0:0] == 1'b1) ? temp_output3_V_0_0_0_reg_2204 : temp_output3_0_0_V_fu_6356_p4);

assign temp_output_0_V_addr_reg_6547 = 64'd0;

assign temp_output_0_V_load_63_cast_fu_3251_p1 = $signed(temp_output_0_V_q1);

assign tmp_11_fu_3405_p4 = {{add_ln1192_2_fu_3400_p2[39:8]}};

assign tmp_12_fu_3432_p4 = {{add_ln1192_3_fu_3426_p2[39:8]}};

assign tmp_13_fu_3464_p4 = {{add_ln1192_4_fu_3450_p2[39:8]}};

assign tmp_14_fu_3497_p4 = {{add_ln1192_5_fu_3482_p2[39:8]}};

assign tmp_16_fu_3570_p4 = {{add_ln1192_7_fu_3565_p2[39:8]}};

assign tmp_17_fu_3593_p4 = {{add_ln1192_8_fu_3588_p2[39:8]}};

assign tmp_18_fu_3625_p4 = {{add_ln1192_9_fu_3611_p2[39:8]}};

assign tmp_19_fu_3658_p4 = {{add_ln1192_10_fu_3643_p2[39:8]}};

assign tmp_1_fu_3005_p3 = {{p_Result_10_reg_6649}, {add_ln915_fu_2999_p2}};

assign tmp_21_fu_3731_p4 = {{add_ln1192_12_fu_3726_p2[39:8]}};

assign tmp_22_fu_3754_p4 = {{add_ln1192_13_fu_3749_p2[39:8]}};

assign tmp_23_fu_3786_p4 = {{add_ln1192_14_fu_3772_p2[39:8]}};

assign tmp_24_fu_3819_p4 = {{add_ln1192_15_fu_3804_p2[39:8]}};

assign tmp_26_fu_3892_p4 = {{add_ln1192_17_fu_3887_p2[39:8]}};

assign tmp_27_fu_3919_p4 = {{add_ln1192_18_fu_3913_p2[39:8]}};

assign tmp_28_fu_3951_p4 = {{add_ln1192_19_fu_3937_p2[39:8]}};

assign tmp_29_fu_3984_p4 = {{add_ln1192_20_fu_3969_p2[39:8]}};

assign tmp_2_fu_5630_p3 = {{p_Result_14_reg_8303}, {add_ln915_1_fu_5624_p2}};

assign tmp_31_fu_4057_p4 = {{add_ln1192_22_fu_4052_p2[39:8]}};

assign tmp_32_fu_4080_p4 = {{add_ln1192_23_fu_4075_p2[39:8]}};

assign tmp_33_fu_4112_p4 = {{add_ln1192_24_fu_4098_p2[39:8]}};

assign tmp_34_fu_4145_p4 = {{add_ln1192_25_fu_4130_p2[39:8]}};

assign tmp_36_fu_4218_p4 = {{add_ln1192_27_fu_4213_p2[39:8]}};

assign tmp_37_fu_4241_p4 = {{add_ln1192_28_fu_4236_p2[39:8]}};

assign tmp_38_fu_4273_p4 = {{add_ln1192_29_fu_4259_p2[39:8]}};

assign tmp_39_fu_4310_p4 = {{add_ln1192_30_fu_4295_p2[39:8]}};

assign tmp_41_fu_4383_p4 = {{add_ln1192_32_fu_4378_p2[39:8]}};

assign tmp_42_fu_4406_p4 = {{add_ln1192_33_fu_4401_p2[39:8]}};

assign tmp_43_fu_4438_p4 = {{add_ln1192_34_fu_4424_p2[39:8]}};

assign tmp_44_fu_4471_p4 = {{add_ln1192_35_fu_4456_p2[39:8]}};

assign tmp_46_fu_4544_p4 = {{add_ln1192_37_fu_4539_p2[39:8]}};

assign tmp_47_fu_4567_p4 = {{add_ln1192_38_fu_4562_p2[39:8]}};

assign tmp_48_fu_4599_p4 = {{add_ln1192_39_fu_4585_p2[39:8]}};

assign tmp_49_fu_4636_p4 = {{add_ln1192_40_fu_4621_p2[39:8]}};

assign tmp_4_fu_3328_p4 = {{add_ln1192_fu_3313_p2[39:8]}};

assign tmp_51_fu_4709_p4 = {{add_ln1192_42_fu_4704_p2[39:8]}};

assign tmp_52_fu_4732_p4 = {{add_ln1192_43_fu_4727_p2[39:8]}};

assign tmp_53_fu_4764_p4 = {{add_ln1192_44_fu_4750_p2[39:8]}};

assign tmp_54_fu_4797_p4 = {{add_ln1192_45_fu_4782_p2[39:8]}};

assign tmp_56_fu_4870_p4 = {{add_ln1192_47_fu_4865_p2[39:8]}};

assign tmp_57_fu_4893_p4 = {{add_ln1192_48_fu_4888_p2[39:8]}};

assign tmp_58_fu_4925_p4 = {{add_ln1192_49_fu_4911_p2[39:8]}};

assign tmp_59_fu_4958_p4 = {{add_ln1192_50_fu_4943_p2[39:8]}};

assign tmp_5_fu_2397_p4 = {{sh_amt_fu_2376_p3[11:5]}};

assign tmp_61_fu_5031_p4 = {{add_ln1192_52_fu_5026_p2[39:8]}};

assign tmp_62_fu_5054_p4 = {{add_ln1192_53_fu_5049_p2[39:8]}};

assign tmp_63_fu_5086_p4 = {{add_ln1192_54_fu_5072_p2[39:8]}};

assign tmp_64_fu_5119_p4 = {{add_ln1192_55_fu_5104_p2[39:8]}};

assign tmp_66_fu_5187_p4 = {{add_ln1192_57_fu_5181_p2[39:8]}};

assign tmp_67_fu_5219_p4 = {{add_ln1192_58_fu_5205_p2[39:8]}};

assign tmp_68_fu_5252_p4 = {{add_ln1192_59_fu_5237_p2[39:8]}};

assign tmp_6_fu_2594_p4 = {{k_reg_2135[8:1]}};

assign tmp_70_fu_5316_p4 = {{add_ln1192_61_fu_5301_p2[39:8]}};

assign tmp_71_fu_5836_p4 = {{mul_ln708_fu_5818_p2[39:8]}};

assign tmp_73_fu_5917_p4 = {{add_ln1192_66_fu_5907_p2[39:8]}};

assign tmp_74_fu_5945_p4 = {{add_ln1192_67_fu_5939_p2[39:8]}};

assign tmp_75_fu_5980_p4 = {{add_ln1192_68_fu_5963_p2[39:8]}};

assign tmp_76_fu_6016_p4 = {{add_ln1192_69_fu_5998_p2[39:8]}};

assign tmp_78_fu_6091_p4 = {{add_ln1192_71_fu_6081_p2[39:8]}};

assign tmp_79_fu_6119_p4 = {{add_ln1192_72_fu_6113_p2[39:8]}};

assign tmp_7_fu_2604_p3 = {{tmp_6_fu_2594_p4}, {j_reg_2123}};

assign tmp_80_fu_6154_p4 = {{add_ln1192_73_fu_6137_p2[39:8]}};

assign tmp_81_fu_6190_p4 = {{add_ln1192_74_fu_6172_p2[39:8]}};

assign tmp_83_fu_6260_p4 = {{add_ln1192_76_fu_6255_p2[39:8]}};

assign tmp_84_fu_6288_p4 = {{add_ln1192_77_fu_6278_p2[39:8]}};

assign tmp_85_fu_6328_p4 = {{add_ln1192_78_fu_6310_p2[39:8]}};

assign tmp_88_fu_2427_p3 = input_img_load_reg_6511_pp0_iter2_reg[32'd31];

assign tmp_8_fu_2628_p3 = {{or_ln25_fu_2617_p2}, {6'd0}};

assign tmp_90_fu_2801_p4 = {{lsb_index_fu_2795_p2[31:1]}};

assign tmp_91_fu_2861_p3 = lsb_index_fu_2795_p2[32'd31];

assign tmp_94_fu_5426_p4 = {{lsb_index_1_fu_5420_p2[31:1]}};

assign tmp_95_fu_5486_p3 = lsb_index_1_fu_5420_p2[32'd31];

assign tmp_9_fu_2688_p4 = {{ret_V_fu_2670_p2[39:8]}};

assign tmp_V_2_fu_5382_p2 = (32'd0 - temp_output2_0_V_q1);

assign tmp_V_4_fu_2763_p3 = ((p_Result_10_fu_2749_p3[0:0] == 1'b1) ? tmp_V_fu_2757_p2 : temp_output_0_V_q1);

assign tmp_V_5_fu_5388_p3 = ((p_Result_14_fu_5374_p3[0:0] == 1'b1) ? tmp_V_2_fu_5382_p2 : temp_output2_0_V_q1);

assign tmp_V_fu_2757_p2 = (32'd0 - temp_output_0_V_q1);

assign tmp_s_fu_3295_p4 = {{mul_ln1118_fu_3281_p2[39:8]}};

assign trunc_ln1118_fu_5806_p1 = j_2_reg_2216[0:0];

assign trunc_ln1494_fu_6392_p1 = i_3_reg_2227[0:0];

assign trunc_ln1506_1_fu_5654_p4 = {{m_5_fu_5583_p2[52:1]}};

assign trunc_ln555_fu_2295_p1 = ireg_fu_2291_p1[62:0];

assign trunc_ln565_fu_2321_p1 = ireg_fu_2291_p1[51:0];

assign trunc_ln583_fu_2393_p1 = man_V_2_fu_2354_p3[31:0];

assign trunc_ln586_fu_2423_p1 = ashr_ln586_fu_2417_p2[31:0];

assign trunc_ln6_fu_3029_p4 = {{m_3_fu_2958_p2[52:1]}};

assign trunc_ln851_fu_6456_p1 = max_idx_V_reg_2238[7:0];

assign trunc_ln893_1_fu_5548_p1 = l_1_fu_5406_p3[10:0];

assign trunc_ln893_fu_2923_p1 = l_fu_2781_p3[10:0];

assign trunc_ln897_1_fu_5442_p1 = sub_ln894_1_fu_5414_p2[5:0];

assign trunc_ln897_fu_2817_p1 = sub_ln894_fu_2789_p2[5:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_1_fu_2641_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_fu_2612_p1;

assign xor_ln571_fu_2448_p2 = (icmp_ln571_reg_6531 ^ 1'd1);

assign xor_ln581_fu_2494_p2 = (or_ln581_fu_2488_p2 ^ 1'd1);

assign xor_ln582_fu_2464_p2 = (or_ln582_fu_2459_p2 ^ 1'd1);

assign xor_ln899_1_fu_5494_p2 = (tmp_95_fu_5486_p3 ^ 1'd1);

assign xor_ln899_fu_2869_p2 = (tmp_91_fu_2861_p3 ^ 1'd1);

assign zext_ln1118_1_fu_2641_p1 = add_ln1118_fu_2636_p2;

assign zext_ln1118_fu_2612_p1 = tmp_7_fu_2604_p3;

assign zext_ln111_fu_6426_p1 = shl_ln2_fu_6418_p3;

assign zext_ln21_1_fu_2573_p1 = j_reg_2123;

assign zext_ln21_fu_2569_p1 = j_reg_2123;

assign zext_ln23_fu_2623_p1 = or_ln25_fu_2617_p2;

assign zext_ln455_fu_2317_p1 = exp_tmp_fu_2307_p4;

assign zext_ln569_fu_2344_p1 = p_Result_9_fu_2337_p3;

assign zext_ln586_fu_2413_p1 = $unsigned(sext_ln581_fu_2384_p1);

assign zext_ln897_1_fu_5452_p1 = sub_ln897_1_fu_5446_p2;

assign zext_ln897_fu_2827_p1 = sub_ln897_fu_2821_p2;

assign zext_ln907_1_fu_5552_p1 = tmp_V_5_reg_8308;

assign zext_ln907_fu_2927_p1 = tmp_V_4_reg_6654;

assign zext_ln908_1_fu_5555_p1 = add_ln908_1_reg_8318;

assign zext_ln908_fu_2930_p1 = add_ln908_reg_6664;

assign zext_ln909_1_fu_5564_p1 = sub_ln909_1_reg_8323;

assign zext_ln909_fu_2939_p1 = sub_ln909_reg_6669;

assign zext_ln911_1_fu_5580_p1 = select_ln908_2_reg_8328;

assign zext_ln911_fu_2955_p1 = select_ln908_reg_6674;

assign zext_ln912_1_fu_5599_p1 = m_fu_5589_p4;

assign zext_ln912_fu_2974_p1 = m_8_fu_2964_p4;

always @ (posedge ap_clk) begin
    i_cast_reg_6501[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    i_cast_reg_6501_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    i_cast_reg_6501_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_6566[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_6571[14:7] <= 8'b00000000;
    j_1_cast_reg_7656[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter8_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter9_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter10_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter11_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter12_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_7656_pp3_iter13_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    sext_ln1116_65_reg_8523[4:0] <= 5'b00000;
    sext_ln1116_68_reg_8553[3:0] <= 4'b0000;
    shl_ln1118_2_reg_8588[6:0] <= 7'b0000000;
end

endmodule //nn_inference
